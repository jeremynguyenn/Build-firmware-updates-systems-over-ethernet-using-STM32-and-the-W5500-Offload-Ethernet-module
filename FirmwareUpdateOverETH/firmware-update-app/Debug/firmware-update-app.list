
firmware-update-app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  0800c000  0800c000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c0  0800c1a0  0800c1a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800d460  0800d460  00002460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4c8  0800d4c8  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4c8  0800d4c8  000024c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4d0  0800d4d0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4d0  0800d4d0  000024d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4d4  0800d4d4  000024d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800d4d8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800d534  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800d534  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001151  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ba  00000000  00000000  000041dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00004798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000fd  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000faf7  00000000  00000000  00004a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000218a  00000000  00000000  00014504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055350  00000000  00000000  0001668e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006b9de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bf8  00000000  00000000  0006ba24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0006c61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c1a0 <__do_global_dtors_aux>:
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	4c05      	ldr	r4, [pc, #20]	@ (800c1b8 <__do_global_dtors_aux+0x18>)
 800c1a4:	7823      	ldrb	r3, [r4, #0]
 800c1a6:	b933      	cbnz	r3, 800c1b6 <__do_global_dtors_aux+0x16>
 800c1a8:	4b04      	ldr	r3, [pc, #16]	@ (800c1bc <__do_global_dtors_aux+0x1c>)
 800c1aa:	b113      	cbz	r3, 800c1b2 <__do_global_dtors_aux+0x12>
 800c1ac:	4804      	ldr	r0, [pc, #16]	@ (800c1c0 <__do_global_dtors_aux+0x20>)
 800c1ae:	f3af 8000 	nop.w
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	7023      	strb	r3, [r4, #0]
 800c1b6:	bd10      	pop	{r4, pc}
 800c1b8:	2000005c 	.word	0x2000005c
 800c1bc:	00000000 	.word	0x00000000
 800c1c0:	0800d448 	.word	0x0800d448

0800c1c4 <frame_dummy>:
 800c1c4:	b508      	push	{r3, lr}
 800c1c6:	4b03      	ldr	r3, [pc, #12]	@ (800c1d4 <frame_dummy+0x10>)
 800c1c8:	b11b      	cbz	r3, 800c1d2 <frame_dummy+0xe>
 800c1ca:	4903      	ldr	r1, [pc, #12]	@ (800c1d8 <frame_dummy+0x14>)
 800c1cc:	4803      	ldr	r0, [pc, #12]	@ (800c1dc <frame_dummy+0x18>)
 800c1ce:	f3af 8000 	nop.w
 800c1d2:	bd08      	pop	{r3, pc}
 800c1d4:	00000000 	.word	0x00000000
 800c1d8:	20000060 	.word	0x20000060
 800c1dc:	0800d448 	.word	0x0800d448

0800c1e0 <memchr>:
 800c1e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c1e4:	2a10      	cmp	r2, #16
 800c1e6:	db2b      	blt.n	800c240 <memchr+0x60>
 800c1e8:	f010 0f07 	tst.w	r0, #7
 800c1ec:	d008      	beq.n	800c200 <memchr+0x20>
 800c1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c1f2:	3a01      	subs	r2, #1
 800c1f4:	428b      	cmp	r3, r1
 800c1f6:	d02d      	beq.n	800c254 <memchr+0x74>
 800c1f8:	f010 0f07 	tst.w	r0, #7
 800c1fc:	b342      	cbz	r2, 800c250 <memchr+0x70>
 800c1fe:	d1f6      	bne.n	800c1ee <memchr+0xe>
 800c200:	b4f0      	push	{r4, r5, r6, r7}
 800c202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c20a:	f022 0407 	bic.w	r4, r2, #7
 800c20e:	f07f 0700 	mvns.w	r7, #0
 800c212:	2300      	movs	r3, #0
 800c214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c218:	3c08      	subs	r4, #8
 800c21a:	ea85 0501 	eor.w	r5, r5, r1
 800c21e:	ea86 0601 	eor.w	r6, r6, r1
 800c222:	fa85 f547 	uadd8	r5, r5, r7
 800c226:	faa3 f587 	sel	r5, r3, r7
 800c22a:	fa86 f647 	uadd8	r6, r6, r7
 800c22e:	faa5 f687 	sel	r6, r5, r7
 800c232:	b98e      	cbnz	r6, 800c258 <memchr+0x78>
 800c234:	d1ee      	bne.n	800c214 <memchr+0x34>
 800c236:	bcf0      	pop	{r4, r5, r6, r7}
 800c238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c23c:	f002 0207 	and.w	r2, r2, #7
 800c240:	b132      	cbz	r2, 800c250 <memchr+0x70>
 800c242:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c246:	3a01      	subs	r2, #1
 800c248:	ea83 0301 	eor.w	r3, r3, r1
 800c24c:	b113      	cbz	r3, 800c254 <memchr+0x74>
 800c24e:	d1f8      	bne.n	800c242 <memchr+0x62>
 800c250:	2000      	movs	r0, #0
 800c252:	4770      	bx	lr
 800c254:	3801      	subs	r0, #1
 800c256:	4770      	bx	lr
 800c258:	2d00      	cmp	r5, #0
 800c25a:	bf06      	itte	eq
 800c25c:	4635      	moveq	r5, r6
 800c25e:	3803      	subeq	r0, #3
 800c260:	3807      	subne	r0, #7
 800c262:	f015 0f01 	tst.w	r5, #1
 800c266:	d107      	bne.n	800c278 <memchr+0x98>
 800c268:	3001      	adds	r0, #1
 800c26a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800c26e:	bf02      	ittt	eq
 800c270:	3001      	addeq	r0, #1
 800c272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 800c276:	3001      	addeq	r0, #1
 800c278:	bcf0      	pop	{r4, r5, r6, r7}
 800c27a:	3801      	subs	r0, #1
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop

0800c280 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 800c280:	b480      	push	{r7}
 800c282:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 800c284:	4b12      	ldr	r3, [pc, #72]	@ (800c2d0 <fpu_enable+0x50>)
 800c286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c28a:	4a11      	ldr	r2, [pc, #68]	@ (800c2d0 <fpu_enable+0x50>)
 800c28c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 800c294:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d0 <fpu_enable+0x50>)
 800c296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c29a:	4a0d      	ldr	r2, [pc, #52]	@ (800c2d0 <fpu_enable+0x50>)
 800c29c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c2a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 800c2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d0 <fpu_enable+0x50>)
 800c2a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2aa:	4a09      	ldr	r2, [pc, #36]	@ (800c2d0 <fpu_enable+0x50>)
 800c2ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c2b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 800c2b4:	4b06      	ldr	r3, [pc, #24]	@ (800c2d0 <fpu_enable+0x50>)
 800c2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2ba:	4a05      	ldr	r2, [pc, #20]	@ (800c2d0 <fpu_enable+0x50>)
 800c2bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c2c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 800c2c4:	bf00      	nop
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	e000ed00 	.word	0xe000ed00

0800c2d4 <main>:

#define VECT_TAB_BASE_ADDRESS		FLASH_BASE
#define VECT_TAB_OFFSET				0xC000

int main()
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 800c2da:	f7ff ffd1 	bl	800c280 <fpu_enable>

	/*Initialize debug UART*/
	debug_uart_init();
 800c2de:	f000 f8cf 	bl	800c480 <debug_uart_init>

	while(1)
	{

		printf("Main Application update EmbeddedExpertIO-----v1019\n\r");
 800c2e2:	4807      	ldr	r0, [pc, #28]	@ (800c300 <main+0x2c>)
 800c2e4:	f000 fa42 	bl	800c76c <iprintf>
		for(int i = 0; i < 9000; i++){}
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	607b      	str	r3, [r7, #4]
 800c2ec:	e002      	b.n	800c2f4 <main+0x20>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	607b      	str	r3, [r7, #4]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f242 3227 	movw	r2, #8999	@ 0x2327
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	ddf7      	ble.n	800c2ee <main+0x1a>
		printf("Main Application update EmbeddedExpertIO-----v1019\n\r");
 800c2fe:	e7f0      	b.n	800c2e2 <main+0xe>
 800c300:	0800d460 	.word	0x0800d460

0800c304 <SystemInit>:
	}
}

void SystemInit(void)
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
	SCB->VTOR  = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800c308:	4b03      	ldr	r3, [pc, #12]	@ (800c318 <SystemInit+0x14>)
 800c30a:	4a04      	ldr	r2, [pc, #16]	@ (800c31c <SystemInit+0x18>)
 800c30c:	609a      	str	r2, [r3, #8]
}
 800c30e:	bf00      	nop
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	e000ed00 	.word	0xe000ed00
 800c31c:	0800c000 	.word	0x0800c000

0800c320 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c32c:	2300      	movs	r3, #0
 800c32e:	617b      	str	r3, [r7, #20]
 800c330:	e00a      	b.n	800c348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c332:	f3af 8000 	nop.w
 800c336:	4601      	mov	r1, r0
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	60ba      	str	r2, [r7, #8]
 800c33e:	b2ca      	uxtb	r2, r1
 800c340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	3301      	adds	r3, #1
 800c346:	617b      	str	r3, [r7, #20]
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	dbf0      	blt.n	800c332 <_read+0x12>
	}

return len;
 800c350:	687b      	ldr	r3, [r7, #4]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b086      	sub	sp, #24
 800c35e:	af00      	add	r7, sp, #0
 800c360:	60f8      	str	r0, [r7, #12]
 800c362:	60b9      	str	r1, [r7, #8]
 800c364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c366:	2300      	movs	r3, #0
 800c368:	617b      	str	r3, [r7, #20]
 800c36a:	e009      	b.n	800c380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	60ba      	str	r2, [r7, #8]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f877 	bl	800c468 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	3301      	adds	r3, #1
 800c37e:	617b      	str	r3, [r7, #20]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	dbf1      	blt.n	800c36c <_write+0x12>
	}
	return len;
 800c388:	687b      	ldr	r3, [r7, #4]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <_close>:

int _close(int file)
{
 800c392:	b480      	push	{r7}
 800c394:	b083      	sub	sp, #12
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
	return -1;
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b083      	sub	sp, #12
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c3ba:	605a      	str	r2, [r3, #4]
	return 0;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <_isatty>:

int _isatty(int file)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b083      	sub	sp, #12
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
	return 1;
 800c3d2:	2301      	movs	r3, #1
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
	return 0;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3714      	adds	r7, #20
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
	...

0800c3fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c404:	4a14      	ldr	r2, [pc, #80]	@ (800c458 <_sbrk+0x5c>)
 800c406:	4b15      	ldr	r3, [pc, #84]	@ (800c45c <_sbrk+0x60>)
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c410:	4b13      	ldr	r3, [pc, #76]	@ (800c460 <_sbrk+0x64>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c418:	4b11      	ldr	r3, [pc, #68]	@ (800c460 <_sbrk+0x64>)
 800c41a:	4a12      	ldr	r2, [pc, #72]	@ (800c464 <_sbrk+0x68>)
 800c41c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c41e:	4b10      	ldr	r3, [pc, #64]	@ (800c460 <_sbrk+0x64>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4413      	add	r3, r2
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d207      	bcs.n	800c43c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c42c:	f000 fa42 	bl	800c8b4 <__errno>
 800c430:	4603      	mov	r3, r0
 800c432:	220c      	movs	r2, #12
 800c434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c436:	f04f 33ff 	mov.w	r3, #4294967295
 800c43a:	e009      	b.n	800c450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c43c:	4b08      	ldr	r3, [pc, #32]	@ (800c460 <_sbrk+0x64>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c442:	4b07      	ldr	r3, [pc, #28]	@ (800c460 <_sbrk+0x64>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	4a05      	ldr	r2, [pc, #20]	@ (800c460 <_sbrk+0x64>)
 800c44c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c44e:	68fb      	ldr	r3, [r7, #12]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20020000 	.word	0x20020000
 800c45c:	00000400 	.word	0x00000400
 800c460:	20000078 	.word	0x20000078
 800c464:	200001c8 	.word	0x200001c8

0800c468 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f84f 	bl	800c514 <uart_write>
	return ch;
 800c476:	687b      	ldr	r3, [r7, #4]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <debug_uart_init>:

void debug_uart_init(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800c484:	4b1f      	ldr	r3, [pc, #124]	@ (800c504 <debug_uart_init+0x84>)
 800c486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c488:	4a1e      	ldr	r2, [pc, #120]	@ (800c504 <debug_uart_init+0x84>)
 800c48a:	f043 0301 	orr.w	r3, r3, #1
 800c48e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800c490:	4b1d      	ldr	r3, [pc, #116]	@ (800c508 <debug_uart_init+0x88>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a1c      	ldr	r2, [pc, #112]	@ (800c508 <debug_uart_init+0x88>)
 800c496:	f023 0310 	bic.w	r3, r3, #16
 800c49a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 800c49c:	4b1a      	ldr	r3, [pc, #104]	@ (800c508 <debug_uart_init+0x88>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a19      	ldr	r2, [pc, #100]	@ (800c508 <debug_uart_init+0x88>)
 800c4a2:	f043 0320 	orr.w	r3, r3, #32
 800c4a6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 800c4a8:	4b17      	ldr	r3, [pc, #92]	@ (800c508 <debug_uart_init+0x88>)
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	4a16      	ldr	r2, [pc, #88]	@ (800c508 <debug_uart_init+0x88>)
 800c4ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 800c4b4:	4b14      	ldr	r3, [pc, #80]	@ (800c508 <debug_uart_init+0x88>)
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	4a13      	ldr	r2, [pc, #76]	@ (800c508 <debug_uart_init+0x88>)
 800c4ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c4be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800c4c0:	4b11      	ldr	r3, [pc, #68]	@ (800c508 <debug_uart_init+0x88>)
 800c4c2:	6a1b      	ldr	r3, [r3, #32]
 800c4c4:	4a10      	ldr	r2, [pc, #64]	@ (800c508 <debug_uart_init+0x88>)
 800c4c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c4ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800c4cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c508 <debug_uart_init+0x88>)
 800c4ce:	6a1b      	ldr	r3, [r3, #32]
 800c4d0:	4a0d      	ldr	r2, [pc, #52]	@ (800c508 <debug_uart_init+0x88>)
 800c4d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4d6:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 800c4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c504 <debug_uart_init+0x84>)
 800c4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4dc:	4a09      	ldr	r2, [pc, #36]	@ (800c504 <debug_uart_init+0x84>)
 800c4de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4e2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 800c4e4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800c4e8:	4808      	ldr	r0, [pc, #32]	@ (800c50c <debug_uart_init+0x8c>)
 800c4ea:	f000 f83f 	bl	800c56c <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 800c4ee:	4b08      	ldr	r3, [pc, #32]	@ (800c510 <debug_uart_init+0x90>)
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 800c4f4:	4b06      	ldr	r3, [pc, #24]	@ (800c510 <debug_uart_init+0x90>)
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	4a05      	ldr	r2, [pc, #20]	@ (800c510 <debug_uart_init+0x90>)
 800c4fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c4fe:	60d3      	str	r3, [r2, #12]
}
 800c500:	bf00      	nop
 800c502:	bd80      	pop	{r7, pc}
 800c504:	40023800 	.word	0x40023800
 800c508:	40020000 	.word	0x40020000
 800c50c:	00f42400 	.word	0x00f42400
 800c510:	40004400 	.word	0x40004400

0800c514 <uart_write>:



static void uart_write(int ch)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 800c51c:	bf00      	nop
 800c51e:	4b08      	ldr	r3, [pc, #32]	@ (800c540 <uart_write+0x2c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0f9      	beq.n	800c51e <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a04      	ldr	r2, [pc, #16]	@ (800c540 <uart_write+0x2c>)
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	6053      	str	r3, [r2, #4]
}
 800c532:	bf00      	nop
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	40004400 	.word	0x40004400

0800c544 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	085a      	lsrs	r2, r3, #1
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	441a      	add	r2, r3
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	fbb2 f3f3 	udiv	r3, r2, r3
 800c55c:	b29b      	uxth	r3, r3
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
	...

0800c56c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ffe3 	bl	800c544 <compute_uart_bd>
 800c57e:	4603      	mov	r3, r0
 800c580:	461a      	mov	r2, r3
 800c582:	4b03      	ldr	r3, [pc, #12]	@ (800c590 <uart_set_baudrate+0x24>)
 800c584:	609a      	str	r2, [r3, #8]
}
 800c586:	bf00      	nop
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	40004400 	.word	0x40004400

0800c594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c594:	480d      	ldr	r0, [pc, #52]	@ (800c5cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c596:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800c598:	f7ff feb4 	bl	800c304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c59c:	480c      	ldr	r0, [pc, #48]	@ (800c5d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800c59e:	490d      	ldr	r1, [pc, #52]	@ (800c5d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c5a0:	4a0d      	ldr	r2, [pc, #52]	@ (800c5d8 <LoopForever+0xe>)
  movs r3, #0
 800c5a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c5a4:	e002      	b.n	800c5ac <LoopCopyDataInit>

0800c5a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c5a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c5a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c5aa:	3304      	adds	r3, #4

0800c5ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c5ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c5ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c5b0:	d3f9      	bcc.n	800c5a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c5b2:	4a0a      	ldr	r2, [pc, #40]	@ (800c5dc <LoopForever+0x12>)
  ldr r4, =_ebss
 800c5b4:	4c0a      	ldr	r4, [pc, #40]	@ (800c5e0 <LoopForever+0x16>)
  movs r3, #0
 800c5b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c5b8:	e001      	b.n	800c5be <LoopFillZerobss>

0800c5ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c5ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c5bc:	3204      	adds	r2, #4

0800c5be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c5be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c5c0:	d3fb      	bcc.n	800c5ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800c5c2:	f000 f97d 	bl	800c8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c5c6:	f7ff fe85 	bl	800c2d4 <main>

0800c5ca <LoopForever>:

LoopForever:
    b LoopForever
 800c5ca:	e7fe      	b.n	800c5ca <LoopForever>
  ldr   r0, =_estack
 800c5cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c5d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c5d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800c5d8:	0800d4d8 	.word	0x0800d4d8
  ldr r2, =_sbss
 800c5dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800c5e0:	200001c8 	.word	0x200001c8

0800c5e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c5e4:	e7fe      	b.n	800c5e4 <ADC_IRQHandler>
	...

0800c5e8 <std>:
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5f6:	6083      	str	r3, [r0, #8]
 800c5f8:	8181      	strh	r1, [r0, #12]
 800c5fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5fc:	81c2      	strh	r2, [r0, #14]
 800c5fe:	6183      	str	r3, [r0, #24]
 800c600:	4619      	mov	r1, r3
 800c602:	2208      	movs	r2, #8
 800c604:	305c      	adds	r0, #92	@ 0x5c
 800c606:	f000 f906 	bl	800c816 <memset>
 800c60a:	4b0d      	ldr	r3, [pc, #52]	@ (800c640 <std+0x58>)
 800c60c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c60e:	4b0d      	ldr	r3, [pc, #52]	@ (800c644 <std+0x5c>)
 800c610:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c612:	4b0d      	ldr	r3, [pc, #52]	@ (800c648 <std+0x60>)
 800c614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c616:	4b0d      	ldr	r3, [pc, #52]	@ (800c64c <std+0x64>)
 800c618:	6323      	str	r3, [r4, #48]	@ 0x30
 800c61a:	4b0d      	ldr	r3, [pc, #52]	@ (800c650 <std+0x68>)
 800c61c:	6224      	str	r4, [r4, #32]
 800c61e:	429c      	cmp	r4, r3
 800c620:	d006      	beq.n	800c630 <std+0x48>
 800c622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c626:	4294      	cmp	r4, r2
 800c628:	d002      	beq.n	800c630 <std+0x48>
 800c62a:	33d0      	adds	r3, #208	@ 0xd0
 800c62c:	429c      	cmp	r4, r3
 800c62e:	d105      	bne.n	800c63c <std+0x54>
 800c630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c638:	f000 b966 	b.w	800c908 <__retarget_lock_init_recursive>
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	bf00      	nop
 800c640:	0800c791 	.word	0x0800c791
 800c644:	0800c7b3 	.word	0x0800c7b3
 800c648:	0800c7eb 	.word	0x0800c7eb
 800c64c:	0800c80f 	.word	0x0800c80f
 800c650:	2000007c 	.word	0x2000007c

0800c654 <stdio_exit_handler>:
 800c654:	4a02      	ldr	r2, [pc, #8]	@ (800c660 <stdio_exit_handler+0xc>)
 800c656:	4903      	ldr	r1, [pc, #12]	@ (800c664 <stdio_exit_handler+0x10>)
 800c658:	4803      	ldr	r0, [pc, #12]	@ (800c668 <stdio_exit_handler+0x14>)
 800c65a:	f000 b869 	b.w	800c730 <_fwalk_sglue>
 800c65e:	bf00      	nop
 800c660:	20000000 	.word	0x20000000
 800c664:	0800d1a9 	.word	0x0800d1a9
 800c668:	20000010 	.word	0x20000010

0800c66c <cleanup_stdio>:
 800c66c:	6841      	ldr	r1, [r0, #4]
 800c66e:	4b0c      	ldr	r3, [pc, #48]	@ (800c6a0 <cleanup_stdio+0x34>)
 800c670:	4299      	cmp	r1, r3
 800c672:	b510      	push	{r4, lr}
 800c674:	4604      	mov	r4, r0
 800c676:	d001      	beq.n	800c67c <cleanup_stdio+0x10>
 800c678:	f000 fd96 	bl	800d1a8 <_fflush_r>
 800c67c:	68a1      	ldr	r1, [r4, #8]
 800c67e:	4b09      	ldr	r3, [pc, #36]	@ (800c6a4 <cleanup_stdio+0x38>)
 800c680:	4299      	cmp	r1, r3
 800c682:	d002      	beq.n	800c68a <cleanup_stdio+0x1e>
 800c684:	4620      	mov	r0, r4
 800c686:	f000 fd8f 	bl	800d1a8 <_fflush_r>
 800c68a:	68e1      	ldr	r1, [r4, #12]
 800c68c:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <cleanup_stdio+0x3c>)
 800c68e:	4299      	cmp	r1, r3
 800c690:	d004      	beq.n	800c69c <cleanup_stdio+0x30>
 800c692:	4620      	mov	r0, r4
 800c694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c698:	f000 bd86 	b.w	800d1a8 <_fflush_r>
 800c69c:	bd10      	pop	{r4, pc}
 800c69e:	bf00      	nop
 800c6a0:	2000007c 	.word	0x2000007c
 800c6a4:	200000e4 	.word	0x200000e4
 800c6a8:	2000014c 	.word	0x2000014c

0800c6ac <global_stdio_init.part.0>:
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c6dc <global_stdio_init.part.0+0x30>)
 800c6b0:	4c0b      	ldr	r4, [pc, #44]	@ (800c6e0 <global_stdio_init.part.0+0x34>)
 800c6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c6e4 <global_stdio_init.part.0+0x38>)
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2104      	movs	r1, #4
 800c6bc:	f7ff ff94 	bl	800c5e8 <std>
 800c6c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	2109      	movs	r1, #9
 800c6c8:	f7ff ff8e 	bl	800c5e8 <std>
 800c6cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d6:	2112      	movs	r1, #18
 800c6d8:	f7ff bf86 	b.w	800c5e8 <std>
 800c6dc:	200001b4 	.word	0x200001b4
 800c6e0:	2000007c 	.word	0x2000007c
 800c6e4:	0800c655 	.word	0x0800c655

0800c6e8 <__sfp_lock_acquire>:
 800c6e8:	4801      	ldr	r0, [pc, #4]	@ (800c6f0 <__sfp_lock_acquire+0x8>)
 800c6ea:	f000 b90e 	b.w	800c90a <__retarget_lock_acquire_recursive>
 800c6ee:	bf00      	nop
 800c6f0:	200001bd 	.word	0x200001bd

0800c6f4 <__sfp_lock_release>:
 800c6f4:	4801      	ldr	r0, [pc, #4]	@ (800c6fc <__sfp_lock_release+0x8>)
 800c6f6:	f000 b909 	b.w	800c90c <__retarget_lock_release_recursive>
 800c6fa:	bf00      	nop
 800c6fc:	200001bd 	.word	0x200001bd

0800c700 <__sinit>:
 800c700:	b510      	push	{r4, lr}
 800c702:	4604      	mov	r4, r0
 800c704:	f7ff fff0 	bl	800c6e8 <__sfp_lock_acquire>
 800c708:	6a23      	ldr	r3, [r4, #32]
 800c70a:	b11b      	cbz	r3, 800c714 <__sinit+0x14>
 800c70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c710:	f7ff bff0 	b.w	800c6f4 <__sfp_lock_release>
 800c714:	4b04      	ldr	r3, [pc, #16]	@ (800c728 <__sinit+0x28>)
 800c716:	6223      	str	r3, [r4, #32]
 800c718:	4b04      	ldr	r3, [pc, #16]	@ (800c72c <__sinit+0x2c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1f5      	bne.n	800c70c <__sinit+0xc>
 800c720:	f7ff ffc4 	bl	800c6ac <global_stdio_init.part.0>
 800c724:	e7f2      	b.n	800c70c <__sinit+0xc>
 800c726:	bf00      	nop
 800c728:	0800c66d 	.word	0x0800c66d
 800c72c:	200001b4 	.word	0x200001b4

0800c730 <_fwalk_sglue>:
 800c730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c734:	4607      	mov	r7, r0
 800c736:	4688      	mov	r8, r1
 800c738:	4614      	mov	r4, r2
 800c73a:	2600      	movs	r6, #0
 800c73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c740:	f1b9 0901 	subs.w	r9, r9, #1
 800c744:	d505      	bpl.n	800c752 <_fwalk_sglue+0x22>
 800c746:	6824      	ldr	r4, [r4, #0]
 800c748:	2c00      	cmp	r4, #0
 800c74a:	d1f7      	bne.n	800c73c <_fwalk_sglue+0xc>
 800c74c:	4630      	mov	r0, r6
 800c74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c752:	89ab      	ldrh	r3, [r5, #12]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d907      	bls.n	800c768 <_fwalk_sglue+0x38>
 800c758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c75c:	3301      	adds	r3, #1
 800c75e:	d003      	beq.n	800c768 <_fwalk_sglue+0x38>
 800c760:	4629      	mov	r1, r5
 800c762:	4638      	mov	r0, r7
 800c764:	47c0      	blx	r8
 800c766:	4306      	orrs	r6, r0
 800c768:	3568      	adds	r5, #104	@ 0x68
 800c76a:	e7e9      	b.n	800c740 <_fwalk_sglue+0x10>

0800c76c <iprintf>:
 800c76c:	b40f      	push	{r0, r1, r2, r3}
 800c76e:	b507      	push	{r0, r1, r2, lr}
 800c770:	4906      	ldr	r1, [pc, #24]	@ (800c78c <iprintf+0x20>)
 800c772:	ab04      	add	r3, sp, #16
 800c774:	6808      	ldr	r0, [r1, #0]
 800c776:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77a:	6881      	ldr	r1, [r0, #8]
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	f000 f9e9 	bl	800cb54 <_vfiprintf_r>
 800c782:	b003      	add	sp, #12
 800c784:	f85d eb04 	ldr.w	lr, [sp], #4
 800c788:	b004      	add	sp, #16
 800c78a:	4770      	bx	lr
 800c78c:	2000000c 	.word	0x2000000c

0800c790 <__sread>:
 800c790:	b510      	push	{r4, lr}
 800c792:	460c      	mov	r4, r1
 800c794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c798:	f000 f868 	bl	800c86c <_read_r>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	bfab      	itete	ge
 800c7a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c7a4:	181b      	addge	r3, r3, r0
 800c7a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7aa:	bfac      	ite	ge
 800c7ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7ae:	81a3      	strhlt	r3, [r4, #12]
 800c7b0:	bd10      	pop	{r4, pc}

0800c7b2 <__swrite>:
 800c7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b6:	461f      	mov	r7, r3
 800c7b8:	898b      	ldrh	r3, [r1, #12]
 800c7ba:	05db      	lsls	r3, r3, #23
 800c7bc:	4605      	mov	r5, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	4616      	mov	r6, r2
 800c7c2:	d505      	bpl.n	800c7d0 <__swrite+0x1e>
 800c7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f000 f83c 	bl	800c848 <_lseek_r>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7da:	81a3      	strh	r3, [r4, #12]
 800c7dc:	4632      	mov	r2, r6
 800c7de:	463b      	mov	r3, r7
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e6:	f000 b853 	b.w	800c890 <_write_r>

0800c7ea <__sseek>:
 800c7ea:	b510      	push	{r4, lr}
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f2:	f000 f829 	bl	800c848 <_lseek_r>
 800c7f6:	1c43      	adds	r3, r0, #1
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	bf15      	itete	ne
 800c7fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c806:	81a3      	strheq	r3, [r4, #12]
 800c808:	bf18      	it	ne
 800c80a:	81a3      	strhne	r3, [r4, #12]
 800c80c:	bd10      	pop	{r4, pc}

0800c80e <__sclose>:
 800c80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c812:	f000 b809 	b.w	800c828 <_close_r>

0800c816 <memset>:
 800c816:	4402      	add	r2, r0
 800c818:	4603      	mov	r3, r0
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d100      	bne.n	800c820 <memset+0xa>
 800c81e:	4770      	bx	lr
 800c820:	f803 1b01 	strb.w	r1, [r3], #1
 800c824:	e7f9      	b.n	800c81a <memset+0x4>
	...

0800c828 <_close_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d06      	ldr	r5, [pc, #24]	@ (800c844 <_close_r+0x1c>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	602b      	str	r3, [r5, #0]
 800c834:	f7ff fdad 	bl	800c392 <_close>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d102      	bne.n	800c842 <_close_r+0x1a>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	b103      	cbz	r3, 800c842 <_close_r+0x1a>
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	200001b8 	.word	0x200001b8

0800c848 <_lseek_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d07      	ldr	r5, [pc, #28]	@ (800c868 <_lseek_r+0x20>)
 800c84c:	4604      	mov	r4, r0
 800c84e:	4608      	mov	r0, r1
 800c850:	4611      	mov	r1, r2
 800c852:	2200      	movs	r2, #0
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	f7ff fdc2 	bl	800c3e0 <_lseek>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_lseek_r+0x1e>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_lseek_r+0x1e>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	200001b8 	.word	0x200001b8

0800c86c <_read_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d07      	ldr	r5, [pc, #28]	@ (800c88c <_read_r+0x20>)
 800c870:	4604      	mov	r4, r0
 800c872:	4608      	mov	r0, r1
 800c874:	4611      	mov	r1, r2
 800c876:	2200      	movs	r2, #0
 800c878:	602a      	str	r2, [r5, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7ff fd50 	bl	800c320 <_read>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_read_r+0x1e>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_read_r+0x1e>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	200001b8 	.word	0x200001b8

0800c890 <_write_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d07      	ldr	r5, [pc, #28]	@ (800c8b0 <_write_r+0x20>)
 800c894:	4604      	mov	r4, r0
 800c896:	4608      	mov	r0, r1
 800c898:	4611      	mov	r1, r2
 800c89a:	2200      	movs	r2, #0
 800c89c:	602a      	str	r2, [r5, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f7ff fd5b 	bl	800c35a <_write>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d102      	bne.n	800c8ae <_write_r+0x1e>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	b103      	cbz	r3, 800c8ae <_write_r+0x1e>
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}
 800c8b0:	200001b8 	.word	0x200001b8

0800c8b4 <__errno>:
 800c8b4:	4b01      	ldr	r3, [pc, #4]	@ (800c8bc <__errno+0x8>)
 800c8b6:	6818      	ldr	r0, [r3, #0]
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	2000000c 	.word	0x2000000c

0800c8c0 <__libc_init_array>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c8f8 <__libc_init_array+0x38>)
 800c8c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c8fc <__libc_init_array+0x3c>)
 800c8c6:	1b64      	subs	r4, r4, r5
 800c8c8:	10a4      	asrs	r4, r4, #2
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	42a6      	cmp	r6, r4
 800c8ce:	d109      	bne.n	800c8e4 <__libc_init_array+0x24>
 800c8d0:	4d0b      	ldr	r5, [pc, #44]	@ (800c900 <__libc_init_array+0x40>)
 800c8d2:	4c0c      	ldr	r4, [pc, #48]	@ (800c904 <__libc_init_array+0x44>)
 800c8d4:	f000 fdb8 	bl	800d448 <_init>
 800c8d8:	1b64      	subs	r4, r4, r5
 800c8da:	10a4      	asrs	r4, r4, #2
 800c8dc:	2600      	movs	r6, #0
 800c8de:	42a6      	cmp	r6, r4
 800c8e0:	d105      	bne.n	800c8ee <__libc_init_array+0x2e>
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e8:	4798      	blx	r3
 800c8ea:	3601      	adds	r6, #1
 800c8ec:	e7ee      	b.n	800c8cc <__libc_init_array+0xc>
 800c8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8f2:	4798      	blx	r3
 800c8f4:	3601      	adds	r6, #1
 800c8f6:	e7f2      	b.n	800c8de <__libc_init_array+0x1e>
 800c8f8:	0800d4d0 	.word	0x0800d4d0
 800c8fc:	0800d4d0 	.word	0x0800d4d0
 800c900:	0800d4d0 	.word	0x0800d4d0
 800c904:	0800d4d4 	.word	0x0800d4d4

0800c908 <__retarget_lock_init_recursive>:
 800c908:	4770      	bx	lr

0800c90a <__retarget_lock_acquire_recursive>:
 800c90a:	4770      	bx	lr

0800c90c <__retarget_lock_release_recursive>:
 800c90c:	4770      	bx	lr
	...

0800c910 <_free_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4605      	mov	r5, r0
 800c914:	2900      	cmp	r1, #0
 800c916:	d041      	beq.n	800c99c <_free_r+0x8c>
 800c918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91c:	1f0c      	subs	r4, r1, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfb8      	it	lt
 800c922:	18e4      	addlt	r4, r4, r3
 800c924:	f000 f8e0 	bl	800cae8 <__malloc_lock>
 800c928:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a0 <_free_r+0x90>)
 800c92a:	6813      	ldr	r3, [r2, #0]
 800c92c:	b933      	cbnz	r3, 800c93c <_free_r+0x2c>
 800c92e:	6063      	str	r3, [r4, #4]
 800c930:	6014      	str	r4, [r2, #0]
 800c932:	4628      	mov	r0, r5
 800c934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c938:	f000 b8dc 	b.w	800caf4 <__malloc_unlock>
 800c93c:	42a3      	cmp	r3, r4
 800c93e:	d908      	bls.n	800c952 <_free_r+0x42>
 800c940:	6820      	ldr	r0, [r4, #0]
 800c942:	1821      	adds	r1, r4, r0
 800c944:	428b      	cmp	r3, r1
 800c946:	bf01      	itttt	eq
 800c948:	6819      	ldreq	r1, [r3, #0]
 800c94a:	685b      	ldreq	r3, [r3, #4]
 800c94c:	1809      	addeq	r1, r1, r0
 800c94e:	6021      	streq	r1, [r4, #0]
 800c950:	e7ed      	b.n	800c92e <_free_r+0x1e>
 800c952:	461a      	mov	r2, r3
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	b10b      	cbz	r3, 800c95c <_free_r+0x4c>
 800c958:	42a3      	cmp	r3, r4
 800c95a:	d9fa      	bls.n	800c952 <_free_r+0x42>
 800c95c:	6811      	ldr	r1, [r2, #0]
 800c95e:	1850      	adds	r0, r2, r1
 800c960:	42a0      	cmp	r0, r4
 800c962:	d10b      	bne.n	800c97c <_free_r+0x6c>
 800c964:	6820      	ldr	r0, [r4, #0]
 800c966:	4401      	add	r1, r0
 800c968:	1850      	adds	r0, r2, r1
 800c96a:	4283      	cmp	r3, r0
 800c96c:	6011      	str	r1, [r2, #0]
 800c96e:	d1e0      	bne.n	800c932 <_free_r+0x22>
 800c970:	6818      	ldr	r0, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	6053      	str	r3, [r2, #4]
 800c976:	4408      	add	r0, r1
 800c978:	6010      	str	r0, [r2, #0]
 800c97a:	e7da      	b.n	800c932 <_free_r+0x22>
 800c97c:	d902      	bls.n	800c984 <_free_r+0x74>
 800c97e:	230c      	movs	r3, #12
 800c980:	602b      	str	r3, [r5, #0]
 800c982:	e7d6      	b.n	800c932 <_free_r+0x22>
 800c984:	6820      	ldr	r0, [r4, #0]
 800c986:	1821      	adds	r1, r4, r0
 800c988:	428b      	cmp	r3, r1
 800c98a:	bf04      	itt	eq
 800c98c:	6819      	ldreq	r1, [r3, #0]
 800c98e:	685b      	ldreq	r3, [r3, #4]
 800c990:	6063      	str	r3, [r4, #4]
 800c992:	bf04      	itt	eq
 800c994:	1809      	addeq	r1, r1, r0
 800c996:	6021      	streq	r1, [r4, #0]
 800c998:	6054      	str	r4, [r2, #4]
 800c99a:	e7ca      	b.n	800c932 <_free_r+0x22>
 800c99c:	bd38      	pop	{r3, r4, r5, pc}
 800c99e:	bf00      	nop
 800c9a0:	200001c4 	.word	0x200001c4

0800c9a4 <sbrk_aligned>:
 800c9a4:	b570      	push	{r4, r5, r6, lr}
 800c9a6:	4e0f      	ldr	r6, [pc, #60]	@ (800c9e4 <sbrk_aligned+0x40>)
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	6831      	ldr	r1, [r6, #0]
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	b911      	cbnz	r1, 800c9b6 <sbrk_aligned+0x12>
 800c9b0:	f000 fcb6 	bl	800d320 <_sbrk_r>
 800c9b4:	6030      	str	r0, [r6, #0]
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 fcb1 	bl	800d320 <_sbrk_r>
 800c9be:	1c43      	adds	r3, r0, #1
 800c9c0:	d103      	bne.n	800c9ca <sbrk_aligned+0x26>
 800c9c2:	f04f 34ff 	mov.w	r4, #4294967295
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	1cc4      	adds	r4, r0, #3
 800c9cc:	f024 0403 	bic.w	r4, r4, #3
 800c9d0:	42a0      	cmp	r0, r4
 800c9d2:	d0f8      	beq.n	800c9c6 <sbrk_aligned+0x22>
 800c9d4:	1a21      	subs	r1, r4, r0
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 fca2 	bl	800d320 <_sbrk_r>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d1f2      	bne.n	800c9c6 <sbrk_aligned+0x22>
 800c9e0:	e7ef      	b.n	800c9c2 <sbrk_aligned+0x1e>
 800c9e2:	bf00      	nop
 800c9e4:	200001c0 	.word	0x200001c0

0800c9e8 <_malloc_r>:
 800c9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ec:	1ccd      	adds	r5, r1, #3
 800c9ee:	f025 0503 	bic.w	r5, r5, #3
 800c9f2:	3508      	adds	r5, #8
 800c9f4:	2d0c      	cmp	r5, #12
 800c9f6:	bf38      	it	cc
 800c9f8:	250c      	movcc	r5, #12
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	db01      	blt.n	800ca04 <_malloc_r+0x1c>
 800ca00:	42a9      	cmp	r1, r5
 800ca02:	d904      	bls.n	800ca0e <_malloc_r+0x26>
 800ca04:	230c      	movs	r3, #12
 800ca06:	6033      	str	r3, [r6, #0]
 800ca08:	2000      	movs	r0, #0
 800ca0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cae4 <_malloc_r+0xfc>
 800ca12:	f000 f869 	bl	800cae8 <__malloc_lock>
 800ca16:	f8d8 3000 	ldr.w	r3, [r8]
 800ca1a:	461c      	mov	r4, r3
 800ca1c:	bb44      	cbnz	r4, 800ca70 <_malloc_r+0x88>
 800ca1e:	4629      	mov	r1, r5
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7ff ffbf 	bl	800c9a4 <sbrk_aligned>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	4604      	mov	r4, r0
 800ca2a:	d158      	bne.n	800cade <_malloc_r+0xf6>
 800ca2c:	f8d8 4000 	ldr.w	r4, [r8]
 800ca30:	4627      	mov	r7, r4
 800ca32:	2f00      	cmp	r7, #0
 800ca34:	d143      	bne.n	800cabe <_malloc_r+0xd6>
 800ca36:	2c00      	cmp	r4, #0
 800ca38:	d04b      	beq.n	800cad2 <_malloc_r+0xea>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4630      	mov	r0, r6
 800ca40:	eb04 0903 	add.w	r9, r4, r3
 800ca44:	f000 fc6c 	bl	800d320 <_sbrk_r>
 800ca48:	4581      	cmp	r9, r0
 800ca4a:	d142      	bne.n	800cad2 <_malloc_r+0xea>
 800ca4c:	6821      	ldr	r1, [r4, #0]
 800ca4e:	1a6d      	subs	r5, r5, r1
 800ca50:	4629      	mov	r1, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7ff ffa6 	bl	800c9a4 <sbrk_aligned>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d03a      	beq.n	800cad2 <_malloc_r+0xea>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	442b      	add	r3, r5
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	f8d8 3000 	ldr.w	r3, [r8]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	bb62      	cbnz	r2, 800cac4 <_malloc_r+0xdc>
 800ca6a:	f8c8 7000 	str.w	r7, [r8]
 800ca6e:	e00f      	b.n	800ca90 <_malloc_r+0xa8>
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	1b52      	subs	r2, r2, r5
 800ca74:	d420      	bmi.n	800cab8 <_malloc_r+0xd0>
 800ca76:	2a0b      	cmp	r2, #11
 800ca78:	d917      	bls.n	800caaa <_malloc_r+0xc2>
 800ca7a:	1961      	adds	r1, r4, r5
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	6025      	str	r5, [r4, #0]
 800ca80:	bf18      	it	ne
 800ca82:	6059      	strne	r1, [r3, #4]
 800ca84:	6863      	ldr	r3, [r4, #4]
 800ca86:	bf08      	it	eq
 800ca88:	f8c8 1000 	streq.w	r1, [r8]
 800ca8c:	5162      	str	r2, [r4, r5]
 800ca8e:	604b      	str	r3, [r1, #4]
 800ca90:	4630      	mov	r0, r6
 800ca92:	f000 f82f 	bl	800caf4 <__malloc_unlock>
 800ca96:	f104 000b 	add.w	r0, r4, #11
 800ca9a:	1d23      	adds	r3, r4, #4
 800ca9c:	f020 0007 	bic.w	r0, r0, #7
 800caa0:	1ac2      	subs	r2, r0, r3
 800caa2:	bf1c      	itt	ne
 800caa4:	1a1b      	subne	r3, r3, r0
 800caa6:	50a3      	strne	r3, [r4, r2]
 800caa8:	e7af      	b.n	800ca0a <_malloc_r+0x22>
 800caaa:	6862      	ldr	r2, [r4, #4]
 800caac:	42a3      	cmp	r3, r4
 800caae:	bf0c      	ite	eq
 800cab0:	f8c8 2000 	streq.w	r2, [r8]
 800cab4:	605a      	strne	r2, [r3, #4]
 800cab6:	e7eb      	b.n	800ca90 <_malloc_r+0xa8>
 800cab8:	4623      	mov	r3, r4
 800caba:	6864      	ldr	r4, [r4, #4]
 800cabc:	e7ae      	b.n	800ca1c <_malloc_r+0x34>
 800cabe:	463c      	mov	r4, r7
 800cac0:	687f      	ldr	r7, [r7, #4]
 800cac2:	e7b6      	b.n	800ca32 <_malloc_r+0x4a>
 800cac4:	461a      	mov	r2, r3
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	42a3      	cmp	r3, r4
 800caca:	d1fb      	bne.n	800cac4 <_malloc_r+0xdc>
 800cacc:	2300      	movs	r3, #0
 800cace:	6053      	str	r3, [r2, #4]
 800cad0:	e7de      	b.n	800ca90 <_malloc_r+0xa8>
 800cad2:	230c      	movs	r3, #12
 800cad4:	6033      	str	r3, [r6, #0]
 800cad6:	4630      	mov	r0, r6
 800cad8:	f000 f80c 	bl	800caf4 <__malloc_unlock>
 800cadc:	e794      	b.n	800ca08 <_malloc_r+0x20>
 800cade:	6005      	str	r5, [r0, #0]
 800cae0:	e7d6      	b.n	800ca90 <_malloc_r+0xa8>
 800cae2:	bf00      	nop
 800cae4:	200001c4 	.word	0x200001c4

0800cae8 <__malloc_lock>:
 800cae8:	4801      	ldr	r0, [pc, #4]	@ (800caf0 <__malloc_lock+0x8>)
 800caea:	f7ff bf0e 	b.w	800c90a <__retarget_lock_acquire_recursive>
 800caee:	bf00      	nop
 800caf0:	200001bc 	.word	0x200001bc

0800caf4 <__malloc_unlock>:
 800caf4:	4801      	ldr	r0, [pc, #4]	@ (800cafc <__malloc_unlock+0x8>)
 800caf6:	f7ff bf09 	b.w	800c90c <__retarget_lock_release_recursive>
 800cafa:	bf00      	nop
 800cafc:	200001bc 	.word	0x200001bc

0800cb00 <__sfputc_r>:
 800cb00:	6893      	ldr	r3, [r2, #8]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	b410      	push	{r4}
 800cb08:	6093      	str	r3, [r2, #8]
 800cb0a:	da08      	bge.n	800cb1e <__sfputc_r+0x1e>
 800cb0c:	6994      	ldr	r4, [r2, #24]
 800cb0e:	42a3      	cmp	r3, r4
 800cb10:	db01      	blt.n	800cb16 <__sfputc_r+0x16>
 800cb12:	290a      	cmp	r1, #10
 800cb14:	d103      	bne.n	800cb1e <__sfputc_r+0x1e>
 800cb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb1a:	f000 bb6d 	b.w	800d1f8 <__swbuf_r>
 800cb1e:	6813      	ldr	r3, [r2, #0]
 800cb20:	1c58      	adds	r0, r3, #1
 800cb22:	6010      	str	r0, [r2, #0]
 800cb24:	7019      	strb	r1, [r3, #0]
 800cb26:	4608      	mov	r0, r1
 800cb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <__sfputs_r>:
 800cb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb30:	4606      	mov	r6, r0
 800cb32:	460f      	mov	r7, r1
 800cb34:	4614      	mov	r4, r2
 800cb36:	18d5      	adds	r5, r2, r3
 800cb38:	42ac      	cmp	r4, r5
 800cb3a:	d101      	bne.n	800cb40 <__sfputs_r+0x12>
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	e007      	b.n	800cb50 <__sfputs_r+0x22>
 800cb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb44:	463a      	mov	r2, r7
 800cb46:	4630      	mov	r0, r6
 800cb48:	f7ff ffda 	bl	800cb00 <__sfputc_r>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	d1f3      	bne.n	800cb38 <__sfputs_r+0xa>
 800cb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb54 <_vfiprintf_r>:
 800cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	460d      	mov	r5, r1
 800cb5a:	b09d      	sub	sp, #116	@ 0x74
 800cb5c:	4614      	mov	r4, r2
 800cb5e:	4698      	mov	r8, r3
 800cb60:	4606      	mov	r6, r0
 800cb62:	b118      	cbz	r0, 800cb6c <_vfiprintf_r+0x18>
 800cb64:	6a03      	ldr	r3, [r0, #32]
 800cb66:	b90b      	cbnz	r3, 800cb6c <_vfiprintf_r+0x18>
 800cb68:	f7ff fdca 	bl	800c700 <__sinit>
 800cb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb6e:	07d9      	lsls	r1, r3, #31
 800cb70:	d405      	bmi.n	800cb7e <_vfiprintf_r+0x2a>
 800cb72:	89ab      	ldrh	r3, [r5, #12]
 800cb74:	059a      	lsls	r2, r3, #22
 800cb76:	d402      	bmi.n	800cb7e <_vfiprintf_r+0x2a>
 800cb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb7a:	f7ff fec6 	bl	800c90a <__retarget_lock_acquire_recursive>
 800cb7e:	89ab      	ldrh	r3, [r5, #12]
 800cb80:	071b      	lsls	r3, r3, #28
 800cb82:	d501      	bpl.n	800cb88 <_vfiprintf_r+0x34>
 800cb84:	692b      	ldr	r3, [r5, #16]
 800cb86:	b99b      	cbnz	r3, 800cbb0 <_vfiprintf_r+0x5c>
 800cb88:	4629      	mov	r1, r5
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f000 fb72 	bl	800d274 <__swsetup_r>
 800cb90:	b170      	cbz	r0, 800cbb0 <_vfiprintf_r+0x5c>
 800cb92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb94:	07dc      	lsls	r4, r3, #31
 800cb96:	d504      	bpl.n	800cba2 <_vfiprintf_r+0x4e>
 800cb98:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9c:	b01d      	add	sp, #116	@ 0x74
 800cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba2:	89ab      	ldrh	r3, [r5, #12]
 800cba4:	0598      	lsls	r0, r3, #22
 800cba6:	d4f7      	bmi.n	800cb98 <_vfiprintf_r+0x44>
 800cba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbaa:	f7ff feaf 	bl	800c90c <__retarget_lock_release_recursive>
 800cbae:	e7f3      	b.n	800cb98 <_vfiprintf_r+0x44>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbb4:	2320      	movs	r3, #32
 800cbb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbba:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbbe:	2330      	movs	r3, #48	@ 0x30
 800cbc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cd70 <_vfiprintf_r+0x21c>
 800cbc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbc8:	f04f 0901 	mov.w	r9, #1
 800cbcc:	4623      	mov	r3, r4
 800cbce:	469a      	mov	sl, r3
 800cbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbd4:	b10a      	cbz	r2, 800cbda <_vfiprintf_r+0x86>
 800cbd6:	2a25      	cmp	r2, #37	@ 0x25
 800cbd8:	d1f9      	bne.n	800cbce <_vfiprintf_r+0x7a>
 800cbda:	ebba 0b04 	subs.w	fp, sl, r4
 800cbde:	d00b      	beq.n	800cbf8 <_vfiprintf_r+0xa4>
 800cbe0:	465b      	mov	r3, fp
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7ff ffa1 	bl	800cb2e <__sfputs_r>
 800cbec:	3001      	adds	r0, #1
 800cbee:	f000 80a7 	beq.w	800cd40 <_vfiprintf_r+0x1ec>
 800cbf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf4:	445a      	add	r2, fp
 800cbf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 809f 	beq.w	800cd40 <_vfiprintf_r+0x1ec>
 800cc02:	2300      	movs	r3, #0
 800cc04:	f04f 32ff 	mov.w	r2, #4294967295
 800cc08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc0c:	f10a 0a01 	add.w	sl, sl, #1
 800cc10:	9304      	str	r3, [sp, #16]
 800cc12:	9307      	str	r3, [sp, #28]
 800cc14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc18:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc1a:	4654      	mov	r4, sl
 800cc1c:	2205      	movs	r2, #5
 800cc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc22:	4853      	ldr	r0, [pc, #332]	@ (800cd70 <_vfiprintf_r+0x21c>)
 800cc24:	f7ff fadc 	bl	800c1e0 <memchr>
 800cc28:	9a04      	ldr	r2, [sp, #16]
 800cc2a:	b9d8      	cbnz	r0, 800cc64 <_vfiprintf_r+0x110>
 800cc2c:	06d1      	lsls	r1, r2, #27
 800cc2e:	bf44      	itt	mi
 800cc30:	2320      	movmi	r3, #32
 800cc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc36:	0713      	lsls	r3, r2, #28
 800cc38:	bf44      	itt	mi
 800cc3a:	232b      	movmi	r3, #43	@ 0x2b
 800cc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc40:	f89a 3000 	ldrb.w	r3, [sl]
 800cc44:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc46:	d015      	beq.n	800cc74 <_vfiprintf_r+0x120>
 800cc48:	9a07      	ldr	r2, [sp, #28]
 800cc4a:	4654      	mov	r4, sl
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f04f 0c0a 	mov.w	ip, #10
 800cc52:	4621      	mov	r1, r4
 800cc54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc58:	3b30      	subs	r3, #48	@ 0x30
 800cc5a:	2b09      	cmp	r3, #9
 800cc5c:	d94b      	bls.n	800ccf6 <_vfiprintf_r+0x1a2>
 800cc5e:	b1b0      	cbz	r0, 800cc8e <_vfiprintf_r+0x13a>
 800cc60:	9207      	str	r2, [sp, #28]
 800cc62:	e014      	b.n	800cc8e <_vfiprintf_r+0x13a>
 800cc64:	eba0 0308 	sub.w	r3, r0, r8
 800cc68:	fa09 f303 	lsl.w	r3, r9, r3
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	9304      	str	r3, [sp, #16]
 800cc70:	46a2      	mov	sl, r4
 800cc72:	e7d2      	b.n	800cc1a <_vfiprintf_r+0xc6>
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	1d19      	adds	r1, r3, #4
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	9103      	str	r1, [sp, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	bfbb      	ittet	lt
 800cc80:	425b      	neglt	r3, r3
 800cc82:	f042 0202 	orrlt.w	r2, r2, #2
 800cc86:	9307      	strge	r3, [sp, #28]
 800cc88:	9307      	strlt	r3, [sp, #28]
 800cc8a:	bfb8      	it	lt
 800cc8c:	9204      	strlt	r2, [sp, #16]
 800cc8e:	7823      	ldrb	r3, [r4, #0]
 800cc90:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc92:	d10a      	bne.n	800ccaa <_vfiprintf_r+0x156>
 800cc94:	7863      	ldrb	r3, [r4, #1]
 800cc96:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc98:	d132      	bne.n	800cd00 <_vfiprintf_r+0x1ac>
 800cc9a:	9b03      	ldr	r3, [sp, #12]
 800cc9c:	1d1a      	adds	r2, r3, #4
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	9203      	str	r2, [sp, #12]
 800cca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cca6:	3402      	adds	r4, #2
 800cca8:	9305      	str	r3, [sp, #20]
 800ccaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cd80 <_vfiprintf_r+0x22c>
 800ccae:	7821      	ldrb	r1, [r4, #0]
 800ccb0:	2203      	movs	r2, #3
 800ccb2:	4650      	mov	r0, sl
 800ccb4:	f7ff fa94 	bl	800c1e0 <memchr>
 800ccb8:	b138      	cbz	r0, 800ccca <_vfiprintf_r+0x176>
 800ccba:	9b04      	ldr	r3, [sp, #16]
 800ccbc:	eba0 000a 	sub.w	r0, r0, sl
 800ccc0:	2240      	movs	r2, #64	@ 0x40
 800ccc2:	4082      	lsls	r2, r0
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	3401      	adds	r4, #1
 800ccc8:	9304      	str	r3, [sp, #16]
 800ccca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccce:	4829      	ldr	r0, [pc, #164]	@ (800cd74 <_vfiprintf_r+0x220>)
 800ccd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccd4:	2206      	movs	r2, #6
 800ccd6:	f7ff fa83 	bl	800c1e0 <memchr>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d03f      	beq.n	800cd5e <_vfiprintf_r+0x20a>
 800ccde:	4b26      	ldr	r3, [pc, #152]	@ (800cd78 <_vfiprintf_r+0x224>)
 800cce0:	bb1b      	cbnz	r3, 800cd2a <_vfiprintf_r+0x1d6>
 800cce2:	9b03      	ldr	r3, [sp, #12]
 800cce4:	3307      	adds	r3, #7
 800cce6:	f023 0307 	bic.w	r3, r3, #7
 800ccea:	3308      	adds	r3, #8
 800ccec:	9303      	str	r3, [sp, #12]
 800ccee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf0:	443b      	add	r3, r7
 800ccf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccf4:	e76a      	b.n	800cbcc <_vfiprintf_r+0x78>
 800ccf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	2001      	movs	r0, #1
 800ccfe:	e7a8      	b.n	800cc52 <_vfiprintf_r+0xfe>
 800cd00:	2300      	movs	r3, #0
 800cd02:	3401      	adds	r4, #1
 800cd04:	9305      	str	r3, [sp, #20]
 800cd06:	4619      	mov	r1, r3
 800cd08:	f04f 0c0a 	mov.w	ip, #10
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd12:	3a30      	subs	r2, #48	@ 0x30
 800cd14:	2a09      	cmp	r2, #9
 800cd16:	d903      	bls.n	800cd20 <_vfiprintf_r+0x1cc>
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d0c6      	beq.n	800ccaa <_vfiprintf_r+0x156>
 800cd1c:	9105      	str	r1, [sp, #20]
 800cd1e:	e7c4      	b.n	800ccaa <_vfiprintf_r+0x156>
 800cd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd24:	4604      	mov	r4, r0
 800cd26:	2301      	movs	r3, #1
 800cd28:	e7f0      	b.n	800cd0c <_vfiprintf_r+0x1b8>
 800cd2a:	ab03      	add	r3, sp, #12
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	462a      	mov	r2, r5
 800cd30:	4b12      	ldr	r3, [pc, #72]	@ (800cd7c <_vfiprintf_r+0x228>)
 800cd32:	a904      	add	r1, sp, #16
 800cd34:	4630      	mov	r0, r6
 800cd36:	f3af 8000 	nop.w
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	1c78      	adds	r0, r7, #1
 800cd3e:	d1d6      	bne.n	800ccee <_vfiprintf_r+0x19a>
 800cd40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd42:	07d9      	lsls	r1, r3, #31
 800cd44:	d405      	bmi.n	800cd52 <_vfiprintf_r+0x1fe>
 800cd46:	89ab      	ldrh	r3, [r5, #12]
 800cd48:	059a      	lsls	r2, r3, #22
 800cd4a:	d402      	bmi.n	800cd52 <_vfiprintf_r+0x1fe>
 800cd4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd4e:	f7ff fddd 	bl	800c90c <__retarget_lock_release_recursive>
 800cd52:	89ab      	ldrh	r3, [r5, #12]
 800cd54:	065b      	lsls	r3, r3, #25
 800cd56:	f53f af1f 	bmi.w	800cb98 <_vfiprintf_r+0x44>
 800cd5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd5c:	e71e      	b.n	800cb9c <_vfiprintf_r+0x48>
 800cd5e:	ab03      	add	r3, sp, #12
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	462a      	mov	r2, r5
 800cd64:	4b05      	ldr	r3, [pc, #20]	@ (800cd7c <_vfiprintf_r+0x228>)
 800cd66:	a904      	add	r1, sp, #16
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f000 f879 	bl	800ce60 <_printf_i>
 800cd6e:	e7e4      	b.n	800cd3a <_vfiprintf_r+0x1e6>
 800cd70:	0800d495 	.word	0x0800d495
 800cd74:	0800d49f 	.word	0x0800d49f
 800cd78:	00000000 	.word	0x00000000
 800cd7c:	0800cb2f 	.word	0x0800cb2f
 800cd80:	0800d49b 	.word	0x0800d49b

0800cd84 <_printf_common>:
 800cd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd88:	4616      	mov	r6, r2
 800cd8a:	4698      	mov	r8, r3
 800cd8c:	688a      	ldr	r2, [r1, #8]
 800cd8e:	690b      	ldr	r3, [r1, #16]
 800cd90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd94:	4293      	cmp	r3, r2
 800cd96:	bfb8      	it	lt
 800cd98:	4613      	movlt	r3, r2
 800cd9a:	6033      	str	r3, [r6, #0]
 800cd9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cda0:	4607      	mov	r7, r0
 800cda2:	460c      	mov	r4, r1
 800cda4:	b10a      	cbz	r2, 800cdaa <_printf_common+0x26>
 800cda6:	3301      	adds	r3, #1
 800cda8:	6033      	str	r3, [r6, #0]
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	0699      	lsls	r1, r3, #26
 800cdae:	bf42      	ittt	mi
 800cdb0:	6833      	ldrmi	r3, [r6, #0]
 800cdb2:	3302      	addmi	r3, #2
 800cdb4:	6033      	strmi	r3, [r6, #0]
 800cdb6:	6825      	ldr	r5, [r4, #0]
 800cdb8:	f015 0506 	ands.w	r5, r5, #6
 800cdbc:	d106      	bne.n	800cdcc <_printf_common+0x48>
 800cdbe:	f104 0a19 	add.w	sl, r4, #25
 800cdc2:	68e3      	ldr	r3, [r4, #12]
 800cdc4:	6832      	ldr	r2, [r6, #0]
 800cdc6:	1a9b      	subs	r3, r3, r2
 800cdc8:	42ab      	cmp	r3, r5
 800cdca:	dc26      	bgt.n	800ce1a <_printf_common+0x96>
 800cdcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cdd0:	6822      	ldr	r2, [r4, #0]
 800cdd2:	3b00      	subs	r3, #0
 800cdd4:	bf18      	it	ne
 800cdd6:	2301      	movne	r3, #1
 800cdd8:	0692      	lsls	r2, r2, #26
 800cdda:	d42b      	bmi.n	800ce34 <_printf_common+0xb0>
 800cddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cde0:	4641      	mov	r1, r8
 800cde2:	4638      	mov	r0, r7
 800cde4:	47c8      	blx	r9
 800cde6:	3001      	adds	r0, #1
 800cde8:	d01e      	beq.n	800ce28 <_printf_common+0xa4>
 800cdea:	6823      	ldr	r3, [r4, #0]
 800cdec:	6922      	ldr	r2, [r4, #16]
 800cdee:	f003 0306 	and.w	r3, r3, #6
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	bf02      	ittt	eq
 800cdf6:	68e5      	ldreq	r5, [r4, #12]
 800cdf8:	6833      	ldreq	r3, [r6, #0]
 800cdfa:	1aed      	subeq	r5, r5, r3
 800cdfc:	68a3      	ldr	r3, [r4, #8]
 800cdfe:	bf0c      	ite	eq
 800ce00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce04:	2500      	movne	r5, #0
 800ce06:	4293      	cmp	r3, r2
 800ce08:	bfc4      	itt	gt
 800ce0a:	1a9b      	subgt	r3, r3, r2
 800ce0c:	18ed      	addgt	r5, r5, r3
 800ce0e:	2600      	movs	r6, #0
 800ce10:	341a      	adds	r4, #26
 800ce12:	42b5      	cmp	r5, r6
 800ce14:	d11a      	bne.n	800ce4c <_printf_common+0xc8>
 800ce16:	2000      	movs	r0, #0
 800ce18:	e008      	b.n	800ce2c <_printf_common+0xa8>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	4652      	mov	r2, sl
 800ce1e:	4641      	mov	r1, r8
 800ce20:	4638      	mov	r0, r7
 800ce22:	47c8      	blx	r9
 800ce24:	3001      	adds	r0, #1
 800ce26:	d103      	bne.n	800ce30 <_printf_common+0xac>
 800ce28:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce30:	3501      	adds	r5, #1
 800ce32:	e7c6      	b.n	800cdc2 <_printf_common+0x3e>
 800ce34:	18e1      	adds	r1, r4, r3
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	2030      	movs	r0, #48	@ 0x30
 800ce3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce3e:	4422      	add	r2, r4
 800ce40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce48:	3302      	adds	r3, #2
 800ce4a:	e7c7      	b.n	800cddc <_printf_common+0x58>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	4622      	mov	r2, r4
 800ce50:	4641      	mov	r1, r8
 800ce52:	4638      	mov	r0, r7
 800ce54:	47c8      	blx	r9
 800ce56:	3001      	adds	r0, #1
 800ce58:	d0e6      	beq.n	800ce28 <_printf_common+0xa4>
 800ce5a:	3601      	adds	r6, #1
 800ce5c:	e7d9      	b.n	800ce12 <_printf_common+0x8e>
	...

0800ce60 <_printf_i>:
 800ce60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce64:	7e0f      	ldrb	r7, [r1, #24]
 800ce66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce68:	2f78      	cmp	r7, #120	@ 0x78
 800ce6a:	4691      	mov	r9, r2
 800ce6c:	4680      	mov	r8, r0
 800ce6e:	460c      	mov	r4, r1
 800ce70:	469a      	mov	sl, r3
 800ce72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce76:	d807      	bhi.n	800ce88 <_printf_i+0x28>
 800ce78:	2f62      	cmp	r7, #98	@ 0x62
 800ce7a:	d80a      	bhi.n	800ce92 <_printf_i+0x32>
 800ce7c:	2f00      	cmp	r7, #0
 800ce7e:	f000 80d2 	beq.w	800d026 <_printf_i+0x1c6>
 800ce82:	2f58      	cmp	r7, #88	@ 0x58
 800ce84:	f000 80b9 	beq.w	800cffa <_printf_i+0x19a>
 800ce88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce90:	e03a      	b.n	800cf08 <_printf_i+0xa8>
 800ce92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ce96:	2b15      	cmp	r3, #21
 800ce98:	d8f6      	bhi.n	800ce88 <_printf_i+0x28>
 800ce9a:	a101      	add	r1, pc, #4	@ (adr r1, 800cea0 <_printf_i+0x40>)
 800ce9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cea0:	0800cef9 	.word	0x0800cef9
 800cea4:	0800cf0d 	.word	0x0800cf0d
 800cea8:	0800ce89 	.word	0x0800ce89
 800ceac:	0800ce89 	.word	0x0800ce89
 800ceb0:	0800ce89 	.word	0x0800ce89
 800ceb4:	0800ce89 	.word	0x0800ce89
 800ceb8:	0800cf0d 	.word	0x0800cf0d
 800cebc:	0800ce89 	.word	0x0800ce89
 800cec0:	0800ce89 	.word	0x0800ce89
 800cec4:	0800ce89 	.word	0x0800ce89
 800cec8:	0800ce89 	.word	0x0800ce89
 800cecc:	0800d00d 	.word	0x0800d00d
 800ced0:	0800cf37 	.word	0x0800cf37
 800ced4:	0800cfc7 	.word	0x0800cfc7
 800ced8:	0800ce89 	.word	0x0800ce89
 800cedc:	0800ce89 	.word	0x0800ce89
 800cee0:	0800d02f 	.word	0x0800d02f
 800cee4:	0800ce89 	.word	0x0800ce89
 800cee8:	0800cf37 	.word	0x0800cf37
 800ceec:	0800ce89 	.word	0x0800ce89
 800cef0:	0800ce89 	.word	0x0800ce89
 800cef4:	0800cfcf 	.word	0x0800cfcf
 800cef8:	6833      	ldr	r3, [r6, #0]
 800cefa:	1d1a      	adds	r2, r3, #4
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6032      	str	r2, [r6, #0]
 800cf00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e09d      	b.n	800d048 <_printf_i+0x1e8>
 800cf0c:	6833      	ldr	r3, [r6, #0]
 800cf0e:	6820      	ldr	r0, [r4, #0]
 800cf10:	1d19      	adds	r1, r3, #4
 800cf12:	6031      	str	r1, [r6, #0]
 800cf14:	0606      	lsls	r6, r0, #24
 800cf16:	d501      	bpl.n	800cf1c <_printf_i+0xbc>
 800cf18:	681d      	ldr	r5, [r3, #0]
 800cf1a:	e003      	b.n	800cf24 <_printf_i+0xc4>
 800cf1c:	0645      	lsls	r5, r0, #25
 800cf1e:	d5fb      	bpl.n	800cf18 <_printf_i+0xb8>
 800cf20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf24:	2d00      	cmp	r5, #0
 800cf26:	da03      	bge.n	800cf30 <_printf_i+0xd0>
 800cf28:	232d      	movs	r3, #45	@ 0x2d
 800cf2a:	426d      	negs	r5, r5
 800cf2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf30:	4859      	ldr	r0, [pc, #356]	@ (800d098 <_printf_i+0x238>)
 800cf32:	230a      	movs	r3, #10
 800cf34:	e011      	b.n	800cf5a <_printf_i+0xfa>
 800cf36:	6821      	ldr	r1, [r4, #0]
 800cf38:	6833      	ldr	r3, [r6, #0]
 800cf3a:	0608      	lsls	r0, r1, #24
 800cf3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf40:	d402      	bmi.n	800cf48 <_printf_i+0xe8>
 800cf42:	0649      	lsls	r1, r1, #25
 800cf44:	bf48      	it	mi
 800cf46:	b2ad      	uxthmi	r5, r5
 800cf48:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf4a:	4853      	ldr	r0, [pc, #332]	@ (800d098 <_printf_i+0x238>)
 800cf4c:	6033      	str	r3, [r6, #0]
 800cf4e:	bf14      	ite	ne
 800cf50:	230a      	movne	r3, #10
 800cf52:	2308      	moveq	r3, #8
 800cf54:	2100      	movs	r1, #0
 800cf56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf5a:	6866      	ldr	r6, [r4, #4]
 800cf5c:	60a6      	str	r6, [r4, #8]
 800cf5e:	2e00      	cmp	r6, #0
 800cf60:	bfa2      	ittt	ge
 800cf62:	6821      	ldrge	r1, [r4, #0]
 800cf64:	f021 0104 	bicge.w	r1, r1, #4
 800cf68:	6021      	strge	r1, [r4, #0]
 800cf6a:	b90d      	cbnz	r5, 800cf70 <_printf_i+0x110>
 800cf6c:	2e00      	cmp	r6, #0
 800cf6e:	d04b      	beq.n	800d008 <_printf_i+0x1a8>
 800cf70:	4616      	mov	r6, r2
 800cf72:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf76:	fb03 5711 	mls	r7, r3, r1, r5
 800cf7a:	5dc7      	ldrb	r7, [r0, r7]
 800cf7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf80:	462f      	mov	r7, r5
 800cf82:	42bb      	cmp	r3, r7
 800cf84:	460d      	mov	r5, r1
 800cf86:	d9f4      	bls.n	800cf72 <_printf_i+0x112>
 800cf88:	2b08      	cmp	r3, #8
 800cf8a:	d10b      	bne.n	800cfa4 <_printf_i+0x144>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	07df      	lsls	r7, r3, #31
 800cf90:	d508      	bpl.n	800cfa4 <_printf_i+0x144>
 800cf92:	6923      	ldr	r3, [r4, #16]
 800cf94:	6861      	ldr	r1, [r4, #4]
 800cf96:	4299      	cmp	r1, r3
 800cf98:	bfde      	ittt	le
 800cf9a:	2330      	movle	r3, #48	@ 0x30
 800cf9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfa4:	1b92      	subs	r2, r2, r6
 800cfa6:	6122      	str	r2, [r4, #16]
 800cfa8:	f8cd a000 	str.w	sl, [sp]
 800cfac:	464b      	mov	r3, r9
 800cfae:	aa03      	add	r2, sp, #12
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	4640      	mov	r0, r8
 800cfb4:	f7ff fee6 	bl	800cd84 <_printf_common>
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d14a      	bne.n	800d052 <_printf_i+0x1f2>
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	b004      	add	sp, #16
 800cfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	f043 0320 	orr.w	r3, r3, #32
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	4833      	ldr	r0, [pc, #204]	@ (800d09c <_printf_i+0x23c>)
 800cfd0:	2778      	movs	r7, #120	@ 0x78
 800cfd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	6831      	ldr	r1, [r6, #0]
 800cfda:	061f      	lsls	r7, r3, #24
 800cfdc:	f851 5b04 	ldr.w	r5, [r1], #4
 800cfe0:	d402      	bmi.n	800cfe8 <_printf_i+0x188>
 800cfe2:	065f      	lsls	r7, r3, #25
 800cfe4:	bf48      	it	mi
 800cfe6:	b2ad      	uxthmi	r5, r5
 800cfe8:	6031      	str	r1, [r6, #0]
 800cfea:	07d9      	lsls	r1, r3, #31
 800cfec:	bf44      	itt	mi
 800cfee:	f043 0320 	orrmi.w	r3, r3, #32
 800cff2:	6023      	strmi	r3, [r4, #0]
 800cff4:	b11d      	cbz	r5, 800cffe <_printf_i+0x19e>
 800cff6:	2310      	movs	r3, #16
 800cff8:	e7ac      	b.n	800cf54 <_printf_i+0xf4>
 800cffa:	4827      	ldr	r0, [pc, #156]	@ (800d098 <_printf_i+0x238>)
 800cffc:	e7e9      	b.n	800cfd2 <_printf_i+0x172>
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	f023 0320 	bic.w	r3, r3, #32
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	e7f6      	b.n	800cff6 <_printf_i+0x196>
 800d008:	4616      	mov	r6, r2
 800d00a:	e7bd      	b.n	800cf88 <_printf_i+0x128>
 800d00c:	6833      	ldr	r3, [r6, #0]
 800d00e:	6825      	ldr	r5, [r4, #0]
 800d010:	6961      	ldr	r1, [r4, #20]
 800d012:	1d18      	adds	r0, r3, #4
 800d014:	6030      	str	r0, [r6, #0]
 800d016:	062e      	lsls	r6, r5, #24
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	d501      	bpl.n	800d020 <_printf_i+0x1c0>
 800d01c:	6019      	str	r1, [r3, #0]
 800d01e:	e002      	b.n	800d026 <_printf_i+0x1c6>
 800d020:	0668      	lsls	r0, r5, #25
 800d022:	d5fb      	bpl.n	800d01c <_printf_i+0x1bc>
 800d024:	8019      	strh	r1, [r3, #0]
 800d026:	2300      	movs	r3, #0
 800d028:	6123      	str	r3, [r4, #16]
 800d02a:	4616      	mov	r6, r2
 800d02c:	e7bc      	b.n	800cfa8 <_printf_i+0x148>
 800d02e:	6833      	ldr	r3, [r6, #0]
 800d030:	1d1a      	adds	r2, r3, #4
 800d032:	6032      	str	r2, [r6, #0]
 800d034:	681e      	ldr	r6, [r3, #0]
 800d036:	6862      	ldr	r2, [r4, #4]
 800d038:	2100      	movs	r1, #0
 800d03a:	4630      	mov	r0, r6
 800d03c:	f7ff f8d0 	bl	800c1e0 <memchr>
 800d040:	b108      	cbz	r0, 800d046 <_printf_i+0x1e6>
 800d042:	1b80      	subs	r0, r0, r6
 800d044:	6060      	str	r0, [r4, #4]
 800d046:	6863      	ldr	r3, [r4, #4]
 800d048:	6123      	str	r3, [r4, #16]
 800d04a:	2300      	movs	r3, #0
 800d04c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d050:	e7aa      	b.n	800cfa8 <_printf_i+0x148>
 800d052:	6923      	ldr	r3, [r4, #16]
 800d054:	4632      	mov	r2, r6
 800d056:	4649      	mov	r1, r9
 800d058:	4640      	mov	r0, r8
 800d05a:	47d0      	blx	sl
 800d05c:	3001      	adds	r0, #1
 800d05e:	d0ad      	beq.n	800cfbc <_printf_i+0x15c>
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	079b      	lsls	r3, r3, #30
 800d064:	d413      	bmi.n	800d08e <_printf_i+0x22e>
 800d066:	68e0      	ldr	r0, [r4, #12]
 800d068:	9b03      	ldr	r3, [sp, #12]
 800d06a:	4298      	cmp	r0, r3
 800d06c:	bfb8      	it	lt
 800d06e:	4618      	movlt	r0, r3
 800d070:	e7a6      	b.n	800cfc0 <_printf_i+0x160>
 800d072:	2301      	movs	r3, #1
 800d074:	4632      	mov	r2, r6
 800d076:	4649      	mov	r1, r9
 800d078:	4640      	mov	r0, r8
 800d07a:	47d0      	blx	sl
 800d07c:	3001      	adds	r0, #1
 800d07e:	d09d      	beq.n	800cfbc <_printf_i+0x15c>
 800d080:	3501      	adds	r5, #1
 800d082:	68e3      	ldr	r3, [r4, #12]
 800d084:	9903      	ldr	r1, [sp, #12]
 800d086:	1a5b      	subs	r3, r3, r1
 800d088:	42ab      	cmp	r3, r5
 800d08a:	dcf2      	bgt.n	800d072 <_printf_i+0x212>
 800d08c:	e7eb      	b.n	800d066 <_printf_i+0x206>
 800d08e:	2500      	movs	r5, #0
 800d090:	f104 0619 	add.w	r6, r4, #25
 800d094:	e7f5      	b.n	800d082 <_printf_i+0x222>
 800d096:	bf00      	nop
 800d098:	0800d4a6 	.word	0x0800d4a6
 800d09c:	0800d4b7 	.word	0x0800d4b7

0800d0a0 <__sflush_r>:
 800d0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a8:	0716      	lsls	r6, r2, #28
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	d454      	bmi.n	800d15a <__sflush_r+0xba>
 800d0b0:	684b      	ldr	r3, [r1, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	dc02      	bgt.n	800d0bc <__sflush_r+0x1c>
 800d0b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	dd48      	ble.n	800d14e <__sflush_r+0xae>
 800d0bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0be:	2e00      	cmp	r6, #0
 800d0c0:	d045      	beq.n	800d14e <__sflush_r+0xae>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d0c8:	682f      	ldr	r7, [r5, #0]
 800d0ca:	6a21      	ldr	r1, [r4, #32]
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	d030      	beq.n	800d132 <__sflush_r+0x92>
 800d0d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d0d2:	89a3      	ldrh	r3, [r4, #12]
 800d0d4:	0759      	lsls	r1, r3, #29
 800d0d6:	d505      	bpl.n	800d0e4 <__sflush_r+0x44>
 800d0d8:	6863      	ldr	r3, [r4, #4]
 800d0da:	1ad2      	subs	r2, r2, r3
 800d0dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d0de:	b10b      	cbz	r3, 800d0e4 <__sflush_r+0x44>
 800d0e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d0e2:	1ad2      	subs	r2, r2, r3
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0e8:	6a21      	ldr	r1, [r4, #32]
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	47b0      	blx	r6
 800d0ee:	1c43      	adds	r3, r0, #1
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	d106      	bne.n	800d102 <__sflush_r+0x62>
 800d0f4:	6829      	ldr	r1, [r5, #0]
 800d0f6:	291d      	cmp	r1, #29
 800d0f8:	d82b      	bhi.n	800d152 <__sflush_r+0xb2>
 800d0fa:	4a2a      	ldr	r2, [pc, #168]	@ (800d1a4 <__sflush_r+0x104>)
 800d0fc:	410a      	asrs	r2, r1
 800d0fe:	07d6      	lsls	r6, r2, #31
 800d100:	d427      	bmi.n	800d152 <__sflush_r+0xb2>
 800d102:	2200      	movs	r2, #0
 800d104:	6062      	str	r2, [r4, #4]
 800d106:	04d9      	lsls	r1, r3, #19
 800d108:	6922      	ldr	r2, [r4, #16]
 800d10a:	6022      	str	r2, [r4, #0]
 800d10c:	d504      	bpl.n	800d118 <__sflush_r+0x78>
 800d10e:	1c42      	adds	r2, r0, #1
 800d110:	d101      	bne.n	800d116 <__sflush_r+0x76>
 800d112:	682b      	ldr	r3, [r5, #0]
 800d114:	b903      	cbnz	r3, 800d118 <__sflush_r+0x78>
 800d116:	6560      	str	r0, [r4, #84]	@ 0x54
 800d118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d11a:	602f      	str	r7, [r5, #0]
 800d11c:	b1b9      	cbz	r1, 800d14e <__sflush_r+0xae>
 800d11e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d122:	4299      	cmp	r1, r3
 800d124:	d002      	beq.n	800d12c <__sflush_r+0x8c>
 800d126:	4628      	mov	r0, r5
 800d128:	f7ff fbf2 	bl	800c910 <_free_r>
 800d12c:	2300      	movs	r3, #0
 800d12e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d130:	e00d      	b.n	800d14e <__sflush_r+0xae>
 800d132:	2301      	movs	r3, #1
 800d134:	4628      	mov	r0, r5
 800d136:	47b0      	blx	r6
 800d138:	4602      	mov	r2, r0
 800d13a:	1c50      	adds	r0, r2, #1
 800d13c:	d1c9      	bne.n	800d0d2 <__sflush_r+0x32>
 800d13e:	682b      	ldr	r3, [r5, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0c6      	beq.n	800d0d2 <__sflush_r+0x32>
 800d144:	2b1d      	cmp	r3, #29
 800d146:	d001      	beq.n	800d14c <__sflush_r+0xac>
 800d148:	2b16      	cmp	r3, #22
 800d14a:	d11e      	bne.n	800d18a <__sflush_r+0xea>
 800d14c:	602f      	str	r7, [r5, #0]
 800d14e:	2000      	movs	r0, #0
 800d150:	e022      	b.n	800d198 <__sflush_r+0xf8>
 800d152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d156:	b21b      	sxth	r3, r3
 800d158:	e01b      	b.n	800d192 <__sflush_r+0xf2>
 800d15a:	690f      	ldr	r7, [r1, #16]
 800d15c:	2f00      	cmp	r7, #0
 800d15e:	d0f6      	beq.n	800d14e <__sflush_r+0xae>
 800d160:	0793      	lsls	r3, r2, #30
 800d162:	680e      	ldr	r6, [r1, #0]
 800d164:	bf08      	it	eq
 800d166:	694b      	ldreq	r3, [r1, #20]
 800d168:	600f      	str	r7, [r1, #0]
 800d16a:	bf18      	it	ne
 800d16c:	2300      	movne	r3, #0
 800d16e:	eba6 0807 	sub.w	r8, r6, r7
 800d172:	608b      	str	r3, [r1, #8]
 800d174:	f1b8 0f00 	cmp.w	r8, #0
 800d178:	dde9      	ble.n	800d14e <__sflush_r+0xae>
 800d17a:	6a21      	ldr	r1, [r4, #32]
 800d17c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d17e:	4643      	mov	r3, r8
 800d180:	463a      	mov	r2, r7
 800d182:	4628      	mov	r0, r5
 800d184:	47b0      	blx	r6
 800d186:	2800      	cmp	r0, #0
 800d188:	dc08      	bgt.n	800d19c <__sflush_r+0xfc>
 800d18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	f04f 30ff 	mov.w	r0, #4294967295
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19c:	4407      	add	r7, r0
 800d19e:	eba8 0800 	sub.w	r8, r8, r0
 800d1a2:	e7e7      	b.n	800d174 <__sflush_r+0xd4>
 800d1a4:	dfbffffe 	.word	0xdfbffffe

0800d1a8 <_fflush_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	690b      	ldr	r3, [r1, #16]
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b913      	cbnz	r3, 800d1b8 <_fflush_r+0x10>
 800d1b2:	2500      	movs	r5, #0
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	b118      	cbz	r0, 800d1c2 <_fflush_r+0x1a>
 800d1ba:	6a03      	ldr	r3, [r0, #32]
 800d1bc:	b90b      	cbnz	r3, 800d1c2 <_fflush_r+0x1a>
 800d1be:	f7ff fa9f 	bl	800c700 <__sinit>
 800d1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0f3      	beq.n	800d1b2 <_fflush_r+0xa>
 800d1ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d1cc:	07d0      	lsls	r0, r2, #31
 800d1ce:	d404      	bmi.n	800d1da <_fflush_r+0x32>
 800d1d0:	0599      	lsls	r1, r3, #22
 800d1d2:	d402      	bmi.n	800d1da <_fflush_r+0x32>
 800d1d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1d6:	f7ff fb98 	bl	800c90a <__retarget_lock_acquire_recursive>
 800d1da:	4628      	mov	r0, r5
 800d1dc:	4621      	mov	r1, r4
 800d1de:	f7ff ff5f 	bl	800d0a0 <__sflush_r>
 800d1e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1e4:	07da      	lsls	r2, r3, #31
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	d4e4      	bmi.n	800d1b4 <_fflush_r+0xc>
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	059b      	lsls	r3, r3, #22
 800d1ee:	d4e1      	bmi.n	800d1b4 <_fflush_r+0xc>
 800d1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1f2:	f7ff fb8b 	bl	800c90c <__retarget_lock_release_recursive>
 800d1f6:	e7dd      	b.n	800d1b4 <_fflush_r+0xc>

0800d1f8 <__swbuf_r>:
 800d1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fa:	460e      	mov	r6, r1
 800d1fc:	4614      	mov	r4, r2
 800d1fe:	4605      	mov	r5, r0
 800d200:	b118      	cbz	r0, 800d20a <__swbuf_r+0x12>
 800d202:	6a03      	ldr	r3, [r0, #32]
 800d204:	b90b      	cbnz	r3, 800d20a <__swbuf_r+0x12>
 800d206:	f7ff fa7b 	bl	800c700 <__sinit>
 800d20a:	69a3      	ldr	r3, [r4, #24]
 800d20c:	60a3      	str	r3, [r4, #8]
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	071a      	lsls	r2, r3, #28
 800d212:	d501      	bpl.n	800d218 <__swbuf_r+0x20>
 800d214:	6923      	ldr	r3, [r4, #16]
 800d216:	b943      	cbnz	r3, 800d22a <__swbuf_r+0x32>
 800d218:	4621      	mov	r1, r4
 800d21a:	4628      	mov	r0, r5
 800d21c:	f000 f82a 	bl	800d274 <__swsetup_r>
 800d220:	b118      	cbz	r0, 800d22a <__swbuf_r+0x32>
 800d222:	f04f 37ff 	mov.w	r7, #4294967295
 800d226:	4638      	mov	r0, r7
 800d228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	6922      	ldr	r2, [r4, #16]
 800d22e:	1a98      	subs	r0, r3, r2
 800d230:	6963      	ldr	r3, [r4, #20]
 800d232:	b2f6      	uxtb	r6, r6
 800d234:	4283      	cmp	r3, r0
 800d236:	4637      	mov	r7, r6
 800d238:	dc05      	bgt.n	800d246 <__swbuf_r+0x4e>
 800d23a:	4621      	mov	r1, r4
 800d23c:	4628      	mov	r0, r5
 800d23e:	f7ff ffb3 	bl	800d1a8 <_fflush_r>
 800d242:	2800      	cmp	r0, #0
 800d244:	d1ed      	bne.n	800d222 <__swbuf_r+0x2a>
 800d246:	68a3      	ldr	r3, [r4, #8]
 800d248:	3b01      	subs	r3, #1
 800d24a:	60a3      	str	r3, [r4, #8]
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	6022      	str	r2, [r4, #0]
 800d252:	701e      	strb	r6, [r3, #0]
 800d254:	6962      	ldr	r2, [r4, #20]
 800d256:	1c43      	adds	r3, r0, #1
 800d258:	429a      	cmp	r2, r3
 800d25a:	d004      	beq.n	800d266 <__swbuf_r+0x6e>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	07db      	lsls	r3, r3, #31
 800d260:	d5e1      	bpl.n	800d226 <__swbuf_r+0x2e>
 800d262:	2e0a      	cmp	r6, #10
 800d264:	d1df      	bne.n	800d226 <__swbuf_r+0x2e>
 800d266:	4621      	mov	r1, r4
 800d268:	4628      	mov	r0, r5
 800d26a:	f7ff ff9d 	bl	800d1a8 <_fflush_r>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d0d9      	beq.n	800d226 <__swbuf_r+0x2e>
 800d272:	e7d6      	b.n	800d222 <__swbuf_r+0x2a>

0800d274 <__swsetup_r>:
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	4b29      	ldr	r3, [pc, #164]	@ (800d31c <__swsetup_r+0xa8>)
 800d278:	4605      	mov	r5, r0
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	460c      	mov	r4, r1
 800d27e:	b118      	cbz	r0, 800d288 <__swsetup_r+0x14>
 800d280:	6a03      	ldr	r3, [r0, #32]
 800d282:	b90b      	cbnz	r3, 800d288 <__swsetup_r+0x14>
 800d284:	f7ff fa3c 	bl	800c700 <__sinit>
 800d288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d28c:	0719      	lsls	r1, r3, #28
 800d28e:	d422      	bmi.n	800d2d6 <__swsetup_r+0x62>
 800d290:	06da      	lsls	r2, r3, #27
 800d292:	d407      	bmi.n	800d2a4 <__swsetup_r+0x30>
 800d294:	2209      	movs	r2, #9
 800d296:	602a      	str	r2, [r5, #0]
 800d298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d29c:	81a3      	strh	r3, [r4, #12]
 800d29e:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a2:	e033      	b.n	800d30c <__swsetup_r+0x98>
 800d2a4:	0758      	lsls	r0, r3, #29
 800d2a6:	d512      	bpl.n	800d2ce <__swsetup_r+0x5a>
 800d2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2aa:	b141      	cbz	r1, 800d2be <__swsetup_r+0x4a>
 800d2ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	d002      	beq.n	800d2ba <__swsetup_r+0x46>
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	f7ff fb2b 	bl	800c910 <_free_r>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2be:	89a3      	ldrh	r3, [r4, #12]
 800d2c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	6063      	str	r3, [r4, #4]
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f043 0308 	orr.w	r3, r3, #8
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	6923      	ldr	r3, [r4, #16]
 800d2d8:	b94b      	cbnz	r3, 800d2ee <__swsetup_r+0x7a>
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d2e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2e4:	d003      	beq.n	800d2ee <__swsetup_r+0x7a>
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f000 f84f 	bl	800d38c <__smakebuf_r>
 800d2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f2:	f013 0201 	ands.w	r2, r3, #1
 800d2f6:	d00a      	beq.n	800d30e <__swsetup_r+0x9a>
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	60a2      	str	r2, [r4, #8]
 800d2fc:	6962      	ldr	r2, [r4, #20]
 800d2fe:	4252      	negs	r2, r2
 800d300:	61a2      	str	r2, [r4, #24]
 800d302:	6922      	ldr	r2, [r4, #16]
 800d304:	b942      	cbnz	r2, 800d318 <__swsetup_r+0xa4>
 800d306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d30a:	d1c5      	bne.n	800d298 <__swsetup_r+0x24>
 800d30c:	bd38      	pop	{r3, r4, r5, pc}
 800d30e:	0799      	lsls	r1, r3, #30
 800d310:	bf58      	it	pl
 800d312:	6962      	ldrpl	r2, [r4, #20]
 800d314:	60a2      	str	r2, [r4, #8]
 800d316:	e7f4      	b.n	800d302 <__swsetup_r+0x8e>
 800d318:	2000      	movs	r0, #0
 800d31a:	e7f7      	b.n	800d30c <__swsetup_r+0x98>
 800d31c:	2000000c 	.word	0x2000000c

0800d320 <_sbrk_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	@ (800d33c <_sbrk_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7ff f866 	bl	800c3fc <_sbrk>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_sbrk_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_sbrk_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	200001b8 	.word	0x200001b8

0800d340 <__swhatbuf_r>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	460c      	mov	r4, r1
 800d344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d348:	2900      	cmp	r1, #0
 800d34a:	b096      	sub	sp, #88	@ 0x58
 800d34c:	4615      	mov	r5, r2
 800d34e:	461e      	mov	r6, r3
 800d350:	da0d      	bge.n	800d36e <__swhatbuf_r+0x2e>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d358:	f04f 0100 	mov.w	r1, #0
 800d35c:	bf14      	ite	ne
 800d35e:	2340      	movne	r3, #64	@ 0x40
 800d360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d364:	2000      	movs	r0, #0
 800d366:	6031      	str	r1, [r6, #0]
 800d368:	602b      	str	r3, [r5, #0]
 800d36a:	b016      	add	sp, #88	@ 0x58
 800d36c:	bd70      	pop	{r4, r5, r6, pc}
 800d36e:	466a      	mov	r2, sp
 800d370:	f000 f848 	bl	800d404 <_fstat_r>
 800d374:	2800      	cmp	r0, #0
 800d376:	dbec      	blt.n	800d352 <__swhatbuf_r+0x12>
 800d378:	9901      	ldr	r1, [sp, #4]
 800d37a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d37e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d382:	4259      	negs	r1, r3
 800d384:	4159      	adcs	r1, r3
 800d386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d38a:	e7eb      	b.n	800d364 <__swhatbuf_r+0x24>

0800d38c <__smakebuf_r>:
 800d38c:	898b      	ldrh	r3, [r1, #12]
 800d38e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d390:	079d      	lsls	r5, r3, #30
 800d392:	4606      	mov	r6, r0
 800d394:	460c      	mov	r4, r1
 800d396:	d507      	bpl.n	800d3a8 <__smakebuf_r+0x1c>
 800d398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d39c:	6023      	str	r3, [r4, #0]
 800d39e:	6123      	str	r3, [r4, #16]
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	6163      	str	r3, [r4, #20]
 800d3a4:	b003      	add	sp, #12
 800d3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a8:	ab01      	add	r3, sp, #4
 800d3aa:	466a      	mov	r2, sp
 800d3ac:	f7ff ffc8 	bl	800d340 <__swhatbuf_r>
 800d3b0:	9f00      	ldr	r7, [sp, #0]
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7ff fb16 	bl	800c9e8 <_malloc_r>
 800d3bc:	b948      	cbnz	r0, 800d3d2 <__smakebuf_r+0x46>
 800d3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c2:	059a      	lsls	r2, r3, #22
 800d3c4:	d4ee      	bmi.n	800d3a4 <__smakebuf_r+0x18>
 800d3c6:	f023 0303 	bic.w	r3, r3, #3
 800d3ca:	f043 0302 	orr.w	r3, r3, #2
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	e7e2      	b.n	800d398 <__smakebuf_r+0xc>
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	6020      	str	r0, [r4, #0]
 800d3d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	9b01      	ldr	r3, [sp, #4]
 800d3de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3e2:	b15b      	cbz	r3, 800d3fc <__smakebuf_r+0x70>
 800d3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f000 f81d 	bl	800d428 <_isatty_r>
 800d3ee:	b128      	cbz	r0, 800d3fc <__smakebuf_r+0x70>
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	f023 0303 	bic.w	r3, r3, #3
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	81a3      	strh	r3, [r4, #12]
 800d3fc:	89a3      	ldrh	r3, [r4, #12]
 800d3fe:	431d      	orrs	r5, r3
 800d400:	81a5      	strh	r5, [r4, #12]
 800d402:	e7cf      	b.n	800d3a4 <__smakebuf_r+0x18>

0800d404 <_fstat_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	4d07      	ldr	r5, [pc, #28]	@ (800d424 <_fstat_r+0x20>)
 800d408:	2300      	movs	r3, #0
 800d40a:	4604      	mov	r4, r0
 800d40c:	4608      	mov	r0, r1
 800d40e:	4611      	mov	r1, r2
 800d410:	602b      	str	r3, [r5, #0]
 800d412:	f7fe ffca 	bl	800c3aa <_fstat>
 800d416:	1c43      	adds	r3, r0, #1
 800d418:	d102      	bne.n	800d420 <_fstat_r+0x1c>
 800d41a:	682b      	ldr	r3, [r5, #0]
 800d41c:	b103      	cbz	r3, 800d420 <_fstat_r+0x1c>
 800d41e:	6023      	str	r3, [r4, #0]
 800d420:	bd38      	pop	{r3, r4, r5, pc}
 800d422:	bf00      	nop
 800d424:	200001b8 	.word	0x200001b8

0800d428 <_isatty_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4d06      	ldr	r5, [pc, #24]	@ (800d444 <_isatty_r+0x1c>)
 800d42c:	2300      	movs	r3, #0
 800d42e:	4604      	mov	r4, r0
 800d430:	4608      	mov	r0, r1
 800d432:	602b      	str	r3, [r5, #0]
 800d434:	f7fe ffc9 	bl	800c3ca <_isatty>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_isatty_r+0x1a>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_isatty_r+0x1a>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	200001b8 	.word	0x200001b8

0800d448 <_init>:
 800d448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44a:	bf00      	nop
 800d44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d44e:	bc08      	pop	{r3}
 800d450:	469e      	mov	lr, r3
 800d452:	4770      	bx	lr

0800d454 <_fini>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	bf00      	nop
 800d458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45a:	bc08      	pop	{r3}
 800d45c:	469e      	mov	lr, r3
 800d45e:	4770      	bx	lr

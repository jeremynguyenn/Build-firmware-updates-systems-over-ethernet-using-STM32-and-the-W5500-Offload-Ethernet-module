
12_w5500_eth_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  08007b80  08007b80  00008b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e0  080082e0  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080082e0  080082e0  000092e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082e8  080082e8  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082e8  080082e8  000092e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082ec  080082ec  000092ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080082f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000746c  200000fc  080083ec  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007568  080083ec  0000a568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070f9  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002167  00000000  00000000  00011225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00013390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ab  00000000  00000000  00013b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011aad  00000000  00000000  000140e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab7f  00000000  00000000  00025b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b54b  00000000  00000000  0003070f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008bc5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  0008bca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0008e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000fc 	.word	0x200000fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b68 	.word	0x08007b68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000100 	.word	0x20000100
 80001dc:	08007b68 	.word	0x08007b68

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <pa1_adc_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	@ (8000308 <pa1_adc_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <pa1_adc_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <pa1_adc_init+0x5c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <pa1_adc_init+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <pa1_adc_init+0x5c>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <pa1_adc_init+0x58>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <pa1_adc_init+0x58>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <pa1_adc_init+0x60>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <pa1_adc_init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 80002f0:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <pa1_adc_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	@ (8000310 <pa1_adc_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <start_conversion>:


void start_conversion(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <start_conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	@ (800033c <start_conversion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <start_conversion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <start_conversion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800032e:	6093      	str	r3, [r2, #8]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <led_init+0x34>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <led_init+0x34>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <led_init+0x38>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <led_init+0x38>)
 8000356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <led_init+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <led_init+0x38>)
 8000362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40023800 	.word	0x40023800
 8000378:	40020000 	.word	0x40020000

0800037c <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <button_init+0x34>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <button_init+0x34>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <button_init+0x38>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a08      	ldr	r2, [pc, #32]	@ (80003b4 <button_init+0x38>)
 8000392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000396:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <button_init+0x38>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a05      	ldr	r2, [pc, #20]	@ (80003b4 <button_init+0x38>)
 800039e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80003a2:	6013      	str	r3, [r2, #0]

}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020800 	.word	0x40020800

080003b8 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	607a      	str	r2, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	89fb      	ldrh	r3, [r7, #14]
 80003d4:	4413      	add	r3, r2
 80003d6:	81fb      	strh	r3, [r7, #14]
	return i;
 80003d8:	89fb      	ldrh	r3, [r7, #14]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	460b      	mov	r3, r1
 80003f0:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80003f2:	887b      	ldrh	r3, [r7, #2]
 80003f4:	0a1b      	lsrs	r3, r3, #8
 80003f6:	b299      	uxth	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	607a      	str	r2, [r7, #4]
 80003fe:	b2ca      	uxtb	r2, r1
 8000400:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	607a      	str	r2, [r7, #4]
 8000408:	887a      	ldrh	r2, [r7, #2]
 800040a:	b2d2      	uxtb	r2, r2
 800040c:	701a      	strb	r2, [r3, #0]
	return s;
 800040e:	687b      	ldr	r3, [r7, #4]
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	@ 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 800043a:	6a3b      	ldr	r3, [r7, #32]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	623a      	str	r2, [r7, #32]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d102      	bne.n	8000450 <parse_name+0x34>
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3301      	adds	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8000450:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000452:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000456:	2bc0      	cmp	r3, #192	@ 0xc0
 8000458:	d117      	bne.n	800048a <parse_name+0x6e>
		{
			if (!indirect)
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <parse_name+0x4a>
				clen++;
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	3301      	adds	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 800046a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800046c:	021b      	lsls	r3, r3, #8
 800046e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000472:	6a3a      	ldr	r2, [r7, #32]
 8000474:	7812      	ldrb	r2, [r2, #0]
 8000476:	4413      	add	r3, r2
 8000478:	461a      	mov	r2, r3
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	4413      	add	r3, r2
 800047e:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8000480:	6a3b      	ldr	r3, [r7, #32]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	623a      	str	r2, [r7, #32]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 800048a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800048c:	2b00      	cmp	r3, #0
 800048e:	d02b      	beq.n	80004e8 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8000490:	887a      	ldrh	r2, [r7, #2]
 8000492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	b29b      	uxth	r3, r3
 8000498:	3b01      	subs	r3, #1
 800049a:	b29b      	uxth	r3, r3
 800049c:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800049e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	da02      	bge.n	80004ac <parse_name+0x90>
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	e038      	b.n	800051e <parse_name+0x102>

		if (!indirect) clen += slen;
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d10c      	bne.n	80004cc <parse_name+0xb0>
 80004b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004b4:	69fa      	ldr	r2, [r7, #28]
 80004b6:	4413      	add	r3, r2
 80004b8:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 80004ba:	e007      	b.n	80004cc <parse_name+0xb0>
 80004bc:	6a3a      	ldr	r2, [r7, #32]
 80004be:	1c53      	adds	r3, r2, #1
 80004c0:	623b      	str	r3, [r7, #32]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	1c59      	adds	r1, r3, #1
 80004c6:	6079      	str	r1, [r7, #4]
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	701a      	strb	r2, [r3, #0]
 80004cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004ce:	1e5a      	subs	r2, r3, #1
 80004d0:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1f2      	bne.n	80004bc <parse_name+0xa0>
		*buf++ = '.';
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	222e      	movs	r2, #46	@ 0x2e
 80004de:	701a      	strb	r2, [r3, #0]
		nseg++;
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 80004e6:	e7a8      	b.n	800043a <parse_name+0x1e>
			break;
 80004e8:	bf00      	nop
	}

	if (nseg == 0)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d10a      	bne.n	8000506 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	607a      	str	r2, [r7, #4]
 80004f6:	222e      	movs	r2, #46	@ 0x2e
 80004f8:	701a      	strb	r2, [r3, #0]
		len--;
 80004fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	3b01      	subs	r3, #1
 8000502:	b29b      	uxth	r3, r3
 8000504:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	len--;
 8000510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000514:	b29b      	uxth	r3, r3
 8000516:	3b01      	subs	r3, #1
 8000518:	b29b      	uxth	r3, r3
 800051a:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 800051c:	69fb      	ldr	r3, [r7, #28]
}
 800051e:	4618      	mov	r0, r3
 8000520:	372c      	adds	r7, #44	@ 0x2c
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b0b4      	sub	sp, #208	@ 0xd0
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000534:	f107 020c 	add.w	r2, r7, #12
 8000538:	23c0      	movs	r3, #192	@ 0xc0
 800053a:	6839      	ldr	r1, [r7, #0]
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ff6d 	bl	800041c <parse_name>
 8000542:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8000546:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800054a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800054e:	d101      	bne.n	8000554 <dns_question+0x2a>
 8000550:	2300      	movs	r3, #0
 8000552:	e00b      	b.n	800056c <dns_question+0x42>

	cp += len;
 8000554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	4413      	add	r3, r2
 800055c:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	3302      	adds	r3, #2
 8000562:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	3302      	adds	r3, #2
 8000568:	603b      	str	r3, [r7, #0]

	return cp;
 800056a:	683b      	ldr	r3, [r7, #0]
}
 800056c:	4618      	mov	r0, r3
 800056e:	37d0      	adds	r7, #208	@ 0xd0
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0b6      	sub	sp, #216	@ 0xd8
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000580:	f107 0210 	add.w	r2, r7, #16
 8000584:	23c0      	movs	r3, #192	@ 0xc0
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f7ff ff47 	bl	800041c <parse_name>
 800058e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8000592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059a:	d101      	bne.n	80005a0 <dns_answer+0x2c>
 800059c:	2300      	movs	r3, #0
 800059e:	e0f9      	b.n	8000794 <dns_answer+0x220>

	cp += len;
 80005a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	4413      	add	r3, r2
 80005a8:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 80005aa:	68b8      	ldr	r0, [r7, #8]
 80005ac:	f7ff ff04 	bl	80003b8 <get16>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	3302      	adds	r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3302      	adds	r3, #2
 80005c0:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	3304      	adds	r3, #4
 80005c6:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3302      	adds	r3, #2
 80005cc:	60bb      	str	r3, [r7, #8]


	switch (type)
 80005ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005d2:	2b10      	cmp	r3, #16
 80005d4:	f000 80da 	beq.w	800078c <dns_answer+0x218>
 80005d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005dc:	2b10      	cmp	r3, #16
 80005de:	f300 80d7 	bgt.w	8000790 <dns_answer+0x21c>
 80005e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d07d      	beq.n	80006e6 <dns_answer+0x172>
 80005ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	f300 80ce 	bgt.w	8000790 <dns_answer+0x21c>
 80005f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005f8:	2b0c      	cmp	r3, #12
 80005fa:	dc26      	bgt.n	800064a <dns_answer+0xd6>
 80005fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000600:	2b00      	cmp	r3, #0
 8000602:	f340 80c5 	ble.w	8000790 <dns_answer+0x21c>
 8000606:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800060a:	2201      	movs	r2, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 8000614:	401a      	ands	r2, r3
 8000616:	2a00      	cmp	r2, #0
 8000618:	bf14      	ite	ne
 800061a:	2201      	movne	r2, #1
 800061c:	2200      	moveq	r2, #0
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	d133      	bne.n	800068c <dns_answer+0x118>
 8000624:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000628:	2a00      	cmp	r2, #0
 800062a:	bf14      	ite	ne
 800062c:	2201      	movne	r2, #1
 800062e:	2200      	moveq	r2, #0
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	2a00      	cmp	r2, #0
 8000634:	d170      	bne.n	8000718 <dns_answer+0x1a4>
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b00      	cmp	r3, #0
 800063c:	bf14      	ite	ne
 800063e:	2301      	movne	r3, #1
 8000640:	2300      	moveq	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d105      	bne.n	8000654 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8000648:	e0a2      	b.n	8000790 <dns_answer+0x21c>
	switch (type)
 800064a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800064e:	2b0d      	cmp	r3, #13
 8000650:	d032      	beq.n	80006b8 <dns_answer+0x144>
		break;
 8000652:	e09d      	b.n	8000790 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	60ba      	str	r2, [r7, #8]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	3201      	adds	r2, #1
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	3202      	adds	r2, #2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	60ba      	str	r2, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	3203      	adds	r2, #3
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	7013      	strb	r3, [r2, #0]
		break;
 800068a:	e082      	b.n	8000792 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800068c:	f107 0210 	add.w	r2, r7, #16
 8000690:	23c0      	movs	r3, #192	@ 0xc0
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f7ff fec1 	bl	800041c <parse_name>
 800069a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800069e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a6:	d101      	bne.n	80006ac <dns_answer+0x138>
 80006a8:	2300      	movs	r3, #0
 80006aa:	e073      	b.n	8000794 <dns_answer+0x220>
		cp += len;
 80006ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	4413      	add	r3, r2
 80006b4:	60bb      	str	r3, [r7, #8]
		break;
 80006b6:	e06c      	b.n	8000792 <dns_answer+0x21e>
		len = *cp++;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	4413      	add	r3, r2
 80006cc:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	60ba      	str	r2, [r7, #8]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	4413      	add	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
		break;
 80006e4:	e055      	b.n	8000792 <dns_answer+0x21e>
		cp += 2;
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	3302      	adds	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80006ec:	f107 0210 	add.w	r2, r7, #16
 80006f0:	23c0      	movs	r3, #192	@ 0xc0
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff fe91 	bl	800041c <parse_name>
 80006fa:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80006fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000706:	d101      	bne.n	800070c <dns_answer+0x198>
 8000708:	2300      	movs	r3, #0
 800070a:	e043      	b.n	8000794 <dns_answer+0x220>
		cp += len;
 800070c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	4413      	add	r3, r2
 8000714:	60bb      	str	r3, [r7, #8]
		break;
 8000716:	e03c      	b.n	8000792 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	23c0      	movs	r3, #192	@ 0xc0
 800071e:	68b9      	ldr	r1, [r7, #8]
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f7ff fe7b 	bl	800041c <parse_name>
 8000726:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800072a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800072e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000732:	d101      	bne.n	8000738 <dns_answer+0x1c4>
 8000734:	2300      	movs	r3, #0
 8000736:	e02d      	b.n	8000794 <dns_answer+0x220>
		cp += len;
 8000738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8000742:	f107 0210 	add.w	r2, r7, #16
 8000746:	23c0      	movs	r3, #192	@ 0xc0
 8000748:	68b9      	ldr	r1, [r7, #8]
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f7ff fe66 	bl	800041c <parse_name>
 8000750:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8000754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075c:	d101      	bne.n	8000762 <dns_answer+0x1ee>
 800075e:	2300      	movs	r3, #0
 8000760:	e018      	b.n	8000794 <dns_answer+0x220>
		cp += len;
 8000762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	4413      	add	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3304      	adds	r3, #4
 8000770:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3304      	adds	r3, #4
 8000776:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	3304      	adds	r3, #4
 800077c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3304      	adds	r3, #4
 8000782:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	3304      	adds	r3, #4
 8000788:	60bb      	str	r3, [r7, #8]
		break;
 800078a:	e002      	b.n	8000792 <dns_answer+0x21e>
		break;
 800078c:	bf00      	nop
 800078e:	e000      	b.n	8000792 <dns_answer+0x21e>
		break;
 8000790:	bf00      	nop
	}

	return cp;
 8000792:	68bb      	ldr	r3, [r7, #8]
}
 8000794:	4618      	mov	r0, r3
 8000796:	37d8      	adds	r7, #216	@ 0xd8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80007ac:	2212      	movs	r2, #18
 80007ae:	2100      	movs	r1, #0
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f006 fa5f 	bl	8006c74 <memset>

	pdhdr->id = get16(&msg[0]);
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff fdfe 	bl	80003b8 <get16>
 80007bc:	4603      	mov	r3, r0
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3302      	adds	r3, #2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fdf5 	bl	80003b8 <get16>
 80007ce:	4603      	mov	r3, r0
 80007d0:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80007d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da02      	bge.n	80007e0 <parseDNSMSG+0x44>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2201      	movs	r2, #1
 80007de:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 80007e0:	8a7b      	ldrh	r3, [r7, #18]
 80007e2:	0adb      	lsrs	r3, r3, #11
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 030f 	and.w	r3, r3, #15
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 80007f2:	8a7b      	ldrh	r3, [r7, #18]
 80007f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <parseDNSMSG+0x66>
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2201      	movs	r2, #1
 8000800:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8000802:	8a7b      	ldrh	r3, [r7, #18]
 8000804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <parseDNSMSG+0x76>
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2201      	movs	r2, #1
 8000810:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8000812:	8a7b      	ldrh	r3, [r7, #18]
 8000814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <parseDNSMSG+0x86>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2201      	movs	r2, #1
 8000820:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8000822:	8a7b      	ldrh	r3, [r7, #18]
 8000824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <parseDNSMSG+0x96>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2201      	movs	r2, #1
 8000830:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8000832:	8a7b      	ldrh	r3, [r7, #18]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	b2da      	uxtb	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3304      	adds	r3, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fdb7 	bl	80003b8 <get16>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3306      	adds	r3, #6
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fdae 	bl	80003b8 <get16>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3308      	adds	r3, #8
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fda5 	bl	80003b8 <get16>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	330a      	adds	r3, #10
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fd9c 	bl	80003b8 <get16>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	330c      	adds	r3, #12
 800088c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800088e:	2300      	movs	r3, #0
 8000890:	83fb      	strh	r3, [r7, #30]
 8000892:	e00d      	b.n	80008b0 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8000894:	69b9      	ldr	r1, [r7, #24]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff fe47 	bl	800052a <dns_question>
 800089c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <parseDNSMSG+0x10e>
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	e03b      	b.n	8000922 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80008aa:	8bfb      	ldrh	r3, [r7, #30]
 80008ac:	3301      	adds	r3, #1
 80008ae:	83fb      	strh	r3, [r7, #30]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	895b      	ldrh	r3, [r3, #10]
 80008b4:	8bfa      	ldrh	r2, [r7, #30]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3ec      	bcc.n	8000894 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	83fb      	strh	r3, [r7, #30]
 80008be:	e00e      	b.n	80008de <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	69b9      	ldr	r1, [r7, #24]
 80008c4:	6978      	ldr	r0, [r7, #20]
 80008c6:	f7ff fe55 	bl	8000574 <dns_answer>
 80008ca:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <parseDNSMSG+0x13c>
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e024      	b.n	8000922 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80008d8:	8bfb      	ldrh	r3, [r7, #30]
 80008da:	3301      	adds	r3, #1
 80008dc:	83fb      	strh	r3, [r7, #30]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	899b      	ldrh	r3, [r3, #12]
 80008e2:	8bfa      	ldrh	r2, [r7, #30]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d3eb      	bcc.n	80008c0 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	83fb      	strh	r3, [r7, #30]
 80008ec:	e002      	b.n	80008f4 <parseDNSMSG+0x158>
 80008ee:	8bfb      	ldrh	r3, [r7, #30]
 80008f0:	3301      	adds	r3, #1
 80008f2:	83fb      	strh	r3, [r7, #30]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	89db      	ldrh	r3, [r3, #14]
 80008f8:	8bfa      	ldrh	r2, [r7, #30]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3f7      	bcc.n	80008ee <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 80008fe:	2300      	movs	r3, #0
 8000900:	83fb      	strh	r3, [r7, #30]
 8000902:	e002      	b.n	800090a <parseDNSMSG+0x16e>
 8000904:	8bfb      	ldrh	r3, [r7, #30]
 8000906:	3301      	adds	r3, #1
 8000908:	83fb      	strh	r3, [r7, #30]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	8a1b      	ldrh	r3, [r3, #16]
 800090e:	8bfa      	ldrh	r2, [r7, #30]
 8000910:	429a      	cmp	r2, r3
 8000912:	d3f7      	bcc.n	8000904 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	7a1b      	ldrb	r3, [r3, #8]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <parseDNSMSG+0x184>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <parseDNSMSG+0x186>
	else return 0;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0b8      	sub	sp, #224	@ 0xe0
 8000930:	af00      	add	r7, sp, #0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	461a      	mov	r2, r3
 8000938:	4603      	mov	r3, r0
 800093a:	81fb      	strh	r3, [r7, #14]
 800093c:	4613      	mov	r3, r2
 800093e:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 8000946:	4b57      	ldr	r3, [pc, #348]	@ (8000aa4 <dns_makequery+0x178>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b55      	ldr	r3, [pc, #340]	@ (8000aa4 <dns_makequery+0x178>)
 8000950:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8000952:	4b54      	ldr	r3, [pc, #336]	@ (8000aa4 <dns_makequery+0x178>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	4619      	mov	r1, r3
 8000958:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800095c:	f7ff fd43 	bl	80003e6 <put16>
 8000960:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	02db      	lsls	r3, r3, #11
 8000968:	b21b      	sxth	r3, r3
 800096a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800096e:	b21b      	sxth	r3, r3
 8000970:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8000974:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000978:	4619      	mov	r1, r3
 800097a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800097e:	f7ff fd32 	bl	80003e6 <put16>
 8000982:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 8000986:	2101      	movs	r1, #1
 8000988:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800098c:	f7ff fd2b 	bl	80003e6 <put16>
 8000990:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8000994:	2100      	movs	r1, #0
 8000996:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800099a:	f7ff fd24 	bl	80003e6 <put16>
 800099e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009a8:	f7ff fd1d 	bl	80003e6 <put16>
 80009ac:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009b0:	2100      	movs	r1, #0
 80009b2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009b6:	f7ff fd16 	bl	80003e6 <put16>
 80009ba:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f006 fa16 	bl	8006df6 <strcpy>
	dname = sname;
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 80009d2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80009d6:	f7ff fc0d 	bl	80001f4 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 80009e0:	212e      	movs	r1, #46	@ 0x2e
 80009e2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80009e6:	f006 f94d 	bl	8006c84 <strchr>
 80009ea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 80009ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d006      	beq.n	8000a04 <dns_makequery+0xd8>
 80009f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80009fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	81bb      	strh	r3, [r7, #12]
 8000a02:	e002      	b.n	8000a0a <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8000a04:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000a08:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8000a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000a14:	89ba      	ldrh	r2, [r7, #12]
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8000a1a:	89bb      	ldrh	r3, [r7, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d029      	beq.n	8000a74 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8000a20:	89bb      	ldrh	r3, [r7, #12]
 8000a22:	461a      	mov	r2, r3
 8000a24:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8000a28:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a2c:	f006 f937 	bl	8006c9e <strncpy>
		cp += len;
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000a36:	4413      	add	r3, r2
 8000a38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 8000a3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d107      	bne.n	8000a54 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8000a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
			break;
 8000a52:	e010      	b.n	8000a76 <dns_makequery+0x14a>
		}
		dname += len+1;
 8000a54:	89bb      	ldrh	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000a5c:	4413      	add	r3, r2
 8000a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 8000a62:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8000a66:	89bb      	ldrh	r3, [r7, #12]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 8000a72:	e7b5      	b.n	80009e0 <dns_makequery+0xb4>
		if (len == 0) break;
 8000a74:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8000a76:	2101      	movs	r1, #1
 8000a78:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a7c:	f7ff fcb3 	bl	80003e6 <put16>
 8000a80:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8000a84:	2101      	movs	r1, #1
 8000a86:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a8a:	f7ff fcac 	bl	80003e6 <put16>
 8000a8e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8000a92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	b21b      	sxth	r3, r3
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	37e0      	adds	r7, #224	@ 0xe0
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000011e 	.word	0x2000011e

08000aa8 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <check_DNS_timeout+0x44>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d914      	bls.n	8000ade <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <check_DNS_timeout+0x44>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <check_DNS_timeout+0x48>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d905      	bls.n	8000ace <check_DNS_timeout+0x26>
			retry_count = 0;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <check_DNS_timeout+0x48>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8000acc:	e008      	b.n	8000ae0 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <check_DNS_timeout+0x48>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <check_DNS_timeout+0x48>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000120 	.word	0x20000120
 8000af0:	20000124 	.word	0x20000124

08000af4 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <DNS_init+0x2c>)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8000b06:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <DNS_init+0x30>)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <DNS_init+0x34>)
 8000b0e:	f241 1222 	movw	r2, #4386	@ 0x1122
 8000b12:	801a      	strh	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	2000011c 	.word	0x2000011c
 8000b24:	20000118 	.word	0x20000118
 8000b28:	2000011e 	.word	0x2000011e

08000b2c <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08f      	sub	sp, #60	@ 0x3c
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8000b38:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <DNS_run+0xfc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c2c <DNS_run+0x100>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8000b44:	4b3a      	ldr	r3, [pc, #232]	@ (8000c30 <DNS_run+0x104>)
 8000b46:	7818      	ldrb	r0, [r3, #0]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	f003 fc8b 	bl	8004468 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8000b52:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <DNS_run+0x108>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff fee5 	bl	800092c <dns_makequery>
 8000b62:	4603      	mov	r3, r0
 8000b64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000b66:	4b32      	ldr	r3, [pc, #200]	@ (8000c30 <DNS_run+0x104>)
 8000b68:	7818      	ldrb	r0, [r3, #0]
 8000b6a:	4b32      	ldr	r3, [pc, #200]	@ (8000c34 <DNS_run+0x108>)
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b70:	2335      	movs	r3, #53	@ 0x35
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f004 f8f7 	bl	8004d68 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <DNS_run+0x104>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fec9 	bl	8005916 <getSn_RX_RSR>
 8000b84:	4603      	mov	r3, r0
 8000b86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000b88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d029      	beq.n	8000be2 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8000b8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b94:	d902      	bls.n	8000b9c <DNS_run+0x70>
 8000b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <DNS_run+0x104>)
 8000b9e:	7818      	ldrb	r0, [r3, #0]
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <DNS_run+0x108>)
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	f107 0414 	add.w	r4, r7, #20
 8000ba8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000baa:	f107 0312 	add.w	r3, r7, #18
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	4623      	mov	r3, r4
 8000bb2:	f004 fa0d 	bl	8004fd0 <recvfrom>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <DNS_run+0x108>)
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fde9 	bl	800079c <parseDNSMSG>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8000bd0:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <DNS_run+0x104>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fd5a 	bl	8004690 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8000bdc:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8000be0:	e01e      	b.n	8000c20 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8000be2:	f7ff ff61 	bl	8000aa8 <check_DNS_timeout>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 8000bec:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da06      	bge.n	8000c02 <DNS_run+0xd6>
			close(DNS_SOCKET);
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <DNS_run+0x104>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fd49 	bl	8004690 <close>
			return 0; // timeout occurred
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e00e      	b.n	8000c20 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8000c02:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1b7      	bne.n	8000b7a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <DNS_run+0x104>)
 8000c0c:	7818      	ldrb	r0, [r3, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <DNS_run+0x108>)
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c14:	2335      	movs	r3, #53	@ 0x35
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f004 f8a5 	bl	8004d68 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000c1e:	e7ac      	b.n	8000b7a <DNS_run+0x4e>
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3734      	adds	r7, #52	@ 0x34
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000124 	.word	0x20000124
 8000c2c:	20000120 	.word	0x20000120
 8000c30:	2000011c 	.word	0x2000011c
 8000c34:	20000118 	.word	0x20000118

08000c38 <jump_to_app>:
#define EMPTY_MEM	0xFFFFFFFF

typedef void (*func_ptr)(void);

void jump_to_app(uint32_t addr_value)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint32_t app_start_address;
	func_ptr jump_to_app;

	/*Disable and re-enable AHB bus*/
	RCC->AHB1RSTR = 0xFFFFFFFF;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <jump_to_app+0x60>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR = 0x00000000;
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <jump_to_app+0x60>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]

    // Reset SysTick
    SysTick->CTRL = 0;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <jump_to_app+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <jump_to_app+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <jump_to_app+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]

    if((*(uint32_t *)addr_value) != EMPTY_MEM)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d011      	beq.n	8000c8e <jump_to_app+0x56>
    {
    	printf("Staring application.....\r\r");
 8000c6a:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <jump_to_app+0x68>)
 8000c6c:	f005 fe92 	bl	8006994 <iprintf>

    	app_start_address =  *(uint32_t *)(addr_value + 4);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3304      	adds	r3, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	617b      	str	r3, [r7, #20]
    	jump_to_app  =   (func_ptr)app_start_address;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]

    	__set_MSP(*(uint32_t *)addr_value);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f383 8808 	msr	MSP, r3
}
 8000c88:	bf00      	nop


    	jump_to_app();
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4798      	blx	r3

    }
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	e000e010 	.word	0xe000e010
 8000ca0:	08007b80 	.word	0x08007b80

08000ca4 <extract_content_length>:
  *
  * @param recv_buffer The buffer containing the HTTP response.
  * @return int32_t The Content-Length value, or -1 if not found or invalid.
  */
 int32_t extract_content_length( char *recv_buffer)
 {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	@ 0x30
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
     const char *content_length_str = "Content-Length: ";
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <extract_content_length+0xb4>)
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
     const char *end_of_header_str = "\r\n";
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <extract_content_length+0xb8>)
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28

     // Find the position of "Content-Length: " in the receive buffer
     const char *start = strstr(recv_buffer, content_length_str);
 8000cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f006 f804 	bl	8006cc4 <strstr>
 8000cbc:	6278      	str	r0, [r7, #36]	@ 0x24
     if (start == NULL) {
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d105      	bne.n	8000cd0 <extract_content_length+0x2c>
         printf("Content-Length header not found\r\n");
 8000cc4:	4826      	ldr	r0, [pc, #152]	@ (8000d60 <extract_content_length+0xbc>)
 8000cc6:	f005 fed5 	bl	8006a74 <puts>
         return -1;  // Content-Length not found
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e03e      	b.n	8000d4e <extract_content_length+0xaa>
     }

     // Move the pointer to the start of the content length value
     start += strlen(content_length_str);
 8000cd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000cd2:	f7ff fa8f 	bl	80001f4 <strlen>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	4413      	add	r3, r2
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24

     // Find the end of the content length value (terminated by "\r\n")
     const char *end = strstr(start, end_of_header_str);
 8000cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ce2:	f005 ffef 	bl	8006cc4 <strstr>
 8000ce6:	6238      	str	r0, [r7, #32]
     if (end == NULL) {
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d105      	bne.n	8000cfa <extract_content_length+0x56>
         printf("End of Content-Length header not found\r\n");
 8000cee:	481d      	ldr	r0, [pc, #116]	@ (8000d64 <extract_content_length+0xc0>)
 8000cf0:	f005 fec0 	bl	8006a74 <puts>
         return -1;  // End of Content-Length not found
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	e029      	b.n	8000d4e <extract_content_length+0xaa>
     }

     // Extract the substring that represents the Content-Length value
     char content_length_value[16];  // Assuming the Content-Length value is not too large
     size_t length = end - start;
 8000cfa:	6a3a      	ldr	r2, [r7, #32]
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	61fb      	str	r3, [r7, #28]
     if (length >= sizeof(content_length_value)) {
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d905      	bls.n	8000d14 <extract_content_length+0x70>
         printf("Content-Length value too long\r\n");
 8000d08:	4817      	ldr	r0, [pc, #92]	@ (8000d68 <extract_content_length+0xc4>)
 8000d0a:	f005 feb3 	bl	8006a74 <puts>
         return -1;  // Length too long
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e01c      	b.n	8000d4e <extract_content_length+0xaa>
     }

     // Copy the content length value to a temporary buffer
     strncpy(content_length_value, start, length);
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 ffbe 	bl	8006c9e <strncpy>
     content_length_value[length] = '\0';  // Null-terminate the string
 8000d22:	f107 0208 	add.w	r2, r7, #8
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	4413      	add	r3, r2
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]

     // Convert the Content-Length value to an integer
     int32_t content_length = atoi(content_length_value);
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4618      	mov	r0, r3
 8000d34:	f005 fbf0 	bl	8006518 <atoi>
 8000d38:	61b8      	str	r0, [r7, #24]
     if (content_length <= 0) {
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dc05      	bgt.n	8000d4c <extract_content_length+0xa8>
         printf("Invalid Content-Length value\r\n");
 8000d40:	480a      	ldr	r0, [pc, #40]	@ (8000d6c <extract_content_length+0xc8>)
 8000d42:	f005 fe97 	bl	8006a74 <puts>
         return -1;  // Invalid Content-Length value
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e000      	b.n	8000d4e <extract_content_length+0xaa>
     }

     return content_length;
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 }
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3730      	adds	r7, #48	@ 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	08007b9c 	.word	0x08007b9c
 8000d5c:	08007bb0 	.word	0x08007bb0
 8000d60:	08007bb4 	.word	0x08007bb4
 8000d64:	08007bd8 	.word	0x08007bd8
 8000d68:	08007c00 	.word	0x08007c00
 8000d6c:	08007c20 	.word	0x08007c20

08000d70 <get_firmware_binary>:


 int get_firmware_binary(char *source_buffer, char *substring, char *dest_buffer, int bytes_to_copy)
 {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
     // Find the location of the substring in the source buffer
     const char *substring_position = strstr(source_buffer, substring);
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f005 ff9f 	bl	8006cc4 <strstr>
 8000d86:	61f8      	str	r0, [r7, #28]

     // If the substring is not found, return an error code
     if (substring_position == NULL) {
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d105      	bne.n	8000d9a <get_firmware_binary+0x2a>
         printf("Substring not found\r\n");
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <get_firmware_binary+0x58>)
 8000d90:	f005 fe70 	bl	8006a74 <puts>
         return -1; // Substring not found
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	e012      	b.n	8000dc0 <get_firmware_binary+0x50>
     }

     // Move the pointer past the substring to get to the data after it
     const char *data_start = substring_position + strlen(substring);
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f7ff fa2a 	bl	80001f4 <strlen>
 8000da0:	4602      	mov	r2, r0
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	4413      	add	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]

     size_t data_length = bytes_to_copy;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	617b      	str	r3, [r7, #20]

     printf("Data length to copy: %d\r\n", data_length);
 8000dac:	6979      	ldr	r1, [r7, #20]
 8000dae:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <get_firmware_binary+0x5c>)
 8000db0:	f005 fdf0 	bl	8006994 <iprintf>

     // Copy the data from data_start to the destination buffer
     memcpy(dest_buffer, data_start, data_length);
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	69b9      	ldr	r1, [r7, #24]
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f006 f824 	bl	8006e06 <memcpy>



     return 0; // Success
 8000dbe:	2300      	movs	r3, #0
 }
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	08007c40 	.word	0x08007c40
 8000dcc:	08007c58 	.word	0x08007c58

08000dd0 <firmware_update>:

 void firmware_update(void)
 {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	  flash_write_data_byte(NEW_FIRMWARE_START_ADDRESS, (uint8_t *)firmware_buffer,firmware_size);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <firmware_update+0x18>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4904      	ldr	r1, [pc, #16]	@ (8000dec <firmware_update+0x1c>)
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <firmware_update+0x20>)
 8000dde:	f000 fad3 	bl	8001388 <flash_write_data_byte>
 }
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20005368 	.word	0x20005368
 8000dec:	2000536c 	.word	0x2000536c
 8000df0:	0800c000 	.word	0x0800c000

08000df4 <flash_ex_erase>:
StatusTypeDef  flash_wait_for_last_operation(uint32_t timeout);
static void flush_caches(void);


StatusTypeDef flash_ex_erase(FLASH_EraseInitTypeDef *pt_erase_init, uint32_t *sect_err)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	StatusTypeDef  status =  DEV_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
	uint32_t index = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]

	/*wait for last operation to be completed*/
	status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8000e06:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e0a:	f000 f8b9 	bl	8000f80 <flash_wait_for_last_operation>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]

	if( status  == DEV_OK)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d145      	bne.n	8000ea4 <flash_ex_erase+0xb0>
	{
	   *sect_err =  0xFFFFFFFFU;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1e:	601a      	str	r2, [r3, #0]

	   if(pt_erase_init->TypeErase ==  FLASH_TYPEERASE_MASSERASE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d112      	bne.n	8000e4e <flash_ex_erase+0x5a>
	   {
		   /*Mass erase*/
		   flash_mass_erase((uint8_t)pt_erase_init->VoltageRange);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f884 	bl	8000f3c <flash_mass_erase>

			/*wait for last operation to be completed*/
			status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8000e34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e38:	f000 f8a2 	bl	8000f80 <flash_wait_for_last_operation>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]

			/*Disable MER bit*/
			FLASH->CR &=~(1U<<2);
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <flash_ex_erase+0xbc>)
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <flash_ex_erase+0xbc>)
 8000e46:	f023 0304 	bic.w	r3, r3, #4
 8000e4a:	6113      	str	r3, [r2, #16]
 8000e4c:	e028      	b.n	8000ea0 <flash_ex_erase+0xac>
	   }
	   else
	   {
		   /*Sector erase*/
		   for(index = pt_erase_init->Sector; index <  (pt_erase_init->NbSectors + pt_erase_init->Sector); index++)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	e01c      	b.n	8000e90 <flash_ex_erase+0x9c>
		   {
			   flash_sector_erase(index, (uint8_t)pt_erase_init->VoltageRange);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68b8      	ldr	r0, [r7, #8]
 8000e60:	f000 f828 	bl	8000eb4 <flash_sector_erase>

				/*wait for last operation to be completed*/
				status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8000e64:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e68:	f000 f88a 	bl	8000f80 <flash_wait_for_last_operation>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]

				/*Clear SNB bit and SER bit*/
				CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <flash_ex_erase+0xbc>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <flash_ex_erase+0xbc>)
 8000e76:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8000e7a:	6113      	str	r3, [r2, #16]

				if(status !=DEV_OK)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <flash_ex_erase+0x96>
				{
					*sect_err =  index;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	601a      	str	r2, [r3, #0]
					break;
 8000e88:	e00a      	b.n	8000ea0 <flash_ex_erase+0xac>
		   for(index = pt_erase_init->Sector; index <  (pt_erase_init->NbSectors + pt_erase_init->Sector); index++)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3da      	bcc.n	8000e56 <flash_ex_erase+0x62>
				}
		   }
	   }

	   flush_caches();
 8000ea0:	f000 f984 	bl	80011ac <flush_caches>

	}

	return status;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <flash_sector_erase>:


void flash_sector_erase(uint32_t sector, uint8_t voltage_range)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp_psize = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]

	if(voltage_range ==  FLASH_VOLTAGE_RANGE_1)
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <flash_sector_erase+0x1c>
	{
		tmp_psize = FLASH_PSIZE_BYTE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	e010      	b.n	8000ef2 <flash_sector_erase+0x3e>
	}
	else if(voltage_range ==  FLASH_VOLTAGE_RANGE_2)
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d103      	bne.n	8000ede <flash_sector_erase+0x2a>
	{
		tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e009      	b.n	8000ef2 <flash_sector_erase+0x3e>
	}
	else if(voltage_range ==  FLASH_VOLTAGE_RANGE_3)
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d103      	bne.n	8000eec <flash_sector_erase+0x38>
	{
		tmp_psize = FLASH_PSIZE_WORD;
 8000ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e002      	b.n	8000ef2 <flash_sector_erase+0x3e>
	}
	else
	{
		tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000eec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef0:	60fb      	str	r3, [r7, #12]

	}

	FLASH->CR &=~FLASH_CR_PSIZE;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <flash_sector_erase+0x84>)
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <flash_sector_erase+0x84>)
 8000ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000efc:	6113      	str	r3, [r2, #16]
	FLASH->CR |= tmp_psize;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <flash_sector_erase+0x84>)
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <flash_sector_erase+0x84>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	610b      	str	r3, [r1, #16]

	/*Set SER bit and select sector*/
	FLASH->CR |=  FLASH_CR_SER |(sector << FLASH_CR_SNB_Pos);
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <flash_sector_erase+0x84>)
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <flash_sector_erase+0x84>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	6113      	str	r3, [r2, #16]

	/*Very IMPORTANT*/
	FLASH->CR |= FLASH_CR_STRT;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <flash_sector_erase+0x84>)
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <flash_sector_erase+0x84>)
 8000f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f26:	6113      	str	r3, [r2, #16]
	flash_wait_for_last_operation(5);
 8000f28:	2005      	movs	r0, #5
 8000f2a:	f000 f829 	bl	8000f80 <flash_wait_for_last_operation>


}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <flash_mass_erase>:

void flash_mass_erase(uint8_t voltage_range)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <flash_mass_erase+0x40>)
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f7c <flash_mass_erase+0x40>)
 8000f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f50:	6113      	str	r3, [r2, #16]

	/*Set MER bit*/
	FLASH->CR |= FLASH_CR_MER;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <flash_mass_erase+0x40>)
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	4a09      	ldr	r2, [pc, #36]	@ (8000f7c <flash_mass_erase+0x40>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6113      	str	r3, [r2, #16]
	/*Set Start bit and voltage*/
	FLASH->CR |=  FLASH_CR_STRT |((uint32_t)voltage_range <<8U);
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <flash_mass_erase+0x40>)
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	4313      	orrs	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <flash_mass_erase+0x40>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f6e:	6113      	str	r3, [r2, #16]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <flash_wait_for_last_operation>:

StatusTypeDef  flash_wait_for_last_operation(uint32_t timeout)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]

   pFlash.ErrorCode = 0;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <flash_wait_for_last_operation+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]

   tickstart = get_tick();
 8000f92:	f001 fbb3 	bl	80026fc <get_tick>
 8000f96:	60f8      	str	r0, [r7, #12]

   while((FLASH->SR & FLASH_SR_BSY) != RESET)
 8000f98:	e010      	b.n	8000fbc <flash_wait_for_last_operation+0x3c>
   {
	   if(timeout != MAX_DELAY)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d00c      	beq.n	8000fbc <flash_wait_for_last_operation+0x3c>
	   {
		   if((timeout  == 0) || ((get_tick() -  tickstart) > timeout))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <flash_wait_for_last_operation+0x38>
 8000fa8:	f001 fba8 	bl	80026fc <get_tick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d201      	bcs.n	8000fbc <flash_wait_for_last_operation+0x3c>
		   {
			   return DEV_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e00f      	b.n	8000fdc <flash_wait_for_last_operation+0x5c>
   while((FLASH->SR & FLASH_SR_BSY) != RESET)
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <flash_wait_for_last_operation+0x68>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e8      	bne.n	8000f9a <flash_wait_for_last_operation+0x1a>
		   }
	   }
   }

   /*Check end of operation flag*/
   if((FLASH->SR & (1U<<0)) != RESET)
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <flash_wait_for_last_operation+0x68>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <flash_wait_for_last_operation+0x5a>
   {
	   /*Clear flash end of operation pending bit*/
	   FLASH->SR = (1U<<0);
 8000fd4:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <flash_wait_for_last_operation+0x68>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	60da      	str	r2, [r3, #12]
   }

   return DEV_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000128 	.word	0x20000128
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <flash_program>:


StatusTypeDef flash_program(uint32_t prg_type,  uint32_t address, uint64_t data)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	e9c7 2300 	strd	r2, r3, [r7]
	StatusTypeDef status = DEV_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]

	/*wait for last operation to be completed*/
	status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8000ffe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001002:	f7ff ffbd 	bl	8000f80 <flash_wait_for_last_operation>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]

	if( status == DEV_OK)
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d12b      	bne.n	8001068 <flash_program+0x7c>
	{
		if(prg_type == FLASH_TYPEPROGRAM_BYTE)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d105      	bne.n	8001022 <flash_program+0x36>
		{
			flash_program_byte(address,(uint8_t)data);
 8001016:	783b      	ldrb	r3, [r7, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	68b8      	ldr	r0, [r7, #8]
 800101c:	f000 f82c 	bl	8001078 <flash_program_byte>
 8001020:	e016      	b.n	8001050 <flash_program+0x64>
		}

		else if(prg_type == FLASH_TYPEPROGRAM_HALFWORD)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d105      	bne.n	8001034 <flash_program+0x48>
		{
			flash_program_halfword(address,(uint16_t)data);
 8001028:	883b      	ldrh	r3, [r7, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	68b8      	ldr	r0, [r7, #8]
 800102e:	f000 f845 	bl	80010bc <flash_program_halfword>
 8001032:	e00d      	b.n	8001050 <flash_program+0x64>
		}
		else if(prg_type == FLASH_TYPEPROGRAM_WORD)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d105      	bne.n	8001046 <flash_program+0x5a>
		{
			flash_program_word(address,(uint32_t)data);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f000 f860 	bl	8001104 <flash_program_word>
 8001044:	e004      	b.n	8001050 <flash_program+0x64>
		}
		else
		{
			flash_program_doubleword(address,data);
 8001046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800104a:	68b8      	ldr	r0, [r7, #8]
 800104c:	f000 f87c 	bl	8001148 <flash_program_doubleword>

		}

		/*wait for last operation to be completed*/
		status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8001050:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001054:	f7ff ff94 	bl	8000f80 <flash_wait_for_last_operation>
 8001058:	4603      	mov	r3, r0
 800105a:	75fb      	strb	r3, [r7, #23]

		/*Clear Program bit*/
		FLASH->CR &=~FLASH_CR_PG;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <flash_program+0x88>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <flash_program+0x88>)
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	6113      	str	r3, [r2, #16]
	}

	return status;
 8001068:	7dfb      	ldrb	r3, [r7, #23]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <flash_program_byte>:
void flash_program_byte(uint32_t address, uint8_t data)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <flash_program_byte+0x40>)
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <flash_program_byte+0x40>)
 800108a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800108e:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for byte*/
	FLASH->CR |=FLASH_PSIZE_BYTE;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <flash_program_byte+0x40>)
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <flash_program_byte+0x40>)
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <flash_program_byte+0x40>)
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <flash_program_byte+0x40>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint8_t *)address =  data;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	701a      	strb	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <flash_program_halfword>:

void flash_program_halfword(uint32_t address, uint16_t data)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <flash_program_halfword+0x44>)
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <flash_program_halfword+0x44>)
 80010ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010d2:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_HALF_WORD;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <flash_program_halfword+0x44>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <flash_program_halfword+0x44>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <flash_program_halfword+0x44>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <flash_program_halfword+0x44>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint16_t *)address =  data;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	801a      	strh	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <flash_program_word>:

void flash_program_word(uint32_t address, uint32_t data)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <flash_program_word+0x40>)
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <flash_program_word+0x40>)
 8001114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001118:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_WORD;
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <flash_program_word+0x40>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <flash_program_word+0x40>)
 8001120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001124:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <flash_program_word+0x40>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <flash_program_word+0x40>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint32_t *)address =  data;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40023c00 	.word	0x40023c00

08001148 <flash_program_doubleword>:

void flash_program_doubleword(uint32_t address, uint64_t data)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	e9c7 2300 	strd	r2, r3, [r7]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <flash_program_doubleword+0x60>)
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <flash_program_doubleword+0x60>)
 800115a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800115e:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_DOUBLE_WORD;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <flash_program_doubleword+0x60>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <flash_program_doubleword+0x60>)
 8001166:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800116a:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <flash_program_doubleword+0x60>)
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <flash_program_doubleword+0x60>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6113      	str	r3, [r2, #16]

	/*Put  first word at the address*/
	*(__IO uint32_t *)address =  (uint32_t)data;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800117e:	f3bf 8f6f 	isb	sy
}
 8001182:	bf00      	nop

	/*Flush pipeline : ensure programming is performed steps.*/
	__ISB();

	/*Put  second word at the address*/
	*(__IO uint32_t *)(address+4) =  (uint32_t)(data>>32);
 8001184:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	000a      	movs	r2, r1
 8001192:	2300      	movs	r3, #0
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	3104      	adds	r1, #4
 8001198:	4613      	mov	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40023c00 	.word	0x40023c00

080011ac <flush_caches>:

static void flush_caches(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	/*Flush instruction cache*/
	  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <flush_caches+0x88>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d017      	beq.n	80011ec <flush_caches+0x40>
	  {
		    /* Disable instruction cache  */
			  FLASH->ACR &= (~FLASH_ACR_ICEN);
 80011bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <flush_caches+0x88>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <flush_caches+0x88>)
 80011c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80011c6:	6013      	str	r3, [r2, #0]

			/* Reset instruction cache */
			  FLASH->ACR |= FLASH_ACR_ICRST;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <flush_caches+0x88>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <flush_caches+0x88>)
 80011ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d2:	6013      	str	r3, [r2, #0]
			 FLASH->ACR &= ~FLASH_ACR_ICRST;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <flush_caches+0x88>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <flush_caches+0x88>)
 80011da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80011de:	6013      	str	r3, [r2, #0]


			 /* Enable instruction cache */
			 FLASH->ACR |= FLASH_ACR_ICEN;
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <flush_caches+0x88>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <flush_caches+0x88>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ea:	6013      	str	r3, [r2, #0]
	  }

	  /*Flush data cache*/

	  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <flush_caches+0x88>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d017      	beq.n	8001228 <flush_caches+0x7c>
	  {
	    /* Disable data cache  */
		  FLASH->ACR &= (~FLASH_ACR_DCEN);
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <flush_caches+0x88>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <flush_caches+0x88>)
 80011fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001202:	6013      	str	r3, [r2, #0]

	    /* Reset data cache */
	    FLASH->ACR |= FLASH_ACR_DCRST;
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <flush_caches+0x88>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <flush_caches+0x88>)
 800120a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800120e:	6013      	str	r3, [r2, #0]
	    FLASH->ACR &= ~FLASH_ACR_DCRST;
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <flush_caches+0x88>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <flush_caches+0x88>)
 8001216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800121a:	6013      	str	r3, [r2, #0]

	    /* Enable data cache */
	    FLASH->ACR |= FLASH_ACR_DCEN;
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <flush_caches+0x88>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <flush_caches+0x88>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001226:	6013      	str	r3, [r2, #0]
	  }
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <flash_unlock>:


StatusTypeDef flash_unlock(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
	StatusTypeDef status = DEV_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	71fb      	strb	r3, [r7, #7]

	if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <flash_unlock+0x38>)
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	da0b      	bge.n	8001262 <flash_unlock+0x2a>
	{

		/*Authorize flash write access*/
		FLASH->KEYR  =  FLASH_KEY1;
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <flash_unlock+0x38>)
 800124c:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <flash_unlock+0x3c>)
 800124e:	605a      	str	r2, [r3, #4]
		FLASH->KEYR  =  FLASH_KEY2;
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <flash_unlock+0x38>)
 8001252:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <flash_unlock+0x40>)
 8001254:	605a      	str	r2, [r3, #4]

		if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <flash_unlock+0x38>)
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	da01      	bge.n	8001262 <flash_unlock+0x2a>
		{
			status =  DEV_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	71fb      	strb	r3, [r7, #7]
		}

	}

	return status;
 8001262:	79fb      	ldrb	r3, [r7, #7]
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	40023c00 	.word	0x40023c00
 8001274:	45670123 	.word	0x45670123
 8001278:	cdef89ab 	.word	0xcdef89ab

0800127c <flash_get_error>:
	return DEV_OK;
}


uint32_t flash_get_error(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	return pFlash.ErrorCode;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <flash_get_error+0x14>)
 8001282:	695b      	ldr	r3, [r3, #20]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000128 	.word	0x20000128

08001294 <get_sector>:

static uint32_t get_sector(uint32_t address)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
	if((address < 0x08003FFF) && (address >= 0x08000000))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a2e      	ldr	r2, [pc, #184]	@ (800135c <get_sector+0xc8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d806      	bhi.n	80012b6 <get_sector+0x22>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80012ae:	d302      	bcc.n	80012b6 <get_sector+0x22>
	 {
	     sector = FLASH_SECTOR_0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e04b      	b.n	800134e <get_sector+0xba>
	 }
   else if((address < 0x08007FFF) && (address >= 0x08004000))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a29      	ldr	r2, [pc, #164]	@ (8001360 <get_sector+0xcc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d806      	bhi.n	80012cc <get_sector+0x38>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a28      	ldr	r2, [pc, #160]	@ (8001364 <get_sector+0xd0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d302      	bcc.n	80012cc <get_sector+0x38>
   {
	 sector = FLASH_SECTOR_1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e040      	b.n	800134e <get_sector+0xba>
   }
   else if((address < 0x0800BFFF) && (address >= 0x08008000))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a26      	ldr	r2, [pc, #152]	@ (8001368 <get_sector+0xd4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d806      	bhi.n	80012e2 <get_sector+0x4e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a25      	ldr	r2, [pc, #148]	@ (800136c <get_sector+0xd8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d302      	bcc.n	80012e2 <get_sector+0x4e>
   {
	 sector = FLASH_SECTOR_2;
 80012dc:	2302      	movs	r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e035      	b.n	800134e <get_sector+0xba>
   }
   else if((address < 0x0800FFFF) && (address >= 0x0800C000))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a22      	ldr	r2, [pc, #136]	@ (8001370 <get_sector+0xdc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d206      	bcs.n	80012f8 <get_sector+0x64>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <get_sector+0xe0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d302      	bcc.n	80012f8 <get_sector+0x64>
   {
	 sector = FLASH_SECTOR_3;
 80012f2:	2303      	movs	r3, #3
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e02a      	b.n	800134e <get_sector+0xba>
   }
   else if((address < 0x0801FFFF) && (address >= 0x08010000))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001378 <get_sector+0xe4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d206      	bcs.n	800130e <get_sector+0x7a>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a1b      	ldr	r2, [pc, #108]	@ (8001370 <get_sector+0xdc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d902      	bls.n	800130e <get_sector+0x7a>
   {
	 sector = FLASH_SECTOR_4;
 8001308:	2304      	movs	r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e01f      	b.n	800134e <get_sector+0xba>
   }
   else if((address < 0x0803FFFF) && (address >= 0x08020000))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <get_sector+0xe8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d206      	bcs.n	8001324 <get_sector+0x90>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <get_sector+0xe4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d902      	bls.n	8001324 <get_sector+0x90>
   {
	 sector = FLASH_SECTOR_5;
 800131e:	2305      	movs	r3, #5
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e014      	b.n	800134e <get_sector+0xba>
   }
   else if((address < 0x0805FFFF) && (address >= 0x08040000))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <get_sector+0xec>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d206      	bcs.n	800133a <get_sector+0xa6>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a13      	ldr	r2, [pc, #76]	@ (800137c <get_sector+0xe8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d902      	bls.n	800133a <get_sector+0xa6>
   {
	 sector = FLASH_SECTOR_6;
 8001334:	2306      	movs	r3, #6
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e009      	b.n	800134e <get_sector+0xba>
   }
   else if((address < 0x0807FFFF) && (address >= 0x08060000))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <get_sector+0xf0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d205      	bcs.n	800134e <get_sector+0xba>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <get_sector+0xec>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <get_sector+0xba>
   {
	 sector = FLASH_SECTOR_7;
 800134a:	2307      	movs	r3, #7
 800134c:	60fb      	str	r3, [r7, #12]
   else
   {
     //Do something
   }

	return sector;
 800134e:	68fb      	ldr	r3, [r7, #12]

}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	08003ffe 	.word	0x08003ffe
 8001360:	08007ffe 	.word	0x08007ffe
 8001364:	08004000 	.word	0x08004000
 8001368:	0800bffe 	.word	0x0800bffe
 800136c:	08008000 	.word	0x08008000
 8001370:	0800ffff 	.word	0x0800ffff
 8001374:	0800c000 	.word	0x0800c000
 8001378:	0801ffff 	.word	0x0801ffff
 800137c:	0803ffff 	.word	0x0803ffff
 8001380:	0805ffff 	.word	0x0805ffff
 8001384:	0807ffff 	.word	0x0807ffff

08001388 <flash_write_data_byte>:

	return 0;
}

uint32_t flash_write_data_byte(uint32_t start_sect_addr, uint8_t *data, uint16_t numberofbytes)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b08e      	sub	sp, #56	@ 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	4613      	mov	r3, r2
 8001394:	80fb      	strh	r3, [r7, #6]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t sect_err;
    uint16_t write_count  = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /* Unlock flash */
    flash_unlock();
 800139a:	f7ff ff4d 	bl	8001238 <flash_unlock>

    /* Get Number of sectors to erase starting from the first sector */
    uint32_t start_sector = get_sector(start_sect_addr);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff ff78 	bl	8001294 <get_sector>
 80013a4:	6338      	str	r0, [r7, #48]	@ 0x30
    uint32_t end_sect_addr = start_sect_addr + numberofbytes;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t end_sector = get_sector(end_sect_addr);
 80013ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013b0:	f7ff ff70 	bl	8001294 <get_sector>
 80013b4:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* Initialize EraseInit Struct */
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80013ba:	2302      	movs	r3, #2
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    EraseInitStruct.Sector = start_sector;
 80013be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c0:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = (end_sector - start_sector) + 1;
 80013c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]

    if(flash_ex_erase(&EraseInitStruct, &sect_err) != DEV_OK)
 80013cc:	f107 0214 	add.w	r2, r7, #20
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fd0c 	bl	8000df4 <flash_ex_erase>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01f      	beq.n	8001422 <flash_write_data_byte+0x9a>
    {
        return flash_get_error();
 80013e2:	f7ff ff4b 	bl	800127c <flash_get_error>
 80013e6:	4603      	mov	r3, r0
 80013e8:	e020      	b.n	800142c <flash_write_data_byte+0xa4>
    }

    /* Program flash byte-by-byte */
    while(write_count < numberofbytes)
    {
        if(flash_program(FLASH_TYPEPROGRAM_BYTE, start_sect_addr, data[write_count]) == DEV_OK)
 80013ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	461c      	mov	r4, r3
 80013f8:	4615      	mov	r5, r2
 80013fa:	4622      	mov	r2, r4
 80013fc:	462b      	mov	r3, r5
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fdf3 	bl	8000fec <flash_program>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d106      	bne.n	800141a <flash_write_data_byte+0x92>
        {
            start_sect_addr += 1;  // Move to the next byte address
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
            write_count++;
 8001412:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001414:	3301      	adds	r3, #1
 8001416:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001418:	e003      	b.n	8001422 <flash_write_data_byte+0x9a>
        }
        else
        {
            return flash_get_error();
 800141a:	f7ff ff2f 	bl	800127c <flash_get_error>
 800141e:	4603      	mov	r3, r0
 8001420:	e004      	b.n	800142c <flash_write_data_byte+0xa4>
    while(write_count < numberofbytes)
 8001422:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	429a      	cmp	r2, r3
 8001428:	d3df      	bcc.n	80013ea <flash_write_data_byte+0x62>
        }
    }

    return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3738      	adds	r7, #56	@ 0x38
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}

08001434 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <fpu_enable+0x50>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143e:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <fpu_enable+0x50>)
 8001440:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <fpu_enable+0x50>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <fpu_enable+0x50>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <fpu_enable+0x50>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145e:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <fpu_enable+0x50>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <fpu_enable+0x50>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <fpu_enable+0x50>)
 8001470:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <httpc_init>:
uint16_t get_httpc_any_port(void);

/* Public & Private functions ------------------------------------------------*/

uint8_t httpc_init(uint8_t sock, uint8_t * ip, uint16_t port, uint8_t * sbuf, uint8_t * rbuf)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	4613      	mov	r3, r2
 8001498:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = HTTPC_FALSE;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]

	if(sock <= _WIZCHIP_SOCK_NUM_)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d81e      	bhi.n	80014e2 <httpc_init+0x5a>
	{
		// Hardware socket number for HTTP client (0 ~ 7)
		httpsock = sock;
 80014a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <httpc_init+0x68>)
 80014aa:	701a      	strb	r2, [r3, #0]

		// Shared buffers: HTTP Send / Recevice
		httpc_send_buf = sbuf;
 80014ac:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <httpc_init+0x6c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
		httpc_recv_buf = rbuf;
 80014b2:	4a11      	ldr	r2, [pc, #68]	@ (80014f8 <httpc_init+0x70>)
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	6013      	str	r3, [r2, #0]

		// Destination IP address and Port number
		// (Destination = HTTP server)
		dest_ip[0] = ip[0];
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <httpc_init+0x74>)
 80014be:	701a      	strb	r2, [r3, #0]
		dest_ip[1] = ip[1];
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	785a      	ldrb	r2, [r3, #1]
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <httpc_init+0x74>)
 80014c6:	705a      	strb	r2, [r3, #1]
		dest_ip[2] = ip[2];
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	789a      	ldrb	r2, [r3, #2]
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <httpc_init+0x74>)
 80014ce:	709a      	strb	r2, [r3, #2]
		dest_ip[3] = ip[3];
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	78da      	ldrb	r2, [r3, #3]
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <httpc_init+0x74>)
 80014d6:	70da      	strb	r2, [r3, #3]
		dest_port = port;
 80014d8:	4a09      	ldr	r2, [pc, #36]	@ (8001500 <httpc_init+0x78>)
 80014da:	89bb      	ldrh	r3, [r7, #12]
 80014dc:	8013      	strh	r3, [r2, #0]

		ret = HTTPC_TRUE;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000148 	.word	0x20000148
 80014f4:	20000140 	.word	0x20000140
 80014f8:	20000144 	.word	0x20000144
 80014fc:	2000014c 	.word	0x2000014c
 8001500:	20000150 	.word	0x20000150

08001504 <httpc_connection_handler>:


// return: true / false
uint8_t httpc_connection_handler()
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b087      	sub	sp, #28
 8001508:	af02      	add	r7, sp, #8
	uint8_t ret = HTTPC_FALSE;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]

	uint16_t source_port;

#ifdef _HTTPCLIENT_DEBUG_
	uint8_t destip[4] = {0, };
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	80fb      	strh	r3, [r7, #6]
#endif

	uint8_t state = getSn_SR(httpsock);
 8001516:	4b6d      	ldr	r3, [pc, #436]	@ (80016cc <httpc_connection_handler+0x1c8>)
 8001518:	f993 3000 	ldrsb.w	r3, [r3]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	3301      	adds	r3, #1
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001526:	4618      	mov	r0, r3
 8001528:	f004 f852 	bl	80055d0 <WIZCHIP_READ>
 800152c:	4603      	mov	r3, r0
 800152e:	73bb      	strb	r3, [r7, #14]
	switch(state)
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	2b1c      	cmp	r3, #28
 8001534:	f200 80c2 	bhi.w	80016bc <httpc_connection_handler+0x1b8>
 8001538:	a201      	add	r2, pc, #4	@ (adr r2, 8001540 <httpc_connection_handler+0x3c>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	08001669 	.word	0x08001669
 8001544:	080016bd 	.word	0x080016bd
 8001548:	080016bd 	.word	0x080016bd
 800154c:	080016bd 	.word	0x080016bd
 8001550:	080016bd 	.word	0x080016bd
 8001554:	080016bd 	.word	0x080016bd
 8001558:	080016bd 	.word	0x080016bd
 800155c:	080016bd 	.word	0x080016bd
 8001560:	080016bd 	.word	0x080016bd
 8001564:	080016bd 	.word	0x080016bd
 8001568:	080016bd 	.word	0x080016bd
 800156c:	080016bd 	.word	0x080016bd
 8001570:	080016bd 	.word	0x080016bd
 8001574:	080016bd 	.word	0x080016bd
 8001578:	080016bd 	.word	0x080016bd
 800157c:	080016bd 	.word	0x080016bd
 8001580:	080016bd 	.word	0x080016bd
 8001584:	080016bd 	.word	0x080016bd
 8001588:	080016bd 	.word	0x080016bd
 800158c:	080015b5 	.word	0x080015b5
 8001590:	080016bd 	.word	0x080016bd
 8001594:	080016bd 	.word	0x080016bd
 8001598:	080016bd 	.word	0x080016bd
 800159c:	080015bb 	.word	0x080015bb
 80015a0:	08001669 	.word	0x08001669
 80015a4:	080016bd 	.word	0x080016bd
 80015a8:	080016bd 	.word	0x080016bd
 80015ac:	080016bd 	.word	0x080016bd
 80015b0:	08001659 	.word	0x08001659
	{
		case SOCK_INIT:
			// state: connect
			ret = HTTPC_TRUE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
			break;
 80015b8:	e083      	b.n	80016c2 <httpc_connection_handler+0x1be>

		case SOCK_ESTABLISHED:
			if(getSn_IR(httpsock) & Sn_IR_CON)
 80015ba:	4b44      	ldr	r3, [pc, #272]	@ (80016cc <httpc_connection_handler+0x1c8>)
 80015bc:	f993 3000 	ldrsb.w	r3, [r3]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	3301      	adds	r3, #1
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 f800 	bl	80055d0 <WIZCHIP_READ>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d030      	beq.n	800163c <httpc_connection_handler+0x138>
			{
#ifdef _HTTPCLIENT_DEBUG_
				// Serial debug message printout
				getsockopt(httpsock, SO_DESTIP, &destip);
 80015da:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <httpc_connection_handler+0x1c8>)
 80015dc:	f993 3000 	ldrsb.w	r3, [r3]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	2104      	movs	r1, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fedd 	bl	80053a8 <getsockopt>
				getsockopt(httpsock, SO_DESTPORT, &destport);
 80015ee:	4b37      	ldr	r3, [pc, #220]	@ (80016cc <httpc_connection_handler+0x1c8>)
 80015f0:	f993 3000 	ldrsb.w	r3, [r3]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	1dba      	adds	r2, r7, #6
 80015f8:	2105      	movs	r1, #5
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fed4 	bl	80053a8 <getsockopt>
				printf(" > HTTP CLIENT: CONNECTED TO - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
 8001600:	7a3b      	ldrb	r3, [r7, #8]
 8001602:	4619      	mov	r1, r3
 8001604:	7a7b      	ldrb	r3, [r7, #9]
 8001606:	4618      	mov	r0, r3
 8001608:	7abb      	ldrb	r3, [r7, #10]
 800160a:	461c      	mov	r4, r3
 800160c:	7afb      	ldrb	r3, [r7, #11]
 800160e:	88fa      	ldrh	r2, [r7, #6]
 8001610:	9201      	str	r2, [sp, #4]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4623      	mov	r3, r4
 8001616:	4602      	mov	r2, r0
 8001618:	482d      	ldr	r0, [pc, #180]	@ (80016d0 <httpc_connection_handler+0x1cc>)
 800161a:	f005 f9bb 	bl	8006994 <iprintf>
#endif
				httpc_isConnected = HTTPC_TRUE;
 800161e:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <httpc_connection_handler+0x1d0>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]

				setSn_IR(httpsock, Sn_IR_CON);
 8001624:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <httpc_connection_handler+0x1c8>)
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	3301      	adds	r3, #1
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001634:	2101      	movs	r1, #1
 8001636:	4618      	mov	r0, r3
 8001638:	f004 f816 	bl	8005668 <WIZCHIP_WRITE>
			}

			httpc_isReceived = getSn_RX_RSR(httpsock);
 800163c:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <httpc_connection_handler+0x1c8>)
 800163e:	f993 3000 	ldrsb.w	r3, [r3]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f004 f966 	bl	8005916 <getSn_RX_RSR>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <httpc_connection_handler+0x1d4>)
 8001650:	801a      	strh	r2, [r3, #0]
			ret = HTTPC_CONNECTED;
 8001652:	2302      	movs	r3, #2
 8001654:	73fb      	strb	r3, [r7, #15]
			break;
 8001656:	e034      	b.n	80016c2 <httpc_connection_handler+0x1be>

		case SOCK_CLOSE_WAIT:
			disconnect(httpsock);
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <httpc_connection_handler+0x1c8>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f95f 	bl	8004924 <disconnect>
			break;
 8001666:	e02c      	b.n	80016c2 <httpc_connection_handler+0x1be>

		case SOCK_FIN_WAIT:
		case SOCK_CLOSED:
			httpc_isSockOpen = HTTPC_FALSE;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <httpc_connection_handler+0x1d8>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
			httpc_isConnected = HTTPC_FALSE;
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <httpc_connection_handler+0x1d0>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]

			source_port = get_httpc_any_port();
 8001674:	f000 f97a 	bl	800196c <get_httpc_any_port>
 8001678:	4603      	mov	r3, r0
 800167a:	81bb      	strh	r3, [r7, #12]
#ifdef _HTTPCLIENT_DEBUG_
			printf(" > HTTP CLIENT: source_port = %d\r\n", source_port);
 800167c:	89bb      	ldrh	r3, [r7, #12]
 800167e:	4619      	mov	r1, r3
 8001680:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <httpc_connection_handler+0x1dc>)
 8001682:	f005 f987 	bl	8006994 <iprintf>
#endif

			if(socket(httpsock, Sn_MR_TCP, source_port, Sn_MR_ND) == httpsock)
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <httpc_connection_handler+0x1c8>)
 8001688:	f993 3000 	ldrsb.w	r3, [r3]
 800168c:	b2d8      	uxtb	r0, r3
 800168e:	89ba      	ldrh	r2, [r7, #12]
 8001690:	2320      	movs	r3, #32
 8001692:	2101      	movs	r1, #1
 8001694:	f002 fee8 	bl	8004468 <socket>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <httpc_connection_handler+0x1c8>)
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d10c      	bne.n	80016c0 <httpc_connection_handler+0x1bc>
			{
				if(httpc_isSockOpen == HTTPC_FALSE)
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <httpc_connection_handler+0x1d8>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d108      	bne.n	80016c0 <httpc_connection_handler+0x1bc>
				{
#ifdef _HTTPCLIENT_DEBUG_
					printf(" > HTTP CLIENT: SOCKOPEN\r\n");
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <httpc_connection_handler+0x1e0>)
 80016b0:	f005 f9e0 	bl	8006a74 <puts>
#endif
					httpc_isSockOpen = HTTPC_TRUE;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <httpc_connection_handler+0x1d8>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
				}
			}


			break;
 80016ba:	e001      	b.n	80016c0 <httpc_connection_handler+0x1bc>

		default:
			break;
 80016bc:	bf00      	nop
 80016be:	e000      	b.n	80016c2 <httpc_connection_handler+0x1be>
			break;
 80016c0:	bf00      	nop
	}

	return ret;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	20000148 	.word	0x20000148
 80016d0:	08007c84 	.word	0x08007c84
 80016d4:	20000155 	.word	0x20000155
 80016d8:	20000156 	.word	0x20000156
 80016dc:	20000154 	.word	0x20000154
 80016e0:	08007cb8 	.word	0x08007cb8
 80016e4:	08007cdc 	.word	0x08007cdc

080016e8 <httpc_connect>:


// return: socket status
uint8_t httpc_connect()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	71fb      	strb	r3, [r7, #7]

	if(httpsock >= 0)
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <httpc_connect+0x48>)
 80016f4:	f993 3000 	ldrsb.w	r3, [r3]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db14      	blt.n	8001726 <httpc_connect+0x3e>
	{
		if(httpc_isSockOpen == HTTPC_TRUE)
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <httpc_connect+0x4c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d110      	bne.n	8001726 <httpc_connect+0x3e>
		{
			// TCP connect
			ret = connect(httpsock, dest_ip, dest_port);
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <httpc_connect+0x48>)
 8001706:	f993 3000 	ldrsb.w	r3, [r3]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <httpc_connect+0x50>)
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	490a      	ldr	r1, [pc, #40]	@ (800173c <httpc_connect+0x54>)
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f82a 	bl	800476c <connect>
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
			if(ret == SOCK_OK) ret = HTTPC_TRUE;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <httpc_connect+0x3e>
 8001722:	2301      	movs	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 8001726:	79fb      	ldrb	r3, [r7, #7]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000148 	.word	0x20000148
 8001734:	20000154 	.word	0x20000154
 8001738:	20000150 	.word	0x20000150
 800173c:	2000014c 	.word	0x2000014c

08001740 <httpc_send>:
}


// return: sent data length
uint16_t httpc_send(HttpRequest * req, uint8_t * buf, uint8_t * body, uint16_t content_len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint16_t len;
	uint8_t http_header_generated = HTTPC_FAILED;
 800174e:	2300      	movs	r3, #0
 8001750:	74fb      	strb	r3, [r7, #19]

	if(httpc_isConnected == HTTPC_TRUE)
 8001752:	4b64      	ldr	r3, [pc, #400]	@ (80018e4 <httpc_send+0x1a4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	f040 80bc 	bne.w	80018d4 <httpc_send+0x194>
	{
		do
		{
			memset(buf, 0x00, DATA_BUF_SIZE);
 800175c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001760:	2100      	movs	r1, #0
 8001762:	68b8      	ldr	r0, [r7, #8]
 8001764:	f005 fa86 	bl	8006c74 <memset>

			/* HTTP request header */
			len = sprintf((char *)buf, "%s %s HTTP/1.1\r\n", req->method, req->uri);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	495d      	ldr	r1, [pc, #372]	@ (80018e8 <httpc_send+0x1a8>)
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f005 f986 	bl	8006a84 <siprintf>
 8001778:	4603      	mov	r3, r0
 800177a:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Host: %s\r\n", req->host);
 800177c:	8abb      	ldrh	r3, [r7, #20]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	18d0      	adds	r0, r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	461a      	mov	r2, r3
 8001788:	4958      	ldr	r1, [pc, #352]	@ (80018ec <httpc_send+0x1ac>)
 800178a:	f005 f97b 	bl	8006a84 <siprintf>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	8abb      	ldrh	r3, [r7, #20]
 8001794:	4413      	add	r3, r2
 8001796:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Connection: %s\r\n", req->connection);
 8001798:	8abb      	ldrh	r3, [r7, #20]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	18d0      	adds	r0, r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4952      	ldr	r1, [pc, #328]	@ (80018f0 <httpc_send+0x1b0>)
 80017a6:	f005 f96d 	bl	8006a84 <siprintf>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	8abb      	ldrh	r3, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	82bb      	strh	r3, [r7, #20]

			// HTTP content type: POST / PUT only
			if(content_len > 0)
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d032      	beq.n	8001820 <httpc_send+0xe0>
			{
				len += sprintf((char *)buf+len, "Content-Length: %d\r\n", content_len);
 80017ba:	8abb      	ldrh	r3, [r7, #20]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	494c      	ldr	r1, [pc, #304]	@ (80018f4 <httpc_send+0x1b4>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 f95d 	bl	8006a84 <siprintf>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	8abb      	ldrh	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	82bb      	strh	r3, [r7, #20]

				if(strcmp((char *)req->content_type, HTTP_CTYPE_MULTIPART_FORM) == 0)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4947      	ldr	r1, [pc, #284]	@ (80018f8 <httpc_send+0x1b8>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fd00 	bl	80001e0 <strcmp>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10e      	bne.n	8001804 <httpc_send+0xc4>
				{
					// HTTP content type: multipart/form-data
					len += sprintf((char *)buf+len, "Content-Type: %s; boundary=%s\r\n", req->content_type, formDataBoundary);
 80017e6:	8abb      	ldrh	r3, [r7, #20]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	18d0      	adds	r0, r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <httpc_send+0x1bc>)
 80017f2:	4943      	ldr	r1, [pc, #268]	@ (8001900 <httpc_send+0x1c0>)
 80017f4:	f005 f946 	bl	8006a84 <siprintf>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	8abb      	ldrh	r3, [r7, #20]
 80017fe:	4413      	add	r3, r2
 8001800:	82bb      	strh	r3, [r7, #20]
 8001802:	e00d      	b.n	8001820 <httpc_send+0xe0>
				}
				else
				{
					// HTTP content type: others
					len += sprintf((char *)buf+len, "Content-Type: %s\r\n", req->content_type); // HTTP content type: others
 8001804:	8abb      	ldrh	r3, [r7, #20]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	18d0      	adds	r0, r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	461a      	mov	r2, r3
 8001810:	493c      	ldr	r1, [pc, #240]	@ (8001904 <httpc_send+0x1c4>)
 8001812:	f005 f937 	bl	8006a84 <siprintf>
 8001816:	4603      	mov	r3, r0
 8001818:	b29a      	uxth	r2, r3
 800181a:	8abb      	ldrh	r3, [r7, #20]
 800181c:	4413      	add	r3, r2
 800181e:	82bb      	strh	r3, [r7, #20]
				}
			}
			len += sprintf((char *)buf+len, "\r\n");
 8001820:	8abb      	ldrh	r3, [r7, #20]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	4938      	ldr	r1, [pc, #224]	@ (8001908 <httpc_send+0x1c8>)
 8001828:	4618      	mov	r0, r3
 800182a:	f005 f92b 	bl	8006a84 <siprintf>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	8abb      	ldrh	r3, [r7, #20]
 8001834:	4413      	add	r3, r2
 8001836:	82bb      	strh	r3, [r7, #20]

			// Avoiding buffer overflow
			if((len + content_len) > DATA_BUF_SIZE) {
 8001838:	8aba      	ldrh	r2, [r7, #20]
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	4413      	add	r3, r2
 800183e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001842:	4293      	cmp	r3, r2
 8001844:	dd05      	ble.n	8001852 <httpc_send+0x112>
				content_len = DATA_BUF_SIZE - len; // HTTP request header re-generation (do-while)
 8001846:	8abb      	ldrh	r3, [r7, #20]
 8001848:	f5c3 53da 	rsb	r3, r3, #6976	@ 0x1b40
 800184c:	3318      	adds	r3, #24
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	e001      	b.n	8001856 <httpc_send+0x116>
				//http_header_generated = FAILED;
			} else {
				http_header_generated = HTTPC_SUCCESS;
 8001852:	2301      	movs	r3, #1
 8001854:	74fb      	strb	r3, [r7, #19]
			}
		} while(http_header_generated != HTTPC_SUCCESS);
 8001856:	7cfb      	ldrb	r3, [r7, #19]
 8001858:	2b01      	cmp	r3, #1
 800185a:	f47f af7f 	bne.w	800175c <httpc_send+0x1c>

		/* HTTP request body */
		for(i = 0; i < content_len; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	82fb      	strh	r3, [r7, #22]
 8001862:	e00d      	b.n	8001880 <httpc_send+0x140>
		{
			buf[len++] = body[i];
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	441a      	add	r2, r3
 800186a:	8abb      	ldrh	r3, [r7, #20]
 800186c:	1c59      	adds	r1, r3, #1
 800186e:	82b9      	strh	r1, [r7, #20]
 8001870:	4619      	mov	r1, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	440b      	add	r3, r1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < content_len; i++)
 800187a:	8afb      	ldrh	r3, [r7, #22]
 800187c:	3301      	adds	r3, #1
 800187e:	82fb      	strh	r3, [r7, #22]
 8001880:	8afa      	ldrh	r2, [r7, #22]
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3ed      	bcc.n	8001864 <httpc_send+0x124>
		}

//#ifdef _HTTPCLIENT_DEBUG_
		printf(" >> HTTP Request - Method: %s, URI: %s, Content-Length: %d\r\n", req->method, req->uri, content_len);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6819      	ldr	r1, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	481e      	ldr	r0, [pc, #120]	@ (800190c <httpc_send+0x1cc>)
 8001894:	f005 f87e 	bl	8006994 <iprintf>
		for(i = 0; i < len; i++) printf("%c", buf[i]);
 8001898:	2300      	movs	r3, #0
 800189a:	82fb      	strh	r3, [r7, #22]
 800189c:	e009      	b.n	80018b2 <httpc_send+0x172>
 800189e:	8afb      	ldrh	r3, [r7, #22]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 f886 	bl	80069b8 <putchar>
 80018ac:	8afb      	ldrh	r3, [r7, #22]
 80018ae:	3301      	adds	r3, #1
 80018b0:	82fb      	strh	r3, [r7, #22]
 80018b2:	8afa      	ldrh	r2, [r7, #22]
 80018b4:	8abb      	ldrh	r3, [r7, #20]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3f1      	bcc.n	800189e <httpc_send+0x15e>
		printf("\r\n");
 80018ba:	4815      	ldr	r0, [pc, #84]	@ (8001910 <httpc_send+0x1d0>)
 80018bc:	f005 f8da 	bl	8006a74 <puts>
//#endif
		send(httpsock, buf, len);
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <httpc_send+0x1d4>)
 80018c2:	f993 3000 	ldrsb.w	r3, [r3]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	8aba      	ldrh	r2, [r7, #20]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f89f 	bl	8004a10 <send>
 80018d2:	e001      	b.n	80018d8 <httpc_send+0x198>
	}
	else
	{
		len = HTTPC_FAILED;
 80018d4:	2300      	movs	r3, #0
 80018d6:	82bb      	strh	r3, [r7, #20]
	}

	return len;
 80018d8:	8abb      	ldrh	r3, [r7, #20]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000155 	.word	0x20000155
 80018e8:	08007d10 	.word	0x08007d10
 80018ec:	08007d24 	.word	0x08007d24
 80018f0:	08007d30 	.word	0x08007d30
 80018f4:	08007d44 	.word	0x08007d44
 80018f8:	08007d5c 	.word	0x08007d5c
 80018fc:	08007d70 	.word	0x08007d70
 8001900:	08007d98 	.word	0x08007d98
 8001904:	08007db8 	.word	0x08007db8
 8001908:	08007dd0 	.word	0x08007dd0
 800190c:	08007e34 	.word	0x08007e34
 8001910:	08007e30 	.word	0x08007e30
 8001914:	20000148 	.word	0x20000148

08001918 <httpc_recv>:


// return: received data length
uint16_t httpc_recv(uint8_t * buf, uint16_t len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
	uint16_t recvlen;

	if(httpc_isConnected == HTTPC_TRUE)
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <httpc_recv+0x4c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d113      	bne.n	8001954 <httpc_recv+0x3c>
	{
		if(len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001932:	4293      	cmp	r3, r2
 8001934:	d902      	bls.n	800193c <httpc_recv+0x24>
 8001936:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800193a:	807b      	strh	r3, [r7, #2]
		recvlen = recv(httpsock, buf, len);
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <httpc_recv+0x50>)
 800193e:	f993 3000 	ldrsb.w	r3, [r3]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	f003 f959 	bl	8004c00 <recv>
 800194e:	4603      	mov	r3, r0
 8001950:	81fb      	strh	r3, [r7, #14]
 8001952:	e001      	b.n	8001958 <httpc_recv+0x40>
	}
	else
	{
		recvlen = HTTPC_FAILED;
 8001954:	2300      	movs	r3, #0
 8001956:	81fb      	strh	r3, [r7, #14]
	}

	return recvlen;
 8001958:	89fb      	ldrh	r3, [r7, #14]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000155 	.word	0x20000155
 8001968:	20000148 	.word	0x20000148

0800196c <get_httpc_any_port>:
}


// return: source port number for tcp client
uint16_t get_httpc_any_port(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	if(httpc_any_port)
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <get_httpc_any_port+0x74>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d014      	beq.n	80019a2 <get_httpc_any_port+0x36>
	{
		if((httpc_any_port >= HTTP_CLIENT_PORT_MIN) && (httpc_any_port < HTTP_CLIENT_PORT_MAX)) {
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <get_httpc_any_port+0x74>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 8001980:	d30c      	bcc.n	800199c <get_httpc_any_port+0x30>
 8001982:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <get_httpc_any_port+0x74>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800198a:	4293      	cmp	r3, r2
 800198c:	d006      	beq.n	800199c <get_httpc_any_port+0x30>
			httpc_any_port++;
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <get_httpc_any_port+0x74>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <get_httpc_any_port+0x74>)
 8001998:	801a      	strh	r2, [r3, #0]
 800199a:	e002      	b.n	80019a2 <get_httpc_any_port+0x36>
		} else {
			httpc_any_port = 0;
 800199c:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <get_httpc_any_port+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	801a      	strh	r2, [r3, #0]
		}
	}

	if(httpc_any_port < HTTP_CLIENT_PORT_MIN)
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <get_httpc_any_port+0x74>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 80019aa:	d214      	bcs.n	80019d6 <get_httpc_any_port+0x6a>
	{
		// todo: get random seed value
		httpc_any_port = (rand() % 10000) + 46000; // 46000 ~ 55999
 80019ac:	f004 fe6e 	bl	800668c <rand>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <get_httpc_any_port+0x78>)
 80019b4:	fb82 1203 	smull	r1, r2, r2, r3
 80019b8:	1311      	asrs	r1, r2, #12
 80019ba:	17da      	asrs	r2, r3, #31
 80019bc:	1a8a      	subs	r2, r1, r2
 80019be:	f242 7110 	movw	r1, #10000	@ 0x2710
 80019c2:	fb01 f202 	mul.w	r2, r1, r2
 80019c6:	1a9a      	subs	r2, r3, r2
 80019c8:	b293      	uxth	r3, r2
 80019ca:	f5a3 4398 	sub.w	r3, r3, #19456	@ 0x4c00
 80019ce:	3b50      	subs	r3, #80	@ 0x50
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <get_httpc_any_port+0x74>)
 80019d4:	801a      	strh	r2, [r3, #0]
	}

	return httpc_any_port;
 80019d6:	4b02      	ldr	r3, [pc, #8]	@ (80019e0 <get_httpc_any_port+0x74>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000152 	.word	0x20000152
 80019e4:	68db8bad 	.word	0x68db8bad

080019e8 <check_cable_connection>:
char firmware_buffer[MAX_FIRMWARE_SIZE] = {0};

wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 80019ee:	480e      	ldr	r0, [pc, #56]	@ (8001a28 <check_cable_connection+0x40>)
 80019f0:	f005 f840 	bl	8006a74 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	4619      	mov	r1, r3
 80019f8:	200f      	movs	r0, #15
 80019fa:	f004 f9b1 	bl	8005d60 <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d106      	bne.n	8001a12 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8001a04:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <check_cable_connection+0x44>)
 8001a06:	f005 f835 	bl	8006a74 <puts>
			delay(1000);
 8001a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a0e:	f000 fe57 	bl	80026c0 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0ea      	beq.n	80019ee <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <check_cable_connection+0x48>)
 8001a1a:	f005 f82b 	bl	8006a74 <puts>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08007eb8 	.word	0x08007eb8
 8001a2c:	08007ed4 	.word	0x08007ed4
 8001a30:	08007eec 	.word	0x08007eec

08001a34 <display_phy_config>:

void display_phy_config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	200b      	movs	r0, #11
 8001a40:	f004 f98e 	bl	8005d60 <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8001a44:	793b      	ldrb	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 8001a4a:	4816      	ldr	r0, [pc, #88]	@ (8001aa4 <display_phy_config+0x70>)
 8001a4c:	f004 ffa2 	bl	8006994 <iprintf>
 8001a50:	e002      	b.n	8001a58 <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8001a52:	4815      	ldr	r0, [pc, #84]	@ (8001aa8 <display_phy_config+0x74>)
 8001a54:	f004 ff9e 	bl	8006994 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 8001a58:	797b      	ldrb	r3, [r7, #5]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <display_phy_config+0x2e>
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <display_phy_config+0x78>)
 8001a60:	e000      	b.n	8001a64 <display_phy_config+0x30>
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <display_phy_config+0x7c>)
 8001a64:	4619      	mov	r1, r3
 8001a66:	4813      	ldr	r0, [pc, #76]	@ (8001ab4 <display_phy_config+0x80>)
 8001a68:	f004 ff94 	bl	8006994 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <display_phy_config+0x42>
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <display_phy_config+0x84>)
 8001a74:	e000      	b.n	8001a78 <display_phy_config+0x44>
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <display_phy_config+0x88>)
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4811      	ldr	r0, [pc, #68]	@ (8001ac0 <display_phy_config+0x8c>)
 8001a7c:	f004 ff8a 	bl	8006994 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <display_phy_config+0x56>
 8001a86:	230a      	movs	r3, #10
 8001a88:	e000      	b.n	8001a8c <display_phy_config+0x58>
 8001a8a:	2364      	movs	r3, #100	@ 0x64
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480d      	ldr	r0, [pc, #52]	@ (8001ac4 <display_phy_config+0x90>)
 8001a90:	f004 ff80 	bl	8006994 <iprintf>
  printf("\r\n...");
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <display_phy_config+0x94>)
 8001a96:	f004 ff7d 	bl	8006994 <iprintf>

}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08007f00 	.word	0x08007f00
 8001aa8:	08007f2c 	.word	0x08007f2c
 8001aac:	08007f58 	.word	0x08007f58
 8001ab0:	08007f60 	.word	0x08007f60
 8001ab4:	08007f6c 	.word	0x08007f6c
 8001ab8:	08007f8c 	.word	0x08007f8c
 8001abc:	08007f98 	.word	0x08007f98
 8001ac0:	08007fa4 	.word	0x08007fa4
 8001ac4:	08007fc0 	.word	0x08007fc0
 8001ac8:	08007fd8 	.word	0x08007fd8

08001acc <main>:

int main()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af02      	add	r7, sp, #8

	uint16_t len = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	80fb      	strh	r3, [r7, #6]

	/*Enable FPU*/
	fpu_enable();
 8001ad6:	f7ff fcad 	bl	8001434 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 8001ada:	f000 fe33 	bl	8002744 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8001ade:	f000 fe67 	bl	80027b0 <debug_uart_init>



	/*Initialize LED*/
	led_init();
 8001ae2:	f7fe fc2d 	bl	8000340 <led_init>

	/*Initialize Push button*/
	button_init();
 8001ae6:	f7fe fc49 	bl	800037c <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8001aea:	f7fe fbe1 	bl	80002b0 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8001aee:	f7fe fc11 	bl	8000314 <start_conversion>

    wizchip_cs_pin_init();
 8001af2:	f000 ff0b 	bl	800290c <wizchip_cs_pin_init>
    w5500_spi_init();
 8001af6:	f000 ff8b 	bl	8002a10 <w5500_spi_init>
    w5500_init();
 8001afa:	f000 ffb5 	bl	8002a68 <w5500_init>

    check_cable_connection();
 8001afe:	f7ff ff73 	bl	80019e8 <check_cable_connection>
    display_phy_config();
 8001b02:	f7ff ff97 	bl	8001a34 <display_phy_config>


    /*Run DNS*/
    if(process_dns())
 8001b06:	f000 f89b 	bl	8001c40 <process_dns>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <main+0x4a>
    {
    	flag_process_dns_success =  FLG_SET;
 8001b10:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <main+0x12c>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
    }

    if(flag_process_dns_success)
 8001b16:	4b38      	ldr	r3, [pc, #224]	@ (8001bf8 <main+0x12c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d013      	beq.n	8001b46 <main+0x7a>
    {
	    printf(" # DNS: %s => %d.%d.%d.%d\r\n", domain_name, domain_ip[0], domain_ip[1], domain_ip[2], domain_ip[3]);
 8001b1e:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <main+0x130>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <main+0x130>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <main+0x130>)
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <main+0x130>)
 8001b32:	78db      	ldrb	r3, [r3, #3]
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	9200      	str	r2, [sp, #0]
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	4930      	ldr	r1, [pc, #192]	@ (8001c00 <main+0x134>)
 8001b3e:	4831      	ldr	r0, [pc, #196]	@ (8001c04 <main+0x138>)
 8001b40:	f004 ff28 	bl	8006994 <iprintf>
 8001b44:	e002      	b.n	8001b4c <main+0x80>

    }
    else
    {
    	printf("DNS Failed\r\n");
 8001b46:	4830      	ldr	r0, [pc, #192]	@ (8001c08 <main+0x13c>)
 8001b48:	f004 ff94 	bl	8006a74 <puts>
    }

    /*Initialize http client*/
    httpc_init(SOCK_HTTP_CLIENT,domain_ip,HTTP_PORT,g_send_buff, g_recv_buff);
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <main+0x140>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4b2f      	ldr	r3, [pc, #188]	@ (8001c10 <main+0x144>)
 8001b52:	2250      	movs	r2, #80	@ 0x50
 8001b54:	4929      	ldr	r1, [pc, #164]	@ (8001bfc <main+0x130>)
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7ff fc96 	bl	8001488 <httpc_init>

	while(1)
	{
		httpc_connection_handler();
 8001b5c:	f7ff fcd2 	bl	8001504 <httpc_connection_handler>
		if(httpc_isSockOpen)
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <main+0x148>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <main+0xa0>
		{
			httpc_connect();
 8001b68:	f7ff fdbe 	bl	80016e8 <httpc_connect>
		}
		if(httpc_isConnected)
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <main+0x14c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f3      	beq.n	8001b5c <main+0x90>
		{
		  if(flag_http_request_sent == FLG_RESET)
 8001b74:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <main+0x150>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d111      	bne.n	8001ba0 <main+0xd4>
		  {

			  /*Get firmware update text file*/
			  request.method = (uint8_t *)HTTP_GET;
 8001b7c:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <main+0x154>)
 8001b7e:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <main+0x158>)
 8001b80:	601a      	str	r2, [r3, #0]
			  request.uri = (uint8_t *)HTTP_GET_BIN_REQUEST;
 8001b82:	4b27      	ldr	r3, [pc, #156]	@ (8001c20 <main+0x154>)
 8001b84:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <main+0x15c>)
 8001b86:	605a      	str	r2, [r3, #4]
			  request.host = (uint8_t *)domain_name;
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <main+0x154>)
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <main+0x134>)
 8001b8c:	609a      	str	r2, [r3, #8]

			  httpc_send(&request,g_recv_buff,g_send_buff,0);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <main+0x144>)
 8001b92:	491e      	ldr	r1, [pc, #120]	@ (8001c0c <main+0x140>)
 8001b94:	4822      	ldr	r0, [pc, #136]	@ (8001c20 <main+0x154>)
 8001b96:	f7ff fdd3 	bl	8001740 <httpc_send>

			  flag_http_request_sent = FLG_SET;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <main+0x150>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
		  }

		  /*Get received data length*/
		   httpc_isReceived =  getSn_RX_RSR(SOCK_HTTP_CLIENT);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f003 feb8 	bl	8005916 <getSn_RX_RSR>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <main+0x160>)
 8001bac:	801a      	strh	r2, [r3, #0]

		   if(httpc_isReceived > 0)
 8001bae:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <main+0x160>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0d2      	beq.n	8001b5c <main+0x90>
		   {


			   len =  httpc_recv(g_recv_buff, httpc_isReceived);
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <main+0x160>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <main+0x140>)
 8001bbe:	f7ff feab 	bl	8001918 <httpc_recv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
			   firmware_size =  extract_content_length((char *)g_recv_buff);
 8001bc6:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <main+0x140>)
 8001bc8:	f7ff f86c 	bl	8000ca4 <extract_content_length>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <main+0x164>)
 8001bd2:	601a      	str	r2, [r3, #0]

			   if(len > firmware_size)
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <main+0x164>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d9be      	bls.n	8001b5c <main+0x90>
			   {
				   //get_firmware_binary((char *)g_recv_buff, "stream\r\n\r\n", (char *)firmware_buffer,firmware_size);

				   get_firmware_binary((char *)g_recv_buff, "octet", (char *)firmware_buffer,firmware_size);
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <main+0x164>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <main+0x168>)
 8001be4:	4914      	ldr	r1, [pc, #80]	@ (8001c38 <main+0x16c>)
 8001be6:	4809      	ldr	r0, [pc, #36]	@ (8001c0c <main+0x140>)
 8001be8:	f7ff f8c2 	bl	8000d70 <get_firmware_binary>

				   /*Write the firmware update to memory*/
				   firmware_update();
 8001bec:	f7ff f8f0 	bl	8000dd0 <firmware_update>

				   /*Jump to new memory location to run firmware*/
				   jump_to_app(NEW_FIRMWARE_START_ADDRESS);
 8001bf0:	4812      	ldr	r0, [pc, #72]	@ (8001c3c <main+0x170>)
 8001bf2:	f7ff f821 	bl	8000c38 <jump_to_app>
		httpc_connection_handler();
 8001bf6:	e7b1      	b.n	8001b5c <main+0x90>
 8001bf8:	20000158 	.word	0x20000158
 8001bfc:	2000015c 	.word	0x2000015c
 8001c00:	2000001c 	.word	0x2000001c
 8001c04:	08007fe0 	.word	0x08007fe0
 8001c08:	08007ffc 	.word	0x08007ffc
 8001c0c:	20003810 	.word	0x20003810
 8001c10:	20001cb8 	.word	0x20001cb8
 8001c14:	20000154 	.word	0x20000154
 8001c18:	20000155 	.word	0x20000155
 8001c1c:	20000159 	.word	0x20000159
 8001c20:	20000000 	.word	0x20000000
 8001c24:	08008008 	.word	0x08008008
 8001c28:	0800800c 	.word	0x0800800c
 8001c2c:	20000156 	.word	0x20000156
 8001c30:	20005368 	.word	0x20005368
 8001c34:	2000536c 	.word	0x2000536c
 8001c38:	0800802c 	.word	0x0800802c
 8001c3c:	0800c000 	.word	0x0800c000

08001c40 <process_dns>:
		}
	}
}

int8_t process_dns(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71bb      	strb	r3, [r7, #6]
	uint8_t dns_retry = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	71fb      	strb	r3, [r7, #7]

	DNS_init(SOCK_DNS, data_buff);
 8001c4e:	4913      	ldr	r1, [pc, #76]	@ (8001c9c <process_dns+0x5c>)
 8001c50:	2004      	movs	r0, #4
 8001c52:	f7fe ff4f 	bl	8000af4 <DNS_init>

	while(1)
	{
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <process_dns+0x60>)
 8001c58:	4912      	ldr	r1, [pc, #72]	@ (8001ca4 <process_dns+0x64>)
 8001c5a:	4813      	ldr	r0, [pc, #76]	@ (8001ca8 <process_dns+0x68>)
 8001c5c:	f7fe ff66 	bl	8000b2c <DNS_run>
 8001c60:	4603      	mov	r3, r0
 8001c62:	71bb      	strb	r3, [r7, #6]
 8001c64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d00e      	beq.n	8001c8a <process_dns+0x4a>
		{
			break;
		}
		else
		{
			dns_retry++;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
			if(dns_retry <= 2)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d804      	bhi.n	8001c82 <process_dns+0x42>
			{
				printf("DNS timeout occurred retry [%d]\n\r",dns_retry);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480b      	ldr	r0, [pc, #44]	@ (8001cac <process_dns+0x6c>)
 8001c7e:	f004 fe89 	bl	8006994 <iprintf>
			}
			if(dns_retry > 2)
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d802      	bhi.n	8001c8e <process_dns+0x4e>
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 8001c88:	e7e5      	b.n	8001c56 <process_dns+0x16>
			break;
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <process_dns+0x50>
			{
				 break;
 8001c8e:	bf00      	nop
			}
		}
	}

	return ret;
 8001c90:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000160 	.word	0x20000160
 8001ca0:	2000015c 	.word	0x2000015c
 8001ca4:	2000001c 	.word	0x2000001c
 8001ca8:	20000018 	.word	0x20000018
 8001cac:	08008034 	.word	0x08008034

08001cb0 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8001cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8001db0 <spi1_gpio_init+0x100>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8001db0 <spi1_gpio_init+0x100>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8001ccc:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a38      	ldr	r2, [pc, #224]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cd2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cd6:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8001cd8:	4b36      	ldr	r3, [pc, #216]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a35      	ldr	r2, [pc, #212]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ce2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8001ce4:	4b33      	ldr	r3, [pc, #204]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a32      	ldr	r2, [pc, #200]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cee:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8001cf0:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cfa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2c      	ldr	r2, [pc, #176]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d06:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8001d08:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a29      	ldr	r2, [pc, #164]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d12:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a26      	ldr	r2, [pc, #152]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d1e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8001d20:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8001d2c:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a20      	ldr	r2, [pc, #128]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d36:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8001d38:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d42:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d4a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001d4e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d5a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d62:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001d66:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a0e      	ldr	r2, [pc, #56]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001d7e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d8a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <spi1_gpio_init+0x104>)
 8001d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d96:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <spi1_gpio_init+0x100>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <spi1_gpio_init+0x100>)
 8001d9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001da2:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000

08001db8 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <spi_init+0x12>
	{
		return DEV_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e05a      	b.n	8001e80 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <spi_init+0x26>
	{
		spi1_gpio_init();
 8001dda:	f7ff ff69 	bl	8001cb0 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001df4:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e42:	ea42 0103 	orr.w	r1, r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	f003 0104 	and.w	r1, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f003 0210 	and.w	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 8001e9c:	f000 fc2e 	bl	80026fc <get_tick>
 8001ea0:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <spi_transmit+0x26>
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e106      	b.n	80020c0 <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	88fa      	ldrh	r2, [r7, #6]
 8001eca:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eec:	d10f      	bne.n	8001f0e <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001efc:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f0c:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f18:	2b40      	cmp	r3, #64	@ 0x40
 8001f1a:	d007      	beq.n	8001f2c <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f2a:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f36:	2b40      	cmp	r3, #64	@ 0x40
 8001f38:	d007      	beq.n	8001f4a <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f48:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f52:	d14e      	bne.n	8001ff2 <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <spi_transmit+0xda>
 8001f5c:	8bfb      	ldrh	r3, [r7, #30]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d141      	bne.n	8001fe6 <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	1c9a      	adds	r2, r3, #2
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 8001f86:	e02e      	b.n	8001fe6 <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	881a      	ldrh	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	1c9a      	adds	r2, r3, #2
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	865a      	strh	r2, [r3, #50]	@ 0x32
 8001fba:	e014      	b.n	8001fe6 <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8001fbc:	f000 fb9e 	bl	80026fc <get_tick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d803      	bhi.n	8001fd4 <spi_transmit+0x14c>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd2:	d102      	bne.n	8001fda <spi_transmit+0x152>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e06c      	b.n	80020c0 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1cb      	bne.n	8001f88 <spi_transmit+0x100>
 8001ff0:	e051      	b.n	8002096 <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <spi_transmit+0x178>
 8001ffa:	8bfb      	ldrh	r3, [r7, #30]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d145      	bne.n	800208c <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	330c      	adds	r3, #12
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 8002026:	e031      	b.n	800208c <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d013      	beq.n	800205e <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	865a      	strh	r2, [r3, #50]	@ 0x32
 800205c:	e016      	b.n	800208c <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 800205e:	f000 fb4d 	bl	80026fc <get_tick>
 8002062:	4602      	mov	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d803      	bhi.n	8002076 <spi_transmit+0x1ee>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d102      	bne.n	800207c <spi_transmit+0x1f4>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	e019      	b.n	80020c0 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1c8      	bne.n	8002028 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <spi_transmit+0x236>
	{
		return DEV_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 80020be:	2300      	movs	r3, #0

	}

}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d007      	beq.n	80020f6 <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	e0d1      	b.n	800229a <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020fe:	d112      	bne.n	8002126 <spi_receive+0x5e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10e      	bne.n	8002126 <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2204      	movs	r2, #4
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f8c0 	bl	80022a2 <spi_transmit_receive>
 8002122:	4603      	mov	r3, r0
 8002124:	e0b9      	b.n	800229a <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 8002126:	f000 fae9 	bl	80026fc <get_tick>
 800212a:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <spi_receive+0x70>
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	e0a8      	b.n	800229a <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2204      	movs	r2, #4
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	88fa      	ldrh	r2, [r7, #6]
 8002160:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002184:	2b40      	cmp	r3, #64	@ 0x40
 8002186:	d007      	beq.n	8002198 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002196:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d16c      	bne.n	800227a <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 80021a0:	e033      	b.n	800220a <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f103 020c 	add.w	r2, r3, #12
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80021da:	e016      	b.n	800220a <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80021dc:	f000 fa8e 	bl	80026fc <get_tick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d803      	bhi.n	80021f4 <spi_receive+0x12c>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d102      	bne.n	80021fa <spi_receive+0x132>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	e047      	b.n	800229a <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1c6      	bne.n	80021a2 <spi_receive+0xda>
 8002214:	e036      	b.n	8002284 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222e:	b292      	uxth	r2, r2
 8002230:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	1c9a      	adds	r2, r3, #2
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800224a:	e016      	b.n	800227a <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 800224c:	f000 fa56 	bl	80026fc <get_tick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d803      	bhi.n	8002264 <spi_receive+0x19c>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002262:	d102      	bne.n	800226a <spi_receive+0x1a2>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	e00f      	b.n	800229a <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1c8      	bne.n	8002216 <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8002298:	7dfb      	ldrb	r3, [r7, #23]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08a      	sub	sp, #40	@ 0x28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 80022ba:	f000 fa1f 	bl	80026fc <get_tick>
 80022be:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c6:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	887a      	ldrh	r2, [r7, #2]
 80022fa:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d007      	beq.n	800231a <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002318:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002322:	d17e      	bne.n	8002422 <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <spi_transmit_receive+0x90>
 800232c:	8a7b      	ldrh	r3, [r7, #18]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d16c      	bne.n	800240c <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002336:	881a      	ldrh	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	1c9a      	adds	r2, r3, #2
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002356:	e059      	b.n	800240c <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01b      	beq.n	800239e <spi_transmit_receive+0xfc>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d016      	beq.n	800239e <spi_transmit_receive+0xfc>
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	2b01      	cmp	r3, #1
 8002374:	d113      	bne.n	800239e <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	1c9a      	adds	r2, r3, #2
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d019      	beq.n	80023e0 <spi_transmit_receive+0x13e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d014      	beq.n	80023e0 <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c0:	b292      	uxth	r2, r2
 80023c2:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c8:	1c9a      	adds	r2, r3, #2
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 80023dc:	2301      	movs	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 80023e0:	f000 f98c 	bl	80026fc <get_tick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d80d      	bhi.n	800240c <spi_transmit_receive+0x16a>
 80023f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d009      	beq.n	800240c <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8002406:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800240a:	e08f      	b.n	800252c <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1a0      	bne.n	8002358 <spi_transmit_receive+0xb6>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d19b      	bne.n	8002358 <spi_transmit_receive+0xb6>
 8002420:	e082      	b.n	8002528 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <spi_transmit_receive+0x18e>
 800242a:	8a7b      	ldrh	r3, [r7, #18]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d171      	bne.n	8002514 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	330c      	adds	r3, #12
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002456:	e05d      	b.n	8002514 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01c      	beq.n	80024a0 <spi_transmit_receive+0x1fe>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <spi_transmit_receive+0x1fe>
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	2b01      	cmp	r3, #1
 8002474:	d114      	bne.n	80024a0 <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d019      	beq.n	80024e2 <spi_transmit_receive+0x240>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d014      	beq.n	80024e2 <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 80024de:	2301      	movs	r3, #1
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 80024e2:	f000 f90b 	bl	80026fc <get_tick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d803      	bhi.n	80024fa <spi_transmit_receive+0x258>
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d102      	bne.n	8002500 <spi_transmit_receive+0x25e>
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 800250e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002512:	e00b      	b.n	800252c <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d19c      	bne.n	8002458 <spi_transmit_receive+0x1b6>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d197      	bne.n	8002458 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 8002528:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800252c:	4618      	mov	r0, r3
 800252e:	3728      	adds	r7, #40	@ 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	return 1;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_kill>:

int _kill(int pid, int sig)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800254e:	f004 fc25 	bl	8006d9c <__errno>
 8002552:	4603      	mov	r3, r0
 8002554:	2216      	movs	r2, #22
 8002556:	601a      	str	r2, [r3, #0]
	return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_exit>:

void _exit (int status)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ffe7 	bl	8002544 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002576:	bf00      	nop
 8002578:	e7fd      	b.n	8002576 <_exit+0x12>

0800257a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e00a      	b.n	80025a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800258c:	f3af 8000 	nop.w
 8002590:	4601      	mov	r1, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	60ba      	str	r2, [r7, #8]
 8002598:	b2ca      	uxtb	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	dbf0      	blt.n	800258c <_read+0x12>
	}

return len;
 80025aa:	687b      	ldr	r3, [r7, #4]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e009      	b.n	80025da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8e2 	bl	8002798 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbf1      	blt.n	80025c6 <_write+0x12>
	}
	return len;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_close>:

int _close(int file)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	return -1;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002614:	605a      	str	r2, [r3, #4]
	return 0;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_isatty>:

int _isatty(int file)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	return 1;
 800262c:	2301      	movs	r3, #1
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
	return 0;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	@ (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f004 fb8a 	bl	8006d9c <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	220c      	movs	r2, #12
 800268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20020000 	.word	0x20020000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	20006ec4 	.word	0x20006ec4
 80026bc:	20007568 	.word	0x20007568

080026c0 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 80026c8:	f000 f818 	bl	80026fc <get_tick>
 80026cc:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d002      	beq.n	80026e0 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3301      	adds	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 80026e0:	bf00      	nop
 80026e2:	f000 f80b 	bl	80026fc <get_tick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d8f7      	bhi.n	80026e2 <delay+0x22>

}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <get_tick>:

uint32_t get_tick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002700:	b672      	cpsid	i
}
 8002702:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <get_tick+0x24>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <get_tick+0x28>)
 800270a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800270c:	b662      	cpsie	i
}
 800270e:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <get_tick+0x28>)
 8002712:	681b      	ldr	r3, [r3, #0]

}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20006ec8 	.word	0x20006ec8
 8002724:	20006ecc 	.word	0x20006ecc

08002728 <tick_increment>:
static void tick_increment(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 800272c:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <tick_increment+0x18>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	4a03      	ldr	r2, [pc, #12]	@ (8002740 <tick_increment+0x18>)
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	20006ec8 	.word	0x20006ec8

08002744 <timebase_init>:
void timebase_init(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002748:	b672      	cpsid	i
}
 800274a:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 800274c:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <timebase_init+0x44>)
 800274e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002752:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <timebase_init+0x44>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <timebase_init+0x44>)
 800275c:	2204      	movs	r2, #4
 800275e:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <timebase_init+0x44>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <timebase_init+0x44>)
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <timebase_init+0x44>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <timebase_init+0x44>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002778:	b662      	cpsie	i
}
 800277a:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	tick_increment();
 8002790:	f7ff ffca 	bl	8002728 <tick_increment>
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f84f 	bl	8002844 <uart_write>
	return ch;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <debug_uart_init>:

void debug_uart_init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <debug_uart_init+0x84>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002834 <debug_uart_init+0x84>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <debug_uart_init+0x88>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <debug_uart_init+0x88>)
 80027c6:	f023 0310 	bic.w	r3, r3, #16
 80027ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80027cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002838 <debug_uart_init+0x88>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <debug_uart_init+0x88>)
 80027d2:	f043 0320 	orr.w	r3, r3, #32
 80027d6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 80027d8:	4b17      	ldr	r3, [pc, #92]	@ (8002838 <debug_uart_init+0x88>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <debug_uart_init+0x88>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80027e4:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <debug_uart_init+0x88>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a13      	ldr	r2, [pc, #76]	@ (8002838 <debug_uart_init+0x88>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <debug_uart_init+0x88>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a10      	ldr	r2, [pc, #64]	@ (8002838 <debug_uart_init+0x88>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <debug_uart_init+0x88>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a0d      	ldr	r2, [pc, #52]	@ (8002838 <debug_uart_init+0x88>)
 8002802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002806:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8002808:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <debug_uart_init+0x84>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <debug_uart_init+0x84>)
 800280e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002812:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8002814:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002818:	4808      	ldr	r0, [pc, #32]	@ (800283c <debug_uart_init+0x8c>)
 800281a:	f000 f83f 	bl	800289c <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 800281e:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <debug_uart_init+0x90>)
 8002820:	2208      	movs	r2, #8
 8002822:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <debug_uart_init+0x90>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a05      	ldr	r2, [pc, #20]	@ (8002840 <debug_uart_init+0x90>)
 800282a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	40020000 	.word	0x40020000
 800283c:	00f42400 	.word	0x00f42400
 8002840:	40004400 	.word	0x40004400

08002844 <uart_write>:



static void uart_write(int ch)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 800284c:	bf00      	nop
 800284e:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <uart_write+0x2c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f9      	beq.n	800284e <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <uart_write+0x2c>)
 800285e:	b2db      	uxtb	r3, r3
 8002860:	6053      	str	r3, [r2, #4]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40004400 	.word	0x40004400

08002874 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	085a      	lsrs	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	441a      	add	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	b29b      	uxth	r3, r3
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80028a6:	6839      	ldr	r1, [r7, #0]
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ffe3 	bl	8002874 <compute_uart_bd>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <uart_set_baudrate+0x24>)
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40004400 	.word	0x40004400

080028c4 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <ip_assigned_callback+0x14>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	200073c0 	.word	0x200073c0

080028dc <ip_update_callback>:

void ip_update_callback(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <ip_update_callback+0x14>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	200073c0 	.word	0x200073c0

080028f4 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 80028f8:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <ip_conflict_callback+0x14>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	200073c0 	.word	0x200073c0

0800290c <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <wizchip_cs_pin_init+0x34>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <wizchip_cs_pin_init+0x34>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <wizchip_cs_pin_init+0x38>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a08      	ldr	r2, [pc, #32]	@ (8002944 <wizchip_cs_pin_init+0x38>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002926:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <wizchip_cs_pin_init+0x38>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a05      	ldr	r2, [pc, #20]	@ (8002944 <wizchip_cs_pin_init+0x38>)
 800292e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002932:	6013      	str	r3, [r2, #0]

}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000

08002948 <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <wizchip_pin_cs_select+0x1c>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <wizchip_pin_cs_select+0x1c>)
 8002952:	f023 0310 	bic.w	r3, r3, #16
 8002956:	6153      	str	r3, [r2, #20]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40020000 	.word	0x40020000

08002968 <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <wizchip_pin_cs_deselect+0x1c>)
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <wizchip_pin_cs_deselect+0x1c>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	6153      	str	r3, [r2, #20]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40020000 	.word	0x40020000

08002988 <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 8002994:	887a      	ldrh	r2, [r7, #2]
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4803      	ldr	r0, [pc, #12]	@ (80029ac <wizchip_read_burst+0x24>)
 800299e:	f7ff fb93 	bl	80020c8 <spi_receive>

}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20006ed0 	.word	0x20006ed0

080029b0 <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ffe4 	bl	8002988 <wizchip_read_burst>
	return byte;
 80029c0:	79fb      	ldrb	r3, [r7, #7]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4803      	ldr	r0, [pc, #12]	@ (80029f0 <wizchip_write_burst+0x24>)
 80029e2:	f7ff fa51 	bl	8001e88 <spi_transmit>

}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20006ed0 	.word	0x20006ed0

080029f4 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ffe2 	bl	80029cc <wizchip_write_burst>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a16:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <w5500_spi_init+0x54>)
 8002a18:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a20:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8002a22:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a28:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a40:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a42:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a4e:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8002a54:	4802      	ldr	r0, [pc, #8]	@ (8002a60 <w5500_spi_init+0x50>)
 8002a56:	f7ff f9af 	bl	8001db8 <spi_init>

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20006ed0 	.word	0x20006ed0
 8002a64:	40013000 	.word	0x40013000

08002a68 <w5500_init>:


 void w5500_init(void)
 {
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b093      	sub	sp, #76	@ 0x4c
 8002a6c:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 8002a6e:	4a4f      	ldr	r2, [pc, #316]	@ (8002bac <w5500_init+0x144>)
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a78:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002a7c:	f107 0214 	add.w	r2, r7, #20
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 fa96 	bl	8005fb8 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 8002a8c:	4948      	ldr	r1, [pc, #288]	@ (8002bb0 <w5500_init+0x148>)
 8002a8e:	4849      	ldr	r0, [pc, #292]	@ (8002bb4 <w5500_init+0x14c>)
 8002a90:	f003 f8e8 	bl	8005c64 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 8002a94:	4948      	ldr	r1, [pc, #288]	@ (8002bb8 <w5500_init+0x150>)
 8002a96:	4849      	ldr	r0, [pc, #292]	@ (8002bbc <w5500_init+0x154>)
 8002a98:	f003 f90a 	bl	8005cb0 <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 8002a9c:	4948      	ldr	r1, [pc, #288]	@ (8002bc0 <w5500_init+0x158>)
 8002a9e:	4849      	ldr	r0, [pc, #292]	@ (8002bc4 <w5500_init+0x15c>)
 8002aa0:	f003 f932 	bl	8005d08 <reg_wizchip_spiburst_cbfunc>

	 /*Update RX and TX buffers of socket1 to 8KB */
	 setSn_RXBUF_SIZE(1,8);
 8002aa4:	2108      	movs	r1, #8
 8002aa6:	f641 6028 	movw	r0, #7720	@ 0x1e28
 8002aaa:	f002 fddd 	bl	8005668 <WIZCHIP_WRITE>
	 setSn_TXBUF_SIZE(1,8);
 8002aae:	2108      	movs	r1, #8
 8002ab0:	f641 7028 	movw	r0, #7976	@ 0x1f28
 8002ab4:	f002 fdd8 	bl	8005668 <WIZCHIP_WRITE>


	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 8002ab8:	2206      	movs	r2, #6
 8002aba:	4943      	ldr	r1, [pc, #268]	@ (8002bc8 <w5500_init+0x160>)
 8002abc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002ac0:	f002 fe80 	bl	80057c4 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 8002ac4:	4941      	ldr	r1, [pc, #260]	@ (8002bcc <w5500_init+0x164>)
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f001 fbaa 	bl	8004220 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 8002acc:	4a40      	ldr	r2, [pc, #256]	@ (8002bd0 <w5500_init+0x168>)
 8002ace:	4941      	ldr	r1, [pc, #260]	@ (8002bd4 <w5500_init+0x16c>)
 8002ad0:	4841      	ldr	r0, [pc, #260]	@ (8002bd8 <w5500_init+0x170>)
 8002ad2:	f000 f903 	bl	8002cdc <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 8002ad6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002ada:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002adc:	e004      	b.n	8002ae8 <w5500_init+0x80>
	 {
		 DHCP_run();
 8002ade:	f001 f9e7 	bl	8003eb0 <DHCP_run>
		 timeout_counter--;
 8002ae2:	8bfb      	ldrh	r3, [r7, #30]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8002bdc <w5500_init+0x174>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f083 0301 	eor.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <w5500_init+0x96>
 8002af8:	8bfb      	ldrh	r3, [r7, #30]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ef      	bne.n	8002ade <w5500_init+0x76>
	 }

	 if(!is_ip_assigned)
 8002afe:	4b37      	ldr	r3, [pc, #220]	@ (8002bdc <w5500_init+0x174>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d149      	bne.n	8002ba2 <w5500_init+0x13a>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8002b0e:	4834      	ldr	r0, [pc, #208]	@ (8002be0 <w5500_init+0x178>)
 8002b10:	f001 fc30 	bl	8004374 <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 8002b14:	4833      	ldr	r0, [pc, #204]	@ (8002be4 <w5500_init+0x17c>)
 8002b16:	f001 fc4d 	bl	80043b4 <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8002b1a:	4833      	ldr	r0, [pc, #204]	@ (8002be8 <w5500_init+0x180>)
 8002b1c:	f001 fc6a 	bl	80043f4 <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002b20:	4b29      	ldr	r3, [pc, #164]	@ (8002bc8 <w5500_init+0x160>)
 8002b22:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 8002b24:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002b26:	4b28      	ldr	r3, [pc, #160]	@ (8002bc8 <w5500_init+0x160>)
 8002b28:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8002b2a:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002b2c:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <w5500_init+0x160>)
 8002b2e:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8002b30:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002b32:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <w5500_init+0x160>)
 8002b34:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 8002b36:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002b38:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <w5500_init+0x160>)
 8002b3a:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8002b3c:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <w5500_init+0x160>)
 8002b40:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 8002b42:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <w5500_init+0x160>)
 8002b46:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8002b48:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <w5500_init+0x160>)
 8002b4c:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8002b4e:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <w5500_init+0x160>)
 8002b52:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 8002b54:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002b56:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <w5500_init+0x160>)
 8002b58:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8002b5a:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <w5500_init+0x160>)
 8002b5e:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8002b60:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002b62:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <w5500_init+0x160>)
 8002b64:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 8002b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	9308      	str	r3, [sp, #32]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	9307      	str	r3, [sp, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	9306      	str	r3, [sp, #24]
 8002b74:	9605      	str	r6, [sp, #20]
 8002b76:	9504      	str	r5, [sp, #16]
 8002b78:	9403      	str	r4, [sp, #12]
 8002b7a:	9002      	str	r0, [sp, #8]
 8002b7c:	9101      	str	r1, [sp, #4]
 8002b7e:	9200      	str	r2, [sp, #0]
 8002b80:	4673      	mov	r3, lr
 8002b82:	4662      	mov	r2, ip
 8002b84:	4919      	ldr	r1, [pc, #100]	@ (8002bec <w5500_init+0x184>)
 8002b86:	481a      	ldr	r0, [pc, #104]	@ (8002bf0 <w5500_init+0x188>)
 8002b88:	f003 ff7c 	bl	8006a84 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 8002b8c:	4819      	ldr	r0, [pc, #100]	@ (8002bf4 <w5500_init+0x18c>)
 8002b8e:	f003 ff71 	bl	8006a74 <puts>
    printf("%s", temp_buffer);
 8002b92:	4917      	ldr	r1, [pc, #92]	@ (8002bf0 <w5500_init+0x188>)
 8002b94:	4818      	ldr	r0, [pc, #96]	@ (8002bf8 <w5500_init+0x190>)
 8002b96:	f003 fefd 	bl	8006994 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 8002b9a:	480b      	ldr	r0, [pc, #44]	@ (8002bc8 <w5500_init+0x160>)
 8002b9c:	f003 fc7c 	bl	8006498 <wizchip_setnetinfo>
 8002ba0:	e000      	b.n	8002ba4 <w5500_init+0x13c>
		 return;
 8002ba2:	bf00      	nop

 }
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	080080e4 	.word	0x080080e4
 8002bb0:	08002969 	.word	0x08002969
 8002bb4:	08002949 	.word	0x08002949
 8002bb8:	080029f5 	.word	0x080029f5
 8002bbc:	080029b1 	.word	0x080029b1
 8002bc0:	080029cd 	.word	0x080029cd
 8002bc4:	08002989 	.word	0x08002989
 8002bc8:	2000003c 	.word	0x2000003c
 8002bcc:	20006fc0 	.word	0x20006fc0
 8002bd0:	080028f5 	.word	0x080028f5
 8002bd4:	080028dd 	.word	0x080028dd
 8002bd8:	080028c5 	.word	0x080028c5
 8002bdc:	200073c0 	.word	0x200073c0
 8002be0:	20000042 	.word	0x20000042
 8002be4:	2000004a 	.word	0x2000004a
 8002be8:	20000046 	.word	0x20000046
 8002bec:	08008058 	.word	0x08008058
 8002bf0:	20006f14 	.word	0x20006f14
 8002bf4:	080080a4 	.word	0x080080a4
 8002bf8:	080080e0 	.word	0x080080e0

08002bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bfc:	480d      	ldr	r0, [pc, #52]	@ (8002c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bfe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c04:	480c      	ldr	r0, [pc, #48]	@ (8002c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c06:	490d      	ldr	r1, [pc, #52]	@ (8002c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <LoopForever+0xe>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c0c:	e002      	b.n	8002c14 <LoopCopyDataInit>

08002c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c12:	3304      	adds	r3, #4

08002c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c18:	d3f9      	bcc.n	8002c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c48 <LoopForever+0x16>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c20:	e001      	b.n	8002c26 <LoopFillZerobss>

08002c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c24:	3204      	adds	r2, #4

08002c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c28:	d3fb      	bcc.n	8002c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c2a:	f004 f8bd 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c2e:	f7fe ff4d 	bl	8001acc <main>

08002c32 <LoopForever>:

LoopForever:
    b LoopForever
 8002c32:	e7fe      	b.n	8002c32 <LoopForever>
  ldr   r0, =_estack
 8002c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002c40:	080082f0 	.word	0x080082f0
  ldr r2, =_sbss
 8002c44:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002c48:	20007568 	.word	0x20007568

08002c4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC_IRQHandler>
	...

08002c50 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8002c54:	2204      	movs	r2, #4
 8002c56:	4909      	ldr	r1, [pc, #36]	@ (8002c7c <default_ip_assign+0x2c>)
 8002c58:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002c5c:	f002 fdb2 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002c60:	2204      	movs	r2, #4
 8002c62:	4907      	ldr	r1, [pc, #28]	@ (8002c80 <default_ip_assign+0x30>)
 8002c64:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002c68:	f002 fdac 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	4905      	ldr	r1, [pc, #20]	@ (8002c84 <default_ip_assign+0x34>)
 8002c70:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c74:	f002 fda6 	bl	80057c4 <WIZCHIP_WRITE_BUF>
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200073d0 	.word	0x200073d0
 8002c80:	200073d8 	.word	0x200073d8
 8002c84:	200073d4 	.word	0x200073d4

08002c88 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002c8c:	2180      	movs	r1, #128	@ 0x80
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f002 fcea 	bl	8005668 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002c94:	2000      	movs	r0, #0
 8002c96:	f002 fc9b 	bl	80055d0 <WIZCHIP_READ>
   default_ip_assign();
 8002c9a:	f7ff ffd9 	bl	8002c50 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002c9e:	2206      	movs	r2, #6
 8002ca0:	4903      	ldr	r1, [pc, #12]	@ (8002cb0 <default_ip_update+0x28>)
 8002ca2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002ca6:	f002 fd8d 	bl	80057c4 <WIZCHIP_WRITE_BUF>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200073f0 	.word	0x200073f0

08002cb4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f002 fcd4 	bl	8005668 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f002 fc85 	bl	80055d0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002cc6:	2206      	movs	r2, #6
 8002cc8:	4903      	ldr	r1, [pc, #12]	@ (8002cd8 <default_ip_conflict+0x24>)
 8002cca:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002cce:	f002 fd79 	bl	80057c4 <WIZCHIP_WRITE_BUF>
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200073f0 	.word	0x200073f0

08002cdc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8002ce8:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <reg_dhcp_cbfunc+0x50>)
 8002cea:	4a11      	ldr	r2, [pc, #68]	@ (8002d30 <reg_dhcp_cbfunc+0x54>)
 8002cec:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <reg_dhcp_cbfunc+0x58>)
 8002cf0:	4a11      	ldr	r2, [pc, #68]	@ (8002d38 <reg_dhcp_cbfunc+0x5c>)
 8002cf2:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <reg_dhcp_cbfunc+0x60>)
 8002cf6:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <reg_dhcp_cbfunc+0x64>)
 8002cf8:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <reg_dhcp_cbfunc+0x2a>
 8002d00:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <reg_dhcp_cbfunc+0x50>)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <reg_dhcp_cbfunc+0x36>
 8002d0c:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <reg_dhcp_cbfunc+0x58>)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <reg_dhcp_cbfunc+0x42>
 8002d18:	4a08      	ldr	r2, [pc, #32]	@ (8002d3c <reg_dhcp_cbfunc+0x60>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000064 	.word	0x20000064
 8002d30:	08002c51 	.word	0x08002c51
 8002d34:	20000068 	.word	0x20000068
 8002d38:	08002c89 	.word	0x08002c89
 8002d3c:	2000006c 	.word	0x2000006c
 8002d40:	08002cb5 	.word	0x08002cb5

08002d44 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	2206      	movs	r2, #6
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002d54:	f002 fcd6 	bl	8005704 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002d58:	4b72      	ldr	r3, [pc, #456]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002d60:	4b70      	ldr	r3, [pc, #448]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002d68:	4b6e      	ldr	r3, [pc, #440]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2206      	movs	r2, #6
 8002d6e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002d70:	4b6c      	ldr	r3, [pc, #432]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002d78:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002d80:	4b69      	ldr	r3, [pc, #420]	@ (8002f28 <makeDHCPMSG+0x1e4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e1b      	lsrs	r3, r3, #24
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002d8c:	4b66      	ldr	r3, [pc, #408]	@ (8002f28 <makeDHCPMSG+0x1e4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0c1a      	lsrs	r2, r3, #16
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002d9a:	4b63      	ldr	r3, [pc, #396]	@ (8002f28 <makeDHCPMSG+0x1e4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0a1a      	lsrs	r2, r3, #8
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3302      	adds	r3, #2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002da8:	4b5f      	ldr	r3, [pc, #380]	@ (8002f28 <makeDHCPMSG+0x1e4>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3303      	adds	r3, #3
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002db4:	4b5b      	ldr	r3, [pc, #364]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002dbc:	4b59      	ldr	r3, [pc, #356]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330a      	adds	r3, #10
 8002dc2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2280      	movs	r2, #128	@ 0x80
 8002dc8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002dd2:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002dda:	4b52      	ldr	r3, [pc, #328]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002de2:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002dea:	4b4e      	ldr	r3, [pc, #312]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002df2:	4b4c      	ldr	r3, [pc, #304]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002e02:	4b48      	ldr	r3, [pc, #288]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002e0a:	4b46      	ldr	r3, [pc, #280]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002e12:	4b44      	ldr	r3, [pc, #272]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002e1a:	4b42      	ldr	r3, [pc, #264]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002e22:	4b40      	ldr	r3, [pc, #256]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002e32:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002e42:	4b38      	ldr	r3, [pc, #224]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002e4a:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002e52:	4b34      	ldr	r3, [pc, #208]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a35      	ldr	r2, [pc, #212]	@ (8002f2c <makeDHCPMSG+0x1e8>)
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002e5c:	4b31      	ldr	r3, [pc, #196]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a32      	ldr	r2, [pc, #200]	@ (8002f2c <makeDHCPMSG+0x1e8>)
 8002e62:	7852      	ldrb	r2, [r2, #1]
 8002e64:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002e66:	4b2f      	ldr	r3, [pc, #188]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a30      	ldr	r2, [pc, #192]	@ (8002f2c <makeDHCPMSG+0x1e8>)
 8002e6c:	7892      	ldrb	r2, [r2, #2]
 8002e6e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002e70:	4b2c      	ldr	r3, [pc, #176]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2d      	ldr	r2, [pc, #180]	@ (8002f2c <makeDHCPMSG+0x1e8>)
 8002e76:	78d2      	ldrb	r2, [r2, #3]
 8002e78:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f2c <makeDHCPMSG+0x1e8>)
 8002e80:	7912      	ldrb	r2, [r2, #4]
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002e86:	4b27      	ldr	r3, [pc, #156]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a28      	ldr	r2, [pc, #160]	@ (8002f2c <makeDHCPMSG+0x1e8>)
 8002e8c:	7952      	ldrb	r2, [r2, #5]
 8002e8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002e92:	2306      	movs	r3, #6
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e008      	b.n	8002eaa <makeDHCPMSG+0x166>
 8002e98:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d9f3      	bls.n	8002e98 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e009      	b.n	8002eca <makeDHCPMSG+0x186>
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ece:	d9f2      	bls.n	8002eb6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e009      	b.n	8002eea <makeDHCPMSG+0x1a6>
 8002ed6:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	4413      	add	r3, r2
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	daf1      	bge.n	8002ed6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2263      	movs	r2, #99	@ 0x63
 8002ef8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2282      	movs	r2, #130	@ 0x82
 8002f02:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2253      	movs	r2, #83	@ 0x53
 8002f0c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <makeDHCPMSG+0x1e0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2263      	movs	r2, #99	@ 0x63
 8002f16:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200073ec 	.word	0x200073ec
 8002f28:	200073e8 	.word	0x200073e8
 8002f2c:	200073f0 	.word	0x200073f0

08002f30 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002f3a:	f7ff ff03 	bl	8002d44 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8002f3e:	4b56      	ldr	r3, [pc, #344]	@ (8003098 <send_DHCP_DISCOVER+0x168>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8002f44:	4b54      	ldr	r3, [pc, #336]	@ (8003098 <send_DHCP_DISCOVER+0x168>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8002f4a:	4b53      	ldr	r3, [pc, #332]	@ (8003098 <send_DHCP_DISCOVER+0x168>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8002f50:	4b51      	ldr	r3, [pc, #324]	@ (8003098 <send_DHCP_DISCOVER+0x168>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8002f56:	4b51      	ldr	r3, [pc, #324]	@ (800309c <send_DHCP_DISCOVER+0x16c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8002f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800309c <send_DHCP_DISCOVER+0x16c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8002f62:	4b4e      	ldr	r3, [pc, #312]	@ (800309c <send_DHCP_DISCOVER+0x16c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8002f68:	4b4c      	ldr	r3, [pc, #304]	@ (800309c <send_DHCP_DISCOVER+0x16c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002f6e:	2304      	movs	r3, #4
 8002f70:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002f72:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	88bb      	ldrh	r3, [r7, #4]
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	80b9      	strh	r1, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	2235      	movs	r2, #53	@ 0x35
 8002f80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002f84:	4b46      	ldr	r3, [pc, #280]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	88bb      	ldrh	r3, [r7, #4]
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	80b9      	strh	r1, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8002f96:	4b42      	ldr	r3, [pc, #264]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	88bb      	ldrh	r3, [r7, #4]
 8002f9c:	1c59      	adds	r1, r3, #1
 8002f9e:	80b9      	strh	r1, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	80b9      	strh	r1, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	223d      	movs	r2, #61	@ 0x3d
 8002fb6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002fba:	4b39      	ldr	r3, [pc, #228]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	88bb      	ldrh	r3, [r7, #4]
 8002fc0:	1c59      	adds	r1, r3, #1
 8002fc2:	80b9      	strh	r1, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	2207      	movs	r2, #7
 8002fc8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002fcc:	4b34      	ldr	r3, [pc, #208]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	88bb      	ldrh	r3, [r7, #4]
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	80b9      	strh	r1, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002fde:	4b30      	ldr	r3, [pc, #192]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	1c59      	adds	r1, r3, #1
 8002fe6:	80b9      	strh	r1, [r7, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	4b2e      	ldr	r3, [pc, #184]	@ (80030a4 <send_DHCP_DISCOVER+0x174>)
 8002fec:	7819      	ldrb	r1, [r3, #0]
 8002fee:	1813      	adds	r3, r2, r0
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	88bb      	ldrh	r3, [r7, #4]
 8002ffc:	1c59      	adds	r1, r3, #1
 8002ffe:	80b9      	strh	r1, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	4b28      	ldr	r3, [pc, #160]	@ (80030a4 <send_DHCP_DISCOVER+0x174>)
 8003004:	7859      	ldrb	r1, [r3, #1]
 8003006:	1813      	adds	r3, r2, r0
 8003008:	460a      	mov	r2, r1
 800300a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800300e:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	88bb      	ldrh	r3, [r7, #4]
 8003014:	1c59      	adds	r1, r3, #1
 8003016:	80b9      	strh	r1, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	4b22      	ldr	r3, [pc, #136]	@ (80030a4 <send_DHCP_DISCOVER+0x174>)
 800301c:	7899      	ldrb	r1, [r3, #2]
 800301e:	1813      	adds	r3, r2, r0
 8003020:	460a      	mov	r2, r1
 8003022:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003026:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	88bb      	ldrh	r3, [r7, #4]
 800302c:	1c59      	adds	r1, r3, #1
 800302e:	80b9      	strh	r1, [r7, #4]
 8003030:	4618      	mov	r0, r3
 8003032:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <send_DHCP_DISCOVER+0x174>)
 8003034:	78d9      	ldrb	r1, [r3, #3]
 8003036:	1813      	adds	r3, r2, r0
 8003038:	460a      	mov	r2, r1
 800303a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800303e:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	1c59      	adds	r1, r3, #1
 8003046:	80b9      	strh	r1, [r7, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <send_DHCP_DISCOVER+0x174>)
 800304c:	7919      	ldrb	r1, [r3, #4]
 800304e:	1813      	adds	r3, r2, r0
 8003050:	460a      	mov	r2, r1
 8003052:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	88bb      	ldrh	r3, [r7, #4]
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	80b9      	strh	r1, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <send_DHCP_DISCOVER+0x174>)
 8003064:	7959      	ldrb	r1, [r3, #5]
 8003066:	1813      	adds	r3, r2, r0
 8003068:	460a      	mov	r2, r1
 800306a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800306e:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	88bb      	ldrh	r3, [r7, #4]
 8003074:	1c59      	adds	r1, r3, #1
 8003076:	80b9      	strh	r1, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	220c      	movs	r2, #12
 800307c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8003080:	4b07      	ldr	r3, [pc, #28]	@ (80030a0 <send_DHCP_DISCOVER+0x170>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	88bb      	ldrh	r3, [r7, #4]
 8003086:	1c59      	adds	r1, r3, #1
 8003088:	80b9      	strh	r1, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	2200      	movs	r2, #0
 800308e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	80fb      	strh	r3, [r7, #6]
 8003096:	e017      	b.n	80030c8 <send_DHCP_DISCOVER+0x198>
 8003098:	200073c4 	.word	0x200073c4
 800309c:	200073c8 	.word	0x200073c8
 80030a0:	200073ec 	.word	0x200073ec
 80030a4:	200073f0 	.word	0x200073f0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80030a8:	88f9      	ldrh	r1, [r7, #6]
 80030aa:	4b80      	ldr	r3, [pc, #512]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	88bb      	ldrh	r3, [r7, #4]
 80030b0:	1c58      	adds	r0, r3, #1
 80030b2:	80b8      	strh	r0, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	4b7e      	ldr	r3, [pc, #504]	@ (80032b0 <send_DHCP_DISCOVER+0x380>)
 80030b8:	5c59      	ldrb	r1, [r3, r1]
 80030ba:	1813      	adds	r3, r2, r0
 80030bc:	460a      	mov	r2, r1
 80030be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	3301      	adds	r3, #1
 80030c6:	80fb      	strh	r3, [r7, #6]
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	4a79      	ldr	r2, [pc, #484]	@ (80032b0 <send_DHCP_DISCOVER+0x380>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ea      	bne.n	80030a8 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80030d2:	4b78      	ldr	r3, [pc, #480]	@ (80032b4 <send_DHCP_DISCOVER+0x384>)
 80030d4:	78db      	ldrb	r3, [r3, #3]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b74      	ldr	r3, [pc, #464]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80030dc:	681c      	ldr	r4, [r3, #0]
 80030de:	88bb      	ldrh	r3, [r7, #4]
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	80b9      	strh	r1, [r7, #4]
 80030e4:	461d      	mov	r5, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f001 f9a4 	bl	8004434 <NibbleToHex>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	1963      	adds	r3, r4, r5
 80030f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80030f6:	4b6f      	ldr	r3, [pc, #444]	@ (80032b4 <send_DHCP_DISCOVER+0x384>)
 80030f8:	78da      	ldrb	r2, [r3, #3]
 80030fa:	4b6c      	ldr	r3, [pc, #432]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80030fc:	681c      	ldr	r4, [r3, #0]
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	1c59      	adds	r1, r3, #1
 8003102:	80b9      	strh	r1, [r7, #4]
 8003104:	461d      	mov	r5, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f001 f994 	bl	8004434 <NibbleToHex>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	1963      	adds	r3, r4, r5
 8003112:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8003116:	4b67      	ldr	r3, [pc, #412]	@ (80032b4 <send_DHCP_DISCOVER+0x384>)
 8003118:	791b      	ldrb	r3, [r3, #4]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b63      	ldr	r3, [pc, #396]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003120:	681c      	ldr	r4, [r3, #0]
 8003122:	88bb      	ldrh	r3, [r7, #4]
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	80b9      	strh	r1, [r7, #4]
 8003128:	461d      	mov	r5, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f001 f982 	bl	8004434 <NibbleToHex>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	1963      	adds	r3, r4, r5
 8003136:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800313a:	4b5e      	ldr	r3, [pc, #376]	@ (80032b4 <send_DHCP_DISCOVER+0x384>)
 800313c:	791a      	ldrb	r2, [r3, #4]
 800313e:	4b5b      	ldr	r3, [pc, #364]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003140:	681c      	ldr	r4, [r3, #0]
 8003142:	88bb      	ldrh	r3, [r7, #4]
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	80b9      	strh	r1, [r7, #4]
 8003148:	461d      	mov	r5, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f001 f972 	bl	8004434 <NibbleToHex>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	1963      	adds	r3, r4, r5
 8003156:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800315a:	4b56      	ldr	r3, [pc, #344]	@ (80032b4 <send_DHCP_DISCOVER+0x384>)
 800315c:	795b      	ldrb	r3, [r3, #5]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4b52      	ldr	r3, [pc, #328]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003164:	681c      	ldr	r4, [r3, #0]
 8003166:	88bb      	ldrh	r3, [r7, #4]
 8003168:	1c59      	adds	r1, r3, #1
 800316a:	80b9      	strh	r1, [r7, #4]
 800316c:	461d      	mov	r5, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f001 f960 	bl	8004434 <NibbleToHex>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	1963      	adds	r3, r4, r5
 800317a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800317e:	4b4d      	ldr	r3, [pc, #308]	@ (80032b4 <send_DHCP_DISCOVER+0x384>)
 8003180:	795a      	ldrb	r2, [r3, #5]
 8003182:	4b4a      	ldr	r3, [pc, #296]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003184:	681c      	ldr	r4, [r3, #0]
 8003186:	88bb      	ldrh	r3, [r7, #4]
 8003188:	1c59      	adds	r1, r3, #1
 800318a:	80b9      	strh	r1, [r7, #4]
 800318c:	461d      	mov	r5, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f001 f950 	bl	8004434 <NibbleToHex>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	1963      	adds	r3, r4, r5
 800319a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	b2d9      	uxtb	r1, r3
 80031a2:	4b42      	ldr	r3, [pc, #264]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	88b8      	ldrh	r0, [r7, #4]
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	3307      	adds	r3, #7
 80031ac:	1ac3      	subs	r3, r0, r3
 80031ae:	3106      	adds	r1, #6
 80031b0:	b2c9      	uxtb	r1, r1
 80031b2:	4413      	add	r3, r2
 80031b4:	460a      	mov	r2, r1
 80031b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80031ba:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	1c59      	adds	r1, r3, #1
 80031c2:	80b9      	strh	r1, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	2237      	movs	r2, #55	@ 0x37
 80031c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80031cc:	4b37      	ldr	r3, [pc, #220]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	88bb      	ldrh	r3, [r7, #4]
 80031d2:	1c59      	adds	r1, r3, #1
 80031d4:	80b9      	strh	r1, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	2206      	movs	r2, #6
 80031da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80031de:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	88bb      	ldrh	r3, [r7, #4]
 80031e4:	1c59      	adds	r1, r3, #1
 80031e6:	80b9      	strh	r1, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80031f0:	4b2e      	ldr	r3, [pc, #184]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	88bb      	ldrh	r3, [r7, #4]
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	80b9      	strh	r1, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8003202:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	88bb      	ldrh	r3, [r7, #4]
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	80b9      	strh	r1, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	2206      	movs	r2, #6
 8003210:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8003214:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	80b9      	strh	r1, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	220f      	movs	r2, #15
 8003222:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8003226:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	88bb      	ldrh	r3, [r7, #4]
 800322c:	1c59      	adds	r1, r3, #1
 800322e:	80b9      	strh	r1, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	223a      	movs	r2, #58	@ 0x3a
 8003234:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003238:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	88bb      	ldrh	r3, [r7, #4]
 800323e:	1c59      	adds	r1, r3, #1
 8003240:	80b9      	strh	r1, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	223b      	movs	r2, #59	@ 0x3b
 8003246:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800324a:	4b18      	ldr	r3, [pc, #96]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	88bb      	ldrh	r3, [r7, #4]
 8003250:	1c59      	adds	r1, r3, #1
 8003252:	80b9      	strh	r1, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	22ff      	movs	r2, #255	@ 0xff
 8003258:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800325c:	88bb      	ldrh	r3, [r7, #4]
 800325e:	80fb      	strh	r3, [r7, #6]
 8003260:	e009      	b.n	8003276 <send_DHCP_DISCOVER+0x346>
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	4413      	add	r3, r2
 800326a:	2200      	movs	r2, #0
 800326c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	3301      	adds	r3, #1
 8003274:	80fb      	strh	r3, [r7, #6]
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800327c:	d3f1      	bcc.n	8003262 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800327e:	23ff      	movs	r3, #255	@ 0xff
 8003280:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8003282:	23ff      	movs	r3, #255	@ 0xff
 8003284:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8003286:	23ff      	movs	r3, #255	@ 0xff
 8003288:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800328a:	23ff      	movs	r3, #255	@ 0xff
 800328c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <send_DHCP_DISCOVER+0x388>)
 8003290:	7818      	ldrb	r0, [r3, #0]
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <send_DHCP_DISCOVER+0x37c>)
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	463b      	mov	r3, r7
 8003298:	2243      	movs	r2, #67	@ 0x43
 800329a:	9200      	str	r2, [sp, #0]
 800329c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80032a0:	f001 fd62 	bl	8004d68 <sendto>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bdb0      	pop	{r4, r5, r7, pc}
 80032ac:	200073ec 	.word	0x200073ec
 80032b0:	2000005c 	.word	0x2000005c
 80032b4:	200073f0 	.word	0x200073f0
 80032b8:	200073c1 	.word	0x200073c1

080032bc <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80032bc:	b5b0      	push	{r4, r5, r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80032c6:	f7ff fd3d 	bl	8002d44 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80032ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <send_DHCP_REQUEST+0x7c>)
 80032cc:	f993 3000 	ldrsb.w	r3, [r3]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d004      	beq.n	80032de <send_DHCP_REQUEST+0x22>
 80032d4:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <send_DHCP_REQUEST+0x7c>)
 80032d6:	f993 3000 	ldrsb.w	r3, [r3]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d134      	bne.n	8003348 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80032de:	4b17      	ldr	r3, [pc, #92]	@ (800333c <send_DHCP_REQUEST+0x80>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330a      	adds	r3, #10
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80032e8:	4b14      	ldr	r3, [pc, #80]	@ (800333c <send_DHCP_REQUEST+0x80>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330a      	adds	r3, #10
 80032ee:	3301      	adds	r3, #1
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80032f4:	4b11      	ldr	r3, [pc, #68]	@ (800333c <send_DHCP_REQUEST+0x80>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a11      	ldr	r2, [pc, #68]	@ (8003340 <send_DHCP_REQUEST+0x84>)
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80032fe:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <send_DHCP_REQUEST+0x80>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a0f      	ldr	r2, [pc, #60]	@ (8003340 <send_DHCP_REQUEST+0x84>)
 8003304:	7852      	ldrb	r2, [r2, #1]
 8003306:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <send_DHCP_REQUEST+0x80>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0c      	ldr	r2, [pc, #48]	@ (8003340 <send_DHCP_REQUEST+0x84>)
 800330e:	7892      	ldrb	r2, [r2, #2]
 8003310:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8003312:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <send_DHCP_REQUEST+0x80>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <send_DHCP_REQUEST+0x84>)
 8003318:	78d2      	ldrb	r2, [r2, #3]
 800331a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <send_DHCP_REQUEST+0x88>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8003322:	4b08      	ldr	r3, [pc, #32]	@ (8003344 <send_DHCP_REQUEST+0x88>)
 8003324:	785b      	ldrb	r3, [r3, #1]
 8003326:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8003328:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <send_DHCP_REQUEST+0x88>)
 800332a:	789b      	ldrb	r3, [r3, #2]
 800332c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <send_DHCP_REQUEST+0x88>)
 8003330:	78db      	ldrb	r3, [r3, #3]
 8003332:	71fb      	strb	r3, [r7, #7]
 8003334:	e010      	b.n	8003358 <send_DHCP_REQUEST+0x9c>
 8003336:	bf00      	nop
 8003338:	200073e0 	.word	0x200073e0
 800333c:	200073ec 	.word	0x200073ec
 8003340:	200073d0 	.word	0x200073d0
 8003344:	200073c4 	.word	0x200073c4
   }
   else
   {
   	ip[0] = 255;
 8003348:	23ff      	movs	r3, #255	@ 0xff
 800334a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800334c:	23ff      	movs	r3, #255	@ 0xff
 800334e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003350:	23ff      	movs	r3, #255	@ 0xff
 8003352:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8003354:	23ff      	movs	r3, #255	@ 0xff
 8003356:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003358:	2304      	movs	r3, #4
 800335a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800335c:	4b8d      	ldr	r3, [pc, #564]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	897b      	ldrh	r3, [r7, #10]
 8003362:	1c59      	adds	r1, r3, #1
 8003364:	8179      	strh	r1, [r7, #10]
 8003366:	4413      	add	r3, r2
 8003368:	2235      	movs	r2, #53	@ 0x35
 800336a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800336e:	4b89      	ldr	r3, [pc, #548]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	1c59      	adds	r1, r3, #1
 8003376:	8179      	strh	r1, [r7, #10]
 8003378:	4413      	add	r3, r2
 800337a:	2201      	movs	r2, #1
 800337c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003380:	4b84      	ldr	r3, [pc, #528]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	897b      	ldrh	r3, [r7, #10]
 8003386:	1c59      	adds	r1, r3, #1
 8003388:	8179      	strh	r1, [r7, #10]
 800338a:	4413      	add	r3, r2
 800338c:	2203      	movs	r2, #3
 800338e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003392:	4b80      	ldr	r3, [pc, #512]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	1c59      	adds	r1, r3, #1
 800339a:	8179      	strh	r1, [r7, #10]
 800339c:	4413      	add	r3, r2
 800339e:	223d      	movs	r2, #61	@ 0x3d
 80033a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80033a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	897b      	ldrh	r3, [r7, #10]
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	8179      	strh	r1, [r7, #10]
 80033ae:	4413      	add	r3, r2
 80033b0:	2207      	movs	r2, #7
 80033b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80033b6:	4b77      	ldr	r3, [pc, #476]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	1c59      	adds	r1, r3, #1
 80033be:	8179      	strh	r1, [r7, #10]
 80033c0:	4413      	add	r3, r2
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80033c8:	4b72      	ldr	r3, [pc, #456]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	897b      	ldrh	r3, [r7, #10]
 80033ce:	1c59      	adds	r1, r3, #1
 80033d0:	8179      	strh	r1, [r7, #10]
 80033d2:	4618      	mov	r0, r3
 80033d4:	4b70      	ldr	r3, [pc, #448]	@ (8003598 <send_DHCP_REQUEST+0x2dc>)
 80033d6:	7819      	ldrb	r1, [r3, #0]
 80033d8:	1813      	adds	r3, r2, r0
 80033da:	460a      	mov	r2, r1
 80033dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80033e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	897b      	ldrh	r3, [r7, #10]
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	8179      	strh	r1, [r7, #10]
 80033ea:	4618      	mov	r0, r3
 80033ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <send_DHCP_REQUEST+0x2dc>)
 80033ee:	7859      	ldrb	r1, [r3, #1]
 80033f0:	1813      	adds	r3, r2, r0
 80033f2:	460a      	mov	r2, r1
 80033f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80033f8:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	8179      	strh	r1, [r7, #10]
 8003402:	4618      	mov	r0, r3
 8003404:	4b64      	ldr	r3, [pc, #400]	@ (8003598 <send_DHCP_REQUEST+0x2dc>)
 8003406:	7899      	ldrb	r1, [r3, #2]
 8003408:	1813      	adds	r3, r2, r0
 800340a:	460a      	mov	r2, r1
 800340c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003410:	4b60      	ldr	r3, [pc, #384]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	897b      	ldrh	r3, [r7, #10]
 8003416:	1c59      	adds	r1, r3, #1
 8003418:	8179      	strh	r1, [r7, #10]
 800341a:	4618      	mov	r0, r3
 800341c:	4b5e      	ldr	r3, [pc, #376]	@ (8003598 <send_DHCP_REQUEST+0x2dc>)
 800341e:	78d9      	ldrb	r1, [r3, #3]
 8003420:	1813      	adds	r3, r2, r0
 8003422:	460a      	mov	r2, r1
 8003424:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003428:	4b5a      	ldr	r3, [pc, #360]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	8179      	strh	r1, [r7, #10]
 8003432:	4618      	mov	r0, r3
 8003434:	4b58      	ldr	r3, [pc, #352]	@ (8003598 <send_DHCP_REQUEST+0x2dc>)
 8003436:	7919      	ldrb	r1, [r3, #4]
 8003438:	1813      	adds	r3, r2, r0
 800343a:	460a      	mov	r2, r1
 800343c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003440:	4b54      	ldr	r3, [pc, #336]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	8179      	strh	r1, [r7, #10]
 800344a:	4618      	mov	r0, r3
 800344c:	4b52      	ldr	r3, [pc, #328]	@ (8003598 <send_DHCP_REQUEST+0x2dc>)
 800344e:	7959      	ldrb	r1, [r3, #5]
 8003450:	1813      	adds	r3, r2, r0
 8003452:	460a      	mov	r2, r1
 8003454:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2bff      	cmp	r3, #255	@ 0xff
 800345c:	f040 8084 	bne.w	8003568 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003460:	4b4c      	ldr	r3, [pc, #304]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	8179      	strh	r1, [r7, #10]
 800346a:	4413      	add	r3, r2
 800346c:	2232      	movs	r2, #50	@ 0x32
 800346e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8003472:	4b48      	ldr	r3, [pc, #288]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	1c59      	adds	r1, r3, #1
 800347a:	8179      	strh	r1, [r7, #10]
 800347c:	4413      	add	r3, r2
 800347e:	2204      	movs	r2, #4
 8003480:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003484:	4b43      	ldr	r3, [pc, #268]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	897b      	ldrh	r3, [r7, #10]
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	8179      	strh	r1, [r7, #10]
 800348e:	4618      	mov	r0, r3
 8003490:	4b42      	ldr	r3, [pc, #264]	@ (800359c <send_DHCP_REQUEST+0x2e0>)
 8003492:	7819      	ldrb	r1, [r3, #0]
 8003494:	1813      	adds	r3, r2, r0
 8003496:	460a      	mov	r2, r1
 8003498:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800349c:	4b3d      	ldr	r3, [pc, #244]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	897b      	ldrh	r3, [r7, #10]
 80034a2:	1c59      	adds	r1, r3, #1
 80034a4:	8179      	strh	r1, [r7, #10]
 80034a6:	4618      	mov	r0, r3
 80034a8:	4b3c      	ldr	r3, [pc, #240]	@ (800359c <send_DHCP_REQUEST+0x2e0>)
 80034aa:	7859      	ldrb	r1, [r3, #1]
 80034ac:	1813      	adds	r3, r2, r0
 80034ae:	460a      	mov	r2, r1
 80034b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80034b4:	4b37      	ldr	r3, [pc, #220]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	8179      	strh	r1, [r7, #10]
 80034be:	4618      	mov	r0, r3
 80034c0:	4b36      	ldr	r3, [pc, #216]	@ (800359c <send_DHCP_REQUEST+0x2e0>)
 80034c2:	7899      	ldrb	r1, [r3, #2]
 80034c4:	1813      	adds	r3, r2, r0
 80034c6:	460a      	mov	r2, r1
 80034c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80034cc:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	897b      	ldrh	r3, [r7, #10]
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	8179      	strh	r1, [r7, #10]
 80034d6:	4618      	mov	r0, r3
 80034d8:	4b30      	ldr	r3, [pc, #192]	@ (800359c <send_DHCP_REQUEST+0x2e0>)
 80034da:	78d9      	ldrb	r1, [r3, #3]
 80034dc:	1813      	adds	r3, r2, r0
 80034de:	460a      	mov	r2, r1
 80034e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80034e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	8179      	strh	r1, [r7, #10]
 80034ee:	4413      	add	r3, r2
 80034f0:	2236      	movs	r2, #54	@ 0x36
 80034f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80034f6:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	1c59      	adds	r1, r3, #1
 80034fe:	8179      	strh	r1, [r7, #10]
 8003500:	4413      	add	r3, r2
 8003502:	2204      	movs	r2, #4
 8003504:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003508:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	897b      	ldrh	r3, [r7, #10]
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	8179      	strh	r1, [r7, #10]
 8003512:	4618      	mov	r0, r3
 8003514:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <send_DHCP_REQUEST+0x2e4>)
 8003516:	7819      	ldrb	r1, [r3, #0]
 8003518:	1813      	adds	r3, r2, r0
 800351a:	460a      	mov	r2, r1
 800351c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003520:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	897b      	ldrh	r3, [r7, #10]
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	8179      	strh	r1, [r7, #10]
 800352a:	4618      	mov	r0, r3
 800352c:	4b1c      	ldr	r3, [pc, #112]	@ (80035a0 <send_DHCP_REQUEST+0x2e4>)
 800352e:	7859      	ldrb	r1, [r3, #1]
 8003530:	1813      	adds	r3, r2, r0
 8003532:	460a      	mov	r2, r1
 8003534:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003538:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	897b      	ldrh	r3, [r7, #10]
 800353e:	1c59      	adds	r1, r3, #1
 8003540:	8179      	strh	r1, [r7, #10]
 8003542:	4618      	mov	r0, r3
 8003544:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <send_DHCP_REQUEST+0x2e4>)
 8003546:	7899      	ldrb	r1, [r3, #2]
 8003548:	1813      	adds	r3, r2, r0
 800354a:	460a      	mov	r2, r1
 800354c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003550:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	1c59      	adds	r1, r3, #1
 8003558:	8179      	strh	r1, [r7, #10]
 800355a:	4618      	mov	r0, r3
 800355c:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <send_DHCP_REQUEST+0x2e4>)
 800355e:	78d9      	ldrb	r1, [r3, #3]
 8003560:	1813      	adds	r3, r2, r0
 8003562:	460a      	mov	r2, r1
 8003564:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003568:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	8179      	strh	r1, [r7, #10]
 8003572:	4413      	add	r3, r2
 8003574:	220c      	movs	r2, #12
 8003576:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800357a:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <send_DHCP_REQUEST+0x2d8>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	8179      	strh	r1, [r7, #10]
 8003584:	4413      	add	r3, r2
 8003586:	2200      	movs	r2, #0
 8003588:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e019      	b.n	80035c6 <send_DHCP_REQUEST+0x30a>
 8003592:	bf00      	nop
 8003594:	200073ec 	.word	0x200073ec
 8003598:	200073f0 	.word	0x200073f0
 800359c:	200073d0 	.word	0x200073d0
 80035a0:	200073c4 	.word	0x200073c4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80035a4:	4b86      	ldr	r3, [pc, #536]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	1c59      	adds	r1, r3, #1
 80035ac:	8179      	strh	r1, [r7, #10]
 80035ae:	4618      	mov	r0, r3
 80035b0:	4984      	ldr	r1, [pc, #528]	@ (80037c4 <send_DHCP_REQUEST+0x508>)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	440b      	add	r3, r1
 80035b6:	7819      	ldrb	r1, [r3, #0]
 80035b8:	1813      	adds	r3, r2, r0
 80035ba:	460a      	mov	r2, r1
 80035bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4a7f      	ldr	r2, [pc, #508]	@ (80037c4 <send_DHCP_REQUEST+0x508>)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e8      	bne.n	80035a4 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80035d2:	4b7d      	ldr	r3, [pc, #500]	@ (80037c8 <send_DHCP_REQUEST+0x50c>)
 80035d4:	78db      	ldrb	r3, [r3, #3]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b79      	ldr	r3, [pc, #484]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80035dc:	681c      	ldr	r4, [r3, #0]
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	1c59      	adds	r1, r3, #1
 80035e2:	8179      	strh	r1, [r7, #10]
 80035e4:	461d      	mov	r5, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 ff24 	bl	8004434 <NibbleToHex>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	1963      	adds	r3, r4, r5
 80035f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80035f6:	4b74      	ldr	r3, [pc, #464]	@ (80037c8 <send_DHCP_REQUEST+0x50c>)
 80035f8:	78da      	ldrb	r2, [r3, #3]
 80035fa:	4b71      	ldr	r3, [pc, #452]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80035fc:	681c      	ldr	r4, [r3, #0]
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	8179      	strh	r1, [r7, #10]
 8003604:	461d      	mov	r5, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 ff14 	bl	8004434 <NibbleToHex>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	1963      	adds	r3, r4, r5
 8003612:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8003616:	4b6c      	ldr	r3, [pc, #432]	@ (80037c8 <send_DHCP_REQUEST+0x50c>)
 8003618:	791b      	ldrb	r3, [r3, #4]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b68      	ldr	r3, [pc, #416]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003620:	681c      	ldr	r4, [r3, #0]
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	1c59      	adds	r1, r3, #1
 8003626:	8179      	strh	r1, [r7, #10]
 8003628:	461d      	mov	r5, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f000 ff02 	bl	8004434 <NibbleToHex>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	1963      	adds	r3, r4, r5
 8003636:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800363a:	4b63      	ldr	r3, [pc, #396]	@ (80037c8 <send_DHCP_REQUEST+0x50c>)
 800363c:	791a      	ldrb	r2, [r3, #4]
 800363e:	4b60      	ldr	r3, [pc, #384]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003640:	681c      	ldr	r4, [r3, #0]
 8003642:	897b      	ldrh	r3, [r7, #10]
 8003644:	1c59      	adds	r1, r3, #1
 8003646:	8179      	strh	r1, [r7, #10]
 8003648:	461d      	mov	r5, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 fef2 	bl	8004434 <NibbleToHex>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	1963      	adds	r3, r4, r5
 8003656:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800365a:	4b5b      	ldr	r3, [pc, #364]	@ (80037c8 <send_DHCP_REQUEST+0x50c>)
 800365c:	795b      	ldrb	r3, [r3, #5]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003664:	681c      	ldr	r4, [r3, #0]
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	1c59      	adds	r1, r3, #1
 800366a:	8179      	strh	r1, [r7, #10]
 800366c:	461d      	mov	r5, r3
 800366e:	4610      	mov	r0, r2
 8003670:	f000 fee0 	bl	8004434 <NibbleToHex>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	1963      	adds	r3, r4, r5
 800367a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800367e:	4b52      	ldr	r3, [pc, #328]	@ (80037c8 <send_DHCP_REQUEST+0x50c>)
 8003680:	795a      	ldrb	r2, [r3, #5]
 8003682:	4b4f      	ldr	r3, [pc, #316]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003684:	681c      	ldr	r4, [r3, #0]
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	1c59      	adds	r1, r3, #1
 800368a:	8179      	strh	r1, [r7, #10]
 800368c:	461d      	mov	r5, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fed0 	bl	8004434 <NibbleToHex>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	1963      	adds	r3, r4, r5
 800369a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	b2d9      	uxtb	r1, r3
 80036a2:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	8978      	ldrh	r0, [r7, #10]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3307      	adds	r3, #7
 80036ac:	1ac3      	subs	r3, r0, r3
 80036ae:	3106      	adds	r1, #6
 80036b0:	b2c9      	uxtb	r1, r1
 80036b2:	4413      	add	r3, r2
 80036b4:	460a      	mov	r2, r1
 80036b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80036ba:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	897b      	ldrh	r3, [r7, #10]
 80036c0:	1c59      	adds	r1, r3, #1
 80036c2:	8179      	strh	r1, [r7, #10]
 80036c4:	4413      	add	r3, r2
 80036c6:	2237      	movs	r2, #55	@ 0x37
 80036c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80036cc:	4b3c      	ldr	r3, [pc, #240]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	8179      	strh	r1, [r7, #10]
 80036d6:	4413      	add	r3, r2
 80036d8:	2208      	movs	r2, #8
 80036da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80036de:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	897b      	ldrh	r3, [r7, #10]
 80036e4:	1c59      	adds	r1, r3, #1
 80036e6:	8179      	strh	r1, [r7, #10]
 80036e8:	4413      	add	r3, r2
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80036f0:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	897b      	ldrh	r3, [r7, #10]
 80036f6:	1c59      	adds	r1, r3, #1
 80036f8:	8179      	strh	r1, [r7, #10]
 80036fa:	4413      	add	r3, r2
 80036fc:	2203      	movs	r2, #3
 80036fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8003702:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	897b      	ldrh	r3, [r7, #10]
 8003708:	1c59      	adds	r1, r3, #1
 800370a:	8179      	strh	r1, [r7, #10]
 800370c:	4413      	add	r3, r2
 800370e:	2206      	movs	r2, #6
 8003710:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8003714:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	897b      	ldrh	r3, [r7, #10]
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	8179      	strh	r1, [r7, #10]
 800371e:	4413      	add	r3, r2
 8003720:	220f      	movs	r2, #15
 8003722:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8003726:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	897b      	ldrh	r3, [r7, #10]
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	8179      	strh	r1, [r7, #10]
 8003730:	4413      	add	r3, r2
 8003732:	223a      	movs	r2, #58	@ 0x3a
 8003734:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003738:	4b21      	ldr	r3, [pc, #132]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	897b      	ldrh	r3, [r7, #10]
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	8179      	strh	r1, [r7, #10]
 8003742:	4413      	add	r3, r2
 8003744:	223b      	movs	r2, #59	@ 0x3b
 8003746:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800374a:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	1c59      	adds	r1, r3, #1
 8003752:	8179      	strh	r1, [r7, #10]
 8003754:	4413      	add	r3, r2
 8003756:	221f      	movs	r2, #31
 8003758:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 800375c:	4b18      	ldr	r3, [pc, #96]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	1c59      	adds	r1, r3, #1
 8003764:	8179      	strh	r1, [r7, #10]
 8003766:	4413      	add	r3, r2
 8003768:	2221      	movs	r2, #33	@ 0x21
 800376a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800376e:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	897b      	ldrh	r3, [r7, #10]
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	8179      	strh	r1, [r7, #10]
 8003778:	4413      	add	r3, r2
 800377a:	22ff      	movs	r2, #255	@ 0xff
 800377c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003780:	897b      	ldrh	r3, [r7, #10]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e009      	b.n	800379a <send_DHCP_REQUEST+0x4de>
 8003786:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	33ec      	adds	r3, #236	@ 0xec
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80037a0:	dbf1      	blt.n	8003786 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <send_DHCP_REQUEST+0x510>)
 80037a4:	7818      	ldrb	r0, [r3, #0]
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <send_DHCP_REQUEST+0x504>)
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	2243      	movs	r2, #67	@ 0x43
 80037ae:	9200      	str	r2, [sp, #0]
 80037b0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80037b4:	f001 fad8 	bl	8004d68 <sendto>

}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bdb0      	pop	{r4, r5, r7, pc}
 80037c0:	200073ec 	.word	0x200073ec
 80037c4:	2000005c 	.word	0x2000005c
 80037c8:	200073f0 	.word	0x200073f0
 80037cc:	200073c1 	.word	0x200073c1

080037d0 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 80037da:	f7ff fab3 	bl	8002d44 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80037de:	2304      	movs	r3, #4
 80037e0:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80037e2:	4b9f      	ldr	r3, [pc, #636]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330a      	adds	r3, #10
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80037ec:	4b9c      	ldr	r3, [pc, #624]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	330a      	adds	r3, #10
 80037f2:	3301      	adds	r3, #1
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80037f8:	4b99      	ldr	r3, [pc, #612]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	897b      	ldrh	r3, [r7, #10]
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	8179      	strh	r1, [r7, #10]
 8003802:	4413      	add	r3, r2
 8003804:	2235      	movs	r2, #53	@ 0x35
 8003806:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800380a:	4b95      	ldr	r3, [pc, #596]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	1c59      	adds	r1, r3, #1
 8003812:	8179      	strh	r1, [r7, #10]
 8003814:	4413      	add	r3, r2
 8003816:	2201      	movs	r2, #1
 8003818:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800381c:	4b90      	ldr	r3, [pc, #576]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	897b      	ldrh	r3, [r7, #10]
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	8179      	strh	r1, [r7, #10]
 8003826:	4413      	add	r3, r2
 8003828:	2204      	movs	r2, #4
 800382a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800382e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	1c59      	adds	r1, r3, #1
 8003836:	8179      	strh	r1, [r7, #10]
 8003838:	4413      	add	r3, r2
 800383a:	223d      	movs	r2, #61	@ 0x3d
 800383c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003840:	4b87      	ldr	r3, [pc, #540]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	8179      	strh	r1, [r7, #10]
 800384a:	4413      	add	r3, r2
 800384c:	2207      	movs	r2, #7
 800384e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003852:	4b83      	ldr	r3, [pc, #524]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	1c59      	adds	r1, r3, #1
 800385a:	8179      	strh	r1, [r7, #10]
 800385c:	4413      	add	r3, r2
 800385e:	2201      	movs	r2, #1
 8003860:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003864:	4b7e      	ldr	r3, [pc, #504]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	897b      	ldrh	r3, [r7, #10]
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	8179      	strh	r1, [r7, #10]
 800386e:	4618      	mov	r0, r3
 8003870:	4b7c      	ldr	r3, [pc, #496]	@ (8003a64 <send_DHCP_DECLINE+0x294>)
 8003872:	7819      	ldrb	r1, [r3, #0]
 8003874:	1813      	adds	r3, r2, r0
 8003876:	460a      	mov	r2, r1
 8003878:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800387c:	4b78      	ldr	r3, [pc, #480]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	8179      	strh	r1, [r7, #10]
 8003886:	4618      	mov	r0, r3
 8003888:	4b76      	ldr	r3, [pc, #472]	@ (8003a64 <send_DHCP_DECLINE+0x294>)
 800388a:	7859      	ldrb	r1, [r3, #1]
 800388c:	1813      	adds	r3, r2, r0
 800388e:	460a      	mov	r2, r1
 8003890:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003894:	4b72      	ldr	r3, [pc, #456]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	897b      	ldrh	r3, [r7, #10]
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	8179      	strh	r1, [r7, #10]
 800389e:	4618      	mov	r0, r3
 80038a0:	4b70      	ldr	r3, [pc, #448]	@ (8003a64 <send_DHCP_DECLINE+0x294>)
 80038a2:	7899      	ldrb	r1, [r3, #2]
 80038a4:	1813      	adds	r3, r2, r0
 80038a6:	460a      	mov	r2, r1
 80038a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80038ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	897b      	ldrh	r3, [r7, #10]
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	8179      	strh	r1, [r7, #10]
 80038b6:	4618      	mov	r0, r3
 80038b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a64 <send_DHCP_DECLINE+0x294>)
 80038ba:	78d9      	ldrb	r1, [r3, #3]
 80038bc:	1813      	adds	r3, r2, r0
 80038be:	460a      	mov	r2, r1
 80038c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80038c4:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	897b      	ldrh	r3, [r7, #10]
 80038ca:	1c59      	adds	r1, r3, #1
 80038cc:	8179      	strh	r1, [r7, #10]
 80038ce:	4618      	mov	r0, r3
 80038d0:	4b64      	ldr	r3, [pc, #400]	@ (8003a64 <send_DHCP_DECLINE+0x294>)
 80038d2:	7919      	ldrb	r1, [r3, #4]
 80038d4:	1813      	adds	r3, r2, r0
 80038d6:	460a      	mov	r2, r1
 80038d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80038dc:	4b60      	ldr	r3, [pc, #384]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	897b      	ldrh	r3, [r7, #10]
 80038e2:	1c59      	adds	r1, r3, #1
 80038e4:	8179      	strh	r1, [r7, #10]
 80038e6:	4618      	mov	r0, r3
 80038e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a64 <send_DHCP_DECLINE+0x294>)
 80038ea:	7959      	ldrb	r1, [r3, #5]
 80038ec:	1813      	adds	r3, r2, r0
 80038ee:	460a      	mov	r2, r1
 80038f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80038f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	1c59      	adds	r1, r3, #1
 80038fc:	8179      	strh	r1, [r7, #10]
 80038fe:	4413      	add	r3, r2
 8003900:	2232      	movs	r2, #50	@ 0x32
 8003902:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003906:	4b56      	ldr	r3, [pc, #344]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	1c59      	adds	r1, r3, #1
 800390e:	8179      	strh	r1, [r7, #10]
 8003910:	4413      	add	r3, r2
 8003912:	2204      	movs	r2, #4
 8003914:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003918:	4b51      	ldr	r3, [pc, #324]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	897b      	ldrh	r3, [r7, #10]
 800391e:	1c59      	adds	r1, r3, #1
 8003920:	8179      	strh	r1, [r7, #10]
 8003922:	4618      	mov	r0, r3
 8003924:	4b50      	ldr	r3, [pc, #320]	@ (8003a68 <send_DHCP_DECLINE+0x298>)
 8003926:	7819      	ldrb	r1, [r3, #0]
 8003928:	1813      	adds	r3, r2, r0
 800392a:	460a      	mov	r2, r1
 800392c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003930:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	897b      	ldrh	r3, [r7, #10]
 8003936:	1c59      	adds	r1, r3, #1
 8003938:	8179      	strh	r1, [r7, #10]
 800393a:	4618      	mov	r0, r3
 800393c:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <send_DHCP_DECLINE+0x298>)
 800393e:	7859      	ldrb	r1, [r3, #1]
 8003940:	1813      	adds	r3, r2, r0
 8003942:	460a      	mov	r2, r1
 8003944:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003948:	4b45      	ldr	r3, [pc, #276]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	897b      	ldrh	r3, [r7, #10]
 800394e:	1c59      	adds	r1, r3, #1
 8003950:	8179      	strh	r1, [r7, #10]
 8003952:	4618      	mov	r0, r3
 8003954:	4b44      	ldr	r3, [pc, #272]	@ (8003a68 <send_DHCP_DECLINE+0x298>)
 8003956:	7899      	ldrb	r1, [r3, #2]
 8003958:	1813      	adds	r3, r2, r0
 800395a:	460a      	mov	r2, r1
 800395c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003960:	4b3f      	ldr	r3, [pc, #252]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	1c59      	adds	r1, r3, #1
 8003968:	8179      	strh	r1, [r7, #10]
 800396a:	4618      	mov	r0, r3
 800396c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a68 <send_DHCP_DECLINE+0x298>)
 800396e:	78d9      	ldrb	r1, [r3, #3]
 8003970:	1813      	adds	r3, r2, r0
 8003972:	460a      	mov	r2, r1
 8003974:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003978:	4b39      	ldr	r3, [pc, #228]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	1c59      	adds	r1, r3, #1
 8003980:	8179      	strh	r1, [r7, #10]
 8003982:	4413      	add	r3, r2
 8003984:	2236      	movs	r2, #54	@ 0x36
 8003986:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800398a:	4b35      	ldr	r3, [pc, #212]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	1c59      	adds	r1, r3, #1
 8003992:	8179      	strh	r1, [r7, #10]
 8003994:	4413      	add	r3, r2
 8003996:	2204      	movs	r2, #4
 8003998:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800399c:	4b30      	ldr	r3, [pc, #192]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	897b      	ldrh	r3, [r7, #10]
 80039a2:	1c59      	adds	r1, r3, #1
 80039a4:	8179      	strh	r1, [r7, #10]
 80039a6:	4618      	mov	r0, r3
 80039a8:	4b30      	ldr	r3, [pc, #192]	@ (8003a6c <send_DHCP_DECLINE+0x29c>)
 80039aa:	7819      	ldrb	r1, [r3, #0]
 80039ac:	1813      	adds	r3, r2, r0
 80039ae:	460a      	mov	r2, r1
 80039b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80039b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	8179      	strh	r1, [r7, #10]
 80039be:	4618      	mov	r0, r3
 80039c0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <send_DHCP_DECLINE+0x29c>)
 80039c2:	7859      	ldrb	r1, [r3, #1]
 80039c4:	1813      	adds	r3, r2, r0
 80039c6:	460a      	mov	r2, r1
 80039c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	8179      	strh	r1, [r7, #10]
 80039d6:	4618      	mov	r0, r3
 80039d8:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <send_DHCP_DECLINE+0x29c>)
 80039da:	7899      	ldrb	r1, [r3, #2]
 80039dc:	1813      	adds	r3, r2, r0
 80039de:	460a      	mov	r2, r1
 80039e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80039e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	8179      	strh	r1, [r7, #10]
 80039ee:	4618      	mov	r0, r3
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <send_DHCP_DECLINE+0x29c>)
 80039f2:	78d9      	ldrb	r1, [r3, #3]
 80039f4:	1813      	adds	r3, r2, r0
 80039f6:	460a      	mov	r2, r1
 80039f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80039fc:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	8179      	strh	r1, [r7, #10]
 8003a06:	4413      	add	r3, r2
 8003a08:	22ff      	movs	r2, #255	@ 0xff
 8003a0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e009      	b.n	8003a28 <send_DHCP_DECLINE+0x258>
 8003a14:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	33ec      	adds	r3, #236	@ 0xec
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3301      	adds	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003a2e:	dbf1      	blt.n	8003a14 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003a30:	23ff      	movs	r3, #255	@ 0xff
 8003a32:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8003a34:	23ff      	movs	r3, #255	@ 0xff
 8003a36:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003a38:	23ff      	movs	r3, #255	@ 0xff
 8003a3a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003a3c:	23ff      	movs	r3, #255	@ 0xff
 8003a3e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <send_DHCP_DECLINE+0x2a0>)
 8003a42:	7818      	ldrb	r0, [r3, #0]
 8003a44:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <send_DHCP_DECLINE+0x290>)
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	2243      	movs	r2, #67	@ 0x43
 8003a4c:	9200      	str	r2, [sp, #0]
 8003a4e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003a52:	f001 f989 	bl	8004d68 <sendto>
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200073ec 	.word	0x200073ec
 8003a64:	200073f0 	.word	0x200073f0
 8003a68:	200073d0 	.word	0x200073d0
 8003a6c:	200073c4 	.word	0x200073c4
 8003a70:	200073c1 	.word	0x200073c1

08003a74 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b089      	sub	sp, #36	@ 0x24
 8003a78:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8003d04 <parseDHCPMSG+0x290>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 ff47 	bl	8005916 <getSn_RX_RSR>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	823b      	strh	r3, [r7, #16]
 8003a8c:	8a3b      	ldrh	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d011      	beq.n	8003ab6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8003a92:	4b9c      	ldr	r3, [pc, #624]	@ (8003d04 <parseDHCPMSG+0x290>)
 8003a94:	7818      	ldrb	r0, [r3, #0]
 8003a96:	4b9c      	ldr	r3, [pc, #624]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	1d3c      	adds	r4, r7, #4
 8003a9c:	8a3a      	ldrh	r2, [r7, #16]
 8003a9e:	1cbb      	adds	r3, r7, #2
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	f001 fa94 	bl	8004fd0 <recvfrom>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	2b43      	cmp	r3, #67	@ 0x43
 8003ab0:	f040 81ed 	bne.w	8003e8e <parseDHCPMSG+0x41a>
 8003ab4:	e001      	b.n	8003aba <parseDHCPMSG+0x46>
   else return 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e1eb      	b.n	8003e92 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003aba:	4b93      	ldr	r3, [pc, #588]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	7f1a      	ldrb	r2, [r3, #28]
 8003ac0:	4b92      	ldr	r3, [pc, #584]	@ (8003d0c <parseDHCPMSG+0x298>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d124      	bne.n	8003b12 <parseDHCPMSG+0x9e>
 8003ac8:	4b8f      	ldr	r3, [pc, #572]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	7f5a      	ldrb	r2, [r3, #29]
 8003ace:	4b8f      	ldr	r3, [pc, #572]	@ (8003d0c <parseDHCPMSG+0x298>)
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11d      	bne.n	8003b12 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003ad6:	4b8c      	ldr	r3, [pc, #560]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	7f9a      	ldrb	r2, [r3, #30]
 8003adc:	4b8b      	ldr	r3, [pc, #556]	@ (8003d0c <parseDHCPMSG+0x298>)
 8003ade:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d116      	bne.n	8003b12 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003ae4:	4b88      	ldr	r3, [pc, #544]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	7fda      	ldrb	r2, [r3, #31]
 8003aea:	4b88      	ldr	r3, [pc, #544]	@ (8003d0c <parseDHCPMSG+0x298>)
 8003aec:	78db      	ldrb	r3, [r3, #3]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d10f      	bne.n	8003b12 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003af2:	4b85      	ldr	r3, [pc, #532]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003afa:	4b84      	ldr	r3, [pc, #528]	@ (8003d0c <parseDHCPMSG+0x298>)
 8003afc:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d107      	bne.n	8003b12 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003b02:	4b81      	ldr	r3, [pc, #516]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003b0a:	4b80      	ldr	r3, [pc, #512]	@ (8003d0c <parseDHCPMSG+0x298>)
 8003b0c:	795b      	ldrb	r3, [r3, #5]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d001      	beq.n	8003b16 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e1bd      	b.n	8003e92 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8003b16:	4b7e      	ldr	r3, [pc, #504]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <parseDHCPMSG+0xc2>
 8003b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <parseDHCPMSG+0xc2>
 8003b26:	4b7a      	ldr	r3, [pc, #488]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b28:	789b      	ldrb	r3, [r3, #2]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <parseDHCPMSG+0xc2>
 8003b2e:	4b78      	ldr	r3, [pc, #480]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b30:	78db      	ldrb	r3, [r3, #3]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d029      	beq.n	8003b8a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003b36:	793a      	ldrb	r2, [r7, #4]
 8003b38:	4b75      	ldr	r3, [pc, #468]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d10e      	bne.n	8003b5e <parseDHCPMSG+0xea>
 8003b40:	797a      	ldrb	r2, [r7, #5]
 8003b42:	4b73      	ldr	r3, [pc, #460]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d109      	bne.n	8003b5e <parseDHCPMSG+0xea>
 8003b4a:	79ba      	ldrb	r2, [r7, #6]
 8003b4c:	4b70      	ldr	r3, [pc, #448]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b4e:	789b      	ldrb	r3, [r3, #2]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d104      	bne.n	8003b5e <parseDHCPMSG+0xea>
 8003b54:	79fa      	ldrb	r2, [r7, #7]
 8003b56:	4b6e      	ldr	r3, [pc, #440]	@ (8003d10 <parseDHCPMSG+0x29c>)
 8003b58:	78db      	ldrb	r3, [r3, #3]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d015      	beq.n	8003b8a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003b5e:	793a      	ldrb	r2, [r7, #4]
 8003b60:	4b6c      	ldr	r3, [pc, #432]	@ (8003d14 <parseDHCPMSG+0x2a0>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d10e      	bne.n	8003b86 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003b68:	797a      	ldrb	r2, [r7, #5]
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <parseDHCPMSG+0x2a0>)
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d109      	bne.n	8003b86 <parseDHCPMSG+0x112>
 8003b72:	79ba      	ldrb	r2, [r7, #6]
 8003b74:	4b67      	ldr	r3, [pc, #412]	@ (8003d14 <parseDHCPMSG+0x2a0>)
 8003b76:	789b      	ldrb	r3, [r3, #2]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d104      	bne.n	8003b86 <parseDHCPMSG+0x112>
 8003b7c:	79fa      	ldrb	r2, [r7, #7]
 8003b7e:	4b65      	ldr	r3, [pc, #404]	@ (8003d14 <parseDHCPMSG+0x2a0>)
 8003b80:	78db      	ldrb	r3, [r3, #3]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e183      	b.n	8003e92 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d08 <parseDHCPMSG+0x294>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	33f0      	adds	r3, #240	@ 0xf0
 8003b94:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8003b96:	8a3b      	ldrh	r3, [r7, #16]
 8003b98:	3bf0      	subs	r3, #240	@ 0xf0
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003ba0:	e170      	b.n	8003e84 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b36      	cmp	r3, #54	@ 0x36
 8003ba8:	dc76      	bgt.n	8003c98 <parseDHCPMSG+0x224>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f2c0 815d 	blt.w	8003e6a <parseDHCPMSG+0x3f6>
 8003bb0:	2b36      	cmp	r3, #54	@ 0x36
 8003bb2:	f200 815a 	bhi.w	8003e6a <parseDHCPMSG+0x3f6>
 8003bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bbc <parseDHCPMSG+0x148>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003ca5 	.word	0x08003ca5
 8003bc0:	08003cc5 	.word	0x08003cc5
 8003bc4:	08003e6b 	.word	0x08003e6b
 8003bc8:	08003d1d 	.word	0x08003d1d
 8003bcc:	08003e6b 	.word	0x08003e6b
 8003bd0:	08003e6b 	.word	0x08003e6b
 8003bd4:	08003d69 	.word	0x08003d69
 8003bd8:	08003e6b 	.word	0x08003e6b
 8003bdc:	08003e6b 	.word	0x08003e6b
 8003be0:	08003e6b 	.word	0x08003e6b
 8003be4:	08003e6b 	.word	0x08003e6b
 8003be8:	08003e6b 	.word	0x08003e6b
 8003bec:	08003e6b 	.word	0x08003e6b
 8003bf0:	08003e6b 	.word	0x08003e6b
 8003bf4:	08003e6b 	.word	0x08003e6b
 8003bf8:	08003e6b 	.word	0x08003e6b
 8003bfc:	08003e6b 	.word	0x08003e6b
 8003c00:	08003e6b 	.word	0x08003e6b
 8003c04:	08003e6b 	.word	0x08003e6b
 8003c08:	08003e6b 	.word	0x08003e6b
 8003c0c:	08003e6b 	.word	0x08003e6b
 8003c10:	08003e6b 	.word	0x08003e6b
 8003c14:	08003e6b 	.word	0x08003e6b
 8003c18:	08003e6b 	.word	0x08003e6b
 8003c1c:	08003e6b 	.word	0x08003e6b
 8003c20:	08003e6b 	.word	0x08003e6b
 8003c24:	08003e6b 	.word	0x08003e6b
 8003c28:	08003e6b 	.word	0x08003e6b
 8003c2c:	08003e6b 	.word	0x08003e6b
 8003c30:	08003e6b 	.word	0x08003e6b
 8003c34:	08003e6b 	.word	0x08003e6b
 8003c38:	08003e6b 	.word	0x08003e6b
 8003c3c:	08003e6b 	.word	0x08003e6b
 8003c40:	08003e6b 	.word	0x08003e6b
 8003c44:	08003e6b 	.word	0x08003e6b
 8003c48:	08003e6b 	.word	0x08003e6b
 8003c4c:	08003e6b 	.word	0x08003e6b
 8003c50:	08003e6b 	.word	0x08003e6b
 8003c54:	08003e6b 	.word	0x08003e6b
 8003c58:	08003e6b 	.word	0x08003e6b
 8003c5c:	08003e6b 	.word	0x08003e6b
 8003c60:	08003e6b 	.word	0x08003e6b
 8003c64:	08003e6b 	.word	0x08003e6b
 8003c68:	08003e6b 	.word	0x08003e6b
 8003c6c:	08003e6b 	.word	0x08003e6b
 8003c70:	08003e6b 	.word	0x08003e6b
 8003c74:	08003e6b 	.word	0x08003e6b
 8003c78:	08003e6b 	.word	0x08003e6b
 8003c7c:	08003e6b 	.word	0x08003e6b
 8003c80:	08003e6b 	.word	0x08003e6b
 8003c84:	08003e6b 	.word	0x08003e6b
 8003c88:	08003db5 	.word	0x08003db5
 8003c8c:	08003e6b 	.word	0x08003e6b
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003e11 	.word	0x08003e11
 8003c98:	2bff      	cmp	r3, #255	@ 0xff
 8003c9a:	f040 80e6 	bne.w	8003e6a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
   				break;
 8003ca2:	e0ef      	b.n	8003e84 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
   				break;
 8003caa:	e0eb      	b.n	8003e84 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
   				p++;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	617a      	str	r2, [r7, #20]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	74fb      	strb	r3, [r7, #19]
   				break;
 8003cc2:	e0df      	b.n	8003e84 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
   				p++;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	617a      	str	r2, [r7, #20]
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <parseDHCPMSG+0x2a4>)
 8003cda:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	617a      	str	r2, [r7, #20]
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <parseDHCPMSG+0x2a4>)
 8003ce6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	617a      	str	r2, [r7, #20]
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <parseDHCPMSG+0x2a4>)
 8003cf2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	617a      	str	r2, [r7, #20]
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <parseDHCPMSG+0x2a4>)
 8003cfe:	70da      	strb	r2, [r3, #3]
   				break;
 8003d00:	e0c0      	b.n	8003e84 <parseDHCPMSG+0x410>
 8003d02:	bf00      	nop
 8003d04:	200073c1 	.word	0x200073c1
 8003d08:	200073ec 	.word	0x200073ec
 8003d0c:	200073f0 	.word	0x200073f0
 8003d10:	200073c4 	.word	0x200073c4
 8003d14:	200073c8 	.word	0x200073c8
 8003d18:	200073d8 	.word	0x200073d8
   			case routersOnSubnet :
   				p++;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	617a      	str	r2, [r7, #20]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	617a      	str	r2, [r7, #20]
 8003d32:	781a      	ldrb	r2, [r3, #0]
 8003d34:	4b59      	ldr	r3, [pc, #356]	@ (8003e9c <parseDHCPMSG+0x428>)
 8003d36:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	617a      	str	r2, [r7, #20]
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	4b56      	ldr	r3, [pc, #344]	@ (8003e9c <parseDHCPMSG+0x428>)
 8003d42:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	617a      	str	r2, [r7, #20]
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	4b53      	ldr	r3, [pc, #332]	@ (8003e9c <parseDHCPMSG+0x428>)
 8003d4e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	617a      	str	r2, [r7, #20]
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	4b50      	ldr	r3, [pc, #320]	@ (8003e9c <parseDHCPMSG+0x428>)
 8003d5a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
   				break;
 8003d66:	e08d      	b.n	8003e84 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	617a      	str	r2, [r7, #20]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	617a      	str	r2, [r7, #20]
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	4b47      	ldr	r3, [pc, #284]	@ (8003ea0 <parseDHCPMSG+0x42c>)
 8003d82:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	617a      	str	r2, [r7, #20]
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	4b44      	ldr	r3, [pc, #272]	@ (8003ea0 <parseDHCPMSG+0x42c>)
 8003d8e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	617a      	str	r2, [r7, #20]
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	4b41      	ldr	r3, [pc, #260]	@ (8003ea0 <parseDHCPMSG+0x42c>)
 8003d9a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	617a      	str	r2, [r7, #20]
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea0 <parseDHCPMSG+0x42c>)
 8003da6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003da8:	7afb      	ldrb	r3, [r7, #11]
 8003daa:	3b04      	subs	r3, #4
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
   				break;
 8003db2:	e067      	b.n	8003e84 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3301      	adds	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	617a      	str	r2, [r7, #20]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	617a      	str	r2, [r7, #20]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <parseDHCPMSG+0x430>)
 8003dd0:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003dd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ea4 <parseDHCPMSG+0x430>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	021a      	lsls	r2, r3, #8
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	6179      	str	r1, [r7, #20]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	4a30      	ldr	r2, [pc, #192]	@ (8003ea4 <parseDHCPMSG+0x430>)
 8003de4:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003de6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <parseDHCPMSG+0x430>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	6179      	str	r1, [r7, #20]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea4 <parseDHCPMSG+0x430>)
 8003df8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea4 <parseDHCPMSG+0x430>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	021a      	lsls	r2, r3, #8
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	6179      	str	r1, [r7, #20]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <parseDHCPMSG+0x430>)
 8003e0c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003e0e:	e039      	b.n	8003e84 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	617a      	str	r2, [r7, #20]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	617a      	str	r2, [r7, #20]
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea8 <parseDHCPMSG+0x434>)
 8003e2a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	617a      	str	r2, [r7, #20]
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea8 <parseDHCPMSG+0x434>)
 8003e36:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	617a      	str	r2, [r7, #20]
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	4b19      	ldr	r3, [pc, #100]	@ (8003ea8 <parseDHCPMSG+0x434>)
 8003e42:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	617a      	str	r2, [r7, #20]
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	4b16      	ldr	r3, [pc, #88]	@ (8003ea8 <parseDHCPMSG+0x434>)
 8003e4e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003e50:	793a      	ldrb	r2, [r7, #4]
 8003e52:	4b16      	ldr	r3, [pc, #88]	@ (8003eac <parseDHCPMSG+0x438>)
 8003e54:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003e56:	797a      	ldrb	r2, [r7, #5]
 8003e58:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <parseDHCPMSG+0x438>)
 8003e5a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003e5c:	79ba      	ldrb	r2, [r7, #6]
 8003e5e:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <parseDHCPMSG+0x438>)
 8003e60:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003e62:	79fa      	ldrb	r2, [r7, #7]
 8003e64:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <parseDHCPMSG+0x438>)
 8003e66:	70da      	strb	r2, [r3, #3]
   				break;
 8003e68:	e00c      	b.n	8003e84 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	617a      	str	r2, [r7, #20]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4413      	add	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
   				break;
 8003e82:	bf00      	nop
		while ( p < e ) {
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f4ff ae8a 	bcc.w	8003ba2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003e8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200073d4 	.word	0x200073d4
 8003ea0:	200073dc 	.word	0x200073dc
 8003ea4:	20000054 	.word	0x20000054
 8003ea8:	200073c4 	.word	0x200073c4
 8003eac:	200073c8 	.word	0x200073c8

08003eb0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80040b4 <DHCP_run+0x204>)
 8003eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d101      	bne.n	8003ec4 <DHCP_run+0x14>
 8003ec0:	2305      	movs	r3, #5
 8003ec2:	e0f3      	b.n	80040ac <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003ec4:	4b7c      	ldr	r3, [pc, #496]	@ (80040b8 <DHCP_run+0x208>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	3301      	adds	r3, #1
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 fb7c 	bl	80055d0 <WIZCHIP_READ>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b22      	cmp	r3, #34	@ 0x22
 8003edc:	d006      	beq.n	8003eec <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003ede:	4b76      	ldr	r3, [pc, #472]	@ (80040b8 <DHCP_run+0x208>)
 8003ee0:	7818      	ldrb	r0, [r3, #0]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2244      	movs	r2, #68	@ 0x44
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	f000 fabe 	bl	8004468 <socket>

	ret = DHCP_RUNNING;
 8003eec:	2301      	movs	r3, #1
 8003eee:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003ef0:	f7ff fdc0 	bl	8003a74 <parseDHCPMSG>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003ef8:	4b6e      	ldr	r3, [pc, #440]	@ (80040b4 <DHCP_run+0x204>)
 8003efa:	f993 3000 	ldrsb.w	r3, [r3]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	f200 80d0 	bhi.w	80040a4 <DHCP_run+0x1f4>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <DHCP_run+0x5c>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f21 	.word	0x08003f21
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08003f89 	.word	0x08003f89
 8003f18:	08003fd9 	.word	0x08003fd9
 8003f1c:	08004033 	.word	0x08004033
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003f20:	4b66      	ldr	r3, [pc, #408]	@ (80040bc <DHCP_run+0x20c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003f26:	4b65      	ldr	r3, [pc, #404]	@ (80040bc <DHCP_run+0x20c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003f2c:	4b63      	ldr	r3, [pc, #396]	@ (80040bc <DHCP_run+0x20c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8003f32:	4b62      	ldr	r3, [pc, #392]	@ (80040bc <DHCP_run+0x20c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003f38:	f7fe fffa 	bl	8002f30 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80040b4 <DHCP_run+0x204>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
   		break;
 8003f42:	e0b2      	b.n	80040aa <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8003f44:	79bb      	ldrb	r3, [r7, #6]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d119      	bne.n	8003f7e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8003f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80040c0 <DHCP_run+0x210>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	7c1a      	ldrb	r2, [r3, #16]
 8003f50:	4b5a      	ldr	r3, [pc, #360]	@ (80040bc <DHCP_run+0x20c>)
 8003f52:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8003f54:	4b5a      	ldr	r3, [pc, #360]	@ (80040c0 <DHCP_run+0x210>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	7c5a      	ldrb	r2, [r3, #17]
 8003f5a:	4b58      	ldr	r3, [pc, #352]	@ (80040bc <DHCP_run+0x20c>)
 8003f5c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8003f5e:	4b58      	ldr	r3, [pc, #352]	@ (80040c0 <DHCP_run+0x210>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	7c9a      	ldrb	r2, [r3, #18]
 8003f64:	4b55      	ldr	r3, [pc, #340]	@ (80040bc <DHCP_run+0x20c>)
 8003f66:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8003f68:	4b55      	ldr	r3, [pc, #340]	@ (80040c0 <DHCP_run+0x210>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	7cda      	ldrb	r2, [r3, #19]
 8003f6e:	4b53      	ldr	r3, [pc, #332]	@ (80040bc <DHCP_run+0x20c>)
 8003f70:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8003f72:	f7ff f9a3 	bl	80032bc <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8003f76:	4b4f      	ldr	r3, [pc, #316]	@ (80040b4 <DHCP_run+0x204>)
 8003f78:	2202      	movs	r2, #2
 8003f7a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8003f7c:	e095      	b.n	80040aa <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8003f7e:	f000 f8b1 	bl	80040e4 <check_DHCP_timeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
         break;
 8003f86:	e090      	b.n	80040aa <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8003f88:	79bb      	ldrb	r3, [r7, #6]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d116      	bne.n	8003fbc <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8003f8e:	f000 f909 	bl	80041a4 <check_DHCP_leasedIP>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8003f98:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <DHCP_run+0x214>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4798      	blx	r3
					reset_DHCP_timeout();
 8003f9e:	f000 f9d3 	bl	8004348 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8003fa2:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <DHCP_run+0x204>)
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8003fa8:	e07f      	b.n	80040aa <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8003faa:	f000 f9cd 	bl	8004348 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8003fae:	4b46      	ldr	r3, [pc, #280]	@ (80040c8 <DHCP_run+0x218>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80040b4 <DHCP_run+0x204>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
		break;
 8003fba:	e076      	b.n	80040aa <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8003fbc:	79bb      	ldrb	r3, [r7, #6]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d105      	bne.n	8003fce <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8003fc2:	f000 f9c1 	bl	8004348 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80040b4 <DHCP_run+0x204>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
		break;
 8003fcc:	e06d      	b.n	80040aa <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8003fce:	f000 f889 	bl	80040e4 <check_DHCP_timeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
		break;
 8003fd6:	e068      	b.n	80040aa <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003fd8:	2304      	movs	r3, #4
 8003fda:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <DHCP_run+0x21c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d060      	beq.n	80040a8 <DHCP_run+0x1f8>
 8003fe6:	4b39      	ldr	r3, [pc, #228]	@ (80040cc <DHCP_run+0x21c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	085a      	lsrs	r2, r3, #1
 8003fec:	4b38      	ldr	r3, [pc, #224]	@ (80040d0 <DHCP_run+0x220>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d259      	bcs.n	80040a8 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003ff8:	4b30      	ldr	r3, [pc, #192]	@ (80040bc <DHCP_run+0x20c>)
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	4b35      	ldr	r3, [pc, #212]	@ (80040d4 <DHCP_run+0x224>)
 8003ffe:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8004000:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <DHCP_run+0x20c>)
 8004002:	785a      	ldrb	r2, [r3, #1]
 8004004:	4b33      	ldr	r3, [pc, #204]	@ (80040d4 <DHCP_run+0x224>)
 8004006:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004008:	4b2c      	ldr	r3, [pc, #176]	@ (80040bc <DHCP_run+0x20c>)
 800400a:	789a      	ldrb	r2, [r3, #2]
 800400c:	4b31      	ldr	r3, [pc, #196]	@ (80040d4 <DHCP_run+0x224>)
 800400e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8004010:	4b2a      	ldr	r3, [pc, #168]	@ (80040bc <DHCP_run+0x20c>)
 8004012:	78da      	ldrb	r2, [r3, #3]
 8004014:	4b2f      	ldr	r3, [pc, #188]	@ (80040d4 <DHCP_run+0x224>)
 8004016:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8004018:	4b2f      	ldr	r3, [pc, #188]	@ (80040d8 <DHCP_run+0x228>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	4a2e      	ldr	r2, [pc, #184]	@ (80040d8 <DHCP_run+0x228>)
 8004020:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8004022:	f7ff f94b 	bl	80032bc <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8004026:	f000 f98f 	bl	8004348 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800402a:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <DHCP_run+0x204>)
 800402c:	2204      	movs	r2, #4
 800402e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8004030:	e03a      	b.n	80040a8 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8004032:	2304      	movs	r3, #4
 8004034:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8004036:	79bb      	ldrb	r3, [r7, #6]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d125      	bne.n	8004088 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800403c:	4b27      	ldr	r3, [pc, #156]	@ (80040dc <DHCP_run+0x22c>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004042:	4b24      	ldr	r3, [pc, #144]	@ (80040d4 <DHCP_run+0x224>)
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	4b1d      	ldr	r3, [pc, #116]	@ (80040bc <DHCP_run+0x20c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d111      	bne.n	8004072 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800404e:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <DHCP_run+0x224>)
 8004050:	785a      	ldrb	r2, [r3, #1]
 8004052:	4b1a      	ldr	r3, [pc, #104]	@ (80040bc <DHCP_run+0x20c>)
 8004054:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004056:	429a      	cmp	r2, r3
 8004058:	d10b      	bne.n	8004072 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800405a:	4b1e      	ldr	r3, [pc, #120]	@ (80040d4 <DHCP_run+0x224>)
 800405c:	789a      	ldrb	r2, [r3, #2]
 800405e:	4b17      	ldr	r3, [pc, #92]	@ (80040bc <DHCP_run+0x20c>)
 8004060:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d105      	bne.n	8004072 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <DHCP_run+0x224>)
 8004068:	78da      	ldrb	r2, [r3, #3]
 800406a:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <DHCP_run+0x20c>)
 800406c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d004      	beq.n	800407c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8004072:	2303      	movs	r3, #3
 8004074:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8004076:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <DHCP_run+0x230>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800407c:	f000 f964 	bl	8004348 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <DHCP_run+0x204>)
 8004082:	2203      	movs	r2, #3
 8004084:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8004086:	e010      	b.n	80040aa <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8004088:	79bb      	ldrb	r3, [r7, #6]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d105      	bne.n	800409a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800408e:	f000 f95b 	bl	8004348 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004092:	4b08      	ldr	r3, [pc, #32]	@ (80040b4 <DHCP_run+0x204>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
	   	break;
 8004098:	e007      	b.n	80040aa <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800409a:	f000 f823 	bl	80040e4 <check_DHCP_timeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80040a2:	e002      	b.n	80040aa <DHCP_run+0x1fa>
		default :
   		break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <DHCP_run+0x1fa>
		break;
 80040a8:	bf00      	nop
	}

	return ret;
 80040aa:	79fb      	ldrb	r3, [r7, #7]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	200073e0 	.word	0x200073e0
 80040b8:	200073c1 	.word	0x200073c1
 80040bc:	200073d0 	.word	0x200073d0
 80040c0:	200073ec 	.word	0x200073ec
 80040c4:	20000064 	.word	0x20000064
 80040c8:	2000006c 	.word	0x2000006c
 80040cc:	20000054 	.word	0x20000054
 80040d0:	200073e4 	.word	0x200073e4
 80040d4:	200073cc 	.word	0x200073cc
 80040d8:	200073e8 	.word	0x200073e8
 80040dc:	200073e1 	.word	0x200073e1
 80040e0:	20000068 	.word	0x20000068

080040e4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80040ea:	2301      	movs	r3, #1
 80040ec:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80040ee:	4b29      	ldr	r3, [pc, #164]	@ (8004194 <check_DHCP_timeout+0xb0>)
 80040f0:	f993 3000 	ldrsb.w	r3, [r3]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	dc2d      	bgt.n	8004154 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <check_DHCP_timeout+0xb4>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <check_DHCP_timeout+0xb8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d242      	bcs.n	800418a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8004104:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <check_DHCP_timeout+0xbc>)
 8004106:	f993 3000 	ldrsb.w	r3, [r3]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d00c      	beq.n	8004128 <check_DHCP_timeout+0x44>
 800410e:	2b04      	cmp	r3, #4
 8004110:	dc0d      	bgt.n	800412e <check_DHCP_timeout+0x4a>
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <check_DHCP_timeout+0x38>
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800411a:	e008      	b.n	800412e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800411c:	f7fe ff08 	bl	8002f30 <send_DHCP_DISCOVER>
				break;
 8004120:	e006      	b.n	8004130 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004122:	f7ff f8cb 	bl	80032bc <send_DHCP_REQUEST>
				break;
 8004126:	e003      	b.n	8004130 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004128:	f7ff f8c8 	bl	80032bc <send_DHCP_REQUEST>
				break;
 800412c:	e000      	b.n	8004130 <check_DHCP_timeout+0x4c>
				break;
 800412e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8004130:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <check_DHCP_timeout+0xb8>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8004136:	4b19      	ldr	r3, [pc, #100]	@ (800419c <check_DHCP_timeout+0xb8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330a      	adds	r3, #10
 800413c:	4a16      	ldr	r2, [pc, #88]	@ (8004198 <check_DHCP_timeout+0xb4>)
 800413e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8004140:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <check_DHCP_timeout+0xb0>)
 8004142:	f993 3000 	ldrsb.w	r3, [r3]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	3301      	adds	r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	b25a      	sxtb	r2, r3
 800414e:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <check_DHCP_timeout+0xb0>)
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e01a      	b.n	800418a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8004154:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <check_DHCP_timeout+0xbc>)
 8004156:	f993 3000 	ldrsb.w	r3, [r3]
 800415a:	2b04      	cmp	r3, #4
 800415c:	d00c      	beq.n	8004178 <check_DHCP_timeout+0x94>
 800415e:	2b04      	cmp	r3, #4
 8004160:	dc10      	bgt.n	8004184 <check_DHCP_timeout+0xa0>
 8004162:	2b01      	cmp	r3, #1
 8004164:	d002      	beq.n	800416c <check_DHCP_timeout+0x88>
 8004166:	2b02      	cmp	r3, #2
 8004168:	d006      	beq.n	8004178 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800416a:	e00b      	b.n	8004184 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <check_DHCP_timeout+0xbc>)
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8004172:	2300      	movs	r3, #0
 8004174:	71fb      	strb	r3, [r7, #7]
				break;
 8004176:	e006      	b.n	8004186 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8004178:	f7fe feda 	bl	8002f30 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800417c:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <check_DHCP_timeout+0xbc>)
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
				break;
 8004182:	e000      	b.n	8004186 <check_DHCP_timeout+0xa2>
				break;
 8004184:	bf00      	nop
		}
		reset_DHCP_timeout();
 8004186:	f000 f8df 	bl	8004348 <reset_DHCP_timeout>
	}
	return ret;
 800418a:	79fb      	ldrb	r3, [r7, #7]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200073e1 	.word	0x200073e1
 8004198:	20000058 	.word	0x20000058
 800419c:	200073e4 	.word	0x200073e4
 80041a0:	200073e0 	.word	0x200073e0

080041a4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80041aa:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80041ae:	f001 fa0f 	bl	80055d0 <WIZCHIP_READ>
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80041b6:	2103      	movs	r1, #3
 80041b8:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80041bc:	f001 fa54 	bl	8005668 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80041c0:	4b13      	ldr	r3, [pc, #76]	@ (8004210 <check_DHCP_leasedIP+0x6c>)
 80041c2:	7818      	ldrb	r0, [r3, #0]
 80041c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <check_DHCP_leasedIP+0x70>)
 80041cc:	2211      	movs	r2, #17
 80041ce:	4912      	ldr	r1, [pc, #72]	@ (8004218 <check_DHCP_leasedIP+0x74>)
 80041d0:	f000 fdca 	bl	8004d68 <sendto>
 80041d4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	4619      	mov	r1, r3
 80041da:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80041de:	f001 fa43 	bl	8005668 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f113 0f0d 	cmn.w	r3, #13
 80041e8:	d101      	bne.n	80041ee <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e00c      	b.n	8004208 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80041ee:	f7ff faef 	bl	80037d0 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80041f2:	4b0a      	ldr	r3, [pc, #40]	@ (800421c <check_DHCP_leasedIP+0x78>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80041f8:	bf00      	nop
 80041fa:	4b08      	ldr	r3, [pc, #32]	@ (800421c <check_DHCP_leasedIP+0x78>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d9f9      	bls.n	80041fa <check_DHCP_leasedIP+0x56>

		return 0;
 8004206:	2300      	movs	r3, #0
	}
}	
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200073c1 	.word	0x200073c1
 8004214:	200073d0 	.word	0x200073d0
 8004218:	080080ec 	.word	0x080080ec
 800421c:	200073e4 	.word	0x200073e4

08004220 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8004230:	2206      	movs	r2, #6
 8004232:	493f      	ldr	r1, [pc, #252]	@ (8004330 <DHCP_init+0x110>)
 8004234:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004238:	f001 fa64 	bl	8005704 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800423c:	4b3c      	ldr	r3, [pc, #240]	@ (8004330 <DHCP_init+0x110>)
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	4b3b      	ldr	r3, [pc, #236]	@ (8004330 <DHCP_init+0x110>)
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	4313      	orrs	r3, r2
 8004246:	b2da      	uxtb	r2, r3
 8004248:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <DHCP_init+0x110>)
 800424a:	789b      	ldrb	r3, [r3, #2]
 800424c:	4313      	orrs	r3, r2
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <DHCP_init+0x110>)
 8004252:	78db      	ldrb	r3, [r3, #3]
 8004254:	4313      	orrs	r3, r2
 8004256:	b2da      	uxtb	r2, r3
 8004258:	4b35      	ldr	r3, [pc, #212]	@ (8004330 <DHCP_init+0x110>)
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	4313      	orrs	r3, r2
 800425e:	b2da      	uxtb	r2, r3
 8004260:	4b33      	ldr	r3, [pc, #204]	@ (8004330 <DHCP_init+0x110>)
 8004262:	795b      	ldrb	r3, [r3, #5]
 8004264:	4313      	orrs	r3, r2
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d117      	bne.n	800429c <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800426c:	4b30      	ldr	r3, [pc, #192]	@ (8004330 <DHCP_init+0x110>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8004272:	4b2f      	ldr	r3, [pc, #188]	@ (8004330 <DHCP_init+0x110>)
 8004274:	2208      	movs	r2, #8
 8004276:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8004278:	4b2d      	ldr	r3, [pc, #180]	@ (8004330 <DHCP_init+0x110>)
 800427a:	22dc      	movs	r2, #220	@ 0xdc
 800427c:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800427e:	4b2c      	ldr	r3, [pc, #176]	@ (8004330 <DHCP_init+0x110>)
 8004280:	2200      	movs	r2, #0
 8004282:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8004284:	4b2a      	ldr	r3, [pc, #168]	@ (8004330 <DHCP_init+0x110>)
 8004286:	2200      	movs	r2, #0
 8004288:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800428a:	4b29      	ldr	r3, [pc, #164]	@ (8004330 <DHCP_init+0x110>)
 800428c:	2200      	movs	r2, #0
 800428e:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8004290:	2206      	movs	r2, #6
 8004292:	4927      	ldr	r1, [pc, #156]	@ (8004330 <DHCP_init+0x110>)
 8004294:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004298:	f001 fa94 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 800429c:	4a25      	ldr	r2, [pc, #148]	@ (8004334 <DHCP_init+0x114>)
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80042a2:	4a25      	ldr	r2, [pc, #148]	@ (8004338 <DHCP_init+0x118>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80042a8:	4b24      	ldr	r3, [pc, #144]	@ (800433c <DHCP_init+0x11c>)
 80042aa:	4a25      	ldr	r2, [pc, #148]	@ (8004340 <DHCP_init+0x120>)
 80042ac:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80042ae:	4b20      	ldr	r3, [pc, #128]	@ (8004330 <DHCP_init+0x110>)
 80042b0:	78db      	ldrb	r3, [r3, #3]
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b21      	ldr	r3, [pc, #132]	@ (800433c <DHCP_init+0x11c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4413      	add	r3, r2
 80042ba:	4a20      	ldr	r2, [pc, #128]	@ (800433c <DHCP_init+0x11c>)
 80042bc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80042be:	4b1c      	ldr	r3, [pc, #112]	@ (8004330 <DHCP_init+0x110>)
 80042c0:	791b      	ldrb	r3, [r3, #4]
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <DHCP_init+0x11c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <DHCP_init+0x11c>)
 80042cc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80042ce:	4b18      	ldr	r3, [pc, #96]	@ (8004330 <DHCP_init+0x110>)
 80042d0:	795b      	ldrb	r3, [r3, #5]
 80042d2:	461a      	mov	r2, r3
 80042d4:	4b19      	ldr	r3, [pc, #100]	@ (800433c <DHCP_init+0x11c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	4a18      	ldr	r2, [pc, #96]	@ (800433c <DHCP_init+0x11c>)
 80042dc:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80042de:	4b14      	ldr	r3, [pc, #80]	@ (8004330 <DHCP_init+0x110>)
 80042e0:	78da      	ldrb	r2, [r3, #3]
 80042e2:	4b13      	ldr	r3, [pc, #76]	@ (8004330 <DHCP_init+0x110>)
 80042e4:	791b      	ldrb	r3, [r3, #4]
 80042e6:	4053      	eors	r3, r2
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4b11      	ldr	r3, [pc, #68]	@ (8004330 <DHCP_init+0x110>)
 80042ec:	795b      	ldrb	r3, [r3, #5]
 80042ee:	4053      	eors	r3, r2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b11      	ldr	r3, [pc, #68]	@ (800433c <DHCP_init+0x11c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4413      	add	r3, r2
 80042fa:	4a10      	ldr	r2, [pc, #64]	@ (800433c <DHCP_init+0x11c>)
 80042fc:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80042fe:	f107 030c 	add.w	r3, r7, #12
 8004302:	2204      	movs	r2, #4
 8004304:	4619      	mov	r1, r3
 8004306:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800430a:	f001 fa5b 	bl	80057c4 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800430e:	f107 030c 	add.w	r3, r7, #12
 8004312:	2204      	movs	r2, #4
 8004314:	4619      	mov	r1, r3
 8004316:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800431a:	f001 fa53 	bl	80057c4 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800431e:	f000 f813 	bl	8004348 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8004322:	4b08      	ldr	r3, [pc, #32]	@ (8004344 <DHCP_init+0x124>)
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200073f0 	.word	0x200073f0
 8004334:	200073c1 	.word	0x200073c1
 8004338:	200073ec 	.word	0x200073ec
 800433c:	200073e8 	.word	0x200073e8
 8004340:	12345678 	.word	0x12345678
 8004344:	200073e0 	.word	0x200073e0

08004348 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <reset_DHCP_timeout+0x20>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <reset_DHCP_timeout+0x24>)
 8004354:	220a      	movs	r2, #10
 8004356:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8004358:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <reset_DHCP_timeout+0x28>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
}
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	200073e4 	.word	0x200073e4
 800436c:	20000058 	.word	0x20000058
 8004370:	200073e1 	.word	0x200073e1

08004374 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <getIPfromDHCP+0x3c>)
 800437e:	781a      	ldrb	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3301      	adds	r3, #1
 8004388:	4a09      	ldr	r2, [pc, #36]	@ (80043b0 <getIPfromDHCP+0x3c>)
 800438a:	7852      	ldrb	r2, [r2, #1]
 800438c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3302      	adds	r3, #2
 8004392:	4a07      	ldr	r2, [pc, #28]	@ (80043b0 <getIPfromDHCP+0x3c>)
 8004394:	7892      	ldrb	r2, [r2, #2]
 8004396:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3303      	adds	r3, #3
 800439c:	4a04      	ldr	r2, [pc, #16]	@ (80043b0 <getIPfromDHCP+0x3c>)
 800439e:	78d2      	ldrb	r2, [r2, #3]
 80043a0:	701a      	strb	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	200073d0 	.word	0x200073d0

080043b4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <getGWfromDHCP+0x3c>)
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3301      	adds	r3, #1
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <getGWfromDHCP+0x3c>)
 80043ca:	7852      	ldrb	r2, [r2, #1]
 80043cc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3302      	adds	r3, #2
 80043d2:	4a07      	ldr	r2, [pc, #28]	@ (80043f0 <getGWfromDHCP+0x3c>)
 80043d4:	7892      	ldrb	r2, [r2, #2]
 80043d6:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3303      	adds	r3, #3
 80043dc:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <getGWfromDHCP+0x3c>)
 80043de:	78d2      	ldrb	r2, [r2, #3]
 80043e0:	701a      	strb	r2, [r3, #0]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	200073d4 	.word	0x200073d4

080043f4 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <getSNfromDHCP+0x3c>)
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3301      	adds	r3, #1
 8004408:	4a09      	ldr	r2, [pc, #36]	@ (8004430 <getSNfromDHCP+0x3c>)
 800440a:	7852      	ldrb	r2, [r2, #1]
 800440c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3302      	adds	r3, #2
 8004412:	4a07      	ldr	r2, [pc, #28]	@ (8004430 <getSNfromDHCP+0x3c>)
 8004414:	7892      	ldrb	r2, [r2, #2]
 8004416:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3303      	adds	r3, #3
 800441c:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <getSNfromDHCP+0x3c>)
 800441e:	78d2      	ldrb	r2, [r2, #3]
 8004420:	701a      	strb	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	200073d8 	.word	0x200073d8

08004434 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	2b09      	cmp	r3, #9
 800444a:	d803      	bhi.n	8004454 <NibbleToHex+0x20>
    return nibble + '0';
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	3330      	adds	r3, #48	@ 0x30
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e002      	b.n	800445a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	3337      	adds	r3, #55	@ 0x37
 8004458:	b2db      	uxtb	r3, r3
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4623      	mov	r3, r4
 8004478:	71fb      	strb	r3, [r7, #7]
 800447a:	4603      	mov	r3, r0
 800447c:	71bb      	strb	r3, [r7, #6]
 800447e:	460b      	mov	r3, r1
 8004480:	80bb      	strh	r3, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d902      	bls.n	8004492 <socket+0x2a>
 800448c:	f04f 33ff 	mov.w	r3, #4294967295
 8004490:	e0f0      	b.n	8004674 <socket+0x20c>
	switch(protocol)
 8004492:	79bb      	ldrb	r3, [r7, #6]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d005      	beq.n	80044a4 <socket+0x3c>
 8004498:	2b00      	cmp	r3, #0
 800449a:	dd11      	ble.n	80044c0 <socket+0x58>
 800449c:	3b02      	subs	r3, #2
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d80e      	bhi.n	80044c0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80044a2:	e011      	b.n	80044c8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80044a4:	f107 030c 	add.w	r3, r7, #12
 80044a8:	2204      	movs	r2, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80044b0:	f001 f928 	bl	8005704 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d105      	bne.n	80044c6 <socket+0x5e>
 80044ba:	f06f 0302 	mvn.w	r3, #2
 80044be:	e0d9      	b.n	8004674 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80044c0:	f06f 0304 	mvn.w	r3, #4
 80044c4:	e0d6      	b.n	8004674 <socket+0x20c>
	    break;
 80044c6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <socket+0x70>
 80044d2:	f06f 0305 	mvn.w	r3, #5
 80044d6:	e0cd      	b.n	8004674 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d028      	beq.n	8004530 <socket+0xc8>
	{
   	switch(protocol)
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d002      	beq.n	80044ea <socket+0x82>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d008      	beq.n	80044fa <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80044e8:	e022      	b.n	8004530 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11a      	bne.n	800452a <socket+0xc2>
 80044f4:	f06f 0305 	mvn.w	r3, #5
 80044f8:	e0bc      	b.n	8004674 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d006      	beq.n	8004512 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004508:	2b00      	cmp	r3, #0
 800450a:	db02      	blt.n	8004512 <socket+0xaa>
 800450c:	f06f 0305 	mvn.w	r3, #5
 8004510:	e0b0      	b.n	8004674 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800451c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db04      	blt.n	800452e <socket+0xc6>
 8004524:	f06f 0305 	mvn.w	r3, #5
 8004528:	e0a4      	b.n	8004674 <socket+0x20c>
   	      break;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <socket+0xc8>
   	      break;
 800452e:	bf00      	nop
   	}
   }
	close(sn);
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f8ac 	bl	8004690 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	3301      	adds	r3, #1
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4618      	mov	r0, r3
 8004542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004546:	f023 030f 	bic.w	r3, r3, #15
 800454a:	b25a      	sxtb	r2, r3
 800454c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004550:	4313      	orrs	r3, r2
 8004552:	b25b      	sxtb	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	4619      	mov	r1, r3
 8004558:	f001 f886 	bl	8005668 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800455c:	88bb      	ldrh	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d110      	bne.n	8004584 <socket+0x11c>
	{
	   port = sock_any_port++;
 8004562:	4b46      	ldr	r3, [pc, #280]	@ (800467c <socket+0x214>)
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	b291      	uxth	r1, r2
 800456a:	4a44      	ldr	r2, [pc, #272]	@ (800467c <socket+0x214>)
 800456c:	8011      	strh	r1, [r2, #0]
 800456e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004570:	4b42      	ldr	r3, [pc, #264]	@ (800467c <socket+0x214>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8004578:	4293      	cmp	r3, r2
 800457a:	d103      	bne.n	8004584 <socket+0x11c>
 800457c:	4b3f      	ldr	r3, [pc, #252]	@ (800467c <socket+0x214>)
 800457e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8004582:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	3301      	adds	r3, #1
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004590:	461a      	mov	r2, r3
 8004592:	88bb      	ldrh	r3, [r7, #4]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	b29b      	uxth	r3, r3
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f001 f863 	bl	8005668 <WIZCHIP_WRITE>
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	3301      	adds	r3, #1
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	88bb      	ldrh	r3, [r7, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f001 f856 	bl	8005668 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	3301      	adds	r3, #1
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f84c 	bl	8005668 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80045d0:	bf00      	nop
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	3301      	adds	r3, #1
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fff6 	bl	80055d0 <WIZCHIP_READ>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f3      	bne.n	80045d2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2201      	movs	r2, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	b21b      	sxth	r3, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	b21a      	sxth	r2, r3
 80045f8:	4b21      	ldr	r3, [pc, #132]	@ (8004680 <socket+0x218>)
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b21b      	sxth	r3, r3
 80045fe:	4013      	ands	r3, r2
 8004600:	b21b      	sxth	r3, r3
 8004602:	b29a      	uxth	r2, r3
 8004604:	4b1e      	ldr	r3, [pc, #120]	@ (8004680 <socket+0x218>)
 8004606:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 0201 	and.w	r2, r3, #1
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	b21a      	sxth	r2, r3
 8004616:	4b1a      	ldr	r3, [pc, #104]	@ (8004680 <socket+0x218>)
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b21b      	sxth	r3, r3
 800461c:	4313      	orrs	r3, r2
 800461e:	b21b      	sxth	r3, r3
 8004620:	b29a      	uxth	r2, r3
 8004622:	4b17      	ldr	r3, [pc, #92]	@ (8004680 <socket+0x218>)
 8004624:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	2201      	movs	r2, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	b21b      	sxth	r3, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	b21a      	sxth	r2, r3
 8004634:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <socket+0x21c>)
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b21b      	sxth	r3, r3
 800463a:	4013      	ands	r3, r2
 800463c:	b21b      	sxth	r3, r3
 800463e:	b29a      	uxth	r2, r3
 8004640:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <socket+0x21c>)
 8004642:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	4a10      	ldr	r2, [pc, #64]	@ (8004688 <socket+0x220>)
 8004648:	2100      	movs	r1, #0
 800464a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	4a0e      	ldr	r2, [pc, #56]	@ (800468c <socket+0x224>)
 8004652:	2100      	movs	r1, #0
 8004654:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004656:	bf00      	nop
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	3301      	adds	r3, #1
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004664:	4618      	mov	r0, r3
 8004666:	f000 ffb3 	bl	80055d0 <WIZCHIP_READ>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f3      	beq.n	8004658 <socket+0x1f0>
   return (int8_t)sn;
 8004670:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	20000070 	.word	0x20000070
 8004680:	200073f6 	.word	0x200073f6
 8004684:	200073f8 	.word	0x200073f8
 8004688:	200073fc 	.word	0x200073fc
 800468c:	2000740c 	.word	0x2000740c

08004690 <close>:

int8_t close(uint8_t sn)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d902      	bls.n	80046a6 <close+0x16>
 80046a0:	f04f 33ff 	mov.w	r3, #4294967295
 80046a4:	e055      	b.n	8004752 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	3301      	adds	r3, #1
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046b2:	2110      	movs	r1, #16
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 ffd7 	bl	8005668 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80046ba:	bf00      	nop
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	3301      	adds	r3, #1
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 ff81 	bl	80055d0 <WIZCHIP_READ>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f3      	bne.n	80046bc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	3301      	adds	r3, #1
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80046e0:	211f      	movs	r1, #31
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 ffc0 	bl	8005668 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2201      	movs	r2, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	b21a      	sxth	r2, r3
 80046f6:	4b19      	ldr	r3, [pc, #100]	@ (800475c <close+0xcc>)
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b21b      	sxth	r3, r3
 80046fc:	4013      	ands	r3, r2
 80046fe:	b21b      	sxth	r3, r3
 8004700:	b29a      	uxth	r2, r3
 8004702:	4b16      	ldr	r3, [pc, #88]	@ (800475c <close+0xcc>)
 8004704:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2201      	movs	r2, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	b21b      	sxth	r3, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	b21a      	sxth	r2, r3
 8004714:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <close+0xd0>)
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b21b      	sxth	r3, r3
 800471a:	4013      	ands	r3, r2
 800471c:	b21b      	sxth	r3, r3
 800471e:	b29a      	uxth	r2, r3
 8004720:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <close+0xd0>)
 8004722:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	4a0f      	ldr	r2, [pc, #60]	@ (8004764 <close+0xd4>)
 8004728:	2100      	movs	r1, #0
 800472a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	4a0d      	ldr	r2, [pc, #52]	@ (8004768 <close+0xd8>)
 8004732:	2100      	movs	r1, #0
 8004734:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004736:	bf00      	nop
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	3301      	adds	r3, #1
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004744:	4618      	mov	r0, r3
 8004746:	f000 ff43 	bl	80055d0 <WIZCHIP_READ>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f3      	bne.n	8004738 <close+0xa8>
	return SOCK_OK;
 8004750:	2301      	movs	r3, #1
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	200073f6 	.word	0x200073f6
 8004760:	200073f8 	.word	0x200073f8
 8004764:	200073fc 	.word	0x200073fc
 8004768:	2000740c 	.word	0x2000740c

0800476c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	71fb      	strb	r3, [r7, #7]
 8004778:	4613      	mov	r3, r2
 800477a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d902      	bls.n	8004788 <connect+0x1c>
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
 8004786:	e0c6      	b.n	8004916 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	3301      	adds	r3, #1
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4618      	mov	r0, r3
 8004792:	f000 ff1d 	bl	80055d0 <WIZCHIP_READ>
 8004796:	4603      	mov	r3, r0
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	2b01      	cmp	r3, #1
 800479e:	d002      	beq.n	80047a6 <connect+0x3a>
 80047a0:	f06f 0304 	mvn.w	r3, #4
 80047a4:	e0b7      	b.n	8004916 <connect+0x1aa>
   CHECK_SOCKINIT();
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	3301      	adds	r3, #1
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 ff0c 	bl	80055d0 <WIZCHIP_READ>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b13      	cmp	r3, #19
 80047bc:	d002      	beq.n	80047c4 <connect+0x58>
 80047be:	f06f 0302 	mvn.w	r3, #2
 80047c2:	e0a8      	b.n	8004916 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	3201      	adds	r2, #1
 80047d2:	7812      	ldrb	r2, [r2, #0]
 80047d4:	4413      	add	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	3202      	adds	r2, #2
 80047e0:	7812      	ldrb	r2, [r2, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	3203      	adds	r2, #3
 80047ee:	7812      	ldrb	r2, [r2, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d002      	beq.n	8004802 <connect+0x96>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <connect+0x9c>
 8004802:	f06f 030b 	mvn.w	r3, #11
 8004806:	e086      	b.n	8004916 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004808:	88bb      	ldrh	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <connect+0xa8>
 800480e:	f06f 030a 	mvn.w	r3, #10
 8004812:	e080      	b.n	8004916 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	3301      	adds	r3, #1
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004820:	2204      	movs	r2, #4
 8004822:	6839      	ldr	r1, [r7, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 ffcd 	bl	80057c4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3301      	adds	r3, #1
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004836:	461a      	mov	r2, r3
 8004838:	88bb      	ldrh	r3, [r7, #4]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f000 ff10 	bl	8005668 <WIZCHIP_WRITE>
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	3301      	adds	r3, #1
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004854:	461a      	mov	r2, r3
 8004856:	88bb      	ldrh	r3, [r7, #4]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 ff03 	bl	8005668 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	3301      	adds	r3, #1
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800486e:	2104      	movs	r1, #4
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fef9 	bl	8005668 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004876:	bf00      	nop
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	3301      	adds	r3, #1
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fea3 	bl	80055d0 <WIZCHIP_READ>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f3      	bne.n	8004878 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004890:	4b23      	ldr	r3, [pc, #140]	@ (8004920 <connect+0x1b4>)
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	fa42 f303 	asr.w	r3, r2, r3
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d02b      	beq.n	80048fc <connect+0x190>
 80048a4:	2300      	movs	r3, #0
 80048a6:	e036      	b.n	8004916 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	3301      	adds	r3, #1
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fe8b 	bl	80055d0 <WIZCHIP_READ>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00c      	beq.n	80048de <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	3301      	adds	r3, #1
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048d0:	2108      	movs	r1, #8
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fec8 	bl	8005668 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80048d8:	f06f 030c 	mvn.w	r3, #12
 80048dc:	e01b      	b.n	8004916 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	3301      	adds	r3, #1
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fe70 	bl	80055d0 <WIZCHIP_READ>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80048f6:	f06f 0303 	mvn.w	r3, #3
 80048fa:	e00c      	b.n	8004916 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3301      	adds	r3, #1
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe61 	bl	80055d0 <WIZCHIP_READ>
 800490e:	4603      	mov	r3, r0
 8004910:	2b17      	cmp	r3, #23
 8004912:	d1c9      	bne.n	80048a8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004914:	2301      	movs	r3, #1
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	200073f6 	.word	0x200073f6

08004924 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d902      	bls.n	800493a <disconnect+0x16>
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
 8004938:	e062      	b.n	8004a00 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3301      	adds	r3, #1
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fe44 	bl	80055d0 <WIZCHIP_READ>
 8004948:	4603      	mov	r3, r0
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	2b01      	cmp	r3, #1
 8004950:	d002      	beq.n	8004958 <disconnect+0x34>
 8004952:	f06f 0304 	mvn.w	r3, #4
 8004956:	e053      	b.n	8004a00 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3301      	adds	r3, #1
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004964:	2108      	movs	r1, #8
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fe7e 	bl	8005668 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800496c:	bf00      	nop
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	3301      	adds	r3, #1
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fe28 	bl	80055d0 <WIZCHIP_READ>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f3      	bne.n	800496e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	2201      	movs	r2, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	b21b      	sxth	r3, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	b21a      	sxth	r2, r3
 8004994:	4b1c      	ldr	r3, [pc, #112]	@ (8004a08 <disconnect+0xe4>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b21b      	sxth	r3, r3
 800499a:	4013      	ands	r3, r2
 800499c:	b21b      	sxth	r3, r3
 800499e:	b29a      	uxth	r2, r3
 80049a0:	4b19      	ldr	r3, [pc, #100]	@ (8004a08 <disconnect+0xe4>)
 80049a2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80049a4:	4b19      	ldr	r3, [pc, #100]	@ (8004a0c <disconnect+0xe8>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	fa42 f303 	asr.w	r3, r2, r3
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <disconnect+0xc2>
 80049b8:	2300      	movs	r3, #0
 80049ba:	e021      	b.n	8004a00 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	3301      	adds	r3, #1
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fe01 	bl	80055d0 <WIZCHIP_READ>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d006      	beq.n	80049e6 <disconnect+0xc2>
	   {
	      close(sn);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fe58 	bl	8004690 <close>
	      return SOCKERR_TIMEOUT;
 80049e0:	f06f 030c 	mvn.w	r3, #12
 80049e4:	e00c      	b.n	8004a00 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	3301      	adds	r3, #1
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fdec 	bl	80055d0 <WIZCHIP_READ>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1de      	bne.n	80049bc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80049fe:	2301      	movs	r3, #1
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	200073f8 	.word	0x200073f8
 8004a0c:	200073f6 	.word	0x200073f6

08004a10 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	6039      	str	r1, [r7, #0]
 8004a1a:	71fb      	strb	r3, [r7, #7]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d902      	bls.n	8004a34 <send+0x24>
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a32:	e0dd      	b.n	8004bf0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	3301      	adds	r3, #1
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fdc7 	bl	80055d0 <WIZCHIP_READ>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d002      	beq.n	8004a52 <send+0x42>
 8004a4c:	f06f 0304 	mvn.w	r3, #4
 8004a50:	e0ce      	b.n	8004bf0 <send+0x1e0>
   CHECK_SOCKDATA();
 8004a52:	88bb      	ldrh	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <send+0x4e>
 8004a58:	f06f 030d 	mvn.w	r3, #13
 8004a5c:	e0c8      	b.n	8004bf0 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	3301      	adds	r3, #1
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fdb0 	bl	80055d0 <WIZCHIP_READ>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b17      	cmp	r3, #23
 8004a78:	d005      	beq.n	8004a86 <send+0x76>
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b1c      	cmp	r3, #28
 8004a7e:	d002      	beq.n	8004a86 <send+0x76>
 8004a80:	f06f 0306 	mvn.w	r3, #6
 8004a84:	e0b4      	b.n	8004bf0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004a86:	4b5c      	ldr	r3, [pc, #368]	@ (8004bf8 <send+0x1e8>)
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	fa42 f303 	asr.w	r3, r2, r3
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d039      	beq.n	8004b0e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fd92 	bl	80055d0 <WIZCHIP_READ>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d019      	beq.n	8004af2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004aca:	2110      	movs	r1, #16
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fdcb 	bl	8005668 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	4b45      	ldr	r3, [pc, #276]	@ (8004bf8 <send+0x1e8>)
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	4b42      	ldr	r3, [pc, #264]	@ (8004bf8 <send+0x1e8>)
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	e00d      	b.n	8004b0e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <send+0xfa>
      {
         close(sn);
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fdc6 	bl	8004690 <close>
         return SOCKERR_TIMEOUT;
 8004b04:	f06f 030c 	mvn.w	r3, #12
 8004b08:	e072      	b.n	8004bf0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e070      	b.n	8004bf0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	3301      	adds	r3, #1
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fd58 	bl	80055d0 <WIZCHIP_READ>
 8004b20:	4603      	mov	r3, r0
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004b26:	88ba      	ldrh	r2, [r7, #4]
 8004b28:	89bb      	ldrh	r3, [r7, #12]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d901      	bls.n	8004b32 <send+0x122>
 8004b2e:	89bb      	ldrh	r3, [r7, #12]
 8004b30:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fea5 	bl	8005884 <getSn_TX_FSR>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	3301      	adds	r3, #1
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fd40 	bl	80055d0 <WIZCHIP_READ>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b17      	cmp	r3, #23
 8004b58:	d009      	beq.n	8004b6e <send+0x15e>
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b1c      	cmp	r3, #28
 8004b5e:	d006      	beq.n	8004b6e <send+0x15e>
      {
         close(sn);
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fd94 	bl	8004690 <close>
         return SOCKERR_SOCKSTATUS;
 8004b68:	f06f 0306 	mvn.w	r3, #6
 8004b6c:	e040      	b.n	8004bf0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004b6e:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <send+0x1ec>)
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	fa42 f303 	asr.w	r3, r2, r3
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <send+0x17e>
 8004b82:	88ba      	ldrh	r2, [r7, #4]
 8004b84:	89bb      	ldrh	r3, [r7, #12]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d901      	bls.n	8004b8e <send+0x17e>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e030      	b.n	8004bf0 <send+0x1e0>
      if(len <= freesize) break;
 8004b8e:	88ba      	ldrh	r2, [r7, #4]
 8004b90:	89bb      	ldrh	r3, [r7, #12]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d900      	bls.n	8004b98 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004b96:	e7cc      	b.n	8004b32 <send+0x122>
      if(len <= freesize) break;
 8004b98:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004b9a:	88ba      	ldrh	r2, [r7, #4]
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 ff01 	bl	80059a8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	3301      	adds	r3, #1
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004bb2:	2120      	movs	r1, #32
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fd57 	bl	8005668 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004bba:	bf00      	nop
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fd01 	bl	80055d0 <WIZCHIP_READ>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f3      	bne.n	8004bbc <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <send+0x1e8>)
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b21b      	sxth	r3, r3
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	4b03      	ldr	r3, [pc, #12]	@ (8004bf8 <send+0x1e8>)
 8004bec:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004bee:	88bb      	ldrh	r3, [r7, #4]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	200073f8 	.word	0x200073f8
 8004bfc:	200073f6 	.word	0x200073f6

08004c00 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	71fb      	strb	r3, [r7, #7]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d902      	bls.n	8004c24 <recv+0x24>
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	e09b      	b.n	8004d5c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	3301      	adds	r3, #1
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fccf 	bl	80055d0 <WIZCHIP_READ>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d002      	beq.n	8004c42 <recv+0x42>
 8004c3c:	f06f 0304 	mvn.w	r3, #4
 8004c40:	e08c      	b.n	8004d5c <recv+0x15c>
   CHECK_SOCKDATA();
 8004c42:	88bb      	ldrh	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <recv+0x4e>
 8004c48:	f06f 030d 	mvn.w	r3, #13
 8004c4c:	e086      	b.n	8004d5c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	3301      	adds	r3, #1
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fcb8 	bl	80055d0 <WIZCHIP_READ>
 8004c60:	4603      	mov	r3, r0
 8004c62:	029b      	lsls	r3, r3, #10
 8004c64:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004c66:	89ba      	ldrh	r2, [r7, #12]
 8004c68:	88bb      	ldrh	r3, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d201      	bcs.n	8004c72 <recv+0x72>
 8004c6e:	89bb      	ldrh	r3, [r7, #12]
 8004c70:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fe4e 	bl	8005916 <getSn_RX_RSR>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	3301      	adds	r3, #1
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fca0 	bl	80055d0 <WIZCHIP_READ>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b17      	cmp	r3, #23
 8004c98:	d026      	beq.n	8004ce8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b1c      	cmp	r3, #28
 8004c9e:	d11c      	bne.n	8004cda <recv+0xda>
            {
               if(recvsize != 0) break;
 8004ca0:	89bb      	ldrh	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d133      	bne.n	8004d0e <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fdeb 	bl	8005884 <getSn_TX_FSR>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461c      	mov	r4, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fc86 	bl	80055d0 <WIZCHIP_READ>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	029b      	lsls	r3, r3, #10
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	d10d      	bne.n	8004ce8 <recv+0xe8>
               {
                  close(sn);
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fcde 	bl	8004690 <close>
                  return SOCKERR_SOCKSTATUS;
 8004cd4:	f06f 0306 	mvn.w	r3, #6
 8004cd8:	e040      	b.n	8004d5c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fcd7 	bl	8004690 <close>
               return SOCKERR_SOCKSTATUS;
 8004ce2:	f06f 0306 	mvn.w	r3, #6
 8004ce6:	e039      	b.n	8004d5c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d64 <recv+0x164>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	fa42 f303 	asr.w	r3, r2, r3
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <recv+0x106>
 8004cfc:	89bb      	ldrh	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <recv+0x106>
 8004d02:	2300      	movs	r3, #0
 8004d04:	e02a      	b.n	8004d5c <recv+0x15c>
         if(recvsize != 0) break;
 8004d06:	89bb      	ldrh	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d102      	bne.n	8004d12 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004d0c:	e7b1      	b.n	8004c72 <recv+0x72>
               if(recvsize != 0) break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <recv+0x114>
         if(recvsize != 0) break;
 8004d12:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004d14:	89ba      	ldrh	r2, [r7, #12]
 8004d16:	88bb      	ldrh	r3, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d201      	bcs.n	8004d20 <recv+0x120>
 8004d1c:	89bb      	ldrh	r3, [r7, #12]
 8004d1e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004d20:	88ba      	ldrh	r2, [r7, #4]
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fe98 	bl	8005a5c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3301      	adds	r3, #1
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d38:	2140      	movs	r1, #64	@ 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fc94 	bl	8005668 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004d40:	bf00      	nop
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	3301      	adds	r3, #1
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fc3e 	bl	80055d0 <WIZCHIP_READ>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f3      	bne.n	8004d42 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004d5a:	88bb      	ldrh	r3, [r7, #4]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	200073f6 	.word	0x200073f6

08004d68 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]
 8004d76:	4613      	mov	r3, r2
 8004d78:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d902      	bls.n	8004d8e <sendto+0x26>
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8c:	e11a      	b.n	8004fc4 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	3301      	adds	r3, #1
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fc1a 	bl	80055d0 <WIZCHIP_READ>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	3b02      	subs	r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d902      	bls.n	8004dae <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004da8:	f06f 0304 	mvn.w	r3, #4
 8004dac:	e10a      	b.n	8004fc4 <sendto+0x25c>
         break;
 8004dae:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004db0:	89bb      	ldrh	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <sendto+0x54>
 8004db6:	f06f 030d 	mvn.w	r3, #13
 8004dba:	e103      	b.n	8004fc4 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	3201      	adds	r2, #1
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	4413      	add	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	3202      	adds	r2, #2
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	4413      	add	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	3203      	adds	r2, #3
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	4413      	add	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10e      	bne.n	8004e10 <sendto+0xa8>
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	3301      	adds	r3, #1
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fbe8 	bl	80055d0 <WIZCHIP_READ>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d002      	beq.n	8004e10 <sendto+0xa8>
 8004e0a:	f06f 030b 	mvn.w	r3, #11
 8004e0e:	e0d9      	b.n	8004fc4 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004e10:	8c3b      	ldrh	r3, [r7, #32]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10e      	bne.n	8004e34 <sendto+0xcc>
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fbd6 	bl	80055d0 <WIZCHIP_READ>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d002      	beq.n	8004e34 <sendto+0xcc>
 8004e2e:	f06f 030a 	mvn.w	r3, #10
 8004e32:	e0c7      	b.n	8004fc4 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	3301      	adds	r3, #1
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fbc5 	bl	80055d0 <WIZCHIP_READ>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b42      	cmp	r3, #66	@ 0x42
 8004e4e:	d008      	beq.n	8004e62 <sendto+0xfa>
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b22      	cmp	r3, #34	@ 0x22
 8004e54:	d005      	beq.n	8004e62 <sendto+0xfa>
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b32      	cmp	r3, #50	@ 0x32
 8004e5a:	d002      	beq.n	8004e62 <sendto+0xfa>
 8004e5c:	f06f 0306 	mvn.w	r3, #6
 8004e60:	e0b0      	b.n	8004fc4 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	3301      	adds	r3, #1
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004e6e:	2204      	movs	r2, #4
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fca6 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e84:	461a      	mov	r2, r3
 8004e86:	8c3b      	ldrh	r3, [r7, #32]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 fbe9 	bl	8005668 <WIZCHIP_WRITE>
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	8c3b      	ldrh	r3, [r7, #32]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 fbdc 	bl	8005668 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fb87 	bl	80055d0 <WIZCHIP_READ>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004ec8:	89ba      	ldrh	r2, [r7, #12]
 8004eca:	8abb      	ldrh	r3, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d901      	bls.n	8004ed4 <sendto+0x16c>
 8004ed0:	8abb      	ldrh	r3, [r7, #20]
 8004ed2:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fcd4 	bl	8005884 <getSn_TX_FSR>
 8004edc:	4603      	mov	r3, r0
 8004ede:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fb6f 	bl	80055d0 <WIZCHIP_READ>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <sendto+0x196>
 8004ef8:	f06f 0303 	mvn.w	r3, #3
 8004efc:	e062      	b.n	8004fc4 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004efe:	4b33      	ldr	r3, [pc, #204]	@ (8004fcc <sendto+0x264>)
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	fa42 f303 	asr.w	r3, r2, r3
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <sendto+0x1b6>
 8004f12:	89ba      	ldrh	r2, [r7, #12]
 8004f14:	8abb      	ldrh	r3, [r7, #20]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d901      	bls.n	8004f1e <sendto+0x1b6>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e052      	b.n	8004fc4 <sendto+0x25c>
      if(len <= freesize) break;
 8004f1e:	89ba      	ldrh	r2, [r7, #12]
 8004f20:	8abb      	ldrh	r3, [r7, #20]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d900      	bls.n	8004f28 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8004f26:	e7d5      	b.n	8004ed4 <sendto+0x16c>
      if(len <= freesize) break;
 8004f28:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8004f2a:	89ba      	ldrh	r2, [r7, #12]
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fd39 	bl	80059a8 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f42:	2120      	movs	r1, #32
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fb8f 	bl	8005668 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004f4a:	bf00      	nop
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	3301      	adds	r3, #1
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fb39 	bl	80055d0 <WIZCHIP_READ>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f3      	bne.n	8004f4c <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3301      	adds	r3, #1
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fb2d 	bl	80055d0 <WIZCHIP_READ>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00c      	beq.n	8004fa2 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f94:	2110      	movs	r1, #16
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fb66 	bl	8005668 <WIZCHIP_WRITE>
         break;
 8004f9c:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004f9e:	89bb      	ldrh	r3, [r7, #12]
 8004fa0:	e010      	b.n	8004fc4 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0db      	beq.n	8004f64 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004fb8:	2108      	movs	r1, #8
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fb54 	bl	8005668 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004fc0:	f06f 030c 	mvn.w	r3, #12
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200073f6 	.word	0x200073f6

08004fd0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	4603      	mov	r3, r0
 8004fdc:	73fb      	strb	r3, [r7, #15]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d902      	bls.n	8004ff2 <recvfrom+0x22>
 8004fec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff0:	e1d2      	b.n	8005398 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fae8 	bl	80055d0 <WIZCHIP_READ>
 8005000:	4603      	mov	r3, r0
 8005002:	777b      	strb	r3, [r7, #29]
 8005004:	7f7b      	ldrb	r3, [r7, #29]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	3b02      	subs	r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d902      	bls.n	8005016 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005010:	f06f 0304 	mvn.w	r3, #4
 8005014:	e1c0      	b.n	8005398 <recvfrom+0x3c8>
         break;
 8005016:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005018:	89bb      	ldrh	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <recvfrom+0x54>
 800501e:	f06f 030d 	mvn.w	r3, #13
 8005022:	e1b9      	b.n	8005398 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	4a87      	ldr	r2, [pc, #540]	@ (8005244 <recvfrom+0x274>)
 8005028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d128      	bne.n	8005082 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fc6f 	bl	8005916 <getSn_RX_RSR>
 8005038:	4603      	mov	r3, r0
 800503a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	3301      	adds	r3, #1
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fac1 	bl	80055d0 <WIZCHIP_READ>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <recvfrom+0x8a>
 8005054:	f06f 0303 	mvn.w	r3, #3
 8005058:	e19e      	b.n	8005398 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800505a:	4b7b      	ldr	r3, [pc, #492]	@ (8005248 <recvfrom+0x278>)
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	fa42 f303 	asr.w	r3, r2, r3
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <recvfrom+0xa8>
 800506e:	8bfb      	ldrh	r3, [r7, #30]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <recvfrom+0xa8>
 8005074:	2300      	movs	r3, #0
 8005076:	e18f      	b.n	8005398 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8005078:	8bfb      	ldrh	r3, [r7, #30]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d100      	bne.n	8005080 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800507e:	e7d7      	b.n	8005030 <recvfrom+0x60>
         if(pack_len != 0) break;
 8005080:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8005082:	7f7b      	ldrb	r3, [r7, #29]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	2b04      	cmp	r3, #4
 800508a:	d078      	beq.n	800517e <recvfrom+0x1ae>
 800508c:	2b04      	cmp	r3, #4
 800508e:	f300 8140 	bgt.w	8005312 <recvfrom+0x342>
 8005092:	2b02      	cmp	r3, #2
 8005094:	d003      	beq.n	800509e <recvfrom+0xce>
 8005096:	2b03      	cmp	r3, #3
 8005098:	f000 80da 	beq.w	8005250 <recvfrom+0x280>
 800509c:	e139      	b.n	8005312 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	4a68      	ldr	r2, [pc, #416]	@ (8005244 <recvfrom+0x274>)
 80050a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d151      	bne.n	800514e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80050aa:	f107 0114 	add.w	r1, r7, #20
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2208      	movs	r2, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fcd2 	bl	8005a5c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	3301      	adds	r3, #1
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80050c4:	2140      	movs	r1, #64	@ 0x40
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 face 	bl	8005668 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80050cc:	bf00      	nop
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3301      	adds	r3, #1
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fa78 	bl	80055d0 <WIZCHIP_READ>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f3      	bne.n	80050ce <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80050e6:	7d3a      	ldrb	r2, [r7, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3301      	adds	r3, #1
 80050f0:	7d7a      	ldrb	r2, [r7, #21]
 80050f2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3302      	adds	r3, #2
 80050f8:	7dba      	ldrb	r2, [r7, #22]
 80050fa:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3303      	adds	r3, #3
 8005100:	7dfa      	ldrb	r2, [r7, #23]
 8005102:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8005104:	7e3b      	ldrb	r3, [r7, #24]
 8005106:	461a      	mov	r2, r3
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	b29b      	uxth	r3, r3
 8005114:	7e7a      	ldrb	r2, [r7, #25]
 8005116:	4413      	add	r3, r2
 8005118:	b29a      	uxth	r2, r3
 800511a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800511e:	7eba      	ldrb	r2, [r7, #26]
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	4611      	mov	r1, r2
 8005124:	4a47      	ldr	r2, [pc, #284]	@ (8005244 <recvfrom+0x274>)
 8005126:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	4a45      	ldr	r2, [pc, #276]	@ (8005244 <recvfrom+0x274>)
 800512e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	b29a      	uxth	r2, r3
 8005136:	7efb      	ldrb	r3, [r7, #27]
 8005138:	4619      	mov	r1, r3
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	440a      	add	r2, r1
 800513e:	b291      	uxth	r1, r2
 8005140:	4a40      	ldr	r2, [pc, #256]	@ (8005244 <recvfrom+0x274>)
 8005142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	4a40      	ldr	r2, [pc, #256]	@ (800524c <recvfrom+0x27c>)
 800514a:	2180      	movs	r1, #128	@ 0x80
 800514c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	4a3c      	ldr	r2, [pc, #240]	@ (8005244 <recvfrom+0x274>)
 8005152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005156:	89ba      	ldrh	r2, [r7, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d202      	bcs.n	8005162 <recvfrom+0x192>
 800515c:	89bb      	ldrh	r3, [r7, #12]
 800515e:	83fb      	strh	r3, [r7, #30]
 8005160:	e004      	b.n	800516c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	4a37      	ldr	r2, [pc, #220]	@ (8005244 <recvfrom+0x274>)
 8005166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800516c:	8bfb      	ldrh	r3, [r7, #30]
 800516e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005170:	8bfa      	ldrh	r2, [r7, #30]
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fc70 	bl	8005a5c <wiz_recv_data>
			break;
 800517c:	e0d5      	b.n	800532a <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	4a30      	ldr	r2, [pc, #192]	@ (8005244 <recvfrom+0x274>)
 8005182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d145      	bne.n	8005216 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 800518a:	f107 0114 	add.w	r1, r7, #20
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2202      	movs	r2, #2
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fc62 	bl	8005a5c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	3301      	adds	r3, #1
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051a4:	2140      	movs	r1, #64	@ 0x40
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fa5e 	bl	8005668 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80051ac:	bf00      	nop
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	3301      	adds	r3, #1
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fa08 	bl	80055d0 <WIZCHIP_READ>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f3      	bne.n	80051ae <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80051c6:	7d3a      	ldrb	r2, [r7, #20]
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	4611      	mov	r1, r2
 80051cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005244 <recvfrom+0x274>)
 80051ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <recvfrom+0x274>)
 80051d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	b29b      	uxth	r3, r3
 80051de:	7d7a      	ldrb	r2, [r7, #21]
 80051e0:	4413      	add	r3, r2
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	3a02      	subs	r2, #2
 80051e8:	b291      	uxth	r1, r2
 80051ea:	4a16      	ldr	r2, [pc, #88]	@ (8005244 <recvfrom+0x274>)
 80051ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	4a14      	ldr	r2, [pc, #80]	@ (8005244 <recvfrom+0x274>)
 80051f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f8:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d906      	bls.n	800520e <recvfrom+0x23e>
   			{
   			   close(sn);
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fa44 	bl	8004690 <close>
   			   return SOCKFATAL_PACKLEN;
 8005208:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 800520c:	e0c4      	b.n	8005398 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	4a0e      	ldr	r2, [pc, #56]	@ (800524c <recvfrom+0x27c>)
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	4a0a      	ldr	r2, [pc, #40]	@ (8005244 <recvfrom+0x274>)
 800521a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800521e:	89ba      	ldrh	r2, [r7, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	d202      	bcs.n	800522a <recvfrom+0x25a>
 8005224:	89bb      	ldrh	r3, [r7, #12]
 8005226:	83fb      	strh	r3, [r7, #30]
 8005228:	e004      	b.n	8005234 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	4a05      	ldr	r2, [pc, #20]	@ (8005244 <recvfrom+0x274>)
 800522e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005232:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8005234:	8bfa      	ldrh	r2, [r7, #30]
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fc0e 	bl	8005a5c <wiz_recv_data>
		   break;
 8005240:	e073      	b.n	800532a <recvfrom+0x35a>
 8005242:	bf00      	nop
 8005244:	200073fc 	.word	0x200073fc
 8005248:	200073f6 	.word	0x200073f6
 800524c:	2000740c 	.word	0x2000740c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	4a53      	ldr	r2, [pc, #332]	@ (80053a0 <recvfrom+0x3d0>)
 8005254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d144      	bne.n	80052e6 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 800525c:	f107 0114 	add.w	r1, r7, #20
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2206      	movs	r2, #6
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fbf9 	bl	8005a5c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	3301      	adds	r3, #1
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005276:	2140      	movs	r1, #64	@ 0x40
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f9f5 	bl	8005668 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800527e:	bf00      	nop
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	3301      	adds	r3, #1
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800528c:	4618      	mov	r0, r3
 800528e:	f000 f99f 	bl	80055d0 <WIZCHIP_READ>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f3      	bne.n	8005280 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8005298:	7d3a      	ldrb	r2, [r7, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3301      	adds	r3, #1
 80052a2:	7d7a      	ldrb	r2, [r7, #21]
 80052a4:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3302      	adds	r3, #2
 80052aa:	7dba      	ldrb	r2, [r7, #22]
 80052ac:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3303      	adds	r3, #3
 80052b2:	7dfa      	ldrb	r2, [r7, #23]
 80052b4:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80052b6:	7e3a      	ldrb	r2, [r7, #24]
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	4611      	mov	r1, r2
 80052bc:	4a38      	ldr	r2, [pc, #224]	@ (80053a0 <recvfrom+0x3d0>)
 80052be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	4a36      	ldr	r2, [pc, #216]	@ (80053a0 <recvfrom+0x3d0>)
 80052c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	7e7b      	ldrb	r3, [r7, #25]
 80052d0:	4619      	mov	r1, r3
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	440a      	add	r2, r1
 80052d6:	b291      	uxth	r1, r2
 80052d8:	4a31      	ldr	r2, [pc, #196]	@ (80053a0 <recvfrom+0x3d0>)
 80052da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	4a30      	ldr	r2, [pc, #192]	@ (80053a4 <recvfrom+0x3d4>)
 80052e2:	2180      	movs	r1, #128	@ 0x80
 80052e4:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	4a2d      	ldr	r2, [pc, #180]	@ (80053a0 <recvfrom+0x3d0>)
 80052ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ee:	89ba      	ldrh	r2, [r7, #12]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d202      	bcs.n	80052fa <recvfrom+0x32a>
 80052f4:	89bb      	ldrh	r3, [r7, #12]
 80052f6:	83fb      	strh	r3, [r7, #30]
 80052f8:	e004      	b.n	8005304 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	4a28      	ldr	r2, [pc, #160]	@ (80053a0 <recvfrom+0x3d0>)
 80052fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005302:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005304:	8bfa      	ldrh	r2, [r7, #30]
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fba6 	bl	8005a5c <wiz_recv_data>
			break;
 8005310:	e00b      	b.n	800532a <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8005312:	8bfa      	ldrh	r2, [r7, #30]
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fbf9 	bl	8005b10 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	491f      	ldr	r1, [pc, #124]	@ (80053a0 <recvfrom+0x3d0>)
 8005322:	8bfa      	ldrh	r2, [r7, #30]
 8005324:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8005328:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	3301      	adds	r3, #1
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005336:	2140      	movs	r1, #64	@ 0x40
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f995 	bl	8005668 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800533e:	bf00      	nop
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	3301      	adds	r3, #1
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f93f 	bl	80055d0 <WIZCHIP_READ>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f3      	bne.n	8005340 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	4a11      	ldr	r2, [pc, #68]	@ (80053a0 <recvfrom+0x3d0>)
 800535c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	8bfa      	ldrh	r2, [r7, #30]
 8005364:	1a8a      	subs	r2, r1, r2
 8005366:	b291      	uxth	r1, r2
 8005368:	4a0d      	ldr	r2, [pc, #52]	@ (80053a0 <recvfrom+0x3d0>)
 800536a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	4a0b      	ldr	r2, [pc, #44]	@ (80053a0 <recvfrom+0x3d0>)
 8005372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	4a09      	ldr	r2, [pc, #36]	@ (80053a4 <recvfrom+0x3d4>)
 800537e:	5cd2      	ldrb	r2, [r2, r3]
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	b2d1      	uxtb	r1, r2
 8005388:	4a06      	ldr	r2, [pc, #24]	@ (80053a4 <recvfrom+0x3d4>)
 800538a:	54d1      	strb	r1, [r2, r3]
 800538c:	e003      	b.n	8005396 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	4a04      	ldr	r2, [pc, #16]	@ (80053a4 <recvfrom+0x3d4>)
 8005392:	2100      	movs	r1, #0
 8005394:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8005396:	8bfb      	ldrh	r3, [r7, #30]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	200073fc 	.word	0x200073fc
 80053a4:	2000740c 	.word	0x2000740c

080053a8 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	603a      	str	r2, [r7, #0]
 80053b2:	71fb      	strb	r3, [r7, #7]
 80053b4:	460b      	mov	r3, r1
 80053b6:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d902      	bls.n	80053c4 <getsockopt+0x1c>
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	e0fd      	b.n	80055c0 <getsockopt+0x218>
   switch(sotype)
 80053c4:	79bb      	ldrb	r3, [r7, #6]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	f200 80f6 	bhi.w	80055b8 <getsockopt+0x210>
 80053cc:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <getsockopt+0x2c>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	08005409 	.word	0x08005409
 80053d8:	08005425 	.word	0x08005425
 80053dc:	08005441 	.word	0x08005441
 80053e0:	0800545d 	.word	0x0800545d
 80053e4:	08005493 	.word	0x08005493
 80053e8:	080054ab 	.word	0x080054ab
 80053ec:	080055b9 	.word	0x080055b9
 80053f0:	080054e1 	.word	0x080054e1
 80053f4:	0800551b 	.word	0x0800551b
 80053f8:	0800552d 	.word	0x0800552d
 80053fc:	0800553f 	.word	0x0800553f
 8005400:	0800555b 	.word	0x0800555b
 8005404:	08005593 	.word	0x08005593
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	3301      	adds	r3, #1
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f8dd 	bl	80055d0 <WIZCHIP_READ>
 8005416:	4603      	mov	r3, r0
 8005418:	f023 030f 	bic.w	r3, r3, #15
 800541c:	b2da      	uxtb	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	701a      	strb	r2, [r3, #0]
         break;
 8005422:	e0cc      	b.n	80055be <getsockopt+0x216>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	3301      	adds	r3, #1
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	f503 53b0 	add.w	r3, r3, #5632	@ 0x1600
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f8cd 	bl	80055d0 <WIZCHIP_READ>
 8005436:	4603      	mov	r3, r0
 8005438:	461a      	mov	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	701a      	strb	r2, [r3, #0]
         break;
 800543e:	e0be      	b.n	80055be <getsockopt+0x216>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	3301      	adds	r3, #1
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f8bf 	bl	80055d0 <WIZCHIP_READ>
 8005452:	4603      	mov	r3, r0
 8005454:	461a      	mov	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	701a      	strb	r2, [r3, #0]
         break;
 800545a:	e0b0      	b.n	80055be <getsockopt+0x216>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	3301      	adds	r3, #1
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f8b1 	bl	80055d0 <WIZCHIP_READ>
 800546e:	4603      	mov	r3, r0
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	b29c      	uxth	r4, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	3301      	adds	r3, #1
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f8a5 	bl	80055d0 <WIZCHIP_READ>
 8005486:	4603      	mov	r3, r0
 8005488:	4423      	add	r3, r4
 800548a:	b29a      	uxth	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	801a      	strh	r2, [r3, #0]
         break;
 8005490:	e095      	b.n	80055be <getsockopt+0x216>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	3301      	adds	r3, #1
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800549e:	2204      	movs	r2, #4
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f92e 	bl	8005704 <WIZCHIP_READ_BUF>
         break;
 80054a8:	e089      	b.n	80055be <getsockopt+0x216>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	3301      	adds	r3, #1
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f88a 	bl	80055d0 <WIZCHIP_READ>
 80054bc:	4603      	mov	r3, r0
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	b29c      	uxth	r4, r3
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	3301      	adds	r3, #1
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f87e 	bl	80055d0 <WIZCHIP_READ>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4423      	add	r3, r4
 80054d8:	b29a      	uxth	r2, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	801a      	strh	r2, [r3, #0]
         break;
 80054de:	e06e      	b.n	80055be <getsockopt+0x216>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	3301      	adds	r3, #1
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f871 	bl	80055d0 <WIZCHIP_READ>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d002      	beq.n	80054fe <getsockopt+0x156>
 80054f8:	f06f 0304 	mvn.w	r3, #4
 80054fc:	e060      	b.n	80055c0 <getsockopt+0x218>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	3301      	adds	r3, #1
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	f503 533c 	add.w	r3, r3, #12032	@ 0x2f00
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f860 	bl	80055d0 <WIZCHIP_READ>
 8005510:	4603      	mov	r3, r0
 8005512:	461a      	mov	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	801a      	strh	r2, [r3, #0]
         break;
 8005518:	e051      	b.n	80055be <getsockopt+0x216>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f9b1 	bl	8005884 <getSn_TX_FSR>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	801a      	strh	r2, [r3, #0]
         break;
 800552a:	e048      	b.n	80055be <getsockopt+0x216>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f9f1 	bl	8005916 <getSn_RX_RSR>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	801a      	strh	r2, [r3, #0]
         break;
 800553c:	e03f      	b.n	80055be <getsockopt+0x216>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	3301      	adds	r3, #1
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f840 	bl	80055d0 <WIZCHIP_READ>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	701a      	strb	r2, [r3, #0]
         break;
 8005558:	e031      	b.n	80055be <getsockopt+0x216>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	3301      	adds	r3, #1
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f834 	bl	80055d0 <WIZCHIP_READ>
 8005568:	4603      	mov	r3, r0
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <getsockopt+0x1dc>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f9ce 	bl	8005916 <getSn_RX_RSR>
 800557a:	4603      	mov	r3, r0
 800557c:	461a      	mov	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8005582:	e01c      	b.n	80055be <getsockopt+0x216>
            *(uint16_t*)arg = sock_remained_size[sn];
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	4a10      	ldr	r2, [pc, #64]	@ (80055c8 <getsockopt+0x220>)
 8005588:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	801a      	strh	r2, [r3, #0]
         break;
 8005590:	e015      	b.n	80055be <getsockopt+0x216>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	3301      	adds	r3, #1
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f818 	bl	80055d0 <WIZCHIP_READ>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d102      	bne.n	80055ac <getsockopt+0x204>
             return SOCKERR_SOCKMODE;
 80055a6:	f06f 0304 	mvn.w	r3, #4
 80055aa:	e009      	b.n	80055c0 <getsockopt+0x218>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	4a07      	ldr	r2, [pc, #28]	@ (80055cc <getsockopt+0x224>)
 80055b0:	5cd2      	ldrb	r2, [r2, r3]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	701a      	strb	r2, [r3, #0]
         break;
 80055b6:	e002      	b.n	80055be <getsockopt+0x216>
      default:
         return SOCKERR_SOCKOPT;
 80055b8:	f06f 0301 	mvn.w	r3, #1
 80055bc:	e000      	b.n	80055c0 <getsockopt+0x218>
   }
   return SOCK_OK;
 80055be:	2301      	movs	r3, #1
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd90      	pop	{r4, r7, pc}
 80055c8:	200073fc 	.word	0x200073fc
 80055cc:	2000740c 	.word	0x2000740c

080055d0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80055d8:	4b22      	ldr	r3, [pc, #136]	@ (8005664 <WIZCHIP_READ+0x94>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80055de:	4b21      	ldr	r3, [pc, #132]	@ (8005664 <WIZCHIP_READ+0x94>)
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80055e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005664 <WIZCHIP_READ+0x94>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <WIZCHIP_READ+0x24>
 80055ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005664 <WIZCHIP_READ+0x94>)
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d114      	bne.n	800561e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80055f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005664 <WIZCHIP_READ+0x94>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	0c12      	lsrs	r2, r2, #16
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	4610      	mov	r0, r2
 8005600:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005602:	4b18      	ldr	r3, [pc, #96]	@ (8005664 <WIZCHIP_READ+0x94>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	0a12      	lsrs	r2, r2, #8
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	4610      	mov	r0, r2
 800560e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005610:	4b14      	ldr	r3, [pc, #80]	@ (8005664 <WIZCHIP_READ+0x94>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
 800561c:	e011      	b.n	8005642 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	b2db      	uxtb	r3, r3
 8005624:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	b2db      	uxtb	r3, r3
 800562c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005634:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <WIZCHIP_READ+0x94>)
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	f107 020c 	add.w	r2, r7, #12
 800563c:	2103      	movs	r1, #3
 800563e:	4610      	mov	r0, r2
 8005640:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8005642:	4b08      	ldr	r3, [pc, #32]	@ (8005664 <WIZCHIP_READ+0x94>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4798      	blx	r3
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <WIZCHIP_READ+0x94>)
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005652:	4b04      	ldr	r3, [pc, #16]	@ (8005664 <WIZCHIP_READ+0x94>)
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	4798      	blx	r3
   return ret;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000074 	.word	0x20000074

08005668 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8005674:	4b22      	ldr	r3, [pc, #136]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4798      	blx	r3
   WIZCHIP.CS._select();
 800567a:	4b21      	ldr	r3, [pc, #132]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f043 0304 	orr.w	r3, r3, #4
 8005686:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005688:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	2b00      	cmp	r3, #0
 800568e:	d119      	bne.n	80056c4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005690:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	0c12      	lsrs	r2, r2, #16
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	4610      	mov	r0, r2
 800569c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800569e:	4b18      	ldr	r3, [pc, #96]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	0a12      	lsrs	r2, r2, #8
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	4610      	mov	r0, r2
 80056aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80056ac:	4b14      	ldr	r3, [pc, #80]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	4610      	mov	r0, r2
 80056b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80056b8:	4b11      	ldr	r3, [pc, #68]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	4610      	mov	r0, r2
 80056c0:	4798      	blx	r3
 80056c2:	e013      	b.n	80056ec <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80056de:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	f107 020c 	add.w	r2, r7, #12
 80056e6:	2104      	movs	r1, #4
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80056f2:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <WIZCHIP_WRITE+0x98>)
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	4798      	blx	r3
}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000074 	.word	0x20000074

08005704 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005704:	b590      	push	{r4, r7, lr}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005712:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005718:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800571e:	4b28      	ldr	r3, [pc, #160]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 8005720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <WIZCHIP_READ_BUF+0x2a>
 8005726:	4b26      	ldr	r3, [pc, #152]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d126      	bne.n	800577c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	0c12      	lsrs	r2, r2, #16
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	4610      	mov	r0, r2
 800573a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800573c:	4b20      	ldr	r3, [pc, #128]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	0a12      	lsrs	r2, r2, #8
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	4610      	mov	r0, r2
 8005748:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800574a:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	4610      	mov	r0, r2
 8005754:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005756:	2300      	movs	r3, #0
 8005758:	82fb      	strh	r3, [r7, #22]
 800575a:	e00a      	b.n	8005772 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800575c:	4b18      	ldr	r3, [pc, #96]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	8afa      	ldrh	r2, [r7, #22]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	188c      	adds	r4, r1, r2
 8005766:	4798      	blx	r3
 8005768:	4603      	mov	r3, r0
 800576a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800576c:	8afb      	ldrh	r3, [r7, #22]
 800576e:	3301      	adds	r3, #1
 8005770:	82fb      	strh	r3, [r7, #22]
 8005772:	8afa      	ldrh	r2, [r7, #22]
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	429a      	cmp	r2, r3
 8005778:	d3f0      	bcc.n	800575c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800577a:	e017      	b.n	80057ac <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	b2db      	uxtb	r3, r3
 8005782:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	0a1b      	lsrs	r3, r3, #8
 8005788:	b2db      	uxtb	r3, r3
 800578a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005792:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	f107 0210 	add.w	r2, r7, #16
 800579a:	2103      	movs	r1, #3
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80057a0:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	4611      	mov	r1, r2
 80057a8:	68b8      	ldr	r0, [r7, #8]
 80057aa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80057b2:	4b03      	ldr	r3, [pc, #12]	@ (80057c0 <WIZCHIP_READ_BUF+0xbc>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	4798      	blx	r3
}
 80057b8:	bf00      	nop
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd90      	pop	{r4, r7, pc}
 80057c0:	20000074 	.word	0x20000074

080057c4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80057d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80057d8:	4b29      	ldr	r3, [pc, #164]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80057e6:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d126      	bne.n	800583c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80057ee:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	0c12      	lsrs	r2, r2, #16
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	4610      	mov	r0, r2
 80057fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80057fc:	4b20      	ldr	r3, [pc, #128]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	0a12      	lsrs	r2, r2, #8
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	4610      	mov	r0, r2
 8005808:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800580a:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	4610      	mov	r0, r2
 8005814:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	82fb      	strh	r3, [r7, #22]
 800581a:	e00a      	b.n	8005832 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800581c:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	8afa      	ldrh	r2, [r7, #22]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	440a      	add	r2, r1
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800582c:	8afb      	ldrh	r3, [r7, #22]
 800582e:	3301      	adds	r3, #1
 8005830:	82fb      	strh	r3, [r7, #22]
 8005832:	8afa      	ldrh	r2, [r7, #22]
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	429a      	cmp	r2, r3
 8005838:	d3f0      	bcc.n	800581c <WIZCHIP_WRITE_BUF+0x58>
 800583a:	e017      	b.n	800586c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	b2db      	uxtb	r3, r3
 8005842:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	b2db      	uxtb	r3, r3
 800584a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005852:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005856:	f107 0210 	add.w	r2, r7, #16
 800585a:	2103      	movs	r1, #3
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8005860:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	4611      	mov	r1, r2
 8005868:	68b8      	ldr	r0, [r7, #8]
 800586a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005872:	4b03      	ldr	r3, [pc, #12]	@ (8005880 <WIZCHIP_WRITE_BUF+0xbc>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	4798      	blx	r3
}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000074 	.word	0x20000074

08005884 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800588e:	2300      	movs	r3, #0
 8005890:	81fb      	strh	r3, [r7, #14]
 8005892:	2300      	movs	r3, #0
 8005894:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	3301      	adds	r3, #1
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fe94 	bl	80055d0 <WIZCHIP_READ>
 80058a8:	4603      	mov	r3, r0
 80058aa:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80058ac:	89bb      	ldrh	r3, [r7, #12]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	b29c      	uxth	r4, r3
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	3301      	adds	r3, #1
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fe86 	bl	80055d0 <WIZCHIP_READ>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4423      	add	r3, r4
 80058c8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80058ca:	89bb      	ldrh	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d019      	beq.n	8005904 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	3301      	adds	r3, #1
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fe77 	bl	80055d0 <WIZCHIP_READ>
 80058e2:	4603      	mov	r3, r0
 80058e4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80058e6:	89fb      	ldrh	r3, [r7, #14]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	b29c      	uxth	r4, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	3301      	adds	r3, #1
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fe69 	bl	80055d0 <WIZCHIP_READ>
 80058fe:	4603      	mov	r3, r0
 8005900:	4423      	add	r3, r4
 8005902:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005904:	89fa      	ldrh	r2, [r7, #14]
 8005906:	89bb      	ldrh	r3, [r7, #12]
 8005908:	429a      	cmp	r2, r3
 800590a:	d1c4      	bne.n	8005896 <getSn_TX_FSR+0x12>
   return val;
 800590c:	89fb      	ldrh	r3, [r7, #14]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bd90      	pop	{r4, r7, pc}

08005916 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005916:	b590      	push	{r4, r7, lr}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	4603      	mov	r3, r0
 800591e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005920:	2300      	movs	r3, #0
 8005922:	81fb      	strh	r3, [r7, #14]
 8005924:	2300      	movs	r3, #0
 8005926:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	3301      	adds	r3, #1
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fe4b 	bl	80055d0 <WIZCHIP_READ>
 800593a:	4603      	mov	r3, r0
 800593c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800593e:	89bb      	ldrh	r3, [r7, #12]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	b29c      	uxth	r4, r3
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	3301      	adds	r3, #1
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fe3d 	bl	80055d0 <WIZCHIP_READ>
 8005956:	4603      	mov	r3, r0
 8005958:	4423      	add	r3, r4
 800595a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800595c:	89bb      	ldrh	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d019      	beq.n	8005996 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	3301      	adds	r3, #1
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fe2e 	bl	80055d0 <WIZCHIP_READ>
 8005974:	4603      	mov	r3, r0
 8005976:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	b29c      	uxth	r4, r3
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	3301      	adds	r3, #1
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fe20 	bl	80055d0 <WIZCHIP_READ>
 8005990:	4603      	mov	r3, r0
 8005992:	4423      	add	r3, r4
 8005994:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005996:	89fa      	ldrh	r2, [r7, #14]
 8005998:	89bb      	ldrh	r3, [r7, #12]
 800599a:	429a      	cmp	r2, r3
 800599c:	d1c4      	bne.n	8005928 <getSn_RX_RSR+0x12>
   return val;
 800599e:	89fb      	ldrh	r3, [r7, #14]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd90      	pop	{r4, r7, pc}

080059a8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	71fb      	strb	r3, [r7, #7]
 80059b4:	4613      	mov	r3, r2
 80059b6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80059c0:	88bb      	ldrh	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d046      	beq.n	8005a54 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	3301      	adds	r3, #1
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fdfc 	bl	80055d0 <WIZCHIP_READ>
 80059d8:	4603      	mov	r3, r0
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	b29c      	uxth	r4, r3
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	3301      	adds	r3, #1
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fdf0 	bl	80055d0 <WIZCHIP_READ>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4423      	add	r3, r4
 80059f4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80059f6:	89fb      	ldrh	r3, [r7, #14]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	79fa      	ldrb	r2, [r7, #7]
 80059fc:	0092      	lsls	r2, r2, #2
 80059fe:	3202      	adds	r2, #2
 8005a00:	00d2      	lsls	r2, r2, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005a06:	88bb      	ldrh	r3, [r7, #4]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	68b8      	ldr	r0, [r7, #8]
 8005a0e:	f7ff fed9 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005a12:	89fa      	ldrh	r2, [r7, #14]
 8005a14:	88bb      	ldrh	r3, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	3301      	adds	r3, #1
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005a26:	461a      	mov	r2, r3
 8005a28:	89fb      	ldrh	r3, [r7, #14]
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f7ff fe18 	bl	8005668 <WIZCHIP_WRITE>
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005a44:	461a      	mov	r2, r3
 8005a46:	89fb      	ldrh	r3, [r7, #14]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f7ff fe0b 	bl	8005668 <WIZCHIP_WRITE>
 8005a52:	e000      	b.n	8005a56 <wiz_send_data+0xae>
   if(len == 0)  return;
 8005a54:	bf00      	nop
}
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}

08005a5c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	71fb      	strb	r3, [r7, #7]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005a74:	88bb      	ldrh	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d046      	beq.n	8005b08 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	3301      	adds	r3, #1
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fda2 	bl	80055d0 <WIZCHIP_READ>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	b29c      	uxth	r4, r3
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	3301      	adds	r3, #1
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fd96 	bl	80055d0 <WIZCHIP_READ>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4423      	add	r3, r4
 8005aa8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005aaa:	89fb      	ldrh	r3, [r7, #14]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	79fa      	ldrb	r2, [r7, #7]
 8005ab0:	0092      	lsls	r2, r2, #2
 8005ab2:	3203      	adds	r2, #3
 8005ab4:	00d2      	lsls	r2, r2, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005aba:	88bb      	ldrh	r3, [r7, #4]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	68b8      	ldr	r0, [r7, #8]
 8005ac2:	f7ff fe1f 	bl	8005704 <WIZCHIP_READ_BUF>
   ptr += len;
 8005ac6:	89fa      	ldrh	r2, [r7, #14]
 8005ac8:	88bb      	ldrh	r3, [r7, #4]
 8005aca:	4413      	add	r3, r2
 8005acc:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005ada:	461a      	mov	r2, r3
 8005adc:	89fb      	ldrh	r3, [r7, #14]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f7ff fdbe 	bl	8005668 <WIZCHIP_WRITE>
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	3301      	adds	r3, #1
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005af8:	461a      	mov	r2, r3
 8005afa:	89fb      	ldrh	r3, [r7, #14]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f7ff fdb1 	bl	8005668 <WIZCHIP_WRITE>
 8005b06:	e000      	b.n	8005b0a <wiz_recv_data+0xae>
   if(len == 0) return;
 8005b08:	bf00      	nop
}
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}

08005b10 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	460a      	mov	r2, r1
 8005b1a:	71fb      	strb	r3, [r7, #7]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	3301      	adds	r3, #1
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fd4d 	bl	80055d0 <WIZCHIP_READ>
 8005b36:	4603      	mov	r3, r0
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	b29c      	uxth	r4, r3
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	3301      	adds	r3, #1
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fd41 	bl	80055d0 <WIZCHIP_READ>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4423      	add	r3, r4
 8005b52:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005b54:	89fa      	ldrh	r2, [r7, #14]
 8005b56:	88bb      	ldrh	r3, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	3301      	adds	r3, #1
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005b68:	461a      	mov	r2, r3
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	0a1b      	lsrs	r3, r3, #8
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f7ff fd77 	bl	8005668 <WIZCHIP_WRITE>
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	3301      	adds	r3, #1
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005b86:	461a      	mov	r2, r3
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f7ff fd6a 	bl	8005668 <WIZCHIP_WRITE>
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd90      	pop	{r4, r7, pc}

08005b9c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005baa:	b480      	push	{r7}
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	bf00      	nop
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	2300      	movs	r3, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	807b      	strh	r3, [r7, #2]
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	807b      	strh	r3, [r7, #2]
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <reg_wizchip_cs_cbfunc+0x16>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca4 <reg_wizchip_cs_cbfunc+0x40>)
 8005c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca8 <reg_wizchip_cs_cbfunc+0x44>)
 8005c7e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005c80:	4b08      	ldr	r3, [pc, #32]	@ (8005ca4 <reg_wizchip_cs_cbfunc+0x40>)
 8005c82:	4a0a      	ldr	r2, [pc, #40]	@ (8005cac <reg_wizchip_cs_cbfunc+0x48>)
 8005c84:	619a      	str	r2, [r3, #24]
 8005c86:	e006      	b.n	8005c96 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005c88:	4a06      	ldr	r2, [pc, #24]	@ (8005ca4 <reg_wizchip_cs_cbfunc+0x40>)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005c8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ca4 <reg_wizchip_cs_cbfunc+0x40>)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6193      	str	r3, [r2, #24]
   }
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000074 	.word	0x20000074
 8005ca8:	08005bb9 	.word	0x08005bb9
 8005cac:	08005bc7 	.word	0x08005bc7

08005cb0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005cba:	bf00      	nop
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005cfc <reg_wizchip_spi_cbfunc+0x4c>)
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f9      	beq.n	8005cbc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <reg_wizchip_spi_cbfunc+0x24>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005cd4:	4b09      	ldr	r3, [pc, #36]	@ (8005cfc <reg_wizchip_spi_cbfunc+0x4c>)
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005d00 <reg_wizchip_spi_cbfunc+0x50>)
 8005cd8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005cda:	4b08      	ldr	r3, [pc, #32]	@ (8005cfc <reg_wizchip_spi_cbfunc+0x4c>)
 8005cdc:	4a09      	ldr	r2, [pc, #36]	@ (8005d04 <reg_wizchip_spi_cbfunc+0x54>)
 8005cde:	621a      	str	r2, [r3, #32]
 8005ce0:	e006      	b.n	8005cf0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005ce2:	4a06      	ldr	r2, [pc, #24]	@ (8005cfc <reg_wizchip_spi_cbfunc+0x4c>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005ce8:	4a04      	ldr	r2, [pc, #16]	@ (8005cfc <reg_wizchip_spi_cbfunc+0x4c>)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6213      	str	r3, [r2, #32]
   }
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000074 	.word	0x20000074
 8005d00:	08005c0d 	.word	0x08005c0d
 8005d04:	08005c1d 	.word	0x08005c1d

08005d08 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005d12:	bf00      	nop
 8005d14:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0f9      	beq.n	8005d14 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <reg_wizchip_spiburst_cbfunc+0x24>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d58 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005d30:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005d32:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d34:	4a09      	ldr	r2, [pc, #36]	@ (8005d5c <reg_wizchip_spiburst_cbfunc+0x54>)
 8005d36:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d38:	e006      	b.n	8005d48 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005d3a:	4a06      	ldr	r2, [pc, #24]	@ (8005d54 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005d40:	4a04      	ldr	r2, [pc, #16]	@ (8005d54 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20000074 	.word	0x20000074
 8005d58:	08005c33 	.word	0x08005c33
 8005d5c:	08005c4b 	.word	0x08005c4b

08005d60 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	2300      	movs	r3, #0
 8005d76:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	f200 80c5 	bhi.w	8005f0a <ctlwizchip+0x1aa>
 8005d80:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <ctlwizchip+0x28>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005dc9 	.word	0x08005dc9
 8005d8c:	08005dcf 	.word	0x08005dcf
 8005d90:	08005dfb 	.word	0x08005dfb
 8005d94:	08005def 	.word	0x08005def
 8005d98:	08005e09 	.word	0x08005e09
 8005d9c:	08005e15 	.word	0x08005e15
 8005da0:	08005e23 	.word	0x08005e23
 8005da4:	08005e49 	.word	0x08005e49
 8005da8:	08005e6b 	.word	0x08005e6b
 8005dac:	08005eaf 	.word	0x08005eaf
 8005db0:	08005eb5 	.word	0x08005eb5
 8005db4:	08005ebd 	.word	0x08005ebd
 8005db8:	08005f11 	.word	0x08005f11
 8005dbc:	08005ec5 	.word	0x08005ec5
 8005dc0:	08005ed3 	.word	0x08005ed3
 8005dc4:	08005eef 	.word	0x08005eef
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005dc8:	f000 f8aa 	bl	8005f20 <wizchip_sw_reset>
         break;
 8005dcc:	e0a1      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4611      	mov	r1, r2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f8e7 	bl	8005fb8 <wizchip_init>
 8005dea:	4603      	mov	r3, r0
 8005dec:	e092      	b.n	8005f14 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f96c 	bl	80060d0 <wizchip_clrinterrupt>
         break;
 8005df8:	e08b      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005dfa:	f000 f99d 	bl	8006138 <wizchip_getinterrupt>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	461a      	mov	r2, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	801a      	strh	r2, [r3, #0]
         break;
 8005e06:	e084      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 f9b8 	bl	8006182 <wizchip_setinterruptmask>
         break;         
 8005e12:	e07e      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005e14:	f000 f9d0 	bl	80061b8 <wizchip_getinterruptmask>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	801a      	strh	r2, [r3, #0]
         break;
 8005e20:	e077      	b.n	8005f12 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005e32:	f7ff fc19 	bl	8005668 <WIZCHIP_WRITE>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005e42:	f7ff fc11 	bl	8005668 <WIZCHIP_WRITE>
         break;
 8005e46:	e064      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005e48:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005e4c:	f7ff fbc0 	bl	80055d0 <WIZCHIP_READ>
 8005e50:	4603      	mov	r3, r0
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	b29c      	uxth	r4, r3
 8005e56:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005e5a:	f7ff fbb9 	bl	80055d0 <WIZCHIP_READ>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4423      	add	r3, r4
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	801a      	strh	r2, [r3, #0]
         break;
 8005e68:	e053      	b.n	8005f12 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005f1c <ctlwizchip+0x1bc>)
 8005e6c:	789a      	ldrb	r2, [r3, #2]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a29      	ldr	r2, [pc, #164]	@ (8005f1c <ctlwizchip+0x1bc>)
 8005e78:	78d2      	ldrb	r2, [r2, #3]
 8005e7a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	3302      	adds	r3, #2
 8005e80:	4a26      	ldr	r2, [pc, #152]	@ (8005f1c <ctlwizchip+0x1bc>)
 8005e82:	7912      	ldrb	r2, [r2, #4]
 8005e84:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	3303      	adds	r3, #3
 8005e8a:	4a24      	ldr	r2, [pc, #144]	@ (8005f1c <ctlwizchip+0x1bc>)
 8005e8c:	7952      	ldrb	r2, [r2, #5]
 8005e8e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4a21      	ldr	r2, [pc, #132]	@ (8005f1c <ctlwizchip+0x1bc>)
 8005e96:	7992      	ldrb	r2, [r2, #6]
 8005e98:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3305      	adds	r3, #5
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <ctlwizchip+0x1bc>)
 8005ea0:	79d2      	ldrb	r2, [r2, #7]
 8005ea2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	3306      	adds	r3, #6
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
         break;
 8005eac:	e031      	b.n	8005f12 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005eae:	f000 f9d5 	bl	800625c <wizphy_reset>
         break;
 8005eb2:	e02e      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005eb4:	6838      	ldr	r0, [r7, #0]
 8005eb6:	f000 f9f8 	bl	80062aa <wizphy_setphyconf>
         break;
 8005eba:	e02a      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005ebc:	6838      	ldr	r0, [r7, #0]
 8005ebe:	f000 fa37 	bl	8006330 <wizphy_getphyconf>
         break;
 8005ec2:	e026      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fa9b 	bl	8006404 <wizphy_setphypmode>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	e020      	b.n	8005f14 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005ed2:	f000 f9aa 	bl	800622a <wizphy_getphypmode>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	2bff      	cmp	r3, #255	@ 0xff
 8005ede:	d102      	bne.n	8005ee6 <ctlwizchip+0x186>
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee4:	e016      	b.n	8005f14 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	7dfa      	ldrb	r2, [r7, #23]
 8005eea:	701a      	strb	r2, [r3, #0]
         break;
 8005eec:	e011      	b.n	8005f12 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005eee:	f000 f986 	bl	80061fe <wizphy_getphylink>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2bff      	cmp	r3, #255	@ 0xff
 8005efa:	d102      	bne.n	8005f02 <ctlwizchip+0x1a2>
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	e008      	b.n	8005f14 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	7dfa      	ldrb	r2, [r7, #23]
 8005f06:	701a      	strb	r2, [r3, #0]
         break;
 8005f08:	e003      	b.n	8005f12 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0e:	e001      	b.n	8005f14 <ctlwizchip+0x1b4>
         break;
 8005f10:	bf00      	nop
   }
   return 0;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd90      	pop	{r4, r7, pc}
 8005f1c:	20000074 	.word	0x20000074

08005f20 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005f26:	1d3b      	adds	r3, r7, #4
 8005f28:	2206      	movs	r2, #6
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005f30:	f7ff fbe8 	bl	8005704 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005f34:	f107 0314 	add.w	r3, r7, #20
 8005f38:	2204      	movs	r2, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005f40:	f7ff fbe0 	bl	8005704 <WIZCHIP_READ_BUF>
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	2204      	movs	r2, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005f50:	f7ff fbd8 	bl	8005704 <WIZCHIP_READ_BUF>
 8005f54:	f107 030c 	add.w	r3, r7, #12
 8005f58:	2204      	movs	r2, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005f60:	f7ff fbd0 	bl	8005704 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005f64:	2180      	movs	r1, #128	@ 0x80
 8005f66:	2000      	movs	r0, #0
 8005f68:	f7ff fb7e 	bl	8005668 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f7ff fb2f 	bl	80055d0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	2206      	movs	r2, #6
 8005f76:	4619      	mov	r1, r3
 8005f78:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005f7c:	f7ff fc22 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	2204      	movs	r2, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005f8c:	f7ff fc1a 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005f90:	f107 0310 	add.w	r3, r7, #16
 8005f94:	2204      	movs	r2, #4
 8005f96:	4619      	mov	r1, r3
 8005f98:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005f9c:	f7ff fc12 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005fac:	f7ff fc0a 	bl	80057c4 <WIZCHIP_WRITE_BUF>
}
 8005fb0:	bf00      	nop
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005fc6:	f7ff ffab 	bl	8005f20 <wizchip_sw_reset>
   if(txsize)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d03b      	beq.n	8006048 <wizchip_init+0x90>
   {
      tmp = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	73fb      	strb	r3, [r7, #15]
 8005fd8:	e015      	b.n	8006006 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	dd02      	ble.n	8005ffa <wizchip_init+0x42>
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff8:	e066      	b.n	80060c8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	3301      	adds	r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	73fb      	strb	r3, [r7, #15]
 8006006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600a:	2b07      	cmp	r3, #7
 800600c:	dde5      	ble.n	8005fda <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
 8006012:	e015      	b.n	8006040 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	3301      	adds	r3, #1
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8006022:	4618      	mov	r0, r3
 8006024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	f7ff fb1a 	bl	8005668 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	3301      	adds	r3, #1
 800603c:	b2db      	uxtb	r3, r3
 800603e:	73fb      	strb	r3, [r7, #15]
 8006040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006044:	2b07      	cmp	r3, #7
 8006046:	dde5      	ble.n	8006014 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d03b      	beq.n	80060c6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
 8006056:	e015      	b.n	8006084 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	4413      	add	r3, r2
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	7bbb      	ldrb	r3, [r7, #14]
 8006064:	4413      	add	r3, r2
 8006066:	b2db      	uxtb	r3, r3
 8006068:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800606a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800606e:	2b10      	cmp	r3, #16
 8006070:	dd02      	ble.n	8006078 <wizchip_init+0xc0>
 8006072:	f04f 33ff 	mov.w	r3, #4294967295
 8006076:	e027      	b.n	80060c8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	3301      	adds	r3, #1
 8006080:	b2db      	uxtb	r3, r3
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006088:	2b07      	cmp	r3, #7
 800608a:	dde5      	ble.n	8006058 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	73fb      	strb	r3, [r7, #15]
 8006090:	e015      	b.n	80060be <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8006092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	3301      	adds	r3, #1
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80060a0:	4618      	mov	r0, r3
 80060a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	4413      	add	r3, r2
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	4619      	mov	r1, r3
 80060ae:	f7ff fadb 	bl	8005668 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	3301      	adds	r3, #1
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	73fb      	strb	r3, [r7, #15]
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c2:	2b07      	cmp	r3, #7
 80060c4:	dde5      	ble.n	8006092 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	0a1b      	lsrs	r3, r3, #8
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	f023 030f 	bic.w	r3, r3, #15
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	4619      	mov	r1, r3
 80060f0:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80060f4:	f7ff fab8 	bl	8005668 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]
 80060fc:	e014      	b.n	8006128 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80060fe:	7bba      	ldrb	r2, [r7, #14]
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	fa42 f303 	asr.w	r3, r2, r3
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <wizchip_clrinterrupt+0x52>
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	3301      	adds	r3, #1
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800611a:	211f      	movs	r1, #31
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff faa3 	bl	8005668 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	3301      	adds	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b07      	cmp	r3, #7
 800612c:	d9e7      	bls.n	80060fe <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800614a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800614e:	f7ff fa3f 	bl	80055d0 <WIZCHIP_READ>
 8006152:	4603      	mov	r3, r0
 8006154:	f023 030f 	bic.w	r3, r3, #15
 8006158:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800615a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 800615e:	f7ff fa37 	bl	80055d0 <WIZCHIP_READ>
 8006162:	4603      	mov	r3, r0
 8006164:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8006166:	79bb      	ldrb	r3, [r7, #6]
 8006168:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800616a:	88bb      	ldrh	r3, [r7, #4]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	b29a      	uxth	r2, r3
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	b29b      	uxth	r3, r3
 8006174:	4413      	add	r3, r2
 8006176:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006178:	88bb      	ldrh	r3, [r7, #4]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	4603      	mov	r3, r0
 800618a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b29b      	uxth	r3, r3
 8006196:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	4619      	mov	r1, r3
 800619c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80061a0:	f7ff fa62 	bl	8005668 <WIZCHIP_WRITE>
   setSIMR(simr);
 80061a4:	7bbb      	ldrb	r3, [r7, #14]
 80061a6:	4619      	mov	r1, r3
 80061a8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80061ac:	f7ff fa5c 	bl	8005668 <WIZCHIP_WRITE>
#endif   
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80061ca:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80061ce:	f7ff f9ff 	bl	80055d0 <WIZCHIP_READ>
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80061d6:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80061da:	f7ff f9f9 	bl	80055d0 <WIZCHIP_READ>
 80061de:	4603      	mov	r3, r0
 80061e0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80061e2:	79bb      	ldrb	r3, [r7, #6]
 80061e4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80061e6:	88bb      	ldrh	r3, [r7, #4]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80061f4:	88bb      	ldrh	r3, [r7, #4]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8006204:	2300      	movs	r3, #0
 8006206:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006208:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800620c:	f7ff f9e0 	bl	80055d0 <WIZCHIP_READ>
 8006210:	4603      	mov	r3, r0
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800621a:	2301      	movs	r3, #1
 800621c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006234:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006238:	f7ff f9ca 	bl	80055d0 <WIZCHIP_READ>
 800623c:	4603      	mov	r3, r0
 800623e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006242:	2b30      	cmp	r3, #48	@ 0x30
 8006244:	d102      	bne.n	800624c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8006246:	2301      	movs	r3, #1
 8006248:	71fb      	strb	r3, [r7, #7]
 800624a:	e001      	b.n	8006250 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800624c:	2300      	movs	r3, #0
 800624e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006250:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8006262:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006266:	f7ff f9b3 	bl	80055d0 <WIZCHIP_READ>
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006274:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	4619      	mov	r1, r3
 800627a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800627e:	f7ff f9f3 	bl	8005668 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8006282:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006286:	f7ff f9a3 	bl	80055d0 <WIZCHIP_READ>
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006294:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	4619      	mov	r1, r3
 800629a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800629e:	f7ff f9e3 	bl	8005668 <WIZCHIP_WRITE>
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d104      	bne.n	80062c8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e003      	b.n	80062d0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ce:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d104      	bne.n	80062e2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e019      	b.n	8006316 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	78db      	ldrb	r3, [r3, #3]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10d      	bne.n	8006306 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	789b      	ldrb	r3, [r3, #2]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d104      	bne.n	80062fc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	f043 0318 	orr.w	r3, r3, #24
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	e00c      	b.n	8006316 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	f043 0308 	orr.w	r3, r3, #8
 8006302:	73fb      	strb	r3, [r7, #15]
 8006304:	e007      	b.n	8006316 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	789b      	ldrb	r3, [r3, #2]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d103      	bne.n	8006316 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	f043 0310 	orr.w	r3, r3, #16
 8006314:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	4619      	mov	r1, r3
 800631a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800631e:	f7ff f9a3 	bl	8005668 <WIZCHIP_WRITE>
   wizphy_reset();
 8006322:	f7ff ff9b 	bl	800625c <wizphy_reset>
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800633c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006340:	f7ff f946 	bl	80055d0 <WIZCHIP_READ>
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	119b      	asrs	r3, r3, #6
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800635e:	2b20      	cmp	r3, #32
 8006360:	d001      	beq.n	8006366 <wizphy_getphyconf+0x36>
 8006362:	2b38      	cmp	r3, #56	@ 0x38
 8006364:	d103      	bne.n	800636e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	705a      	strb	r2, [r3, #1]
         break;
 800636c:	e003      	b.n	8006376 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	705a      	strb	r2, [r3, #1]
         break;
 8006374:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800637c:	3b10      	subs	r3, #16
 800637e:	2b10      	cmp	r3, #16
 8006380:	bf8c      	ite	hi
 8006382:	2201      	movhi	r2, #1
 8006384:	2200      	movls	r2, #0
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	2a00      	cmp	r2, #0
 800638a:	d10f      	bne.n	80063ac <wizphy_getphyconf+0x7c>
 800638c:	4a1b      	ldr	r2, [pc, #108]	@ (80063fc <wizphy_getphyconf+0xcc>)
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf14      	ite	ne
 800639a:	2301      	movne	r3, #1
 800639c:	2300      	moveq	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	709a      	strb	r2, [r3, #2]
         break;
 80063aa:	e003      	b.n	80063b4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	709a      	strb	r2, [r3, #2]
         break;
 80063b2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ba:	3b08      	subs	r3, #8
 80063bc:	2b18      	cmp	r3, #24
 80063be:	bf8c      	ite	hi
 80063c0:	2201      	movhi	r2, #1
 80063c2:	2200      	movls	r2, #0
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	d10f      	bne.n	80063ea <wizphy_getphyconf+0xba>
 80063ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006400 <wizphy_getphyconf+0xd0>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	70da      	strb	r2, [r3, #3]
         break;
 80063e8:	e003      	b.n	80063f2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	70da      	strb	r2, [r3, #3]
         break;
 80063f0:	bf00      	nop
   }
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	00010101 	.word	0x00010101
 8006400:	01010001 	.word	0x01010001

08006404 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006412:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006416:	f7ff f8db 	bl	80055d0 <WIZCHIP_READ>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <wizphy_setphypmode+0x2a>
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	e030      	b.n	8006490 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006434:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d104      	bne.n	8006446 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	e003      	b.n	800644e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800644c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	4619      	mov	r1, r3
 8006452:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006456:	f7ff f907 	bl	8005668 <WIZCHIP_WRITE>
   wizphy_reset();
 800645a:	f7ff feff 	bl	800625c <wizphy_reset>
   tmp = getPHYCFGR();
 800645e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006462:	f7ff f8b5 	bl	80055d0 <WIZCHIP_READ>
 8006466:	4603      	mov	r3, r0
 8006468:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <wizphy_setphypmode+0x88>
 800647a:	2300      	movs	r3, #0
 800647c:	e008      	b.n	8006490 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <wizphy_setphypmode+0x88>
 8006488:	2300      	movs	r3, #0
 800648a:	e001      	b.n	8006490 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800648c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2206      	movs	r2, #6
 80064a4:	4619      	mov	r1, r3
 80064a6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80064aa:	f7ff f98b 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	330e      	adds	r3, #14
 80064b2:	2204      	movs	r2, #4
 80064b4:	4619      	mov	r1, r3
 80064b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80064ba:	f7ff f983 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	330a      	adds	r3, #10
 80064c2:	2204      	movs	r2, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80064ca:	f7ff f97b 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3306      	adds	r3, #6
 80064d2:	2204      	movs	r2, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80064da:	f7ff f973 	bl	80057c4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7c9a      	ldrb	r2, [r3, #18]
 80064e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006510 <wizchip_setnetinfo+0x78>)
 80064e4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	7cda      	ldrb	r2, [r3, #19]
 80064ea:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <wizchip_setnetinfo+0x78>)
 80064ec:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7d1a      	ldrb	r2, [r3, #20]
 80064f2:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <wizchip_setnetinfo+0x78>)
 80064f4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7d5a      	ldrb	r2, [r3, #21]
 80064fa:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <wizchip_setnetinfo+0x78>)
 80064fc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7d9a      	ldrb	r2, [r3, #22]
 8006502:	4b04      	ldr	r3, [pc, #16]	@ (8006514 <wizchip_setnetinfo+0x7c>)
 8006504:	701a      	strb	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20007414 	.word	0x20007414
 8006514:	20007418 	.word	0x20007418

08006518 <atoi>:
 8006518:	220a      	movs	r2, #10
 800651a:	2100      	movs	r1, #0
 800651c:	f000 b96e 	b.w	80067fc <strtol>

08006520 <malloc>:
 8006520:	4b02      	ldr	r3, [pc, #8]	@ (800652c <malloc+0xc>)
 8006522:	4601      	mov	r1, r0
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	f000 b825 	b.w	8006574 <_malloc_r>
 800652a:	bf00      	nop
 800652c:	200000ac 	.word	0x200000ac

08006530 <sbrk_aligned>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4e0f      	ldr	r6, [pc, #60]	@ (8006570 <sbrk_aligned+0x40>)
 8006534:	460c      	mov	r4, r1
 8006536:	6831      	ldr	r1, [r6, #0]
 8006538:	4605      	mov	r5, r0
 800653a:	b911      	cbnz	r1, 8006542 <sbrk_aligned+0x12>
 800653c:	f000 fc0c 	bl	8006d58 <_sbrk_r>
 8006540:	6030      	str	r0, [r6, #0]
 8006542:	4621      	mov	r1, r4
 8006544:	4628      	mov	r0, r5
 8006546:	f000 fc07 	bl	8006d58 <_sbrk_r>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	d103      	bne.n	8006556 <sbrk_aligned+0x26>
 800654e:	f04f 34ff 	mov.w	r4, #4294967295
 8006552:	4620      	mov	r0, r4
 8006554:	bd70      	pop	{r4, r5, r6, pc}
 8006556:	1cc4      	adds	r4, r0, #3
 8006558:	f024 0403 	bic.w	r4, r4, #3
 800655c:	42a0      	cmp	r0, r4
 800655e:	d0f8      	beq.n	8006552 <sbrk_aligned+0x22>
 8006560:	1a21      	subs	r1, r4, r0
 8006562:	4628      	mov	r0, r5
 8006564:	f000 fbf8 	bl	8006d58 <_sbrk_r>
 8006568:	3001      	adds	r0, #1
 800656a:	d1f2      	bne.n	8006552 <sbrk_aligned+0x22>
 800656c:	e7ef      	b.n	800654e <sbrk_aligned+0x1e>
 800656e:	bf00      	nop
 8006570:	2000741c 	.word	0x2000741c

08006574 <_malloc_r>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	1ccd      	adds	r5, r1, #3
 800657a:	f025 0503 	bic.w	r5, r5, #3
 800657e:	3508      	adds	r5, #8
 8006580:	2d0c      	cmp	r5, #12
 8006582:	bf38      	it	cc
 8006584:	250c      	movcc	r5, #12
 8006586:	2d00      	cmp	r5, #0
 8006588:	4606      	mov	r6, r0
 800658a:	db01      	blt.n	8006590 <_malloc_r+0x1c>
 800658c:	42a9      	cmp	r1, r5
 800658e:	d904      	bls.n	800659a <_malloc_r+0x26>
 8006590:	230c      	movs	r3, #12
 8006592:	6033      	str	r3, [r6, #0]
 8006594:	2000      	movs	r0, #0
 8006596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006670 <_malloc_r+0xfc>
 800659e:	f000 f869 	bl	8006674 <__malloc_lock>
 80065a2:	f8d8 3000 	ldr.w	r3, [r8]
 80065a6:	461c      	mov	r4, r3
 80065a8:	bb44      	cbnz	r4, 80065fc <_malloc_r+0x88>
 80065aa:	4629      	mov	r1, r5
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7ff ffbf 	bl	8006530 <sbrk_aligned>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	4604      	mov	r4, r0
 80065b6:	d158      	bne.n	800666a <_malloc_r+0xf6>
 80065b8:	f8d8 4000 	ldr.w	r4, [r8]
 80065bc:	4627      	mov	r7, r4
 80065be:	2f00      	cmp	r7, #0
 80065c0:	d143      	bne.n	800664a <_malloc_r+0xd6>
 80065c2:	2c00      	cmp	r4, #0
 80065c4:	d04b      	beq.n	800665e <_malloc_r+0xea>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	4639      	mov	r1, r7
 80065ca:	4630      	mov	r0, r6
 80065cc:	eb04 0903 	add.w	r9, r4, r3
 80065d0:	f000 fbc2 	bl	8006d58 <_sbrk_r>
 80065d4:	4581      	cmp	r9, r0
 80065d6:	d142      	bne.n	800665e <_malloc_r+0xea>
 80065d8:	6821      	ldr	r1, [r4, #0]
 80065da:	1a6d      	subs	r5, r5, r1
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f7ff ffa6 	bl	8006530 <sbrk_aligned>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d03a      	beq.n	800665e <_malloc_r+0xea>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	442b      	add	r3, r5
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	f8d8 3000 	ldr.w	r3, [r8]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	bb62      	cbnz	r2, 8006650 <_malloc_r+0xdc>
 80065f6:	f8c8 7000 	str.w	r7, [r8]
 80065fa:	e00f      	b.n	800661c <_malloc_r+0xa8>
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	1b52      	subs	r2, r2, r5
 8006600:	d420      	bmi.n	8006644 <_malloc_r+0xd0>
 8006602:	2a0b      	cmp	r2, #11
 8006604:	d917      	bls.n	8006636 <_malloc_r+0xc2>
 8006606:	1961      	adds	r1, r4, r5
 8006608:	42a3      	cmp	r3, r4
 800660a:	6025      	str	r5, [r4, #0]
 800660c:	bf18      	it	ne
 800660e:	6059      	strne	r1, [r3, #4]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	bf08      	it	eq
 8006614:	f8c8 1000 	streq.w	r1, [r8]
 8006618:	5162      	str	r2, [r4, r5]
 800661a:	604b      	str	r3, [r1, #4]
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f82f 	bl	8006680 <__malloc_unlock>
 8006622:	f104 000b 	add.w	r0, r4, #11
 8006626:	1d23      	adds	r3, r4, #4
 8006628:	f020 0007 	bic.w	r0, r0, #7
 800662c:	1ac2      	subs	r2, r0, r3
 800662e:	bf1c      	itt	ne
 8006630:	1a1b      	subne	r3, r3, r0
 8006632:	50a3      	strne	r3, [r4, r2]
 8006634:	e7af      	b.n	8006596 <_malloc_r+0x22>
 8006636:	6862      	ldr	r2, [r4, #4]
 8006638:	42a3      	cmp	r3, r4
 800663a:	bf0c      	ite	eq
 800663c:	f8c8 2000 	streq.w	r2, [r8]
 8006640:	605a      	strne	r2, [r3, #4]
 8006642:	e7eb      	b.n	800661c <_malloc_r+0xa8>
 8006644:	4623      	mov	r3, r4
 8006646:	6864      	ldr	r4, [r4, #4]
 8006648:	e7ae      	b.n	80065a8 <_malloc_r+0x34>
 800664a:	463c      	mov	r4, r7
 800664c:	687f      	ldr	r7, [r7, #4]
 800664e:	e7b6      	b.n	80065be <_malloc_r+0x4a>
 8006650:	461a      	mov	r2, r3
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	42a3      	cmp	r3, r4
 8006656:	d1fb      	bne.n	8006650 <_malloc_r+0xdc>
 8006658:	2300      	movs	r3, #0
 800665a:	6053      	str	r3, [r2, #4]
 800665c:	e7de      	b.n	800661c <_malloc_r+0xa8>
 800665e:	230c      	movs	r3, #12
 8006660:	6033      	str	r3, [r6, #0]
 8006662:	4630      	mov	r0, r6
 8006664:	f000 f80c 	bl	8006680 <__malloc_unlock>
 8006668:	e794      	b.n	8006594 <_malloc_r+0x20>
 800666a:	6005      	str	r5, [r0, #0]
 800666c:	e7d6      	b.n	800661c <_malloc_r+0xa8>
 800666e:	bf00      	nop
 8006670:	20007420 	.word	0x20007420

08006674 <__malloc_lock>:
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__malloc_lock+0x8>)
 8006676:	f000 bbbc 	b.w	8006df2 <__retarget_lock_acquire_recursive>
 800667a:	bf00      	nop
 800667c:	20007564 	.word	0x20007564

08006680 <__malloc_unlock>:
 8006680:	4801      	ldr	r0, [pc, #4]	@ (8006688 <__malloc_unlock+0x8>)
 8006682:	f000 bbb7 	b.w	8006df4 <__retarget_lock_release_recursive>
 8006686:	bf00      	nop
 8006688:	20007564 	.word	0x20007564

0800668c <rand>:
 800668c:	4b16      	ldr	r3, [pc, #88]	@ (80066e8 <rand+0x5c>)
 800668e:	b510      	push	{r4, lr}
 8006690:	681c      	ldr	r4, [r3, #0]
 8006692:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006694:	b9b3      	cbnz	r3, 80066c4 <rand+0x38>
 8006696:	2018      	movs	r0, #24
 8006698:	f7ff ff42 	bl	8006520 <malloc>
 800669c:	4602      	mov	r2, r0
 800669e:	6320      	str	r0, [r4, #48]	@ 0x30
 80066a0:	b920      	cbnz	r0, 80066ac <rand+0x20>
 80066a2:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <rand+0x60>)
 80066a4:	4812      	ldr	r0, [pc, #72]	@ (80066f0 <rand+0x64>)
 80066a6:	2152      	movs	r1, #82	@ 0x52
 80066a8:	f000 fbbc 	bl	8006e24 <__assert_func>
 80066ac:	4911      	ldr	r1, [pc, #68]	@ (80066f4 <rand+0x68>)
 80066ae:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <rand+0x6c>)
 80066b0:	e9c0 1300 	strd	r1, r3, [r0]
 80066b4:	4b11      	ldr	r3, [pc, #68]	@ (80066fc <rand+0x70>)
 80066b6:	6083      	str	r3, [r0, #8]
 80066b8:	230b      	movs	r3, #11
 80066ba:	8183      	strh	r3, [r0, #12]
 80066bc:	2100      	movs	r1, #0
 80066be:	2001      	movs	r0, #1
 80066c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80066c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80066c6:	480e      	ldr	r0, [pc, #56]	@ (8006700 <rand+0x74>)
 80066c8:	690b      	ldr	r3, [r1, #16]
 80066ca:	694c      	ldr	r4, [r1, #20]
 80066cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006704 <rand+0x78>)
 80066ce:	4358      	muls	r0, r3
 80066d0:	fb02 0004 	mla	r0, r2, r4, r0
 80066d4:	fba3 3202 	umull	r3, r2, r3, r2
 80066d8:	3301      	adds	r3, #1
 80066da:	eb40 0002 	adc.w	r0, r0, r2
 80066de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80066e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80066e6:	bd10      	pop	{r4, pc}
 80066e8:	200000ac 	.word	0x200000ac
 80066ec:	080080fe 	.word	0x080080fe
 80066f0:	08008115 	.word	0x08008115
 80066f4:	abcd330e 	.word	0xabcd330e
 80066f8:	e66d1234 	.word	0xe66d1234
 80066fc:	0005deec 	.word	0x0005deec
 8006700:	5851f42d 	.word	0x5851f42d
 8006704:	4c957f2d 	.word	0x4c957f2d

08006708 <_strtol_l.constprop.0>:
 8006708:	2b24      	cmp	r3, #36	@ 0x24
 800670a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670e:	4686      	mov	lr, r0
 8006710:	4690      	mov	r8, r2
 8006712:	d801      	bhi.n	8006718 <_strtol_l.constprop.0+0x10>
 8006714:	2b01      	cmp	r3, #1
 8006716:	d106      	bne.n	8006726 <_strtol_l.constprop.0+0x1e>
 8006718:	f000 fb40 	bl	8006d9c <__errno>
 800671c:	2316      	movs	r3, #22
 800671e:	6003      	str	r3, [r0, #0]
 8006720:	2000      	movs	r0, #0
 8006722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006726:	4834      	ldr	r0, [pc, #208]	@ (80067f8 <_strtol_l.constprop.0+0xf0>)
 8006728:	460d      	mov	r5, r1
 800672a:	462a      	mov	r2, r5
 800672c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006730:	5d06      	ldrb	r6, [r0, r4]
 8006732:	f016 0608 	ands.w	r6, r6, #8
 8006736:	d1f8      	bne.n	800672a <_strtol_l.constprop.0+0x22>
 8006738:	2c2d      	cmp	r4, #45	@ 0x2d
 800673a:	d12d      	bne.n	8006798 <_strtol_l.constprop.0+0x90>
 800673c:	782c      	ldrb	r4, [r5, #0]
 800673e:	2601      	movs	r6, #1
 8006740:	1c95      	adds	r5, r2, #2
 8006742:	f033 0210 	bics.w	r2, r3, #16
 8006746:	d109      	bne.n	800675c <_strtol_l.constprop.0+0x54>
 8006748:	2c30      	cmp	r4, #48	@ 0x30
 800674a:	d12a      	bne.n	80067a2 <_strtol_l.constprop.0+0x9a>
 800674c:	782a      	ldrb	r2, [r5, #0]
 800674e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006752:	2a58      	cmp	r2, #88	@ 0x58
 8006754:	d125      	bne.n	80067a2 <_strtol_l.constprop.0+0x9a>
 8006756:	786c      	ldrb	r4, [r5, #1]
 8006758:	2310      	movs	r3, #16
 800675a:	3502      	adds	r5, #2
 800675c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006760:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006764:	2200      	movs	r2, #0
 8006766:	fbbc f9f3 	udiv	r9, ip, r3
 800676a:	4610      	mov	r0, r2
 800676c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006770:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006774:	2f09      	cmp	r7, #9
 8006776:	d81b      	bhi.n	80067b0 <_strtol_l.constprop.0+0xa8>
 8006778:	463c      	mov	r4, r7
 800677a:	42a3      	cmp	r3, r4
 800677c:	dd27      	ble.n	80067ce <_strtol_l.constprop.0+0xc6>
 800677e:	1c57      	adds	r7, r2, #1
 8006780:	d007      	beq.n	8006792 <_strtol_l.constprop.0+0x8a>
 8006782:	4581      	cmp	r9, r0
 8006784:	d320      	bcc.n	80067c8 <_strtol_l.constprop.0+0xc0>
 8006786:	d101      	bne.n	800678c <_strtol_l.constprop.0+0x84>
 8006788:	45a2      	cmp	sl, r4
 800678a:	db1d      	blt.n	80067c8 <_strtol_l.constprop.0+0xc0>
 800678c:	fb00 4003 	mla	r0, r0, r3, r4
 8006790:	2201      	movs	r2, #1
 8006792:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006796:	e7eb      	b.n	8006770 <_strtol_l.constprop.0+0x68>
 8006798:	2c2b      	cmp	r4, #43	@ 0x2b
 800679a:	bf04      	itt	eq
 800679c:	782c      	ldrbeq	r4, [r5, #0]
 800679e:	1c95      	addeq	r5, r2, #2
 80067a0:	e7cf      	b.n	8006742 <_strtol_l.constprop.0+0x3a>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1da      	bne.n	800675c <_strtol_l.constprop.0+0x54>
 80067a6:	2c30      	cmp	r4, #48	@ 0x30
 80067a8:	bf0c      	ite	eq
 80067aa:	2308      	moveq	r3, #8
 80067ac:	230a      	movne	r3, #10
 80067ae:	e7d5      	b.n	800675c <_strtol_l.constprop.0+0x54>
 80067b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80067b4:	2f19      	cmp	r7, #25
 80067b6:	d801      	bhi.n	80067bc <_strtol_l.constprop.0+0xb4>
 80067b8:	3c37      	subs	r4, #55	@ 0x37
 80067ba:	e7de      	b.n	800677a <_strtol_l.constprop.0+0x72>
 80067bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80067c0:	2f19      	cmp	r7, #25
 80067c2:	d804      	bhi.n	80067ce <_strtol_l.constprop.0+0xc6>
 80067c4:	3c57      	subs	r4, #87	@ 0x57
 80067c6:	e7d8      	b.n	800677a <_strtol_l.constprop.0+0x72>
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	e7e1      	b.n	8006792 <_strtol_l.constprop.0+0x8a>
 80067ce:	1c53      	adds	r3, r2, #1
 80067d0:	d108      	bne.n	80067e4 <_strtol_l.constprop.0+0xdc>
 80067d2:	2322      	movs	r3, #34	@ 0x22
 80067d4:	f8ce 3000 	str.w	r3, [lr]
 80067d8:	4660      	mov	r0, ip
 80067da:	f1b8 0f00 	cmp.w	r8, #0
 80067de:	d0a0      	beq.n	8006722 <_strtol_l.constprop.0+0x1a>
 80067e0:	1e69      	subs	r1, r5, #1
 80067e2:	e006      	b.n	80067f2 <_strtol_l.constprop.0+0xea>
 80067e4:	b106      	cbz	r6, 80067e8 <_strtol_l.constprop.0+0xe0>
 80067e6:	4240      	negs	r0, r0
 80067e8:	f1b8 0f00 	cmp.w	r8, #0
 80067ec:	d099      	beq.n	8006722 <_strtol_l.constprop.0+0x1a>
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d1f6      	bne.n	80067e0 <_strtol_l.constprop.0+0xd8>
 80067f2:	f8c8 1000 	str.w	r1, [r8]
 80067f6:	e794      	b.n	8006722 <_strtol_l.constprop.0+0x1a>
 80067f8:	0800816e 	.word	0x0800816e

080067fc <strtol>:
 80067fc:	4613      	mov	r3, r2
 80067fe:	460a      	mov	r2, r1
 8006800:	4601      	mov	r1, r0
 8006802:	4802      	ldr	r0, [pc, #8]	@ (800680c <strtol+0x10>)
 8006804:	6800      	ldr	r0, [r0, #0]
 8006806:	f7ff bf7f 	b.w	8006708 <_strtol_l.constprop.0>
 800680a:	bf00      	nop
 800680c:	200000ac 	.word	0x200000ac

08006810 <std>:
 8006810:	2300      	movs	r3, #0
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	e9c0 3300 	strd	r3, r3, [r0]
 800681a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681e:	6083      	str	r3, [r0, #8]
 8006820:	8181      	strh	r1, [r0, #12]
 8006822:	6643      	str	r3, [r0, #100]	@ 0x64
 8006824:	81c2      	strh	r2, [r0, #14]
 8006826:	6183      	str	r3, [r0, #24]
 8006828:	4619      	mov	r1, r3
 800682a:	2208      	movs	r2, #8
 800682c:	305c      	adds	r0, #92	@ 0x5c
 800682e:	f000 fa21 	bl	8006c74 <memset>
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <std+0x58>)
 8006834:	6263      	str	r3, [r4, #36]	@ 0x24
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <std+0x5c>)
 8006838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x60>)
 800683c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <std+0x64>)
 8006840:	6323      	str	r3, [r4, #48]	@ 0x30
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <std+0x68>)
 8006844:	6224      	str	r4, [r4, #32]
 8006846:	429c      	cmp	r4, r3
 8006848:	d006      	beq.n	8006858 <std+0x48>
 800684a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800684e:	4294      	cmp	r4, r2
 8006850:	d002      	beq.n	8006858 <std+0x48>
 8006852:	33d0      	adds	r3, #208	@ 0xd0
 8006854:	429c      	cmp	r4, r3
 8006856:	d105      	bne.n	8006864 <std+0x54>
 8006858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006860:	f000 bac6 	b.w	8006df0 <__retarget_lock_init_recursive>
 8006864:	bd10      	pop	{r4, pc}
 8006866:	bf00      	nop
 8006868:	08006ac5 	.word	0x08006ac5
 800686c:	08006ae7 	.word	0x08006ae7
 8006870:	08006b1f 	.word	0x08006b1f
 8006874:	08006b43 	.word	0x08006b43
 8006878:	20007424 	.word	0x20007424

0800687c <stdio_exit_handler>:
 800687c:	4a02      	ldr	r2, [pc, #8]	@ (8006888 <stdio_exit_handler+0xc>)
 800687e:	4903      	ldr	r1, [pc, #12]	@ (800688c <stdio_exit_handler+0x10>)
 8006880:	4803      	ldr	r0, [pc, #12]	@ (8006890 <stdio_exit_handler+0x14>)
 8006882:	f000 b869 	b.w	8006958 <_fwalk_sglue>
 8006886:	bf00      	nop
 8006888:	200000a0 	.word	0x200000a0
 800688c:	0800784d 	.word	0x0800784d
 8006890:	200000b0 	.word	0x200000b0

08006894 <cleanup_stdio>:
 8006894:	6841      	ldr	r1, [r0, #4]
 8006896:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <cleanup_stdio+0x34>)
 8006898:	4299      	cmp	r1, r3
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	d001      	beq.n	80068a4 <cleanup_stdio+0x10>
 80068a0:	f000 ffd4 	bl	800784c <_fflush_r>
 80068a4:	68a1      	ldr	r1, [r4, #8]
 80068a6:	4b09      	ldr	r3, [pc, #36]	@ (80068cc <cleanup_stdio+0x38>)
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d002      	beq.n	80068b2 <cleanup_stdio+0x1e>
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 ffcd 	bl	800784c <_fflush_r>
 80068b2:	68e1      	ldr	r1, [r4, #12]
 80068b4:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <cleanup_stdio+0x3c>)
 80068b6:	4299      	cmp	r1, r3
 80068b8:	d004      	beq.n	80068c4 <cleanup_stdio+0x30>
 80068ba:	4620      	mov	r0, r4
 80068bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c0:	f000 bfc4 	b.w	800784c <_fflush_r>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	bf00      	nop
 80068c8:	20007424 	.word	0x20007424
 80068cc:	2000748c 	.word	0x2000748c
 80068d0:	200074f4 	.word	0x200074f4

080068d4 <global_stdio_init.part.0>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <global_stdio_init.part.0+0x30>)
 80068d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006908 <global_stdio_init.part.0+0x34>)
 80068da:	4a0c      	ldr	r2, [pc, #48]	@ (800690c <global_stdio_init.part.0+0x38>)
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	4620      	mov	r0, r4
 80068e0:	2200      	movs	r2, #0
 80068e2:	2104      	movs	r1, #4
 80068e4:	f7ff ff94 	bl	8006810 <std>
 80068e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068ec:	2201      	movs	r2, #1
 80068ee:	2109      	movs	r1, #9
 80068f0:	f7ff ff8e 	bl	8006810 <std>
 80068f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068f8:	2202      	movs	r2, #2
 80068fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fe:	2112      	movs	r1, #18
 8006900:	f7ff bf86 	b.w	8006810 <std>
 8006904:	2000755c 	.word	0x2000755c
 8006908:	20007424 	.word	0x20007424
 800690c:	0800687d 	.word	0x0800687d

08006910 <__sfp_lock_acquire>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__sfp_lock_acquire+0x8>)
 8006912:	f000 ba6e 	b.w	8006df2 <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20007565 	.word	0x20007565

0800691c <__sfp_lock_release>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__sfp_lock_release+0x8>)
 800691e:	f000 ba69 	b.w	8006df4 <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20007565 	.word	0x20007565

08006928 <__sinit>:
 8006928:	b510      	push	{r4, lr}
 800692a:	4604      	mov	r4, r0
 800692c:	f7ff fff0 	bl	8006910 <__sfp_lock_acquire>
 8006930:	6a23      	ldr	r3, [r4, #32]
 8006932:	b11b      	cbz	r3, 800693c <__sinit+0x14>
 8006934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006938:	f7ff bff0 	b.w	800691c <__sfp_lock_release>
 800693c:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <__sinit+0x28>)
 800693e:	6223      	str	r3, [r4, #32]
 8006940:	4b04      	ldr	r3, [pc, #16]	@ (8006954 <__sinit+0x2c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f5      	bne.n	8006934 <__sinit+0xc>
 8006948:	f7ff ffc4 	bl	80068d4 <global_stdio_init.part.0>
 800694c:	e7f2      	b.n	8006934 <__sinit+0xc>
 800694e:	bf00      	nop
 8006950:	08006895 	.word	0x08006895
 8006954:	2000755c 	.word	0x2000755c

08006958 <_fwalk_sglue>:
 8006958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800695c:	4607      	mov	r7, r0
 800695e:	4688      	mov	r8, r1
 8006960:	4614      	mov	r4, r2
 8006962:	2600      	movs	r6, #0
 8006964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006968:	f1b9 0901 	subs.w	r9, r9, #1
 800696c:	d505      	bpl.n	800697a <_fwalk_sglue+0x22>
 800696e:	6824      	ldr	r4, [r4, #0]
 8006970:	2c00      	cmp	r4, #0
 8006972:	d1f7      	bne.n	8006964 <_fwalk_sglue+0xc>
 8006974:	4630      	mov	r0, r6
 8006976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d907      	bls.n	8006990 <_fwalk_sglue+0x38>
 8006980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006984:	3301      	adds	r3, #1
 8006986:	d003      	beq.n	8006990 <_fwalk_sglue+0x38>
 8006988:	4629      	mov	r1, r5
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	4306      	orrs	r6, r0
 8006990:	3568      	adds	r5, #104	@ 0x68
 8006992:	e7e9      	b.n	8006968 <_fwalk_sglue+0x10>

08006994 <iprintf>:
 8006994:	b40f      	push	{r0, r1, r2, r3}
 8006996:	b507      	push	{r0, r1, r2, lr}
 8006998:	4906      	ldr	r1, [pc, #24]	@ (80069b4 <iprintf+0x20>)
 800699a:	ab04      	add	r3, sp, #16
 800699c:	6808      	ldr	r0, [r1, #0]
 800699e:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a2:	6881      	ldr	r1, [r0, #8]
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	f000 fc27 	bl	80071f8 <_vfiprintf_r>
 80069aa:	b003      	add	sp, #12
 80069ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b0:	b004      	add	sp, #16
 80069b2:	4770      	bx	lr
 80069b4:	200000ac 	.word	0x200000ac

080069b8 <putchar>:
 80069b8:	4b02      	ldr	r3, [pc, #8]	@ (80069c4 <putchar+0xc>)
 80069ba:	4601      	mov	r1, r0
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	6882      	ldr	r2, [r0, #8]
 80069c0:	f000 bfe0 	b.w	8007984 <_putc_r>
 80069c4:	200000ac 	.word	0x200000ac

080069c8 <_puts_r>:
 80069c8:	6a03      	ldr	r3, [r0, #32]
 80069ca:	b570      	push	{r4, r5, r6, lr}
 80069cc:	6884      	ldr	r4, [r0, #8]
 80069ce:	4605      	mov	r5, r0
 80069d0:	460e      	mov	r6, r1
 80069d2:	b90b      	cbnz	r3, 80069d8 <_puts_r+0x10>
 80069d4:	f7ff ffa8 	bl	8006928 <__sinit>
 80069d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069da:	07db      	lsls	r3, r3, #31
 80069dc:	d405      	bmi.n	80069ea <_puts_r+0x22>
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	0598      	lsls	r0, r3, #22
 80069e2:	d402      	bmi.n	80069ea <_puts_r+0x22>
 80069e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069e6:	f000 fa04 	bl	8006df2 <__retarget_lock_acquire_recursive>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	0719      	lsls	r1, r3, #28
 80069ee:	d502      	bpl.n	80069f6 <_puts_r+0x2e>
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d135      	bne.n	8006a62 <_puts_r+0x9a>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 f8e5 	bl	8006bc8 <__swsetup_r>
 80069fe:	b380      	cbz	r0, 8006a62 <_puts_r+0x9a>
 8006a00:	f04f 35ff 	mov.w	r5, #4294967295
 8006a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a06:	07da      	lsls	r2, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <_puts_r+0x4e>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	059b      	lsls	r3, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_puts_r+0x4e>
 8006a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a12:	f000 f9ef 	bl	8006df4 <__retarget_lock_release_recursive>
 8006a16:	4628      	mov	r0, r5
 8006a18:	bd70      	pop	{r4, r5, r6, pc}
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da04      	bge.n	8006a28 <_puts_r+0x60>
 8006a1e:	69a2      	ldr	r2, [r4, #24]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	dc17      	bgt.n	8006a54 <_puts_r+0x8c>
 8006a24:	290a      	cmp	r1, #10
 8006a26:	d015      	beq.n	8006a54 <_puts_r+0x8c>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	6022      	str	r2, [r4, #0]
 8006a2e:	7019      	strb	r1, [r3, #0]
 8006a30:	68a3      	ldr	r3, [r4, #8]
 8006a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a36:	3b01      	subs	r3, #1
 8006a38:	60a3      	str	r3, [r4, #8]
 8006a3a:	2900      	cmp	r1, #0
 8006a3c:	d1ed      	bne.n	8006a1a <_puts_r+0x52>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da11      	bge.n	8006a66 <_puts_r+0x9e>
 8006a42:	4622      	mov	r2, r4
 8006a44:	210a      	movs	r1, #10
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f87f 	bl	8006b4a <__swbuf_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d0d7      	beq.n	8006a00 <_puts_r+0x38>
 8006a50:	250a      	movs	r5, #10
 8006a52:	e7d7      	b.n	8006a04 <_puts_r+0x3c>
 8006a54:	4622      	mov	r2, r4
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 f877 	bl	8006b4a <__swbuf_r>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d1e7      	bne.n	8006a30 <_puts_r+0x68>
 8006a60:	e7ce      	b.n	8006a00 <_puts_r+0x38>
 8006a62:	3e01      	subs	r6, #1
 8006a64:	e7e4      	b.n	8006a30 <_puts_r+0x68>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	220a      	movs	r2, #10
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e7ee      	b.n	8006a50 <_puts_r+0x88>
	...

08006a74 <puts>:
 8006a74:	4b02      	ldr	r3, [pc, #8]	@ (8006a80 <puts+0xc>)
 8006a76:	4601      	mov	r1, r0
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	f7ff bfa5 	b.w	80069c8 <_puts_r>
 8006a7e:	bf00      	nop
 8006a80:	200000ac 	.word	0x200000ac

08006a84 <siprintf>:
 8006a84:	b40e      	push	{r1, r2, r3}
 8006a86:	b500      	push	{lr}
 8006a88:	b09c      	sub	sp, #112	@ 0x70
 8006a8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a8c:	9002      	str	r0, [sp, #8]
 8006a8e:	9006      	str	r0, [sp, #24]
 8006a90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a94:	4809      	ldr	r0, [pc, #36]	@ (8006abc <siprintf+0x38>)
 8006a96:	9107      	str	r1, [sp, #28]
 8006a98:	9104      	str	r1, [sp, #16]
 8006a9a:	4909      	ldr	r1, [pc, #36]	@ (8006ac0 <siprintf+0x3c>)
 8006a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa0:	9105      	str	r1, [sp, #20]
 8006aa2:	6800      	ldr	r0, [r0, #0]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	a902      	add	r1, sp, #8
 8006aa8:	f000 fa80 	bl	8006fac <_svfiprintf_r>
 8006aac:	9b02      	ldr	r3, [sp, #8]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	b01c      	add	sp, #112	@ 0x70
 8006ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ab8:	b003      	add	sp, #12
 8006aba:	4770      	bx	lr
 8006abc:	200000ac 	.word	0x200000ac
 8006ac0:	ffff0208 	.word	0xffff0208

08006ac4 <__sread>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006acc:	f000 f932 	bl	8006d34 <_read_r>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	bfab      	itete	ge
 8006ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ad8:	181b      	addge	r3, r3, r0
 8006ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ade:	bfac      	ite	ge
 8006ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ae2:	81a3      	strhlt	r3, [r4, #12]
 8006ae4:	bd10      	pop	{r4, pc}

08006ae6 <__swrite>:
 8006ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	461f      	mov	r7, r3
 8006aec:	898b      	ldrh	r3, [r1, #12]
 8006aee:	05db      	lsls	r3, r3, #23
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	4616      	mov	r6, r2
 8006af6:	d505      	bpl.n	8006b04 <__swrite+0x1e>
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	2302      	movs	r3, #2
 8006afe:	2200      	movs	r2, #0
 8006b00:	f000 f906 	bl	8006d10 <_lseek_r>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	f000 b92d 	b.w	8006d78 <_write_r>

08006b1e <__sseek>:
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b26:	f000 f8f3 	bl	8006d10 <_lseek_r>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	bf15      	itete	ne
 8006b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b3a:	81a3      	strheq	r3, [r4, #12]
 8006b3c:	bf18      	it	ne
 8006b3e:	81a3      	strhne	r3, [r4, #12]
 8006b40:	bd10      	pop	{r4, pc}

08006b42 <__sclose>:
 8006b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b46:	f000 b8d3 	b.w	8006cf0 <_close_r>

08006b4a <__swbuf_r>:
 8006b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	4614      	mov	r4, r2
 8006b50:	4605      	mov	r5, r0
 8006b52:	b118      	cbz	r0, 8006b5c <__swbuf_r+0x12>
 8006b54:	6a03      	ldr	r3, [r0, #32]
 8006b56:	b90b      	cbnz	r3, 8006b5c <__swbuf_r+0x12>
 8006b58:	f7ff fee6 	bl	8006928 <__sinit>
 8006b5c:	69a3      	ldr	r3, [r4, #24]
 8006b5e:	60a3      	str	r3, [r4, #8]
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	071a      	lsls	r2, r3, #28
 8006b64:	d501      	bpl.n	8006b6a <__swbuf_r+0x20>
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	b943      	cbnz	r3, 8006b7c <__swbuf_r+0x32>
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 f82b 	bl	8006bc8 <__swsetup_r>
 8006b72:	b118      	cbz	r0, 8006b7c <__swbuf_r+0x32>
 8006b74:	f04f 37ff 	mov.w	r7, #4294967295
 8006b78:	4638      	mov	r0, r7
 8006b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	6922      	ldr	r2, [r4, #16]
 8006b80:	1a98      	subs	r0, r3, r2
 8006b82:	6963      	ldr	r3, [r4, #20]
 8006b84:	b2f6      	uxtb	r6, r6
 8006b86:	4283      	cmp	r3, r0
 8006b88:	4637      	mov	r7, r6
 8006b8a:	dc05      	bgt.n	8006b98 <__swbuf_r+0x4e>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 fe5c 	bl	800784c <_fflush_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d1ed      	bne.n	8006b74 <__swbuf_r+0x2a>
 8006b98:	68a3      	ldr	r3, [r4, #8]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	60a3      	str	r3, [r4, #8]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	6022      	str	r2, [r4, #0]
 8006ba4:	701e      	strb	r6, [r3, #0]
 8006ba6:	6962      	ldr	r2, [r4, #20]
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d004      	beq.n	8006bb8 <__swbuf_r+0x6e>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	07db      	lsls	r3, r3, #31
 8006bb2:	d5e1      	bpl.n	8006b78 <__swbuf_r+0x2e>
 8006bb4:	2e0a      	cmp	r6, #10
 8006bb6:	d1df      	bne.n	8006b78 <__swbuf_r+0x2e>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 fe46 	bl	800784c <_fflush_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d0d9      	beq.n	8006b78 <__swbuf_r+0x2e>
 8006bc4:	e7d6      	b.n	8006b74 <__swbuf_r+0x2a>
	...

08006bc8 <__swsetup_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4b29      	ldr	r3, [pc, #164]	@ (8006c70 <__swsetup_r+0xa8>)
 8006bcc:	4605      	mov	r5, r0
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	b118      	cbz	r0, 8006bdc <__swsetup_r+0x14>
 8006bd4:	6a03      	ldr	r3, [r0, #32]
 8006bd6:	b90b      	cbnz	r3, 8006bdc <__swsetup_r+0x14>
 8006bd8:	f7ff fea6 	bl	8006928 <__sinit>
 8006bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be0:	0719      	lsls	r1, r3, #28
 8006be2:	d422      	bmi.n	8006c2a <__swsetup_r+0x62>
 8006be4:	06da      	lsls	r2, r3, #27
 8006be6:	d407      	bmi.n	8006bf8 <__swsetup_r+0x30>
 8006be8:	2209      	movs	r2, #9
 8006bea:	602a      	str	r2, [r5, #0]
 8006bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf6:	e033      	b.n	8006c60 <__swsetup_r+0x98>
 8006bf8:	0758      	lsls	r0, r3, #29
 8006bfa:	d512      	bpl.n	8006c22 <__swsetup_r+0x5a>
 8006bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bfe:	b141      	cbz	r1, 8006c12 <__swsetup_r+0x4a>
 8006c00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c04:	4299      	cmp	r1, r3
 8006c06:	d002      	beq.n	8006c0e <__swsetup_r+0x46>
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 f929 	bl	8006e60 <_free_r>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6063      	str	r3, [r4, #4]
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0308 	orr.w	r3, r3, #8
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	b94b      	cbnz	r3, 8006c42 <__swsetup_r+0x7a>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c38:	d003      	beq.n	8006c42 <__swsetup_r+0x7a>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 fe65 	bl	800790c <__smakebuf_r>
 8006c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c46:	f013 0201 	ands.w	r2, r3, #1
 8006c4a:	d00a      	beq.n	8006c62 <__swsetup_r+0x9a>
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	60a2      	str	r2, [r4, #8]
 8006c50:	6962      	ldr	r2, [r4, #20]
 8006c52:	4252      	negs	r2, r2
 8006c54:	61a2      	str	r2, [r4, #24]
 8006c56:	6922      	ldr	r2, [r4, #16]
 8006c58:	b942      	cbnz	r2, 8006c6c <__swsetup_r+0xa4>
 8006c5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c5e:	d1c5      	bne.n	8006bec <__swsetup_r+0x24>
 8006c60:	bd38      	pop	{r3, r4, r5, pc}
 8006c62:	0799      	lsls	r1, r3, #30
 8006c64:	bf58      	it	pl
 8006c66:	6962      	ldrpl	r2, [r4, #20]
 8006c68:	60a2      	str	r2, [r4, #8]
 8006c6a:	e7f4      	b.n	8006c56 <__swsetup_r+0x8e>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e7f7      	b.n	8006c60 <__swsetup_r+0x98>
 8006c70:	200000ac 	.word	0x200000ac

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <strchr>:
 8006c84:	b2c9      	uxtb	r1, r1
 8006c86:	4603      	mov	r3, r0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c8e:	b112      	cbz	r2, 8006c96 <strchr+0x12>
 8006c90:	428a      	cmp	r2, r1
 8006c92:	d1f9      	bne.n	8006c88 <strchr+0x4>
 8006c94:	4770      	bx	lr
 8006c96:	2900      	cmp	r1, #0
 8006c98:	bf18      	it	ne
 8006c9a:	2000      	movne	r0, #0
 8006c9c:	4770      	bx	lr

08006c9e <strncpy>:
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	3901      	subs	r1, #1
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	b132      	cbz	r2, 8006cb4 <strncpy+0x16>
 8006ca6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006caa:	f803 4b01 	strb.w	r4, [r3], #1
 8006cae:	3a01      	subs	r2, #1
 8006cb0:	2c00      	cmp	r4, #0
 8006cb2:	d1f7      	bne.n	8006ca4 <strncpy+0x6>
 8006cb4:	441a      	add	r2, r3
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d100      	bne.n	8006cbe <strncpy+0x20>
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc2:	e7f9      	b.n	8006cb8 <strncpy+0x1a>

08006cc4 <strstr>:
 8006cc4:	780a      	ldrb	r2, [r1, #0]
 8006cc6:	b570      	push	{r4, r5, r6, lr}
 8006cc8:	b96a      	cbnz	r2, 8006ce6 <strstr+0x22>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d109      	bne.n	8006ce4 <strstr+0x20>
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f6      	beq.n	8006cca <strstr+0x6>
 8006cdc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006ce0:	429e      	cmp	r6, r3
 8006ce2:	d0f7      	beq.n	8006cd4 <strstr+0x10>
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	7803      	ldrb	r3, [r0, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1ef      	bne.n	8006ccc <strstr+0x8>
 8006cec:	4618      	mov	r0, r3
 8006cee:	e7ec      	b.n	8006cca <strstr+0x6>

08006cf0 <_close_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	@ (8006d0c <_close_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fb fc76 	bl	80025ec <_close>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_close_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_close_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20007560 	.word	0x20007560

08006d10 <_lseek_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	@ (8006d30 <_lseek_r+0x20>)
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7fb fc8b 	bl	800263a <_lseek>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_lseek_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_lseek_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	20007560 	.word	0x20007560

08006d34 <_read_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d07      	ldr	r5, [pc, #28]	@ (8006d54 <_read_r+0x20>)
 8006d38:	4604      	mov	r4, r0
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	602a      	str	r2, [r5, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f7fb fc19 	bl	800257a <_read>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_read_r+0x1e>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_read_r+0x1e>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	20007560 	.word	0x20007560

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	@ (8006d74 <_sbrk_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fb fc76 	bl	8002654 <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20007560 	.word	0x20007560

08006d78 <_write_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	@ (8006d98 <_write_r+0x20>)
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	4608      	mov	r0, r1
 8006d80:	4611      	mov	r1, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	602a      	str	r2, [r5, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7fb fc14 	bl	80025b4 <_write>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_write_r+0x1e>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_write_r+0x1e>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	20007560 	.word	0x20007560

08006d9c <__errno>:
 8006d9c:	4b01      	ldr	r3, [pc, #4]	@ (8006da4 <__errno+0x8>)
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	200000ac 	.word	0x200000ac

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	4d0d      	ldr	r5, [pc, #52]	@ (8006de0 <__libc_init_array+0x38>)
 8006dac:	4c0d      	ldr	r4, [pc, #52]	@ (8006de4 <__libc_init_array+0x3c>)
 8006dae:	1b64      	subs	r4, r4, r5
 8006db0:	10a4      	asrs	r4, r4, #2
 8006db2:	2600      	movs	r6, #0
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	4d0b      	ldr	r5, [pc, #44]	@ (8006de8 <__libc_init_array+0x40>)
 8006dba:	4c0c      	ldr	r4, [pc, #48]	@ (8006dec <__libc_init_array+0x44>)
 8006dbc:	f000 fed4 	bl	8007b68 <_init>
 8006dc0:	1b64      	subs	r4, r4, r5
 8006dc2:	10a4      	asrs	r4, r4, #2
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	42a6      	cmp	r6, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd0:	4798      	blx	r3
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dda:	4798      	blx	r3
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
 8006de0:	080082e8 	.word	0x080082e8
 8006de4:	080082e8 	.word	0x080082e8
 8006de8:	080082e8 	.word	0x080082e8
 8006dec:	080082ec 	.word	0x080082ec

08006df0 <__retarget_lock_init_recursive>:
 8006df0:	4770      	bx	lr

08006df2 <__retarget_lock_acquire_recursive>:
 8006df2:	4770      	bx	lr

08006df4 <__retarget_lock_release_recursive>:
 8006df4:	4770      	bx	lr

08006df6 <strcpy>:
 8006df6:	4603      	mov	r3, r0
 8006df8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dfc:	f803 2b01 	strb.w	r2, [r3], #1
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	d1f9      	bne.n	8006df8 <strcpy+0x2>
 8006e04:	4770      	bx	lr

08006e06 <memcpy>:
 8006e06:	440a      	add	r2, r1
 8006e08:	4291      	cmp	r1, r2
 8006e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e0e:	d100      	bne.n	8006e12 <memcpy+0xc>
 8006e10:	4770      	bx	lr
 8006e12:	b510      	push	{r4, lr}
 8006e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e1c:	4291      	cmp	r1, r2
 8006e1e:	d1f9      	bne.n	8006e14 <memcpy+0xe>
 8006e20:	bd10      	pop	{r4, pc}
	...

08006e24 <__assert_func>:
 8006e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e26:	4614      	mov	r4, r2
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <__assert_func+0x2c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4605      	mov	r5, r0
 8006e30:	68d8      	ldr	r0, [r3, #12]
 8006e32:	b954      	cbnz	r4, 8006e4a <__assert_func+0x26>
 8006e34:	4b07      	ldr	r3, [pc, #28]	@ (8006e54 <__assert_func+0x30>)
 8006e36:	461c      	mov	r4, r3
 8006e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e3c:	9100      	str	r1, [sp, #0]
 8006e3e:	462b      	mov	r3, r5
 8006e40:	4905      	ldr	r1, [pc, #20]	@ (8006e58 <__assert_func+0x34>)
 8006e42:	f000 fd2b 	bl	800789c <fiprintf>
 8006e46:	f000 fe0d 	bl	8007a64 <abort>
 8006e4a:	4b04      	ldr	r3, [pc, #16]	@ (8006e5c <__assert_func+0x38>)
 8006e4c:	e7f4      	b.n	8006e38 <__assert_func+0x14>
 8006e4e:	bf00      	nop
 8006e50:	200000ac 	.word	0x200000ac
 8006e54:	080082a9 	.word	0x080082a9
 8006e58:	0800827b 	.word	0x0800827b
 8006e5c:	0800826e 	.word	0x0800826e

08006e60 <_free_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4605      	mov	r5, r0
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d041      	beq.n	8006eec <_free_r+0x8c>
 8006e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e6c:	1f0c      	subs	r4, r1, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfb8      	it	lt
 8006e72:	18e4      	addlt	r4, r4, r3
 8006e74:	f7ff fbfe 	bl	8006674 <__malloc_lock>
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <_free_r+0x90>)
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	b933      	cbnz	r3, 8006e8c <_free_r+0x2c>
 8006e7e:	6063      	str	r3, [r4, #4]
 8006e80:	6014      	str	r4, [r2, #0]
 8006e82:	4628      	mov	r0, r5
 8006e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e88:	f7ff bbfa 	b.w	8006680 <__malloc_unlock>
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d908      	bls.n	8006ea2 <_free_r+0x42>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	1821      	adds	r1, r4, r0
 8006e94:	428b      	cmp	r3, r1
 8006e96:	bf01      	itttt	eq
 8006e98:	6819      	ldreq	r1, [r3, #0]
 8006e9a:	685b      	ldreq	r3, [r3, #4]
 8006e9c:	1809      	addeq	r1, r1, r0
 8006e9e:	6021      	streq	r1, [r4, #0]
 8006ea0:	e7ed      	b.n	8006e7e <_free_r+0x1e>
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b10b      	cbz	r3, 8006eac <_free_r+0x4c>
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	d9fa      	bls.n	8006ea2 <_free_r+0x42>
 8006eac:	6811      	ldr	r1, [r2, #0]
 8006eae:	1850      	adds	r0, r2, r1
 8006eb0:	42a0      	cmp	r0, r4
 8006eb2:	d10b      	bne.n	8006ecc <_free_r+0x6c>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	1850      	adds	r0, r2, r1
 8006eba:	4283      	cmp	r3, r0
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	d1e0      	bne.n	8006e82 <_free_r+0x22>
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	6053      	str	r3, [r2, #4]
 8006ec6:	4408      	add	r0, r1
 8006ec8:	6010      	str	r0, [r2, #0]
 8006eca:	e7da      	b.n	8006e82 <_free_r+0x22>
 8006ecc:	d902      	bls.n	8006ed4 <_free_r+0x74>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	e7d6      	b.n	8006e82 <_free_r+0x22>
 8006ed4:	6820      	ldr	r0, [r4, #0]
 8006ed6:	1821      	adds	r1, r4, r0
 8006ed8:	428b      	cmp	r3, r1
 8006eda:	bf04      	itt	eq
 8006edc:	6819      	ldreq	r1, [r3, #0]
 8006ede:	685b      	ldreq	r3, [r3, #4]
 8006ee0:	6063      	str	r3, [r4, #4]
 8006ee2:	bf04      	itt	eq
 8006ee4:	1809      	addeq	r1, r1, r0
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	6054      	str	r4, [r2, #4]
 8006eea:	e7ca      	b.n	8006e82 <_free_r+0x22>
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
 8006eee:	bf00      	nop
 8006ef0:	20007420 	.word	0x20007420

08006ef4 <__ssputs_r>:
 8006ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef8:	688e      	ldr	r6, [r1, #8]
 8006efa:	461f      	mov	r7, r3
 8006efc:	42be      	cmp	r6, r7
 8006efe:	680b      	ldr	r3, [r1, #0]
 8006f00:	4682      	mov	sl, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	4690      	mov	r8, r2
 8006f06:	d82d      	bhi.n	8006f64 <__ssputs_r+0x70>
 8006f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f10:	d026      	beq.n	8006f60 <__ssputs_r+0x6c>
 8006f12:	6965      	ldr	r5, [r4, #20]
 8006f14:	6909      	ldr	r1, [r1, #16]
 8006f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f1a:	eba3 0901 	sub.w	r9, r3, r1
 8006f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f22:	1c7b      	adds	r3, r7, #1
 8006f24:	444b      	add	r3, r9
 8006f26:	106d      	asrs	r5, r5, #1
 8006f28:	429d      	cmp	r5, r3
 8006f2a:	bf38      	it	cc
 8006f2c:	461d      	movcc	r5, r3
 8006f2e:	0553      	lsls	r3, r2, #21
 8006f30:	d527      	bpl.n	8006f82 <__ssputs_r+0x8e>
 8006f32:	4629      	mov	r1, r5
 8006f34:	f7ff fb1e 	bl	8006574 <_malloc_r>
 8006f38:	4606      	mov	r6, r0
 8006f3a:	b360      	cbz	r0, 8006f96 <__ssputs_r+0xa2>
 8006f3c:	6921      	ldr	r1, [r4, #16]
 8006f3e:	464a      	mov	r2, r9
 8006f40:	f7ff ff61 	bl	8006e06 <memcpy>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	6126      	str	r6, [r4, #16]
 8006f52:	6165      	str	r5, [r4, #20]
 8006f54:	444e      	add	r6, r9
 8006f56:	eba5 0509 	sub.w	r5, r5, r9
 8006f5a:	6026      	str	r6, [r4, #0]
 8006f5c:	60a5      	str	r5, [r4, #8]
 8006f5e:	463e      	mov	r6, r7
 8006f60:	42be      	cmp	r6, r7
 8006f62:	d900      	bls.n	8006f66 <__ssputs_r+0x72>
 8006f64:	463e      	mov	r6, r7
 8006f66:	6820      	ldr	r0, [r4, #0]
 8006f68:	4632      	mov	r2, r6
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	f000 fd3e 	bl	80079ec <memmove>
 8006f70:	68a3      	ldr	r3, [r4, #8]
 8006f72:	1b9b      	subs	r3, r3, r6
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	4433      	add	r3, r6
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	462a      	mov	r2, r5
 8006f84:	f000 fd75 	bl	8007a72 <_realloc_r>
 8006f88:	4606      	mov	r6, r0
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d1e0      	bne.n	8006f50 <__ssputs_r+0x5c>
 8006f8e:	6921      	ldr	r1, [r4, #16]
 8006f90:	4650      	mov	r0, sl
 8006f92:	f7ff ff65 	bl	8006e60 <_free_r>
 8006f96:	230c      	movs	r3, #12
 8006f98:	f8ca 3000 	str.w	r3, [sl]
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	e7e9      	b.n	8006f7e <__ssputs_r+0x8a>
	...

08006fac <_svfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	4698      	mov	r8, r3
 8006fb2:	898b      	ldrh	r3, [r1, #12]
 8006fb4:	061b      	lsls	r3, r3, #24
 8006fb6:	b09d      	sub	sp, #116	@ 0x74
 8006fb8:	4607      	mov	r7, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	d510      	bpl.n	8006fe2 <_svfiprintf_r+0x36>
 8006fc0:	690b      	ldr	r3, [r1, #16]
 8006fc2:	b973      	cbnz	r3, 8006fe2 <_svfiprintf_r+0x36>
 8006fc4:	2140      	movs	r1, #64	@ 0x40
 8006fc6:	f7ff fad5 	bl	8006574 <_malloc_r>
 8006fca:	6028      	str	r0, [r5, #0]
 8006fcc:	6128      	str	r0, [r5, #16]
 8006fce:	b930      	cbnz	r0, 8006fde <_svfiprintf_r+0x32>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	b01d      	add	sp, #116	@ 0x74
 8006fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fde:	2340      	movs	r3, #64	@ 0x40
 8006fe0:	616b      	str	r3, [r5, #20]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fe6:	2320      	movs	r3, #32
 8006fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ff0:	2330      	movs	r3, #48	@ 0x30
 8006ff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007190 <_svfiprintf_r+0x1e4>
 8006ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ffa:	f04f 0901 	mov.w	r9, #1
 8006ffe:	4623      	mov	r3, r4
 8007000:	469a      	mov	sl, r3
 8007002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007006:	b10a      	cbz	r2, 800700c <_svfiprintf_r+0x60>
 8007008:	2a25      	cmp	r2, #37	@ 0x25
 800700a:	d1f9      	bne.n	8007000 <_svfiprintf_r+0x54>
 800700c:	ebba 0b04 	subs.w	fp, sl, r4
 8007010:	d00b      	beq.n	800702a <_svfiprintf_r+0x7e>
 8007012:	465b      	mov	r3, fp
 8007014:	4622      	mov	r2, r4
 8007016:	4629      	mov	r1, r5
 8007018:	4638      	mov	r0, r7
 800701a:	f7ff ff6b 	bl	8006ef4 <__ssputs_r>
 800701e:	3001      	adds	r0, #1
 8007020:	f000 80a7 	beq.w	8007172 <_svfiprintf_r+0x1c6>
 8007024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007026:	445a      	add	r2, fp
 8007028:	9209      	str	r2, [sp, #36]	@ 0x24
 800702a:	f89a 3000 	ldrb.w	r3, [sl]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 809f 	beq.w	8007172 <_svfiprintf_r+0x1c6>
 8007034:	2300      	movs	r3, #0
 8007036:	f04f 32ff 	mov.w	r2, #4294967295
 800703a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800703e:	f10a 0a01 	add.w	sl, sl, #1
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	9307      	str	r3, [sp, #28]
 8007046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800704a:	931a      	str	r3, [sp, #104]	@ 0x68
 800704c:	4654      	mov	r4, sl
 800704e:	2205      	movs	r2, #5
 8007050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007054:	484e      	ldr	r0, [pc, #312]	@ (8007190 <_svfiprintf_r+0x1e4>)
 8007056:	f7f9 f8db 	bl	8000210 <memchr>
 800705a:	9a04      	ldr	r2, [sp, #16]
 800705c:	b9d8      	cbnz	r0, 8007096 <_svfiprintf_r+0xea>
 800705e:	06d0      	lsls	r0, r2, #27
 8007060:	bf44      	itt	mi
 8007062:	2320      	movmi	r3, #32
 8007064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007068:	0711      	lsls	r1, r2, #28
 800706a:	bf44      	itt	mi
 800706c:	232b      	movmi	r3, #43	@ 0x2b
 800706e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007072:	f89a 3000 	ldrb.w	r3, [sl]
 8007076:	2b2a      	cmp	r3, #42	@ 0x2a
 8007078:	d015      	beq.n	80070a6 <_svfiprintf_r+0xfa>
 800707a:	9a07      	ldr	r2, [sp, #28]
 800707c:	4654      	mov	r4, sl
 800707e:	2000      	movs	r0, #0
 8007080:	f04f 0c0a 	mov.w	ip, #10
 8007084:	4621      	mov	r1, r4
 8007086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800708a:	3b30      	subs	r3, #48	@ 0x30
 800708c:	2b09      	cmp	r3, #9
 800708e:	d94b      	bls.n	8007128 <_svfiprintf_r+0x17c>
 8007090:	b1b0      	cbz	r0, 80070c0 <_svfiprintf_r+0x114>
 8007092:	9207      	str	r2, [sp, #28]
 8007094:	e014      	b.n	80070c0 <_svfiprintf_r+0x114>
 8007096:	eba0 0308 	sub.w	r3, r0, r8
 800709a:	fa09 f303 	lsl.w	r3, r9, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	9304      	str	r3, [sp, #16]
 80070a2:	46a2      	mov	sl, r4
 80070a4:	e7d2      	b.n	800704c <_svfiprintf_r+0xa0>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	1d19      	adds	r1, r3, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	9103      	str	r1, [sp, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfbb      	ittet	lt
 80070b2:	425b      	neglt	r3, r3
 80070b4:	f042 0202 	orrlt.w	r2, r2, #2
 80070b8:	9307      	strge	r3, [sp, #28]
 80070ba:	9307      	strlt	r3, [sp, #28]
 80070bc:	bfb8      	it	lt
 80070be:	9204      	strlt	r2, [sp, #16]
 80070c0:	7823      	ldrb	r3, [r4, #0]
 80070c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80070c4:	d10a      	bne.n	80070dc <_svfiprintf_r+0x130>
 80070c6:	7863      	ldrb	r3, [r4, #1]
 80070c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ca:	d132      	bne.n	8007132 <_svfiprintf_r+0x186>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	1d1a      	adds	r2, r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	9203      	str	r2, [sp, #12]
 80070d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070d8:	3402      	adds	r4, #2
 80070da:	9305      	str	r3, [sp, #20]
 80070dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071a0 <_svfiprintf_r+0x1f4>
 80070e0:	7821      	ldrb	r1, [r4, #0]
 80070e2:	2203      	movs	r2, #3
 80070e4:	4650      	mov	r0, sl
 80070e6:	f7f9 f893 	bl	8000210 <memchr>
 80070ea:	b138      	cbz	r0, 80070fc <_svfiprintf_r+0x150>
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	eba0 000a 	sub.w	r0, r0, sl
 80070f2:	2240      	movs	r2, #64	@ 0x40
 80070f4:	4082      	lsls	r2, r0
 80070f6:	4313      	orrs	r3, r2
 80070f8:	3401      	adds	r4, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007100:	4824      	ldr	r0, [pc, #144]	@ (8007194 <_svfiprintf_r+0x1e8>)
 8007102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007106:	2206      	movs	r2, #6
 8007108:	f7f9 f882 	bl	8000210 <memchr>
 800710c:	2800      	cmp	r0, #0
 800710e:	d036      	beq.n	800717e <_svfiprintf_r+0x1d2>
 8007110:	4b21      	ldr	r3, [pc, #132]	@ (8007198 <_svfiprintf_r+0x1ec>)
 8007112:	bb1b      	cbnz	r3, 800715c <_svfiprintf_r+0x1b0>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	3307      	adds	r3, #7
 8007118:	f023 0307 	bic.w	r3, r3, #7
 800711c:	3308      	adds	r3, #8
 800711e:	9303      	str	r3, [sp, #12]
 8007120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007122:	4433      	add	r3, r6
 8007124:	9309      	str	r3, [sp, #36]	@ 0x24
 8007126:	e76a      	b.n	8006ffe <_svfiprintf_r+0x52>
 8007128:	fb0c 3202 	mla	r2, ip, r2, r3
 800712c:	460c      	mov	r4, r1
 800712e:	2001      	movs	r0, #1
 8007130:	e7a8      	b.n	8007084 <_svfiprintf_r+0xd8>
 8007132:	2300      	movs	r3, #0
 8007134:	3401      	adds	r4, #1
 8007136:	9305      	str	r3, [sp, #20]
 8007138:	4619      	mov	r1, r3
 800713a:	f04f 0c0a 	mov.w	ip, #10
 800713e:	4620      	mov	r0, r4
 8007140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007144:	3a30      	subs	r2, #48	@ 0x30
 8007146:	2a09      	cmp	r2, #9
 8007148:	d903      	bls.n	8007152 <_svfiprintf_r+0x1a6>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0c6      	beq.n	80070dc <_svfiprintf_r+0x130>
 800714e:	9105      	str	r1, [sp, #20]
 8007150:	e7c4      	b.n	80070dc <_svfiprintf_r+0x130>
 8007152:	fb0c 2101 	mla	r1, ip, r1, r2
 8007156:	4604      	mov	r4, r0
 8007158:	2301      	movs	r3, #1
 800715a:	e7f0      	b.n	800713e <_svfiprintf_r+0x192>
 800715c:	ab03      	add	r3, sp, #12
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	462a      	mov	r2, r5
 8007162:	4b0e      	ldr	r3, [pc, #56]	@ (800719c <_svfiprintf_r+0x1f0>)
 8007164:	a904      	add	r1, sp, #16
 8007166:	4638      	mov	r0, r7
 8007168:	f3af 8000 	nop.w
 800716c:	1c42      	adds	r2, r0, #1
 800716e:	4606      	mov	r6, r0
 8007170:	d1d6      	bne.n	8007120 <_svfiprintf_r+0x174>
 8007172:	89ab      	ldrh	r3, [r5, #12]
 8007174:	065b      	lsls	r3, r3, #25
 8007176:	f53f af2d 	bmi.w	8006fd4 <_svfiprintf_r+0x28>
 800717a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800717c:	e72c      	b.n	8006fd8 <_svfiprintf_r+0x2c>
 800717e:	ab03      	add	r3, sp, #12
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	462a      	mov	r2, r5
 8007184:	4b05      	ldr	r3, [pc, #20]	@ (800719c <_svfiprintf_r+0x1f0>)
 8007186:	a904      	add	r1, sp, #16
 8007188:	4638      	mov	r0, r7
 800718a:	f000 f9bb 	bl	8007504 <_printf_i>
 800718e:	e7ed      	b.n	800716c <_svfiprintf_r+0x1c0>
 8007190:	080082aa 	.word	0x080082aa
 8007194:	080082b4 	.word	0x080082b4
 8007198:	00000000 	.word	0x00000000
 800719c:	08006ef5 	.word	0x08006ef5
 80071a0:	080082b0 	.word	0x080082b0

080071a4 <__sfputc_r>:
 80071a4:	6893      	ldr	r3, [r2, #8]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	b410      	push	{r4}
 80071ac:	6093      	str	r3, [r2, #8]
 80071ae:	da08      	bge.n	80071c2 <__sfputc_r+0x1e>
 80071b0:	6994      	ldr	r4, [r2, #24]
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	db01      	blt.n	80071ba <__sfputc_r+0x16>
 80071b6:	290a      	cmp	r1, #10
 80071b8:	d103      	bne.n	80071c2 <__sfputc_r+0x1e>
 80071ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071be:	f7ff bcc4 	b.w	8006b4a <__swbuf_r>
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	1c58      	adds	r0, r3, #1
 80071c6:	6010      	str	r0, [r2, #0]
 80071c8:	7019      	strb	r1, [r3, #0]
 80071ca:	4608      	mov	r0, r1
 80071cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <__sfputs_r>:
 80071d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	18d5      	adds	r5, r2, r3
 80071dc:	42ac      	cmp	r4, r5
 80071de:	d101      	bne.n	80071e4 <__sfputs_r+0x12>
 80071e0:	2000      	movs	r0, #0
 80071e2:	e007      	b.n	80071f4 <__sfputs_r+0x22>
 80071e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e8:	463a      	mov	r2, r7
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7ff ffda 	bl	80071a4 <__sfputc_r>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d1f3      	bne.n	80071dc <__sfputs_r+0xa>
 80071f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071f8 <_vfiprintf_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	460d      	mov	r5, r1
 80071fe:	b09d      	sub	sp, #116	@ 0x74
 8007200:	4614      	mov	r4, r2
 8007202:	4698      	mov	r8, r3
 8007204:	4606      	mov	r6, r0
 8007206:	b118      	cbz	r0, 8007210 <_vfiprintf_r+0x18>
 8007208:	6a03      	ldr	r3, [r0, #32]
 800720a:	b90b      	cbnz	r3, 8007210 <_vfiprintf_r+0x18>
 800720c:	f7ff fb8c 	bl	8006928 <__sinit>
 8007210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007212:	07d9      	lsls	r1, r3, #31
 8007214:	d405      	bmi.n	8007222 <_vfiprintf_r+0x2a>
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	059a      	lsls	r2, r3, #22
 800721a:	d402      	bmi.n	8007222 <_vfiprintf_r+0x2a>
 800721c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800721e:	f7ff fde8 	bl	8006df2 <__retarget_lock_acquire_recursive>
 8007222:	89ab      	ldrh	r3, [r5, #12]
 8007224:	071b      	lsls	r3, r3, #28
 8007226:	d501      	bpl.n	800722c <_vfiprintf_r+0x34>
 8007228:	692b      	ldr	r3, [r5, #16]
 800722a:	b99b      	cbnz	r3, 8007254 <_vfiprintf_r+0x5c>
 800722c:	4629      	mov	r1, r5
 800722e:	4630      	mov	r0, r6
 8007230:	f7ff fcca 	bl	8006bc8 <__swsetup_r>
 8007234:	b170      	cbz	r0, 8007254 <_vfiprintf_r+0x5c>
 8007236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007238:	07dc      	lsls	r4, r3, #31
 800723a:	d504      	bpl.n	8007246 <_vfiprintf_r+0x4e>
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	b01d      	add	sp, #116	@ 0x74
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	0598      	lsls	r0, r3, #22
 800724a:	d4f7      	bmi.n	800723c <_vfiprintf_r+0x44>
 800724c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800724e:	f7ff fdd1 	bl	8006df4 <__retarget_lock_release_recursive>
 8007252:	e7f3      	b.n	800723c <_vfiprintf_r+0x44>
 8007254:	2300      	movs	r3, #0
 8007256:	9309      	str	r3, [sp, #36]	@ 0x24
 8007258:	2320      	movs	r3, #32
 800725a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800725e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007262:	2330      	movs	r3, #48	@ 0x30
 8007264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007414 <_vfiprintf_r+0x21c>
 8007268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800726c:	f04f 0901 	mov.w	r9, #1
 8007270:	4623      	mov	r3, r4
 8007272:	469a      	mov	sl, r3
 8007274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007278:	b10a      	cbz	r2, 800727e <_vfiprintf_r+0x86>
 800727a:	2a25      	cmp	r2, #37	@ 0x25
 800727c:	d1f9      	bne.n	8007272 <_vfiprintf_r+0x7a>
 800727e:	ebba 0b04 	subs.w	fp, sl, r4
 8007282:	d00b      	beq.n	800729c <_vfiprintf_r+0xa4>
 8007284:	465b      	mov	r3, fp
 8007286:	4622      	mov	r2, r4
 8007288:	4629      	mov	r1, r5
 800728a:	4630      	mov	r0, r6
 800728c:	f7ff ffa1 	bl	80071d2 <__sfputs_r>
 8007290:	3001      	adds	r0, #1
 8007292:	f000 80a7 	beq.w	80073e4 <_vfiprintf_r+0x1ec>
 8007296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007298:	445a      	add	r2, fp
 800729a:	9209      	str	r2, [sp, #36]	@ 0x24
 800729c:	f89a 3000 	ldrb.w	r3, [sl]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 809f 	beq.w	80073e4 <_vfiprintf_r+0x1ec>
 80072a6:	2300      	movs	r3, #0
 80072a8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b0:	f10a 0a01 	add.w	sl, sl, #1
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	9307      	str	r3, [sp, #28]
 80072b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80072be:	4654      	mov	r4, sl
 80072c0:	2205      	movs	r2, #5
 80072c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c6:	4853      	ldr	r0, [pc, #332]	@ (8007414 <_vfiprintf_r+0x21c>)
 80072c8:	f7f8 ffa2 	bl	8000210 <memchr>
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	b9d8      	cbnz	r0, 8007308 <_vfiprintf_r+0x110>
 80072d0:	06d1      	lsls	r1, r2, #27
 80072d2:	bf44      	itt	mi
 80072d4:	2320      	movmi	r3, #32
 80072d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072da:	0713      	lsls	r3, r2, #28
 80072dc:	bf44      	itt	mi
 80072de:	232b      	movmi	r3, #43	@ 0x2b
 80072e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e4:	f89a 3000 	ldrb.w	r3, [sl]
 80072e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ea:	d015      	beq.n	8007318 <_vfiprintf_r+0x120>
 80072ec:	9a07      	ldr	r2, [sp, #28]
 80072ee:	4654      	mov	r4, sl
 80072f0:	2000      	movs	r0, #0
 80072f2:	f04f 0c0a 	mov.w	ip, #10
 80072f6:	4621      	mov	r1, r4
 80072f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fc:	3b30      	subs	r3, #48	@ 0x30
 80072fe:	2b09      	cmp	r3, #9
 8007300:	d94b      	bls.n	800739a <_vfiprintf_r+0x1a2>
 8007302:	b1b0      	cbz	r0, 8007332 <_vfiprintf_r+0x13a>
 8007304:	9207      	str	r2, [sp, #28]
 8007306:	e014      	b.n	8007332 <_vfiprintf_r+0x13a>
 8007308:	eba0 0308 	sub.w	r3, r0, r8
 800730c:	fa09 f303 	lsl.w	r3, r9, r3
 8007310:	4313      	orrs	r3, r2
 8007312:	9304      	str	r3, [sp, #16]
 8007314:	46a2      	mov	sl, r4
 8007316:	e7d2      	b.n	80072be <_vfiprintf_r+0xc6>
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	1d19      	adds	r1, r3, #4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	9103      	str	r1, [sp, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	bfbb      	ittet	lt
 8007324:	425b      	neglt	r3, r3
 8007326:	f042 0202 	orrlt.w	r2, r2, #2
 800732a:	9307      	strge	r3, [sp, #28]
 800732c:	9307      	strlt	r3, [sp, #28]
 800732e:	bfb8      	it	lt
 8007330:	9204      	strlt	r2, [sp, #16]
 8007332:	7823      	ldrb	r3, [r4, #0]
 8007334:	2b2e      	cmp	r3, #46	@ 0x2e
 8007336:	d10a      	bne.n	800734e <_vfiprintf_r+0x156>
 8007338:	7863      	ldrb	r3, [r4, #1]
 800733a:	2b2a      	cmp	r3, #42	@ 0x2a
 800733c:	d132      	bne.n	80073a4 <_vfiprintf_r+0x1ac>
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	1d1a      	adds	r2, r3, #4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	9203      	str	r2, [sp, #12]
 8007346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800734a:	3402      	adds	r4, #2
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007424 <_vfiprintf_r+0x22c>
 8007352:	7821      	ldrb	r1, [r4, #0]
 8007354:	2203      	movs	r2, #3
 8007356:	4650      	mov	r0, sl
 8007358:	f7f8 ff5a 	bl	8000210 <memchr>
 800735c:	b138      	cbz	r0, 800736e <_vfiprintf_r+0x176>
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	eba0 000a 	sub.w	r0, r0, sl
 8007364:	2240      	movs	r2, #64	@ 0x40
 8007366:	4082      	lsls	r2, r0
 8007368:	4313      	orrs	r3, r2
 800736a:	3401      	adds	r4, #1
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007372:	4829      	ldr	r0, [pc, #164]	@ (8007418 <_vfiprintf_r+0x220>)
 8007374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007378:	2206      	movs	r2, #6
 800737a:	f7f8 ff49 	bl	8000210 <memchr>
 800737e:	2800      	cmp	r0, #0
 8007380:	d03f      	beq.n	8007402 <_vfiprintf_r+0x20a>
 8007382:	4b26      	ldr	r3, [pc, #152]	@ (800741c <_vfiprintf_r+0x224>)
 8007384:	bb1b      	cbnz	r3, 80073ce <_vfiprintf_r+0x1d6>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	3307      	adds	r3, #7
 800738a:	f023 0307 	bic.w	r3, r3, #7
 800738e:	3308      	adds	r3, #8
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007394:	443b      	add	r3, r7
 8007396:	9309      	str	r3, [sp, #36]	@ 0x24
 8007398:	e76a      	b.n	8007270 <_vfiprintf_r+0x78>
 800739a:	fb0c 3202 	mla	r2, ip, r2, r3
 800739e:	460c      	mov	r4, r1
 80073a0:	2001      	movs	r0, #1
 80073a2:	e7a8      	b.n	80072f6 <_vfiprintf_r+0xfe>
 80073a4:	2300      	movs	r3, #0
 80073a6:	3401      	adds	r4, #1
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	4619      	mov	r1, r3
 80073ac:	f04f 0c0a 	mov.w	ip, #10
 80073b0:	4620      	mov	r0, r4
 80073b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073b6:	3a30      	subs	r2, #48	@ 0x30
 80073b8:	2a09      	cmp	r2, #9
 80073ba:	d903      	bls.n	80073c4 <_vfiprintf_r+0x1cc>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0c6      	beq.n	800734e <_vfiprintf_r+0x156>
 80073c0:	9105      	str	r1, [sp, #20]
 80073c2:	e7c4      	b.n	800734e <_vfiprintf_r+0x156>
 80073c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c8:	4604      	mov	r4, r0
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7f0      	b.n	80073b0 <_vfiprintf_r+0x1b8>
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	462a      	mov	r2, r5
 80073d4:	4b12      	ldr	r3, [pc, #72]	@ (8007420 <_vfiprintf_r+0x228>)
 80073d6:	a904      	add	r1, sp, #16
 80073d8:	4630      	mov	r0, r6
 80073da:	f3af 8000 	nop.w
 80073de:	4607      	mov	r7, r0
 80073e0:	1c78      	adds	r0, r7, #1
 80073e2:	d1d6      	bne.n	8007392 <_vfiprintf_r+0x19a>
 80073e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073e6:	07d9      	lsls	r1, r3, #31
 80073e8:	d405      	bmi.n	80073f6 <_vfiprintf_r+0x1fe>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	059a      	lsls	r2, r3, #22
 80073ee:	d402      	bmi.n	80073f6 <_vfiprintf_r+0x1fe>
 80073f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073f2:	f7ff fcff 	bl	8006df4 <__retarget_lock_release_recursive>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	065b      	lsls	r3, r3, #25
 80073fa:	f53f af1f 	bmi.w	800723c <_vfiprintf_r+0x44>
 80073fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007400:	e71e      	b.n	8007240 <_vfiprintf_r+0x48>
 8007402:	ab03      	add	r3, sp, #12
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	462a      	mov	r2, r5
 8007408:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <_vfiprintf_r+0x228>)
 800740a:	a904      	add	r1, sp, #16
 800740c:	4630      	mov	r0, r6
 800740e:	f000 f879 	bl	8007504 <_printf_i>
 8007412:	e7e4      	b.n	80073de <_vfiprintf_r+0x1e6>
 8007414:	080082aa 	.word	0x080082aa
 8007418:	080082b4 	.word	0x080082b4
 800741c:	00000000 	.word	0x00000000
 8007420:	080071d3 	.word	0x080071d3
 8007424:	080082b0 	.word	0x080082b0

08007428 <_printf_common>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	4616      	mov	r6, r2
 800742e:	4698      	mov	r8, r3
 8007430:	688a      	ldr	r2, [r1, #8]
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007438:	4293      	cmp	r3, r2
 800743a:	bfb8      	it	lt
 800743c:	4613      	movlt	r3, r2
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007444:	4607      	mov	r7, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b10a      	cbz	r2, 800744e <_printf_common+0x26>
 800744a:	3301      	adds	r3, #1
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	0699      	lsls	r1, r3, #26
 8007452:	bf42      	ittt	mi
 8007454:	6833      	ldrmi	r3, [r6, #0]
 8007456:	3302      	addmi	r3, #2
 8007458:	6033      	strmi	r3, [r6, #0]
 800745a:	6825      	ldr	r5, [r4, #0]
 800745c:	f015 0506 	ands.w	r5, r5, #6
 8007460:	d106      	bne.n	8007470 <_printf_common+0x48>
 8007462:	f104 0a19 	add.w	sl, r4, #25
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	6832      	ldr	r2, [r6, #0]
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	42ab      	cmp	r3, r5
 800746e:	dc26      	bgt.n	80074be <_printf_common+0x96>
 8007470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	3b00      	subs	r3, #0
 8007478:	bf18      	it	ne
 800747a:	2301      	movne	r3, #1
 800747c:	0692      	lsls	r2, r2, #26
 800747e:	d42b      	bmi.n	80074d8 <_printf_common+0xb0>
 8007480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007484:	4641      	mov	r1, r8
 8007486:	4638      	mov	r0, r7
 8007488:	47c8      	blx	r9
 800748a:	3001      	adds	r0, #1
 800748c:	d01e      	beq.n	80074cc <_printf_common+0xa4>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	6922      	ldr	r2, [r4, #16]
 8007492:	f003 0306 	and.w	r3, r3, #6
 8007496:	2b04      	cmp	r3, #4
 8007498:	bf02      	ittt	eq
 800749a:	68e5      	ldreq	r5, [r4, #12]
 800749c:	6833      	ldreq	r3, [r6, #0]
 800749e:	1aed      	subeq	r5, r5, r3
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	bf0c      	ite	eq
 80074a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a8:	2500      	movne	r5, #0
 80074aa:	4293      	cmp	r3, r2
 80074ac:	bfc4      	itt	gt
 80074ae:	1a9b      	subgt	r3, r3, r2
 80074b0:	18ed      	addgt	r5, r5, r3
 80074b2:	2600      	movs	r6, #0
 80074b4:	341a      	adds	r4, #26
 80074b6:	42b5      	cmp	r5, r6
 80074b8:	d11a      	bne.n	80074f0 <_printf_common+0xc8>
 80074ba:	2000      	movs	r0, #0
 80074bc:	e008      	b.n	80074d0 <_printf_common+0xa8>
 80074be:	2301      	movs	r3, #1
 80074c0:	4652      	mov	r2, sl
 80074c2:	4641      	mov	r1, r8
 80074c4:	4638      	mov	r0, r7
 80074c6:	47c8      	blx	r9
 80074c8:	3001      	adds	r0, #1
 80074ca:	d103      	bne.n	80074d4 <_printf_common+0xac>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d4:	3501      	adds	r5, #1
 80074d6:	e7c6      	b.n	8007466 <_printf_common+0x3e>
 80074d8:	18e1      	adds	r1, r4, r3
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	2030      	movs	r0, #48	@ 0x30
 80074de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074e2:	4422      	add	r2, r4
 80074e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074ec:	3302      	adds	r3, #2
 80074ee:	e7c7      	b.n	8007480 <_printf_common+0x58>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4622      	mov	r2, r4
 80074f4:	4641      	mov	r1, r8
 80074f6:	4638      	mov	r0, r7
 80074f8:	47c8      	blx	r9
 80074fa:	3001      	adds	r0, #1
 80074fc:	d0e6      	beq.n	80074cc <_printf_common+0xa4>
 80074fe:	3601      	adds	r6, #1
 8007500:	e7d9      	b.n	80074b6 <_printf_common+0x8e>
	...

08007504 <_printf_i>:
 8007504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	7e0f      	ldrb	r7, [r1, #24]
 800750a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800750c:	2f78      	cmp	r7, #120	@ 0x78
 800750e:	4691      	mov	r9, r2
 8007510:	4680      	mov	r8, r0
 8007512:	460c      	mov	r4, r1
 8007514:	469a      	mov	sl, r3
 8007516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800751a:	d807      	bhi.n	800752c <_printf_i+0x28>
 800751c:	2f62      	cmp	r7, #98	@ 0x62
 800751e:	d80a      	bhi.n	8007536 <_printf_i+0x32>
 8007520:	2f00      	cmp	r7, #0
 8007522:	f000 80d2 	beq.w	80076ca <_printf_i+0x1c6>
 8007526:	2f58      	cmp	r7, #88	@ 0x58
 8007528:	f000 80b9 	beq.w	800769e <_printf_i+0x19a>
 800752c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007534:	e03a      	b.n	80075ac <_printf_i+0xa8>
 8007536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800753a:	2b15      	cmp	r3, #21
 800753c:	d8f6      	bhi.n	800752c <_printf_i+0x28>
 800753e:	a101      	add	r1, pc, #4	@ (adr r1, 8007544 <_printf_i+0x40>)
 8007540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007544:	0800759d 	.word	0x0800759d
 8007548:	080075b1 	.word	0x080075b1
 800754c:	0800752d 	.word	0x0800752d
 8007550:	0800752d 	.word	0x0800752d
 8007554:	0800752d 	.word	0x0800752d
 8007558:	0800752d 	.word	0x0800752d
 800755c:	080075b1 	.word	0x080075b1
 8007560:	0800752d 	.word	0x0800752d
 8007564:	0800752d 	.word	0x0800752d
 8007568:	0800752d 	.word	0x0800752d
 800756c:	0800752d 	.word	0x0800752d
 8007570:	080076b1 	.word	0x080076b1
 8007574:	080075db 	.word	0x080075db
 8007578:	0800766b 	.word	0x0800766b
 800757c:	0800752d 	.word	0x0800752d
 8007580:	0800752d 	.word	0x0800752d
 8007584:	080076d3 	.word	0x080076d3
 8007588:	0800752d 	.word	0x0800752d
 800758c:	080075db 	.word	0x080075db
 8007590:	0800752d 	.word	0x0800752d
 8007594:	0800752d 	.word	0x0800752d
 8007598:	08007673 	.word	0x08007673
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6032      	str	r2, [r6, #0]
 80075a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075ac:	2301      	movs	r3, #1
 80075ae:	e09d      	b.n	80076ec <_printf_i+0x1e8>
 80075b0:	6833      	ldr	r3, [r6, #0]
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	1d19      	adds	r1, r3, #4
 80075b6:	6031      	str	r1, [r6, #0]
 80075b8:	0606      	lsls	r6, r0, #24
 80075ba:	d501      	bpl.n	80075c0 <_printf_i+0xbc>
 80075bc:	681d      	ldr	r5, [r3, #0]
 80075be:	e003      	b.n	80075c8 <_printf_i+0xc4>
 80075c0:	0645      	lsls	r5, r0, #25
 80075c2:	d5fb      	bpl.n	80075bc <_printf_i+0xb8>
 80075c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	da03      	bge.n	80075d4 <_printf_i+0xd0>
 80075cc:	232d      	movs	r3, #45	@ 0x2d
 80075ce:	426d      	negs	r5, r5
 80075d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075d4:	4859      	ldr	r0, [pc, #356]	@ (800773c <_printf_i+0x238>)
 80075d6:	230a      	movs	r3, #10
 80075d8:	e011      	b.n	80075fe <_printf_i+0xfa>
 80075da:	6821      	ldr	r1, [r4, #0]
 80075dc:	6833      	ldr	r3, [r6, #0]
 80075de:	0608      	lsls	r0, r1, #24
 80075e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80075e4:	d402      	bmi.n	80075ec <_printf_i+0xe8>
 80075e6:	0649      	lsls	r1, r1, #25
 80075e8:	bf48      	it	mi
 80075ea:	b2ad      	uxthmi	r5, r5
 80075ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ee:	4853      	ldr	r0, [pc, #332]	@ (800773c <_printf_i+0x238>)
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	bf14      	ite	ne
 80075f4:	230a      	movne	r3, #10
 80075f6:	2308      	moveq	r3, #8
 80075f8:	2100      	movs	r1, #0
 80075fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075fe:	6866      	ldr	r6, [r4, #4]
 8007600:	60a6      	str	r6, [r4, #8]
 8007602:	2e00      	cmp	r6, #0
 8007604:	bfa2      	ittt	ge
 8007606:	6821      	ldrge	r1, [r4, #0]
 8007608:	f021 0104 	bicge.w	r1, r1, #4
 800760c:	6021      	strge	r1, [r4, #0]
 800760e:	b90d      	cbnz	r5, 8007614 <_printf_i+0x110>
 8007610:	2e00      	cmp	r6, #0
 8007612:	d04b      	beq.n	80076ac <_printf_i+0x1a8>
 8007614:	4616      	mov	r6, r2
 8007616:	fbb5 f1f3 	udiv	r1, r5, r3
 800761a:	fb03 5711 	mls	r7, r3, r1, r5
 800761e:	5dc7      	ldrb	r7, [r0, r7]
 8007620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007624:	462f      	mov	r7, r5
 8007626:	42bb      	cmp	r3, r7
 8007628:	460d      	mov	r5, r1
 800762a:	d9f4      	bls.n	8007616 <_printf_i+0x112>
 800762c:	2b08      	cmp	r3, #8
 800762e:	d10b      	bne.n	8007648 <_printf_i+0x144>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	07df      	lsls	r7, r3, #31
 8007634:	d508      	bpl.n	8007648 <_printf_i+0x144>
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	6861      	ldr	r1, [r4, #4]
 800763a:	4299      	cmp	r1, r3
 800763c:	bfde      	ittt	le
 800763e:	2330      	movle	r3, #48	@ 0x30
 8007640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007648:	1b92      	subs	r2, r2, r6
 800764a:	6122      	str	r2, [r4, #16]
 800764c:	f8cd a000 	str.w	sl, [sp]
 8007650:	464b      	mov	r3, r9
 8007652:	aa03      	add	r2, sp, #12
 8007654:	4621      	mov	r1, r4
 8007656:	4640      	mov	r0, r8
 8007658:	f7ff fee6 	bl	8007428 <_printf_common>
 800765c:	3001      	adds	r0, #1
 800765e:	d14a      	bne.n	80076f6 <_printf_i+0x1f2>
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	b004      	add	sp, #16
 8007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	f043 0320 	orr.w	r3, r3, #32
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	4833      	ldr	r0, [pc, #204]	@ (8007740 <_printf_i+0x23c>)
 8007674:	2778      	movs	r7, #120	@ 0x78
 8007676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	6831      	ldr	r1, [r6, #0]
 800767e:	061f      	lsls	r7, r3, #24
 8007680:	f851 5b04 	ldr.w	r5, [r1], #4
 8007684:	d402      	bmi.n	800768c <_printf_i+0x188>
 8007686:	065f      	lsls	r7, r3, #25
 8007688:	bf48      	it	mi
 800768a:	b2ad      	uxthmi	r5, r5
 800768c:	6031      	str	r1, [r6, #0]
 800768e:	07d9      	lsls	r1, r3, #31
 8007690:	bf44      	itt	mi
 8007692:	f043 0320 	orrmi.w	r3, r3, #32
 8007696:	6023      	strmi	r3, [r4, #0]
 8007698:	b11d      	cbz	r5, 80076a2 <_printf_i+0x19e>
 800769a:	2310      	movs	r3, #16
 800769c:	e7ac      	b.n	80075f8 <_printf_i+0xf4>
 800769e:	4827      	ldr	r0, [pc, #156]	@ (800773c <_printf_i+0x238>)
 80076a0:	e7e9      	b.n	8007676 <_printf_i+0x172>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	f023 0320 	bic.w	r3, r3, #32
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	e7f6      	b.n	800769a <_printf_i+0x196>
 80076ac:	4616      	mov	r6, r2
 80076ae:	e7bd      	b.n	800762c <_printf_i+0x128>
 80076b0:	6833      	ldr	r3, [r6, #0]
 80076b2:	6825      	ldr	r5, [r4, #0]
 80076b4:	6961      	ldr	r1, [r4, #20]
 80076b6:	1d18      	adds	r0, r3, #4
 80076b8:	6030      	str	r0, [r6, #0]
 80076ba:	062e      	lsls	r6, r5, #24
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	d501      	bpl.n	80076c4 <_printf_i+0x1c0>
 80076c0:	6019      	str	r1, [r3, #0]
 80076c2:	e002      	b.n	80076ca <_printf_i+0x1c6>
 80076c4:	0668      	lsls	r0, r5, #25
 80076c6:	d5fb      	bpl.n	80076c0 <_printf_i+0x1bc>
 80076c8:	8019      	strh	r1, [r3, #0]
 80076ca:	2300      	movs	r3, #0
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	4616      	mov	r6, r2
 80076d0:	e7bc      	b.n	800764c <_printf_i+0x148>
 80076d2:	6833      	ldr	r3, [r6, #0]
 80076d4:	1d1a      	adds	r2, r3, #4
 80076d6:	6032      	str	r2, [r6, #0]
 80076d8:	681e      	ldr	r6, [r3, #0]
 80076da:	6862      	ldr	r2, [r4, #4]
 80076dc:	2100      	movs	r1, #0
 80076de:	4630      	mov	r0, r6
 80076e0:	f7f8 fd96 	bl	8000210 <memchr>
 80076e4:	b108      	cbz	r0, 80076ea <_printf_i+0x1e6>
 80076e6:	1b80      	subs	r0, r0, r6
 80076e8:	6060      	str	r0, [r4, #4]
 80076ea:	6863      	ldr	r3, [r4, #4]
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	2300      	movs	r3, #0
 80076f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076f4:	e7aa      	b.n	800764c <_printf_i+0x148>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	4632      	mov	r2, r6
 80076fa:	4649      	mov	r1, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	47d0      	blx	sl
 8007700:	3001      	adds	r0, #1
 8007702:	d0ad      	beq.n	8007660 <_printf_i+0x15c>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	079b      	lsls	r3, r3, #30
 8007708:	d413      	bmi.n	8007732 <_printf_i+0x22e>
 800770a:	68e0      	ldr	r0, [r4, #12]
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	4298      	cmp	r0, r3
 8007710:	bfb8      	it	lt
 8007712:	4618      	movlt	r0, r3
 8007714:	e7a6      	b.n	8007664 <_printf_i+0x160>
 8007716:	2301      	movs	r3, #1
 8007718:	4632      	mov	r2, r6
 800771a:	4649      	mov	r1, r9
 800771c:	4640      	mov	r0, r8
 800771e:	47d0      	blx	sl
 8007720:	3001      	adds	r0, #1
 8007722:	d09d      	beq.n	8007660 <_printf_i+0x15c>
 8007724:	3501      	adds	r5, #1
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	9903      	ldr	r1, [sp, #12]
 800772a:	1a5b      	subs	r3, r3, r1
 800772c:	42ab      	cmp	r3, r5
 800772e:	dcf2      	bgt.n	8007716 <_printf_i+0x212>
 8007730:	e7eb      	b.n	800770a <_printf_i+0x206>
 8007732:	2500      	movs	r5, #0
 8007734:	f104 0619 	add.w	r6, r4, #25
 8007738:	e7f5      	b.n	8007726 <_printf_i+0x222>
 800773a:	bf00      	nop
 800773c:	080082bb 	.word	0x080082bb
 8007740:	080082cc 	.word	0x080082cc

08007744 <__sflush_r>:
 8007744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774c:	0716      	lsls	r6, r2, #28
 800774e:	4605      	mov	r5, r0
 8007750:	460c      	mov	r4, r1
 8007752:	d454      	bmi.n	80077fe <__sflush_r+0xba>
 8007754:	684b      	ldr	r3, [r1, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	dc02      	bgt.n	8007760 <__sflush_r+0x1c>
 800775a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd48      	ble.n	80077f2 <__sflush_r+0xae>
 8007760:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007762:	2e00      	cmp	r6, #0
 8007764:	d045      	beq.n	80077f2 <__sflush_r+0xae>
 8007766:	2300      	movs	r3, #0
 8007768:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800776c:	682f      	ldr	r7, [r5, #0]
 800776e:	6a21      	ldr	r1, [r4, #32]
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	d030      	beq.n	80077d6 <__sflush_r+0x92>
 8007774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	0759      	lsls	r1, r3, #29
 800777a:	d505      	bpl.n	8007788 <__sflush_r+0x44>
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007782:	b10b      	cbz	r3, 8007788 <__sflush_r+0x44>
 8007784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800778c:	6a21      	ldr	r1, [r4, #32]
 800778e:	4628      	mov	r0, r5
 8007790:	47b0      	blx	r6
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	d106      	bne.n	80077a6 <__sflush_r+0x62>
 8007798:	6829      	ldr	r1, [r5, #0]
 800779a:	291d      	cmp	r1, #29
 800779c:	d82b      	bhi.n	80077f6 <__sflush_r+0xb2>
 800779e:	4a2a      	ldr	r2, [pc, #168]	@ (8007848 <__sflush_r+0x104>)
 80077a0:	410a      	asrs	r2, r1
 80077a2:	07d6      	lsls	r6, r2, #31
 80077a4:	d427      	bmi.n	80077f6 <__sflush_r+0xb2>
 80077a6:	2200      	movs	r2, #0
 80077a8:	6062      	str	r2, [r4, #4]
 80077aa:	04d9      	lsls	r1, r3, #19
 80077ac:	6922      	ldr	r2, [r4, #16]
 80077ae:	6022      	str	r2, [r4, #0]
 80077b0:	d504      	bpl.n	80077bc <__sflush_r+0x78>
 80077b2:	1c42      	adds	r2, r0, #1
 80077b4:	d101      	bne.n	80077ba <__sflush_r+0x76>
 80077b6:	682b      	ldr	r3, [r5, #0]
 80077b8:	b903      	cbnz	r3, 80077bc <__sflush_r+0x78>
 80077ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80077bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077be:	602f      	str	r7, [r5, #0]
 80077c0:	b1b9      	cbz	r1, 80077f2 <__sflush_r+0xae>
 80077c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077c6:	4299      	cmp	r1, r3
 80077c8:	d002      	beq.n	80077d0 <__sflush_r+0x8c>
 80077ca:	4628      	mov	r0, r5
 80077cc:	f7ff fb48 	bl	8006e60 <_free_r>
 80077d0:	2300      	movs	r3, #0
 80077d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80077d4:	e00d      	b.n	80077f2 <__sflush_r+0xae>
 80077d6:	2301      	movs	r3, #1
 80077d8:	4628      	mov	r0, r5
 80077da:	47b0      	blx	r6
 80077dc:	4602      	mov	r2, r0
 80077de:	1c50      	adds	r0, r2, #1
 80077e0:	d1c9      	bne.n	8007776 <__sflush_r+0x32>
 80077e2:	682b      	ldr	r3, [r5, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0c6      	beq.n	8007776 <__sflush_r+0x32>
 80077e8:	2b1d      	cmp	r3, #29
 80077ea:	d001      	beq.n	80077f0 <__sflush_r+0xac>
 80077ec:	2b16      	cmp	r3, #22
 80077ee:	d11e      	bne.n	800782e <__sflush_r+0xea>
 80077f0:	602f      	str	r7, [r5, #0]
 80077f2:	2000      	movs	r0, #0
 80077f4:	e022      	b.n	800783c <__sflush_r+0xf8>
 80077f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077fa:	b21b      	sxth	r3, r3
 80077fc:	e01b      	b.n	8007836 <__sflush_r+0xf2>
 80077fe:	690f      	ldr	r7, [r1, #16]
 8007800:	2f00      	cmp	r7, #0
 8007802:	d0f6      	beq.n	80077f2 <__sflush_r+0xae>
 8007804:	0793      	lsls	r3, r2, #30
 8007806:	680e      	ldr	r6, [r1, #0]
 8007808:	bf08      	it	eq
 800780a:	694b      	ldreq	r3, [r1, #20]
 800780c:	600f      	str	r7, [r1, #0]
 800780e:	bf18      	it	ne
 8007810:	2300      	movne	r3, #0
 8007812:	eba6 0807 	sub.w	r8, r6, r7
 8007816:	608b      	str	r3, [r1, #8]
 8007818:	f1b8 0f00 	cmp.w	r8, #0
 800781c:	dde9      	ble.n	80077f2 <__sflush_r+0xae>
 800781e:	6a21      	ldr	r1, [r4, #32]
 8007820:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007822:	4643      	mov	r3, r8
 8007824:	463a      	mov	r2, r7
 8007826:	4628      	mov	r0, r5
 8007828:	47b0      	blx	r6
 800782a:	2800      	cmp	r0, #0
 800782c:	dc08      	bgt.n	8007840 <__sflush_r+0xfc>
 800782e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007840:	4407      	add	r7, r0
 8007842:	eba8 0800 	sub.w	r8, r8, r0
 8007846:	e7e7      	b.n	8007818 <__sflush_r+0xd4>
 8007848:	dfbffffe 	.word	0xdfbffffe

0800784c <_fflush_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	690b      	ldr	r3, [r1, #16]
 8007850:	4605      	mov	r5, r0
 8007852:	460c      	mov	r4, r1
 8007854:	b913      	cbnz	r3, 800785c <_fflush_r+0x10>
 8007856:	2500      	movs	r5, #0
 8007858:	4628      	mov	r0, r5
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	b118      	cbz	r0, 8007866 <_fflush_r+0x1a>
 800785e:	6a03      	ldr	r3, [r0, #32]
 8007860:	b90b      	cbnz	r3, 8007866 <_fflush_r+0x1a>
 8007862:	f7ff f861 	bl	8006928 <__sinit>
 8007866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f3      	beq.n	8007856 <_fflush_r+0xa>
 800786e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007870:	07d0      	lsls	r0, r2, #31
 8007872:	d404      	bmi.n	800787e <_fflush_r+0x32>
 8007874:	0599      	lsls	r1, r3, #22
 8007876:	d402      	bmi.n	800787e <_fflush_r+0x32>
 8007878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800787a:	f7ff faba 	bl	8006df2 <__retarget_lock_acquire_recursive>
 800787e:	4628      	mov	r0, r5
 8007880:	4621      	mov	r1, r4
 8007882:	f7ff ff5f 	bl	8007744 <__sflush_r>
 8007886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007888:	07da      	lsls	r2, r3, #31
 800788a:	4605      	mov	r5, r0
 800788c:	d4e4      	bmi.n	8007858 <_fflush_r+0xc>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	059b      	lsls	r3, r3, #22
 8007892:	d4e1      	bmi.n	8007858 <_fflush_r+0xc>
 8007894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007896:	f7ff faad 	bl	8006df4 <__retarget_lock_release_recursive>
 800789a:	e7dd      	b.n	8007858 <_fflush_r+0xc>

0800789c <fiprintf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b503      	push	{r0, r1, lr}
 80078a0:	4601      	mov	r1, r0
 80078a2:	ab03      	add	r3, sp, #12
 80078a4:	4805      	ldr	r0, [pc, #20]	@ (80078bc <fiprintf+0x20>)
 80078a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	f7ff fca3 	bl	80071f8 <_vfiprintf_r>
 80078b2:	b002      	add	sp, #8
 80078b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b8:	b003      	add	sp, #12
 80078ba:	4770      	bx	lr
 80078bc:	200000ac 	.word	0x200000ac

080078c0 <__swhatbuf_r>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	460c      	mov	r4, r1
 80078c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c8:	2900      	cmp	r1, #0
 80078ca:	b096      	sub	sp, #88	@ 0x58
 80078cc:	4615      	mov	r5, r2
 80078ce:	461e      	mov	r6, r3
 80078d0:	da0d      	bge.n	80078ee <__swhatbuf_r+0x2e>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	bf14      	ite	ne
 80078de:	2340      	movne	r3, #64	@ 0x40
 80078e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078e4:	2000      	movs	r0, #0
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	b016      	add	sp, #88	@ 0x58
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	466a      	mov	r2, sp
 80078f0:	f000 f896 	bl	8007a20 <_fstat_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	dbec      	blt.n	80078d2 <__swhatbuf_r+0x12>
 80078f8:	9901      	ldr	r1, [sp, #4]
 80078fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007902:	4259      	negs	r1, r3
 8007904:	4159      	adcs	r1, r3
 8007906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800790a:	e7eb      	b.n	80078e4 <__swhatbuf_r+0x24>

0800790c <__smakebuf_r>:
 800790c:	898b      	ldrh	r3, [r1, #12]
 800790e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007910:	079d      	lsls	r5, r3, #30
 8007912:	4606      	mov	r6, r0
 8007914:	460c      	mov	r4, r1
 8007916:	d507      	bpl.n	8007928 <__smakebuf_r+0x1c>
 8007918:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	2301      	movs	r3, #1
 8007922:	6163      	str	r3, [r4, #20]
 8007924:	b003      	add	sp, #12
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007928:	ab01      	add	r3, sp, #4
 800792a:	466a      	mov	r2, sp
 800792c:	f7ff ffc8 	bl	80078c0 <__swhatbuf_r>
 8007930:	9f00      	ldr	r7, [sp, #0]
 8007932:	4605      	mov	r5, r0
 8007934:	4639      	mov	r1, r7
 8007936:	4630      	mov	r0, r6
 8007938:	f7fe fe1c 	bl	8006574 <_malloc_r>
 800793c:	b948      	cbnz	r0, 8007952 <__smakebuf_r+0x46>
 800793e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007942:	059a      	lsls	r2, r3, #22
 8007944:	d4ee      	bmi.n	8007924 <__smakebuf_r+0x18>
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	e7e2      	b.n	8007918 <__smakebuf_r+0xc>
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	6020      	str	r0, [r4, #0]
 8007956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007962:	b15b      	cbz	r3, 800797c <__smakebuf_r+0x70>
 8007964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007968:	4630      	mov	r0, r6
 800796a:	f000 f86b 	bl	8007a44 <_isatty_r>
 800796e:	b128      	cbz	r0, 800797c <__smakebuf_r+0x70>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f023 0303 	bic.w	r3, r3, #3
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	431d      	orrs	r5, r3
 8007980:	81a5      	strh	r5, [r4, #12]
 8007982:	e7cf      	b.n	8007924 <__smakebuf_r+0x18>

08007984 <_putc_r>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	460d      	mov	r5, r1
 8007988:	4614      	mov	r4, r2
 800798a:	4606      	mov	r6, r0
 800798c:	b118      	cbz	r0, 8007996 <_putc_r+0x12>
 800798e:	6a03      	ldr	r3, [r0, #32]
 8007990:	b90b      	cbnz	r3, 8007996 <_putc_r+0x12>
 8007992:	f7fe ffc9 	bl	8006928 <__sinit>
 8007996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007998:	07d8      	lsls	r0, r3, #31
 800799a:	d405      	bmi.n	80079a8 <_putc_r+0x24>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	0599      	lsls	r1, r3, #22
 80079a0:	d402      	bmi.n	80079a8 <_putc_r+0x24>
 80079a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079a4:	f7ff fa25 	bl	8006df2 <__retarget_lock_acquire_recursive>
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	da05      	bge.n	80079be <_putc_r+0x3a>
 80079b2:	69a2      	ldr	r2, [r4, #24]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	db12      	blt.n	80079de <_putc_r+0x5a>
 80079b8:	b2eb      	uxtb	r3, r5
 80079ba:	2b0a      	cmp	r3, #10
 80079bc:	d00f      	beq.n	80079de <_putc_r+0x5a>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	6022      	str	r2, [r4, #0]
 80079c4:	701d      	strb	r5, [r3, #0]
 80079c6:	b2ed      	uxtb	r5, r5
 80079c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079ca:	07da      	lsls	r2, r3, #31
 80079cc:	d405      	bmi.n	80079da <_putc_r+0x56>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	059b      	lsls	r3, r3, #22
 80079d2:	d402      	bmi.n	80079da <_putc_r+0x56>
 80079d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079d6:	f7ff fa0d 	bl	8006df4 <__retarget_lock_release_recursive>
 80079da:	4628      	mov	r0, r5
 80079dc:	bd70      	pop	{r4, r5, r6, pc}
 80079de:	4629      	mov	r1, r5
 80079e0:	4622      	mov	r2, r4
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff f8b1 	bl	8006b4a <__swbuf_r>
 80079e8:	4605      	mov	r5, r0
 80079ea:	e7ed      	b.n	80079c8 <_putc_r+0x44>

080079ec <memmove>:
 80079ec:	4288      	cmp	r0, r1
 80079ee:	b510      	push	{r4, lr}
 80079f0:	eb01 0402 	add.w	r4, r1, r2
 80079f4:	d902      	bls.n	80079fc <memmove+0x10>
 80079f6:	4284      	cmp	r4, r0
 80079f8:	4623      	mov	r3, r4
 80079fa:	d807      	bhi.n	8007a0c <memmove+0x20>
 80079fc:	1e43      	subs	r3, r0, #1
 80079fe:	42a1      	cmp	r1, r4
 8007a00:	d008      	beq.n	8007a14 <memmove+0x28>
 8007a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a0a:	e7f8      	b.n	80079fe <memmove+0x12>
 8007a0c:	4402      	add	r2, r0
 8007a0e:	4601      	mov	r1, r0
 8007a10:	428a      	cmp	r2, r1
 8007a12:	d100      	bne.n	8007a16 <memmove+0x2a>
 8007a14:	bd10      	pop	{r4, pc}
 8007a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a1e:	e7f7      	b.n	8007a10 <memmove+0x24>

08007a20 <_fstat_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d07      	ldr	r5, [pc, #28]	@ (8007a40 <_fstat_r+0x20>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	f7fa fde9 	bl	8002604 <_fstat>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d102      	bne.n	8007a3c <_fstat_r+0x1c>
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	b103      	cbz	r3, 8007a3c <_fstat_r+0x1c>
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
 8007a3e:	bf00      	nop
 8007a40:	20007560 	.word	0x20007560

08007a44 <_isatty_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d06      	ldr	r5, [pc, #24]	@ (8007a60 <_isatty_r+0x1c>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	f7fa fde8 	bl	8002624 <_isatty>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_isatty_r+0x1a>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_isatty_r+0x1a>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20007560 	.word	0x20007560

08007a64 <abort>:
 8007a64:	b508      	push	{r3, lr}
 8007a66:	2006      	movs	r0, #6
 8007a68:	f000 f85a 	bl	8007b20 <raise>
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	f7fa fd79 	bl	8002564 <_exit>

08007a72 <_realloc_r>:
 8007a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a76:	4680      	mov	r8, r0
 8007a78:	4615      	mov	r5, r2
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	b921      	cbnz	r1, 8007a88 <_realloc_r+0x16>
 8007a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	4611      	mov	r1, r2
 8007a84:	f7fe bd76 	b.w	8006574 <_malloc_r>
 8007a88:	b92a      	cbnz	r2, 8007a96 <_realloc_r+0x24>
 8007a8a:	f7ff f9e9 	bl	8006e60 <_free_r>
 8007a8e:	2400      	movs	r4, #0
 8007a90:	4620      	mov	r0, r4
 8007a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a96:	f000 f85f 	bl	8007b58 <_malloc_usable_size_r>
 8007a9a:	4285      	cmp	r5, r0
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	d802      	bhi.n	8007aa6 <_realloc_r+0x34>
 8007aa0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aa4:	d8f4      	bhi.n	8007a90 <_realloc_r+0x1e>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	f7fe fd63 	bl	8006574 <_malloc_r>
 8007aae:	4607      	mov	r7, r0
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d0ec      	beq.n	8007a8e <_realloc_r+0x1c>
 8007ab4:	42b5      	cmp	r5, r6
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	4621      	mov	r1, r4
 8007aba:	bf28      	it	cs
 8007abc:	4632      	movcs	r2, r6
 8007abe:	f7ff f9a2 	bl	8006e06 <memcpy>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	f7ff f9cb 	bl	8006e60 <_free_r>
 8007aca:	463c      	mov	r4, r7
 8007acc:	e7e0      	b.n	8007a90 <_realloc_r+0x1e>

08007ace <_raise_r>:
 8007ace:	291f      	cmp	r1, #31
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	d904      	bls.n	8007ae2 <_raise_r+0x14>
 8007ad8:	2316      	movs	r3, #22
 8007ada:	6003      	str	r3, [r0, #0]
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ae4:	b112      	cbz	r2, 8007aec <_raise_r+0x1e>
 8007ae6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aea:	b94b      	cbnz	r3, 8007b00 <_raise_r+0x32>
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 f831 	bl	8007b54 <_getpid_r>
 8007af2:	4622      	mov	r2, r4
 8007af4:	4601      	mov	r1, r0
 8007af6:	4628      	mov	r0, r5
 8007af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007afc:	f000 b818 	b.w	8007b30 <_kill_r>
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d00a      	beq.n	8007b1a <_raise_r+0x4c>
 8007b04:	1c59      	adds	r1, r3, #1
 8007b06:	d103      	bne.n	8007b10 <_raise_r+0x42>
 8007b08:	2316      	movs	r3, #22
 8007b0a:	6003      	str	r3, [r0, #0]
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	e7e7      	b.n	8007ae0 <_raise_r+0x12>
 8007b10:	2100      	movs	r1, #0
 8007b12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b16:	4620      	mov	r0, r4
 8007b18:	4798      	blx	r3
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e7e0      	b.n	8007ae0 <_raise_r+0x12>
	...

08007b20 <raise>:
 8007b20:	4b02      	ldr	r3, [pc, #8]	@ (8007b2c <raise+0xc>)
 8007b22:	4601      	mov	r1, r0
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f7ff bfd2 	b.w	8007ace <_raise_r>
 8007b2a:	bf00      	nop
 8007b2c:	200000ac 	.word	0x200000ac

08007b30 <_kill_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	@ (8007b50 <_kill_r+0x20>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	f7fa fd01 	bl	8002544 <_kill>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d102      	bne.n	8007b4c <_kill_r+0x1c>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	b103      	cbz	r3, 8007b4c <_kill_r+0x1c>
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	20007560 	.word	0x20007560

08007b54 <_getpid_r>:
 8007b54:	f7fa bcee 	b.w	8002534 <_getpid>

08007b58 <_malloc_usable_size_r>:
 8007b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5c:	1f18      	subs	r0, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfbc      	itt	lt
 8007b62:	580b      	ldrlt	r3, [r1, r0]
 8007b64:	18c0      	addlt	r0, r0, r3
 8007b66:	4770      	bx	lr

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr

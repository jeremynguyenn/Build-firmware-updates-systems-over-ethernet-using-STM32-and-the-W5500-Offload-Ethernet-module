
13_w5500_eth_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  08007c0c  08007c0c  00008c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008478  08008478  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008478  08008478  00009478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008480  08008480  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008480  08008480  00009480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008484  08008484  00009484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008488  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000746c  200000fc  08008584  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007568  08008584  0000a568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000710c  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217c  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  000133b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ab  00000000  00000000  00013b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ab3  00000000  00000000  0001410b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab9e  00000000  00000000  00025bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b5a7  00000000  00000000  0003075c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008bd03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000294c  00000000  00000000  0008bd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0008e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000fc 	.word	0x200000fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bf4 	.word	0x08007bf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000100 	.word	0x20000100
 80001dc:	08007bf4 	.word	0x08007bf4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <pa1_adc_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	@ (8000308 <pa1_adc_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <pa1_adc_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <pa1_adc_init+0x5c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <pa1_adc_init+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <pa1_adc_init+0x5c>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <pa1_adc_init+0x58>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <pa1_adc_init+0x58>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <pa1_adc_init+0x60>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <pa1_adc_init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 80002f0:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <pa1_adc_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	@ (8000310 <pa1_adc_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <start_conversion>:


void start_conversion(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <start_conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	@ (800033c <start_conversion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <start_conversion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <start_conversion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800032e:	6093      	str	r3, [r2, #8]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <led_init+0x34>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <led_init+0x34>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <led_init+0x38>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <led_init+0x38>)
 8000356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <led_init+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <led_init+0x38>)
 8000362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40023800 	.word	0x40023800
 8000378:	40020000 	.word	0x40020000

0800037c <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <button_init+0x34>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <button_init+0x34>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <button_init+0x38>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a08      	ldr	r2, [pc, #32]	@ (80003b4 <button_init+0x38>)
 8000392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000396:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <button_init+0x38>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a05      	ldr	r2, [pc, #20]	@ (80003b4 <button_init+0x38>)
 800039e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80003a2:	6013      	str	r3, [r2, #0]

}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020800 	.word	0x40020800

080003b8 <get_btn_state>:


bool get_btn_state(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

	/*Note : BTN is active low*/

	/*Check if button is pressed*/
	if(GPIOC->IDR & BTN_PIN)
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <get_btn_state+0x20>)
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <get_btn_state+0x14>
	{
		return false;
 80003c8:	2300      	movs	r3, #0
 80003ca:	e000      	b.n	80003ce <get_btn_state+0x16>
	}
	else
	{
		return true;
 80003cc:	2301      	movs	r3, #1
	}

}
 80003ce:	4618      	mov	r0, r3
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40020800 	.word	0x40020800

080003dc <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	021b      	lsls	r3, r3, #8
 80003ee:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	89fb      	ldrh	r3, [r7, #14]
 80003f8:	4413      	add	r3, r2
 80003fa:	81fb      	strh	r3, [r7, #14]
	return i;
 80003fc:	89fb      	ldrh	r3, [r7, #14]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8000416:	887b      	ldrh	r3, [r7, #2]
 8000418:	0a1b      	lsrs	r3, r3, #8
 800041a:	b299      	uxth	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	887a      	ldrh	r2, [r7, #2]
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	701a      	strb	r2, [r3, #0]
	return s;
 8000432:	687b      	ldr	r3, [r7, #4]
}
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8000440:	b480      	push	{r7}
 8000442:	b08b      	sub	sp, #44	@ 0x2c
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	1c5a      	adds	r2, r3, #1
 8000462:	623a      	str	r2, [r7, #32]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d102      	bne.n	8000474 <parse_name+0x34>
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	3301      	adds	r3, #1
 8000472:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8000474:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000476:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800047a:	2bc0      	cmp	r3, #192	@ 0xc0
 800047c:	d117      	bne.n	80004ae <parse_name+0x6e>
		{
			if (!indirect)
 800047e:	69bb      	ldr	r3, [r7, #24]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d102      	bne.n	800048a <parse_name+0x4a>
				clen++;
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800048a:	2301      	movs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 800048e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000496:	6a3a      	ldr	r2, [r7, #32]
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	4413      	add	r3, r2
 800049c:	461a      	mov	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	4413      	add	r3, r2
 80004a2:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	623a      	str	r2, [r7, #32]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 80004ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d02b      	beq.n	800050c <parse_name+0xcc>
			break;

		len -= slen + 1;
 80004b4:	887a      	ldrh	r2, [r7, #2]
 80004b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	3b01      	subs	r3, #1
 80004be:	b29b      	uxth	r3, r3
 80004c0:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 80004c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	da02      	bge.n	80004d0 <parse_name+0x90>
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	e038      	b.n	8000542 <parse_name+0x102>

		if (!indirect) clen += slen;
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d10c      	bne.n	80004f0 <parse_name+0xb0>
 80004d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004d8:	69fa      	ldr	r2, [r7, #28]
 80004da:	4413      	add	r3, r2
 80004dc:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 80004de:	e007      	b.n	80004f0 <parse_name+0xb0>
 80004e0:	6a3a      	ldr	r2, [r7, #32]
 80004e2:	1c53      	adds	r3, r2, #1
 80004e4:	623b      	str	r3, [r7, #32]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	1c59      	adds	r1, r3, #1
 80004ea:	6079      	str	r1, [r7, #4]
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	701a      	strb	r2, [r3, #0]
 80004f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004f2:	1e5a      	subs	r2, r3, #1
 80004f4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f2      	bne.n	80004e0 <parse_name+0xa0>
		*buf++ = '.';
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	222e      	movs	r2, #46	@ 0x2e
 8000502:	701a      	strb	r2, [r3, #0]
		nseg++;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	3301      	adds	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800050a:	e7a8      	b.n	800045e <parse_name+0x1e>
			break;
 800050c:	bf00      	nop
	}

	if (nseg == 0)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10a      	bne.n	800052a <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	607a      	str	r2, [r7, #4]
 800051a:	222e      	movs	r2, #46	@ 0x2e
 800051c:	701a      	strb	r2, [r3, #0]
		len--;
 800051e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000522:	b29b      	uxth	r3, r3
 8000524:	3b01      	subs	r3, #1
 8000526:	b29b      	uxth	r3, r3
 8000528:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	1c5a      	adds	r2, r3, #1
 800052e:	607a      	str	r2, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
	len--;
 8000534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000538:	b29b      	uxth	r3, r3
 800053a:	3b01      	subs	r3, #1
 800053c:	b29b      	uxth	r3, r3
 800053e:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8000540:	69fb      	ldr	r3, [r7, #28]
}
 8000542:	4618      	mov	r0, r3
 8000544:	372c      	adds	r7, #44	@ 0x2c
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b0b4      	sub	sp, #208	@ 0xd0
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	23c0      	movs	r3, #192	@ 0xc0
 800055e:	6839      	ldr	r1, [r7, #0]
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f7ff ff6d 	bl	8000440 <parse_name>
 8000566:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 800056a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800056e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000572:	d101      	bne.n	8000578 <dns_question+0x2a>
 8000574:	2300      	movs	r3, #0
 8000576:	e00b      	b.n	8000590 <dns_question+0x42>

	cp += len;
 8000578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	4413      	add	r3, r2
 8000580:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	3302      	adds	r3, #2
 8000586:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	3302      	adds	r3, #2
 800058c:	603b      	str	r3, [r7, #0]

	return cp;
 800058e:	683b      	ldr	r3, [r7, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	37d0      	adds	r7, #208	@ 0xd0
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0b6      	sub	sp, #216	@ 0xd8
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80005a4:	f107 0210 	add.w	r2, r7, #16
 80005a8:	23c0      	movs	r3, #192	@ 0xc0
 80005aa:	68b9      	ldr	r1, [r7, #8]
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f7ff ff47 	bl	8000440 <parse_name>
 80005b2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 80005b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80005ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005be:	d101      	bne.n	80005c4 <dns_answer+0x2c>
 80005c0:	2300      	movs	r3, #0
 80005c2:	e0f9      	b.n	80007b8 <dns_answer+0x220>

	cp += len;
 80005c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	4413      	add	r3, r2
 80005cc:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 80005ce:	68b8      	ldr	r0, [r7, #8]
 80005d0:	f7ff ff04 	bl	80003dc <get16>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	3302      	adds	r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	3302      	adds	r3, #2
 80005e4:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	3304      	adds	r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	3302      	adds	r3, #2
 80005f0:	60bb      	str	r3, [r7, #8]


	switch (type)
 80005f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005f6:	2b10      	cmp	r3, #16
 80005f8:	f000 80da 	beq.w	80007b0 <dns_answer+0x218>
 80005fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000600:	2b10      	cmp	r3, #16
 8000602:	f300 80d7 	bgt.w	80007b4 <dns_answer+0x21c>
 8000606:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d07d      	beq.n	800070a <dns_answer+0x172>
 800060e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000612:	2b0f      	cmp	r3, #15
 8000614:	f300 80ce 	bgt.w	80007b4 <dns_answer+0x21c>
 8000618:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800061c:	2b0c      	cmp	r3, #12
 800061e:	dc26      	bgt.n	800066e <dns_answer+0xd6>
 8000620:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000624:	2b00      	cmp	r3, #0
 8000626:	f340 80c5 	ble.w	80007b4 <dns_answer+0x21c>
 800062a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800062e:	2201      	movs	r2, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 8000638:	401a      	ands	r2, r3
 800063a:	2a00      	cmp	r2, #0
 800063c:	bf14      	ite	ne
 800063e:	2201      	movne	r2, #1
 8000640:	2200      	moveq	r2, #0
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	2a00      	cmp	r2, #0
 8000646:	d133      	bne.n	80006b0 <dns_answer+0x118>
 8000648:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800064c:	2a00      	cmp	r2, #0
 800064e:	bf14      	ite	ne
 8000650:	2201      	movne	r2, #1
 8000652:	2200      	moveq	r2, #0
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	2a00      	cmp	r2, #0
 8000658:	d170      	bne.n	800073c <dns_answer+0x1a4>
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d105      	bne.n	8000678 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 800066c:	e0a2      	b.n	80007b4 <dns_answer+0x21c>
	switch (type)
 800066e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000672:	2b0d      	cmp	r3, #13
 8000674:	d032      	beq.n	80006dc <dns_answer+0x144>
		break;
 8000676:	e09d      	b.n	80007b4 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	60ba      	str	r2, [r7, #8]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	3201      	adds	r2, #1
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	60ba      	str	r2, [r7, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	3202      	adds	r2, #2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	60ba      	str	r2, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	3203      	adds	r2, #3
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	7013      	strb	r3, [r2, #0]
		break;
 80006ae:	e082      	b.n	80007b6 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80006b0:	f107 0210 	add.w	r2, r7, #16
 80006b4:	23c0      	movs	r3, #192	@ 0xc0
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff fec1 	bl	8000440 <parse_name>
 80006be:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80006c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ca:	d101      	bne.n	80006d0 <dns_answer+0x138>
 80006cc:	2300      	movs	r3, #0
 80006ce:	e073      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 80006d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4413      	add	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
		break;
 80006da:	e06c      	b.n	80007b6 <dns_answer+0x21e>
		len = *cp++;
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	60ba      	str	r2, [r7, #8]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	4413      	add	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
		break;
 8000708:	e055      	b.n	80007b6 <dns_answer+0x21e>
		cp += 2;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	3302      	adds	r3, #2
 800070e:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8000710:	f107 0210 	add.w	r2, r7, #16
 8000714:	23c0      	movs	r3, #192	@ 0xc0
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fe91 	bl	8000440 <parse_name>
 800071e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8000722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800072a:	d101      	bne.n	8000730 <dns_answer+0x198>
 800072c:	2300      	movs	r3, #0
 800072e:	e043      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 8000730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	4413      	add	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]
		break;
 800073a:	e03c      	b.n	80007b6 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	23c0      	movs	r3, #192	@ 0xc0
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff fe7b 	bl	8000440 <parse_name>
 800074a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800074e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000756:	d101      	bne.n	800075c <dns_answer+0x1c4>
 8000758:	2300      	movs	r3, #0
 800075a:	e02d      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 800075c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	4413      	add	r3, r2
 8000764:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8000766:	f107 0210 	add.w	r2, r7, #16
 800076a:	23c0      	movs	r3, #192	@ 0xc0
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff fe66 	bl	8000440 <parse_name>
 8000774:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8000778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d101      	bne.n	8000786 <dns_answer+0x1ee>
 8000782:	2300      	movs	r3, #0
 8000784:	e018      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 8000786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3304      	adds	r3, #4
 8000794:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3304      	adds	r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	3304      	adds	r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3304      	adds	r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	3304      	adds	r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
		break;
 80007ae:	e002      	b.n	80007b6 <dns_answer+0x21e>
		break;
 80007b0:	bf00      	nop
 80007b2:	e000      	b.n	80007b6 <dns_answer+0x21e>
		break;
 80007b4:	bf00      	nop
	}

	return cp;
 80007b6:	68bb      	ldr	r3, [r7, #8]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	37d8      	adds	r7, #216	@ 0xd8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80007d0:	2212      	movs	r2, #18
 80007d2:	2100      	movs	r1, #0
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f006 fa93 	bl	8006d00 <memset>

	pdhdr->id = get16(&msg[0]);
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff fdfe 	bl	80003dc <get16>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3302      	adds	r3, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fdf5 	bl	80003dc <get16>
 80007f2:	4603      	mov	r3, r0
 80007f4:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80007f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da02      	bge.n	8000804 <parseDNSMSG+0x44>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2201      	movs	r2, #1
 8000802:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8000804:	8a7b      	ldrh	r3, [r7, #18]
 8000806:	0adb      	lsrs	r3, r3, #11
 8000808:	b29b      	uxth	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 030f 	and.w	r3, r3, #15
 8000810:	b2da      	uxtb	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8000816:	8a7b      	ldrh	r3, [r7, #18]
 8000818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <parseDNSMSG+0x66>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2201      	movs	r2, #1
 8000824:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8000826:	8a7b      	ldrh	r3, [r7, #18]
 8000828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <parseDNSMSG+0x76>
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2201      	movs	r2, #1
 8000834:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8000836:	8a7b      	ldrh	r3, [r7, #18]
 8000838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <parseDNSMSG+0x86>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2201      	movs	r2, #1
 8000844:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8000846:	8a7b      	ldrh	r3, [r7, #18]
 8000848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <parseDNSMSG+0x96>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2201      	movs	r2, #1
 8000854:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8000856:	8a7b      	ldrh	r3, [r7, #18]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	b2da      	uxtb	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3304      	adds	r3, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fdb7 	bl	80003dc <get16>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3306      	adds	r3, #6
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fdae 	bl	80003dc <get16>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	3308      	adds	r3, #8
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fda5 	bl	80003dc <get16>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	330a      	adds	r3, #10
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd9c 	bl	80003dc <get16>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	330c      	adds	r3, #12
 80008b0:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	83fb      	strh	r3, [r7, #30]
 80008b6:	e00d      	b.n	80008d4 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 80008b8:	69b9      	ldr	r1, [r7, #24]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	f7ff fe47 	bl	800054e <dns_question>
 80008c0:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <parseDNSMSG+0x10e>
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	e03b      	b.n	8000946 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80008ce:	8bfb      	ldrh	r3, [r7, #30]
 80008d0:	3301      	adds	r3, #1
 80008d2:	83fb      	strh	r3, [r7, #30]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	895b      	ldrh	r3, [r3, #10]
 80008d8:	8bfa      	ldrh	r2, [r7, #30]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3ec      	bcc.n	80008b8 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	83fb      	strh	r3, [r7, #30]
 80008e2:	e00e      	b.n	8000902 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	69b9      	ldr	r1, [r7, #24]
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	f7ff fe55 	bl	8000598 <dns_answer>
 80008ee:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <parseDNSMSG+0x13c>
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e024      	b.n	8000946 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80008fc:	8bfb      	ldrh	r3, [r7, #30]
 80008fe:	3301      	adds	r3, #1
 8000900:	83fb      	strh	r3, [r7, #30]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	899b      	ldrh	r3, [r3, #12]
 8000906:	8bfa      	ldrh	r2, [r7, #30]
 8000908:	429a      	cmp	r2, r3
 800090a:	d3eb      	bcc.n	80008e4 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	83fb      	strh	r3, [r7, #30]
 8000910:	e002      	b.n	8000918 <parseDNSMSG+0x158>
 8000912:	8bfb      	ldrh	r3, [r7, #30]
 8000914:	3301      	adds	r3, #1
 8000916:	83fb      	strh	r3, [r7, #30]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	89db      	ldrh	r3, [r3, #14]
 800091c:	8bfa      	ldrh	r2, [r7, #30]
 800091e:	429a      	cmp	r2, r3
 8000920:	d3f7      	bcc.n	8000912 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	83fb      	strh	r3, [r7, #30]
 8000926:	e002      	b.n	800092e <parseDNSMSG+0x16e>
 8000928:	8bfb      	ldrh	r3, [r7, #30]
 800092a:	3301      	adds	r3, #1
 800092c:	83fb      	strh	r3, [r7, #30]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	8a1b      	ldrh	r3, [r3, #16]
 8000932:	8bfa      	ldrh	r2, [r7, #30]
 8000934:	429a      	cmp	r2, r3
 8000936:	d3f7      	bcc.n	8000928 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	7a1b      	ldrb	r3, [r3, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <parseDNSMSG+0x184>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <parseDNSMSG+0x186>
	else return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0b8      	sub	sp, #224	@ 0xe0
 8000954:	af00      	add	r7, sp, #0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	461a      	mov	r2, r3
 800095c:	4603      	mov	r3, r0
 800095e:	81fb      	strh	r3, [r7, #14]
 8000960:	4613      	mov	r3, r2
 8000962:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 800096a:	4b57      	ldr	r3, [pc, #348]	@ (8000ac8 <dns_makequery+0x178>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b55      	ldr	r3, [pc, #340]	@ (8000ac8 <dns_makequery+0x178>)
 8000974:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8000976:	4b54      	ldr	r3, [pc, #336]	@ (8000ac8 <dns_makequery+0x178>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000980:	f7ff fd43 	bl	800040a <put16>
 8000984:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8000988:	89fb      	ldrh	r3, [r7, #14]
 800098a:	02db      	lsls	r3, r3, #11
 800098c:	b21b      	sxth	r3, r3
 800098e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000992:	b21b      	sxth	r3, r3
 8000994:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8000998:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 800099c:	4619      	mov	r1, r3
 800099e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009a2:	f7ff fd32 	bl	800040a <put16>
 80009a6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 80009aa:	2101      	movs	r1, #1
 80009ac:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009b0:	f7ff fd2b 	bl	800040a <put16>
 80009b4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009be:	f7ff fd24 	bl	800040a <put16>
 80009c2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009c6:	2100      	movs	r1, #0
 80009c8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009cc:	f7ff fd1d 	bl	800040a <put16>
 80009d0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009da:	f7ff fd16 	bl	800040a <put16>
 80009de:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f006 fa4a 	bl	8006e82 <strcpy>
	dname = sname;
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 80009f6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80009fa:	f7ff fbfb 	bl	80001f4 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8000a04:	212e      	movs	r1, #46	@ 0x2e
 8000a06:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8000a0a:	f006 f981 	bl	8006d10 <strchr>
 8000a0e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8000a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d006      	beq.n	8000a28 <dns_makequery+0xd8>
 8000a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	81bb      	strh	r3, [r7, #12]
 8000a26:	e002      	b.n	8000a2e <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8000a28:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000a2c:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8000a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000a38:	89ba      	ldrh	r2, [r7, #12]
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8000a3e:	89bb      	ldrh	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d029      	beq.n	8000a98 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8000a44:	89bb      	ldrh	r3, [r7, #12]
 8000a46:	461a      	mov	r2, r3
 8000a48:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8000a4c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a50:	f006 f96b 	bl	8006d2a <strncpy>
		cp += len;
 8000a54:	89bb      	ldrh	r3, [r7, #12]
 8000a56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000a5a:	4413      	add	r3, r2
 8000a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 8000a60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8000a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
			break;
 8000a76:	e010      	b.n	8000a9a <dns_makequery+0x14a>
		}
		dname += len+1;
 8000a78:	89bb      	ldrh	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000a80:	4413      	add	r3, r2
 8000a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 8000a86:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8000a8a:	89bb      	ldrh	r3, [r7, #12]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	3b01      	subs	r3, #1
 8000a92:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 8000a96:	e7b5      	b.n	8000a04 <dns_makequery+0xb4>
		if (len == 0) break;
 8000a98:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000aa0:	f7ff fcb3 	bl	800040a <put16>
 8000aa4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000aae:	f7ff fcac 	bl	800040a <put16>
 8000ab2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8000ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	b21b      	sxth	r3, r3
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	37e0      	adds	r7, #224	@ 0xe0
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000011e 	.word	0x2000011e

08000acc <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <check_DNS_timeout+0x44>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d914      	bls.n	8000b02 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <check_DNS_timeout+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d905      	bls.n	8000af2 <check_DNS_timeout+0x26>
			retry_count = 0;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	e008      	b.n	8000b04 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000afc:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000120 	.word	0x20000120
 8000b14:	20000124 	.word	0x20000124

08000b18 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <DNS_init+0x2c>)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <DNS_init+0x30>)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <DNS_init+0x34>)
 8000b32:	f241 1222 	movw	r2, #4386	@ 0x1122
 8000b36:	801a      	strh	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	2000011c 	.word	0x2000011c
 8000b48:	20000118 	.word	0x20000118
 8000b4c:	2000011e 	.word	0x2000011e

08000b50 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b08f      	sub	sp, #60	@ 0x3c
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8000b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c4c <DNS_run+0xfc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8000b62:	4b3b      	ldr	r3, [pc, #236]	@ (8000c50 <DNS_run+0x100>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8000b68:	4b3a      	ldr	r3, [pc, #232]	@ (8000c54 <DNS_run+0x104>)
 8000b6a:	7818      	ldrb	r0, [r3, #0]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2102      	movs	r1, #2
 8000b72:	f003 fcbf 	bl	80044f4 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8000b76:	4b38      	ldr	r3, [pc, #224]	@ (8000c58 <DNS_run+0x108>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fee5 	bl	8000950 <dns_makequery>
 8000b86:	4603      	mov	r3, r0
 8000b88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000b8a:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <DNS_run+0x104>)
 8000b8c:	7818      	ldrb	r0, [r3, #0]
 8000b8e:	4b32      	ldr	r3, [pc, #200]	@ (8000c58 <DNS_run+0x108>)
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b94:	2335      	movs	r3, #53	@ 0x35
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f004 f92b 	bl	8004df4 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <DNS_run+0x104>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fefd 	bl	80059a2 <getSn_RX_RSR>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000bac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d029      	beq.n	8000c06 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8000bb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bb8:	d902      	bls.n	8000bc0 <DNS_run+0x70>
 8000bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8000bc0:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <DNS_run+0x104>)
 8000bc2:	7818      	ldrb	r0, [r3, #0]
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <DNS_run+0x108>)
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	f107 0414 	add.w	r4, r7, #20
 8000bcc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000bce:	f107 0312 	add.w	r3, r7, #18
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	4623      	mov	r3, r4
 8000bd6:	f004 fa41 	bl	800505c <recvfrom>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <DNS_run+0x108>)
 8000be0:	6819      	ldr	r1, [r3, #0]
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fde9 	bl	80007c0 <parseDNSMSG>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8000bf4:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <DNS_run+0x104>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 fd8e 	bl	800471c <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8000c00:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8000c04:	e01e      	b.n	8000c44 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8000c06:	f7ff ff61 	bl	8000acc <check_DNS_timeout>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 8000c10:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da06      	bge.n	8000c26 <DNS_run+0xd6>
			close(DNS_SOCKET);
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <DNS_run+0x104>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 fd7d 	bl	800471c <close>
			return 0; // timeout occurred
 8000c22:	2300      	movs	r3, #0
 8000c24:	e00e      	b.n	8000c44 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8000c26:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1b7      	bne.n	8000b9e <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <DNS_run+0x104>)
 8000c30:	7818      	ldrb	r0, [r3, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <DNS_run+0x108>)
 8000c34:	6819      	ldr	r1, [r3, #0]
 8000c36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c38:	2335      	movs	r3, #53	@ 0x35
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f004 f8d9 	bl	8004df4 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000c42:	e7ac      	b.n	8000b9e <DNS_run+0x4e>
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3734      	adds	r7, #52	@ 0x34
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	20000124 	.word	0x20000124
 8000c50:	20000120 	.word	0x20000120
 8000c54:	2000011c 	.word	0x2000011c
 8000c58:	20000118 	.word	0x20000118

08000c5c <jump_to_app>:
#define EMPTY_MEM	0xFFFFFFFF

typedef void (*func_ptr)(void);

void jump_to_app(uint32_t addr_value)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	uint32_t app_start_address;
	func_ptr jump_to_app;

	/*Disable and re-enable AHB bus*/
	RCC->AHB1RSTR = 0xFFFFFFFF;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <jump_to_app+0x60>)
 8000c66:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6a:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR = 0x00000000;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <jump_to_app+0x60>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]

    // Reset SysTick
    SysTick->CTRL = 0;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <jump_to_app+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <jump_to_app+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <jump_to_app+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]

    if((*(uint32_t *)addr_value) != EMPTY_MEM)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d011      	beq.n	8000cb2 <jump_to_app+0x56>
    {
    	printf("Staring application.....\r\r");
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <jump_to_app+0x68>)
 8000c90:	f005 fec6 	bl	8006a20 <iprintf>

    	app_start_address =  *(uint32_t *)(addr_value + 4);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3304      	adds	r3, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	617b      	str	r3, [r7, #20]
    	jump_to_app  =   (func_ptr)app_start_address;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]

    	__set_MSP(*(uint32_t *)addr_value);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f383 8808 	msr	MSP, r3
}
 8000cac:	bf00      	nop


    	jump_to_app();
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4798      	blx	r3

    }
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	e000e010 	.word	0xe000e010
 8000cc4:	08007c0c 	.word	0x08007c0c

08000cc8 <extract_content_length>:
  *
  * @param recv_buffer The buffer containing the HTTP response.
  * @return int32_t The Content-Length value, or -1 if not found or invalid.
  */
 int32_t extract_content_length( char *recv_buffer)
 {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	@ 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
     const char *content_length_str = "Content-Length: ";
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <extract_content_length+0xb4>)
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
     const char *end_of_header_str = "\r\n";
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <extract_content_length+0xb8>)
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

     // Find the position of "Content-Length: " in the receive buffer
     const char *start = strstr(recv_buffer, content_length_str);
 8000cd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f006 f838 	bl	8006d50 <strstr>
 8000ce0:	6278      	str	r0, [r7, #36]	@ 0x24
     if (start == NULL) {
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d105      	bne.n	8000cf4 <extract_content_length+0x2c>
         printf("Content-Length header not found\r\n");
 8000ce8:	4826      	ldr	r0, [pc, #152]	@ (8000d84 <extract_content_length+0xbc>)
 8000cea:	f005 ff09 	bl	8006b00 <puts>
         return -1;  // Content-Length not found
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e03e      	b.n	8000d72 <extract_content_length+0xaa>
     }

     // Move the pointer to the start of the content length value
     start += strlen(content_length_str);
 8000cf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000cf6:	f7ff fa7d 	bl	80001f4 <strlen>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	4413      	add	r3, r2
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24

     // Find the end of the content length value (terminated by "\r\n")
     const char *end = strstr(start, end_of_header_str);
 8000d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d06:	f006 f823 	bl	8006d50 <strstr>
 8000d0a:	6238      	str	r0, [r7, #32]
     if (end == NULL) {
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <extract_content_length+0x56>
         printf("End of Content-Length header not found\r\n");
 8000d12:	481d      	ldr	r0, [pc, #116]	@ (8000d88 <extract_content_length+0xc0>)
 8000d14:	f005 fef4 	bl	8006b00 <puts>
         return -1;  // End of Content-Length not found
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	e029      	b.n	8000d72 <extract_content_length+0xaa>
     }

     // Extract the substring that represents the Content-Length value
     char content_length_value[16];  // Assuming the Content-Length value is not too large
     size_t length = end - start;
 8000d1e:	6a3a      	ldr	r2, [r7, #32]
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	61fb      	str	r3, [r7, #28]
     if (length >= sizeof(content_length_value)) {
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d905      	bls.n	8000d38 <extract_content_length+0x70>
         printf("Content-Length value too long\r\n");
 8000d2c:	4817      	ldr	r0, [pc, #92]	@ (8000d8c <extract_content_length+0xc4>)
 8000d2e:	f005 fee7 	bl	8006b00 <puts>
         return -1;  // Length too long
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e01c      	b.n	8000d72 <extract_content_length+0xaa>
     }

     // Copy the content length value to a temporary buffer
     strncpy(content_length_value, start, length);
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fff2 	bl	8006d2a <strncpy>
     content_length_value[length] = '\0';  // Null-terminate the string
 8000d46:	f107 0208 	add.w	r2, r7, #8
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]

     // Convert the Content-Length value to an integer
     int32_t content_length = atoi(content_length_value);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 fc24 	bl	80065a4 <atoi>
 8000d5c:	61b8      	str	r0, [r7, #24]
     if (content_length <= 0) {
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	dc05      	bgt.n	8000d70 <extract_content_length+0xa8>
         printf("Invalid Content-Length value\r\n");
 8000d64:	480a      	ldr	r0, [pc, #40]	@ (8000d90 <extract_content_length+0xc8>)
 8000d66:	f005 fecb 	bl	8006b00 <puts>
         return -1;  // Invalid Content-Length value
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e000      	b.n	8000d72 <extract_content_length+0xaa>
     }

     return content_length;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 }
 8000d72:	4618      	mov	r0, r3
 8000d74:	3730      	adds	r7, #48	@ 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08007c28 	.word	0x08007c28
 8000d80:	08007c3c 	.word	0x08007c3c
 8000d84:	08007c40 	.word	0x08007c40
 8000d88:	08007c64 	.word	0x08007c64
 8000d8c:	08007c8c 	.word	0x08007c8c
 8000d90:	08007cac 	.word	0x08007cac

08000d94 <get_firmware_binary>:


 int get_firmware_binary(char *source_buffer, char *substring, char *dest_buffer, int bytes_to_copy)
 {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	603b      	str	r3, [r7, #0]
     // Find the location of the substring in the source buffer
     const char *substring_position = strstr(source_buffer, substring);
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f005 ffd3 	bl	8006d50 <strstr>
 8000daa:	61f8      	str	r0, [r7, #28]

     // If the substring is not found, return an error code
     if (substring_position == NULL) {
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d105      	bne.n	8000dbe <get_firmware_binary+0x2a>
         printf("Substring not found\r\n");
 8000db2:	480e      	ldr	r0, [pc, #56]	@ (8000dec <get_firmware_binary+0x58>)
 8000db4:	f005 fea4 	bl	8006b00 <puts>
         return -1; // Substring not found
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	e012      	b.n	8000de4 <get_firmware_binary+0x50>
     }

     // Move the pointer past the substring to get to the data after it
     const char *data_start = substring_position + strlen(substring);
 8000dbe:	68b8      	ldr	r0, [r7, #8]
 8000dc0:	f7ff fa18 	bl	80001f4 <strlen>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	4413      	add	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]

     size_t data_length = bytes_to_copy;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	617b      	str	r3, [r7, #20]

     printf("Data length to copy: %d\r\n", data_length);
 8000dd0:	6979      	ldr	r1, [r7, #20]
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <get_firmware_binary+0x5c>)
 8000dd4:	f005 fe24 	bl	8006a20 <iprintf>

     // Copy the data from data_start to the destination buffer
     memcpy(dest_buffer, data_start, data_length);
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f006 f858 	bl	8006e92 <memcpy>



     return 0; // Success
 8000de2:	2300      	movs	r3, #0
 }
 8000de4:	4618      	mov	r0, r3
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	08007ccc 	.word	0x08007ccc
 8000df0:	08007ce4 	.word	0x08007ce4

08000df4 <firmware_update>:

 void firmware_update(void)
 {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	  flash_write_data_byte(NEW_FIRMWARE_START_ADDRESS, (uint8_t *)firmware_buffer,firmware_size);
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <firmware_update+0x18>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4904      	ldr	r1, [pc, #16]	@ (8000e10 <firmware_update+0x1c>)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <firmware_update+0x20>)
 8000e02:	f000 fad3 	bl	80013ac <flash_write_data_byte>
 }
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20005368 	.word	0x20005368
 8000e10:	2000536c 	.word	0x2000536c
 8000e14:	0800c000 	.word	0x0800c000

08000e18 <flash_ex_erase>:
StatusTypeDef  flash_wait_for_last_operation(uint32_t timeout);
static void flush_caches(void);


StatusTypeDef flash_ex_erase(FLASH_EraseInitTypeDef *pt_erase_init, uint32_t *sect_err)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	StatusTypeDef  status =  DEV_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
	uint32_t index = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]

	/*wait for last operation to be completed*/
	status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8000e2a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e2e:	f000 f8b9 	bl	8000fa4 <flash_wait_for_last_operation>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]

	if( status  == DEV_OK)
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d145      	bne.n	8000ec8 <flash_ex_erase+0xb0>
	{
	   *sect_err =  0xFFFFFFFFU;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e42:	601a      	str	r2, [r3, #0]

	   if(pt_erase_init->TypeErase ==  FLASH_TYPEERASE_MASSERASE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d112      	bne.n	8000e72 <flash_ex_erase+0x5a>
	   {
		   /*Mass erase*/
		   flash_mass_erase((uint8_t)pt_erase_init->VoltageRange);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f884 	bl	8000f60 <flash_mass_erase>

			/*wait for last operation to be completed*/
			status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8000e58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e5c:	f000 f8a2 	bl	8000fa4 <flash_wait_for_last_operation>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]

			/*Disable MER bit*/
			FLASH->CR &=~(1U<<2);
 8000e64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <flash_ex_erase+0xbc>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed4 <flash_ex_erase+0xbc>)
 8000e6a:	f023 0304 	bic.w	r3, r3, #4
 8000e6e:	6113      	str	r3, [r2, #16]
 8000e70:	e028      	b.n	8000ec4 <flash_ex_erase+0xac>
	   }
	   else
	   {
		   /*Sector erase*/
		   for(index = pt_erase_init->Sector; index <  (pt_erase_init->NbSectors + pt_erase_init->Sector); index++)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	e01c      	b.n	8000eb4 <flash_ex_erase+0x9c>
		   {
			   flash_sector_erase(index, (uint8_t)pt_erase_init->VoltageRange);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f000 f828 	bl	8000ed8 <flash_sector_erase>

				/*wait for last operation to be completed*/
				status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8000e88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e8c:	f000 f88a 	bl	8000fa4 <flash_wait_for_last_operation>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]

				/*Clear SNB bit and SER bit*/
				CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <flash_ex_erase+0xbc>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <flash_ex_erase+0xbc>)
 8000e9a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8000e9e:	6113      	str	r3, [r2, #16]

				if(status !=DEV_OK)
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <flash_ex_erase+0x96>
				{
					*sect_err =  index;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	601a      	str	r2, [r3, #0]
					break;
 8000eac:	e00a      	b.n	8000ec4 <flash_ex_erase+0xac>
		   for(index = pt_erase_init->Sector; index <  (pt_erase_init->NbSectors + pt_erase_init->Sector); index++)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3da      	bcc.n	8000e7a <flash_ex_erase+0x62>
				}
		   }
	   }

	   flush_caches();
 8000ec4:	f000 f984 	bl	80011d0 <flush_caches>

	}

	return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <flash_sector_erase>:


void flash_sector_erase(uint32_t sector, uint8_t voltage_range)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp_psize = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]

	if(voltage_range ==  FLASH_VOLTAGE_RANGE_1)
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <flash_sector_erase+0x1c>
	{
		tmp_psize = FLASH_PSIZE_BYTE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e010      	b.n	8000f16 <flash_sector_erase+0x3e>
	}
	else if(voltage_range ==  FLASH_VOLTAGE_RANGE_2)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d103      	bne.n	8000f02 <flash_sector_erase+0x2a>
	{
		tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000efa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e009      	b.n	8000f16 <flash_sector_erase+0x3e>
	}
	else if(voltage_range ==  FLASH_VOLTAGE_RANGE_3)
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d103      	bne.n	8000f10 <flash_sector_erase+0x38>
	{
		tmp_psize = FLASH_PSIZE_WORD;
 8000f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e002      	b.n	8000f16 <flash_sector_erase+0x3e>
	}
	else
	{
		tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000f10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f14:	60fb      	str	r3, [r7, #12]

	}

	FLASH->CR &=~FLASH_CR_PSIZE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f20:	6113      	str	r3, [r2, #16]
	FLASH->CR |= tmp_psize;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	610b      	str	r3, [r1, #16]

	/*Set SER bit and select sector*/
	FLASH->CR |=  FLASH_CR_SER |(sector << FLASH_CR_SNB_Pos);
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	6113      	str	r3, [r2, #16]

	/*Very IMPORTANT*/
	FLASH->CR |= FLASH_CR_STRT;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <flash_sector_erase+0x84>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4a:	6113      	str	r3, [r2, #16]
	flash_wait_for_last_operation(5);
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f000 f829 	bl	8000fa4 <flash_wait_for_last_operation>


}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <flash_mass_erase>:

void flash_mass_erase(uint8_t voltage_range)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <flash_mass_erase+0x40>)
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <flash_mass_erase+0x40>)
 8000f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f74:	6113      	str	r3, [r2, #16]

	/*Set MER bit*/
	FLASH->CR |= FLASH_CR_MER;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <flash_mass_erase+0x40>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a09      	ldr	r2, [pc, #36]	@ (8000fa0 <flash_mass_erase+0x40>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6113      	str	r3, [r2, #16]
	/*Set Start bit and voltage*/
	FLASH->CR |=  FLASH_CR_STRT |((uint32_t)voltage_range <<8U);
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <flash_mass_erase+0x40>)
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <flash_mass_erase+0x40>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f92:	6113      	str	r3, [r2, #16]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <flash_wait_for_last_operation>:

StatusTypeDef  flash_wait_for_last_operation(uint32_t timeout)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

   pFlash.ErrorCode = 0;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <flash_wait_for_last_operation+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]

   tickstart = get_tick();
 8000fb6:	f001 fbe7 	bl	8002788 <get_tick>
 8000fba:	60f8      	str	r0, [r7, #12]

   while((FLASH->SR & FLASH_SR_BSY) != RESET)
 8000fbc:	e010      	b.n	8000fe0 <flash_wait_for_last_operation+0x3c>
   {
	   if(timeout != MAX_DELAY)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d00c      	beq.n	8000fe0 <flash_wait_for_last_operation+0x3c>
	   {
		   if((timeout  == 0) || ((get_tick() -  tickstart) > timeout))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <flash_wait_for_last_operation+0x38>
 8000fcc:	f001 fbdc 	bl	8002788 <get_tick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d201      	bcs.n	8000fe0 <flash_wait_for_last_operation+0x3c>
		   {
			   return DEV_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e00f      	b.n	8001000 <flash_wait_for_last_operation+0x5c>
   while((FLASH->SR & FLASH_SR_BSY) != RESET)
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <flash_wait_for_last_operation+0x68>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e8      	bne.n	8000fbe <flash_wait_for_last_operation+0x1a>
		   }
	   }
   }

   /*Check end of operation flag*/
   if((FLASH->SR & (1U<<0)) != RESET)
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <flash_wait_for_last_operation+0x68>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <flash_wait_for_last_operation+0x5a>
   {
	   /*Clear flash end of operation pending bit*/
	   FLASH->SR = (1U<<0);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <flash_wait_for_last_operation+0x68>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	60da      	str	r2, [r3, #12]
   }

   return DEV_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000128 	.word	0x20000128
 800100c:	40023c00 	.word	0x40023c00

08001010 <flash_program>:


StatusTypeDef flash_program(uint32_t prg_type,  uint32_t address, uint64_t data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	e9c7 2300 	strd	r2, r3, [r7]
	StatusTypeDef status = DEV_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	75fb      	strb	r3, [r7, #23]

	/*wait for last operation to be completed*/
	status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8001022:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001026:	f7ff ffbd 	bl	8000fa4 <flash_wait_for_last_operation>
 800102a:	4603      	mov	r3, r0
 800102c:	75fb      	strb	r3, [r7, #23]

	if( status == DEV_OK)
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d12b      	bne.n	800108c <flash_program+0x7c>
	{
		if(prg_type == FLASH_TYPEPROGRAM_BYTE)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d105      	bne.n	8001046 <flash_program+0x36>
		{
			flash_program_byte(address,(uint8_t)data);
 800103a:	783b      	ldrb	r3, [r7, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f000 f82c 	bl	800109c <flash_program_byte>
 8001044:	e016      	b.n	8001074 <flash_program+0x64>
		}

		else if(prg_type == FLASH_TYPEPROGRAM_HALFWORD)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d105      	bne.n	8001058 <flash_program+0x48>
		{
			flash_program_halfword(address,(uint16_t)data);
 800104c:	883b      	ldrh	r3, [r7, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	68b8      	ldr	r0, [r7, #8]
 8001052:	f000 f845 	bl	80010e0 <flash_program_halfword>
 8001056:	e00d      	b.n	8001074 <flash_program+0x64>
		}
		else if(prg_type == FLASH_TYPEPROGRAM_WORD)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d105      	bne.n	800106a <flash_program+0x5a>
		{
			flash_program_word(address,(uint32_t)data);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	68b8      	ldr	r0, [r7, #8]
 8001064:	f000 f860 	bl	8001128 <flash_program_word>
 8001068:	e004      	b.n	8001074 <flash_program+0x64>
		}
		else
		{
			flash_program_doubleword(address,data);
 800106a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f000 f87c 	bl	800116c <flash_program_doubleword>

		}

		/*wait for last operation to be completed*/
		status = flash_wait_for_last_operation(FLASH_TIMEOUT_VALUE);
 8001074:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001078:	f7ff ff94 	bl	8000fa4 <flash_wait_for_last_operation>
 800107c:	4603      	mov	r3, r0
 800107e:	75fb      	strb	r3, [r7, #23]

		/*Clear Program bit*/
		FLASH->CR &=~FLASH_CR_PG;
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <flash_program+0x88>)
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <flash_program+0x88>)
 8001086:	f023 0301 	bic.w	r3, r3, #1
 800108a:	6113      	str	r3, [r2, #16]
	}

	return status;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <flash_program_byte>:
void flash_program_byte(uint32_t address, uint8_t data)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <flash_program_byte+0x40>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <flash_program_byte+0x40>)
 80010ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010b2:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for byte*/
	FLASH->CR |=FLASH_PSIZE_BYTE;
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <flash_program_byte+0x40>)
 80010b6:	4a09      	ldr	r2, [pc, #36]	@ (80010dc <flash_program_byte+0x40>)
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <flash_program_byte+0x40>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <flash_program_byte+0x40>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint8_t *)address =  data;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <flash_program_halfword>:

void flash_program_halfword(uint32_t address, uint16_t data)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <flash_program_halfword+0x44>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <flash_program_halfword+0x44>)
 80010f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010f6:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_HALF_WORD;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <flash_program_halfword+0x44>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <flash_program_halfword+0x44>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001102:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <flash_program_halfword+0x44>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <flash_program_halfword+0x44>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint16_t *)address =  data;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	801a      	strh	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023c00 	.word	0x40023c00

08001128 <flash_program_word>:

void flash_program_word(uint32_t address, uint32_t data)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <flash_program_word+0x40>)
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	4a0c      	ldr	r2, [pc, #48]	@ (8001168 <flash_program_word+0x40>)
 8001138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800113c:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_WORD;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <flash_program_word+0x40>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <flash_program_word+0x40>)
 8001144:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001148:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <flash_program_word+0x40>)
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <flash_program_word+0x40>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6113      	str	r3, [r2, #16]

	/*Put data at the address*/
	*(__IO uint32_t *)address =  data;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40023c00 	.word	0x40023c00

0800116c <flash_program_doubleword>:

void flash_program_doubleword(uint32_t address, uint64_t data)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	e9c7 2300 	strd	r2, r3, [r7]
	/*Clear PSIZE field*/
	FLASH->CR &=~FLASH_CR_PSIZE;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <flash_program_doubleword+0x60>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <flash_program_doubleword+0x60>)
 800117e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001182:	6113      	str	r3, [r2, #16]

	/*Set PSIZE for halfword*/
	FLASH->CR |=FLASH_PSIZE_DOUBLE_WORD;
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <flash_program_doubleword+0x60>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <flash_program_doubleword+0x60>)
 800118a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800118e:	6113      	str	r3, [r2, #16]

	/*Set PG bit*/
	FLASH->CR |= FLASH_CR_PG;
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <flash_program_doubleword+0x60>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <flash_program_doubleword+0x60>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6113      	str	r3, [r2, #16]

	/*Put  first word at the address*/
	*(__IO uint32_t *)address =  (uint32_t)data;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80011a2:	f3bf 8f6f 	isb	sy
}
 80011a6:	bf00      	nop

	/*Flush pipeline : ensure programming is performed steps.*/
	__ISB();

	/*Put  second word at the address*/
	*(__IO uint32_t *)(address+4) =  (uint32_t)(data>>32);
 80011a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	000a      	movs	r2, r1
 80011b6:	2300      	movs	r3, #0
 80011b8:	68f9      	ldr	r1, [r7, #12]
 80011ba:	3104      	adds	r1, #4
 80011bc:	4613      	mov	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <flush_caches>:

static void flush_caches(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	/*Flush instruction cache*/
	  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <flush_caches+0x88>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d017      	beq.n	8001210 <flush_caches+0x40>
	  {
		    /* Disable instruction cache  */
			  FLASH->ACR &= (~FLASH_ACR_ICEN);
 80011e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <flush_caches+0x88>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <flush_caches+0x88>)
 80011e6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80011ea:	6013      	str	r3, [r2, #0]

			/* Reset instruction cache */
			  FLASH->ACR |= FLASH_ACR_ICRST;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <flush_caches+0x88>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <flush_caches+0x88>)
 80011f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011f6:	6013      	str	r3, [r2, #0]
			 FLASH->ACR &= ~FLASH_ACR_ICRST;
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <flush_caches+0x88>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a16      	ldr	r2, [pc, #88]	@ (8001258 <flush_caches+0x88>)
 80011fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001202:	6013      	str	r3, [r2, #0]


			 /* Enable instruction cache */
			 FLASH->ACR |= FLASH_ACR_ICEN;
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <flush_caches+0x88>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <flush_caches+0x88>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120e:	6013      	str	r3, [r2, #0]
	  }

	  /*Flush data cache*/

	  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <flush_caches+0x88>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <flush_caches+0x7c>
	  {
	    /* Disable data cache  */
		  FLASH->ACR &= (~FLASH_ACR_DCEN);
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <flush_caches+0x88>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <flush_caches+0x88>)
 8001222:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001226:	6013      	str	r3, [r2, #0]

	    /* Reset data cache */
	    FLASH->ACR |= FLASH_ACR_DCRST;
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <flush_caches+0x88>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <flush_caches+0x88>)
 800122e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001232:	6013      	str	r3, [r2, #0]
	    FLASH->ACR &= ~FLASH_ACR_DCRST;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <flush_caches+0x88>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <flush_caches+0x88>)
 800123a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800123e:	6013      	str	r3, [r2, #0]

	    /* Enable data cache */
	    FLASH->ACR |= FLASH_ACR_DCEN;
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <flush_caches+0x88>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <flush_caches+0x88>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800124a:	6013      	str	r3, [r2, #0]
	  }
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <flash_unlock>:


StatusTypeDef flash_unlock(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
	StatusTypeDef status = DEV_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	71fb      	strb	r3, [r7, #7]

	if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <flash_unlock+0x38>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	da0b      	bge.n	8001286 <flash_unlock+0x2a>
	{

		/*Authorize flash write access*/
		FLASH->KEYR  =  FLASH_KEY1;
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <flash_unlock+0x38>)
 8001270:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <flash_unlock+0x3c>)
 8001272:	605a      	str	r2, [r3, #4]
		FLASH->KEYR  =  FLASH_KEY2;
 8001274:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <flash_unlock+0x38>)
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <flash_unlock+0x40>)
 8001278:	605a      	str	r2, [r3, #4]

		if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <flash_unlock+0x38>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b00      	cmp	r3, #0
 8001280:	da01      	bge.n	8001286 <flash_unlock+0x2a>
		{
			status =  DEV_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	71fb      	strb	r3, [r7, #7]
		}

	}

	return status;
 8001286:	79fb      	ldrb	r3, [r7, #7]
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40023c00 	.word	0x40023c00
 8001298:	45670123 	.word	0x45670123
 800129c:	cdef89ab 	.word	0xcdef89ab

080012a0 <flash_get_error>:
	return DEV_OK;
}


uint32_t flash_get_error(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	return pFlash.ErrorCode;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <flash_get_error+0x14>)
 80012a6:	695b      	ldr	r3, [r3, #20]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000128 	.word	0x20000128

080012b8 <get_sector>:

static uint32_t get_sector(uint32_t address)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
	if((address < 0x08003FFF) && (address >= 0x08000000))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001380 <get_sector+0xc8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d806      	bhi.n	80012da <get_sector+0x22>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80012d2:	d302      	bcc.n	80012da <get_sector+0x22>
	 {
	     sector = FLASH_SECTOR_0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e04b      	b.n	8001372 <get_sector+0xba>
	 }
   else if((address < 0x08007FFF) && (address >= 0x08004000))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a29      	ldr	r2, [pc, #164]	@ (8001384 <get_sector+0xcc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d806      	bhi.n	80012f0 <get_sector+0x38>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <get_sector+0xd0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d302      	bcc.n	80012f0 <get_sector+0x38>
   {
	 sector = FLASH_SECTOR_1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e040      	b.n	8001372 <get_sector+0xba>
   }
   else if((address < 0x0800BFFF) && (address >= 0x08008000))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a26      	ldr	r2, [pc, #152]	@ (800138c <get_sector+0xd4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d806      	bhi.n	8001306 <get_sector+0x4e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a25      	ldr	r2, [pc, #148]	@ (8001390 <get_sector+0xd8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d302      	bcc.n	8001306 <get_sector+0x4e>
   {
	 sector = FLASH_SECTOR_2;
 8001300:	2302      	movs	r3, #2
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e035      	b.n	8001372 <get_sector+0xba>
   }
   else if((address < 0x0800FFFF) && (address >= 0x0800C000))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a22      	ldr	r2, [pc, #136]	@ (8001394 <get_sector+0xdc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d206      	bcs.n	800131c <get_sector+0x64>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <get_sector+0xe0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d302      	bcc.n	800131c <get_sector+0x64>
   {
	 sector = FLASH_SECTOR_3;
 8001316:	2303      	movs	r3, #3
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e02a      	b.n	8001372 <get_sector+0xba>
   }
   else if((address < 0x0801FFFF) && (address >= 0x08010000))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a1f      	ldr	r2, [pc, #124]	@ (800139c <get_sector+0xe4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d206      	bcs.n	8001332 <get_sector+0x7a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a1b      	ldr	r2, [pc, #108]	@ (8001394 <get_sector+0xdc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d902      	bls.n	8001332 <get_sector+0x7a>
   {
	 sector = FLASH_SECTOR_4;
 800132c:	2304      	movs	r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e01f      	b.n	8001372 <get_sector+0xba>
   }
   else if((address < 0x0803FFFF) && (address >= 0x08020000))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1a      	ldr	r2, [pc, #104]	@ (80013a0 <get_sector+0xe8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d206      	bcs.n	8001348 <get_sector+0x90>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a17      	ldr	r2, [pc, #92]	@ (800139c <get_sector+0xe4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d902      	bls.n	8001348 <get_sector+0x90>
   {
	 sector = FLASH_SECTOR_5;
 8001342:	2305      	movs	r3, #5
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e014      	b.n	8001372 <get_sector+0xba>
   }
   else if((address < 0x0805FFFF) && (address >= 0x08040000))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a16      	ldr	r2, [pc, #88]	@ (80013a4 <get_sector+0xec>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d206      	bcs.n	800135e <get_sector+0xa6>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <get_sector+0xe8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d902      	bls.n	800135e <get_sector+0xa6>
   {
	 sector = FLASH_SECTOR_6;
 8001358:	2306      	movs	r3, #6
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e009      	b.n	8001372 <get_sector+0xba>
   }
   else if((address < 0x0807FFFF) && (address >= 0x08060000))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a11      	ldr	r2, [pc, #68]	@ (80013a8 <get_sector+0xf0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d205      	bcs.n	8001372 <get_sector+0xba>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <get_sector+0xec>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <get_sector+0xba>
   {
	 sector = FLASH_SECTOR_7;
 800136e:	2307      	movs	r3, #7
 8001370:	60fb      	str	r3, [r7, #12]
   else
   {
     //Do something
   }

	return sector;
 8001372:	68fb      	ldr	r3, [r7, #12]

}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	08003ffe 	.word	0x08003ffe
 8001384:	08007ffe 	.word	0x08007ffe
 8001388:	08004000 	.word	0x08004000
 800138c:	0800bffe 	.word	0x0800bffe
 8001390:	08008000 	.word	0x08008000
 8001394:	0800ffff 	.word	0x0800ffff
 8001398:	0800c000 	.word	0x0800c000
 800139c:	0801ffff 	.word	0x0801ffff
 80013a0:	0803ffff 	.word	0x0803ffff
 80013a4:	0805ffff 	.word	0x0805ffff
 80013a8:	0807ffff 	.word	0x0807ffff

080013ac <flash_write_data_byte>:

	return 0;
}

uint32_t flash_write_data_byte(uint32_t start_sect_addr, uint8_t *data, uint16_t numberofbytes)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b08e      	sub	sp, #56	@ 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	4613      	mov	r3, r2
 80013b8:	80fb      	strh	r3, [r7, #6]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t sect_err;
    uint16_t write_count  = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /* Unlock flash */
    flash_unlock();
 80013be:	f7ff ff4d 	bl	800125c <flash_unlock>

    /* Get Number of sectors to erase starting from the first sector */
    uint32_t start_sector = get_sector(start_sect_addr);
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f7ff ff78 	bl	80012b8 <get_sector>
 80013c8:	6338      	str	r0, [r7, #48]	@ 0x30
    uint32_t end_sect_addr = start_sect_addr + numberofbytes;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t end_sector = get_sector(end_sect_addr);
 80013d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d4:	f7ff ff70 	bl	80012b8 <get_sector>
 80013d8:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* Initialize EraseInit Struct */
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80013de:	2302      	movs	r3, #2
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
    EraseInitStruct.Sector = start_sector;
 80013e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e4:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = (end_sector - start_sector) + 1;
 80013e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]

    if(flash_ex_erase(&EraseInitStruct, &sect_err) != DEV_OK)
 80013f0:	f107 0214 	add.w	r2, r7, #20
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fd0c 	bl	8000e18 <flash_ex_erase>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01f      	beq.n	8001446 <flash_write_data_byte+0x9a>
    {
        return flash_get_error();
 8001406:	f7ff ff4b 	bl	80012a0 <flash_get_error>
 800140a:	4603      	mov	r3, r0
 800140c:	e020      	b.n	8001450 <flash_write_data_byte+0xa4>
    }

    /* Program flash byte-by-byte */
    while(write_count < numberofbytes)
    {
        if(flash_program(FLASH_TYPEPROGRAM_BYTE, start_sect_addr, data[write_count]) == DEV_OK)
 800140e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2200      	movs	r2, #0
 800141a:	461c      	mov	r4, r3
 800141c:	4615      	mov	r5, r2
 800141e:	4622      	mov	r2, r4
 8001420:	462b      	mov	r3, r5
 8001422:	68f9      	ldr	r1, [r7, #12]
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff fdf3 	bl	8001010 <flash_program>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <flash_write_data_byte+0x92>
        {
            start_sect_addr += 1;  // Move to the next byte address
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
            write_count++;
 8001436:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001438:	3301      	adds	r3, #1
 800143a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800143c:	e003      	b.n	8001446 <flash_write_data_byte+0x9a>
        }
        else
        {
            return flash_get_error();
 800143e:	f7ff ff2f 	bl	80012a0 <flash_get_error>
 8001442:	4603      	mov	r3, r0
 8001444:	e004      	b.n	8001450 <flash_write_data_byte+0xa4>
    while(write_count < numberofbytes)
 8001446:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3df      	bcc.n	800140e <flash_write_data_byte+0x62>
        }
    }

    return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bdb0      	pop	{r4, r5, r7, pc}

08001458 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <fpu_enable+0x50>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a11      	ldr	r2, [pc, #68]	@ (80014a8 <fpu_enable+0x50>)
 8001464:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <fpu_enable+0x50>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001472:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <fpu_enable+0x50>)
 8001474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <fpu_enable+0x50>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <fpu_enable+0x50>)
 8001484:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <fpu_enable+0x50>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <fpu_enable+0x50>)
 8001494:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <httpc_init>:
uint16_t get_httpc_any_port(void);

/* Public & Private functions ------------------------------------------------*/

uint8_t httpc_init(uint8_t sock, uint8_t * ip, uint16_t port, uint8_t * sbuf, uint8_t * rbuf)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	4613      	mov	r3, r2
 80014bc:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = HTTPC_FALSE;
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]

	if(sock <= _WIZCHIP_SOCK_NUM_)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d81e      	bhi.n	8001506 <httpc_init+0x5a>
	{
		// Hardware socket number for HTTP client (0 ~ 7)
		httpsock = sock;
 80014c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <httpc_init+0x68>)
 80014ce:	701a      	strb	r2, [r3, #0]

		// Shared buffers: HTTP Send / Recevice
		httpc_send_buf = sbuf;
 80014d0:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <httpc_init+0x6c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
		httpc_recv_buf = rbuf;
 80014d6:	4a11      	ldr	r2, [pc, #68]	@ (800151c <httpc_init+0x70>)
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	6013      	str	r3, [r2, #0]

		// Destination IP address and Port number
		// (Destination = HTTP server)
		dest_ip[0] = ip[0];
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <httpc_init+0x74>)
 80014e2:	701a      	strb	r2, [r3, #0]
		dest_ip[1] = ip[1];
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	785a      	ldrb	r2, [r3, #1]
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <httpc_init+0x74>)
 80014ea:	705a      	strb	r2, [r3, #1]
		dest_ip[2] = ip[2];
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	789a      	ldrb	r2, [r3, #2]
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <httpc_init+0x74>)
 80014f2:	709a      	strb	r2, [r3, #2]
		dest_ip[3] = ip[3];
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	78da      	ldrb	r2, [r3, #3]
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <httpc_init+0x74>)
 80014fa:	70da      	strb	r2, [r3, #3]
		dest_port = port;
 80014fc:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <httpc_init+0x78>)
 80014fe:	89bb      	ldrh	r3, [r7, #12]
 8001500:	8013      	strh	r3, [r2, #0]

		ret = HTTPC_TRUE;
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8001506:	7dfb      	ldrb	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000148 	.word	0x20000148
 8001518:	20000140 	.word	0x20000140
 800151c:	20000144 	.word	0x20000144
 8001520:	2000014c 	.word	0x2000014c
 8001524:	20000150 	.word	0x20000150

08001528 <httpc_connection_handler>:


// return: true / false
uint8_t httpc_connection_handler()
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b087      	sub	sp, #28
 800152c:	af02      	add	r7, sp, #8
	uint8_t ret = HTTPC_FALSE;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]

	uint16_t source_port;

#ifdef _HTTPCLIENT_DEBUG_
	uint8_t destip[4] = {0, };
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	80fb      	strh	r3, [r7, #6]
#endif

	uint8_t state = getSn_SR(httpsock);
 800153a:	4b6d      	ldr	r3, [pc, #436]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 800153c:	f993 3000 	ldrsb.w	r3, [r3]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	3301      	adds	r3, #1
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800154a:	4618      	mov	r0, r3
 800154c:	f004 f886 	bl	800565c <WIZCHIP_READ>
 8001550:	4603      	mov	r3, r0
 8001552:	73bb      	strb	r3, [r7, #14]
	switch(state)
 8001554:	7bbb      	ldrb	r3, [r7, #14]
 8001556:	2b1c      	cmp	r3, #28
 8001558:	f200 80c2 	bhi.w	80016e0 <httpc_connection_handler+0x1b8>
 800155c:	a201      	add	r2, pc, #4	@ (adr r2, 8001564 <httpc_connection_handler+0x3c>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	0800168d 	.word	0x0800168d
 8001568:	080016e1 	.word	0x080016e1
 800156c:	080016e1 	.word	0x080016e1
 8001570:	080016e1 	.word	0x080016e1
 8001574:	080016e1 	.word	0x080016e1
 8001578:	080016e1 	.word	0x080016e1
 800157c:	080016e1 	.word	0x080016e1
 8001580:	080016e1 	.word	0x080016e1
 8001584:	080016e1 	.word	0x080016e1
 8001588:	080016e1 	.word	0x080016e1
 800158c:	080016e1 	.word	0x080016e1
 8001590:	080016e1 	.word	0x080016e1
 8001594:	080016e1 	.word	0x080016e1
 8001598:	080016e1 	.word	0x080016e1
 800159c:	080016e1 	.word	0x080016e1
 80015a0:	080016e1 	.word	0x080016e1
 80015a4:	080016e1 	.word	0x080016e1
 80015a8:	080016e1 	.word	0x080016e1
 80015ac:	080016e1 	.word	0x080016e1
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080016e1 	.word	0x080016e1
 80015b8:	080016e1 	.word	0x080016e1
 80015bc:	080016e1 	.word	0x080016e1
 80015c0:	080015df 	.word	0x080015df
 80015c4:	0800168d 	.word	0x0800168d
 80015c8:	080016e1 	.word	0x080016e1
 80015cc:	080016e1 	.word	0x080016e1
 80015d0:	080016e1 	.word	0x080016e1
 80015d4:	0800167d 	.word	0x0800167d
	{
		case SOCK_INIT:
			// state: connect
			ret = HTTPC_TRUE;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
			break;
 80015dc:	e083      	b.n	80016e6 <httpc_connection_handler+0x1be>

		case SOCK_ESTABLISHED:
			if(getSn_IR(httpsock) & Sn_IR_CON)
 80015de:	4b44      	ldr	r3, [pc, #272]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 80015e0:	f993 3000 	ldrsb.w	r3, [r3]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	3301      	adds	r3, #1
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 f834 	bl	800565c <WIZCHIP_READ>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d030      	beq.n	8001660 <httpc_connection_handler+0x138>
			{
#ifdef _HTTPCLIENT_DEBUG_
				// Serial debug message printout
				getsockopt(httpsock, SO_DESTIP, &destip);
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 8001600:	f993 3000 	ldrsb.w	r3, [r3]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	2104      	movs	r1, #4
 800160c:	4618      	mov	r0, r3
 800160e:	f003 ff11 	bl	8005434 <getsockopt>
				getsockopt(httpsock, SO_DESTPORT, &destport);
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 8001614:	f993 3000 	ldrsb.w	r3, [r3]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	1dba      	adds	r2, r7, #6
 800161c:	2105      	movs	r1, #5
 800161e:	4618      	mov	r0, r3
 8001620:	f003 ff08 	bl	8005434 <getsockopt>
				printf(" > HTTP CLIENT: CONNECTED TO - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
 8001624:	7a3b      	ldrb	r3, [r7, #8]
 8001626:	4619      	mov	r1, r3
 8001628:	7a7b      	ldrb	r3, [r7, #9]
 800162a:	4618      	mov	r0, r3
 800162c:	7abb      	ldrb	r3, [r7, #10]
 800162e:	461c      	mov	r4, r3
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	88fa      	ldrh	r2, [r7, #6]
 8001634:	9201      	str	r2, [sp, #4]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4623      	mov	r3, r4
 800163a:	4602      	mov	r2, r0
 800163c:	482d      	ldr	r0, [pc, #180]	@ (80016f4 <httpc_connection_handler+0x1cc>)
 800163e:	f005 f9ef 	bl	8006a20 <iprintf>
#endif
				httpc_isConnected = HTTPC_TRUE;
 8001642:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <httpc_connection_handler+0x1d0>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]

				setSn_IR(httpsock, Sn_IR_CON);
 8001648:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 800164a:	f993 3000 	ldrsb.w	r3, [r3]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	3301      	adds	r3, #1
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001658:	2101      	movs	r1, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f004 f84a 	bl	80056f4 <WIZCHIP_WRITE>
			}

			httpc_isReceived = getSn_RX_RSR(httpsock);
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 8001662:	f993 3000 	ldrsb.w	r3, [r3]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f004 f99a 	bl	80059a2 <getSn_RX_RSR>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <httpc_connection_handler+0x1d4>)
 8001674:	801a      	strh	r2, [r3, #0]
			ret = HTTPC_CONNECTED;
 8001676:	2302      	movs	r3, #2
 8001678:	73fb      	strb	r3, [r7, #15]
			break;
 800167a:	e034      	b.n	80016e6 <httpc_connection_handler+0x1be>

		case SOCK_CLOSE_WAIT:
			disconnect(httpsock);
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 800167e:	f993 3000 	ldrsb.w	r3, [r3]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f003 f993 	bl	80049b0 <disconnect>
			break;
 800168a:	e02c      	b.n	80016e6 <httpc_connection_handler+0x1be>

		case SOCK_FIN_WAIT:
		case SOCK_CLOSED:
			httpc_isSockOpen = HTTPC_FALSE;
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <httpc_connection_handler+0x1d8>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
			httpc_isConnected = HTTPC_FALSE;
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <httpc_connection_handler+0x1d0>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

			source_port = get_httpc_any_port();
 8001698:	f000 f97a 	bl	8001990 <get_httpc_any_port>
 800169c:	4603      	mov	r3, r0
 800169e:	81bb      	strh	r3, [r7, #12]
#ifdef _HTTPCLIENT_DEBUG_
			printf(" > HTTP CLIENT: source_port = %d\r\n", source_port);
 80016a0:	89bb      	ldrh	r3, [r7, #12]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4817      	ldr	r0, [pc, #92]	@ (8001704 <httpc_connection_handler+0x1dc>)
 80016a6:	f005 f9bb 	bl	8006a20 <iprintf>
#endif

			if(socket(httpsock, Sn_MR_TCP, source_port, Sn_MR_ND) == httpsock)
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 80016ac:	f993 3000 	ldrsb.w	r3, [r3]
 80016b0:	b2d8      	uxtb	r0, r3
 80016b2:	89ba      	ldrh	r2, [r7, #12]
 80016b4:	2320      	movs	r3, #32
 80016b6:	2101      	movs	r1, #1
 80016b8:	f002 ff1c 	bl	80044f4 <socket>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <httpc_connection_handler+0x1c8>)
 80016c2:	f993 3000 	ldrsb.w	r3, [r3]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d10c      	bne.n	80016e4 <httpc_connection_handler+0x1bc>
			{
				if(httpc_isSockOpen == HTTPC_FALSE)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <httpc_connection_handler+0x1d8>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d108      	bne.n	80016e4 <httpc_connection_handler+0x1bc>
				{
#ifdef _HTTPCLIENT_DEBUG_
					printf(" > HTTP CLIENT: SOCKOPEN\r\n");
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <httpc_connection_handler+0x1e0>)
 80016d4:	f005 fa14 	bl	8006b00 <puts>
#endif
					httpc_isSockOpen = HTTPC_TRUE;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <httpc_connection_handler+0x1d8>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
				}
			}


			break;
 80016de:	e001      	b.n	80016e4 <httpc_connection_handler+0x1bc>

		default:
			break;
 80016e0:	bf00      	nop
 80016e2:	e000      	b.n	80016e6 <httpc_connection_handler+0x1be>
			break;
 80016e4:	bf00      	nop
	}

	return ret;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000148 	.word	0x20000148
 80016f4:	08007d10 	.word	0x08007d10
 80016f8:	20000155 	.word	0x20000155
 80016fc:	20000156 	.word	0x20000156
 8001700:	20000154 	.word	0x20000154
 8001704:	08007d44 	.word	0x08007d44
 8001708:	08007d68 	.word	0x08007d68

0800170c <httpc_connect>:


// return: socket status
uint8_t httpc_connect()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]

	if(httpsock >= 0)
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <httpc_connect+0x48>)
 8001718:	f993 3000 	ldrsb.w	r3, [r3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db14      	blt.n	800174a <httpc_connect+0x3e>
	{
		if(httpc_isSockOpen == HTTPC_TRUE)
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <httpc_connect+0x4c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d110      	bne.n	800174a <httpc_connect+0x3e>
		{
			// TCP connect
			ret = connect(httpsock, dest_ip, dest_port);
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <httpc_connect+0x48>)
 800172a:	f993 3000 	ldrsb.w	r3, [r3]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <httpc_connect+0x50>)
 8001732:	8812      	ldrh	r2, [r2, #0]
 8001734:	490a      	ldr	r1, [pc, #40]	@ (8001760 <httpc_connect+0x54>)
 8001736:	4618      	mov	r0, r3
 8001738:	f003 f85e 	bl	80047f8 <connect>
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
			if(ret == SOCK_OK) ret = HTTPC_TRUE;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <httpc_connect+0x3e>
 8001746:	2301      	movs	r3, #1
 8001748:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 800174a:	79fb      	ldrb	r3, [r7, #7]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000148 	.word	0x20000148
 8001758:	20000154 	.word	0x20000154
 800175c:	20000150 	.word	0x20000150
 8001760:	2000014c 	.word	0x2000014c

08001764 <httpc_send>:
}


// return: sent data length
uint16_t httpc_send(HttpRequest * req, uint8_t * buf, uint8_t * body, uint16_t content_len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint16_t len;
	uint8_t http_header_generated = HTTPC_FAILED;
 8001772:	2300      	movs	r3, #0
 8001774:	74fb      	strb	r3, [r7, #19]

	if(httpc_isConnected == HTTPC_TRUE)
 8001776:	4b64      	ldr	r3, [pc, #400]	@ (8001908 <httpc_send+0x1a4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	f040 80bc 	bne.w	80018f8 <httpc_send+0x194>
	{
		do
		{
			memset(buf, 0x00, DATA_BUF_SIZE);
 8001780:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001784:	2100      	movs	r1, #0
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f005 faba 	bl	8006d00 <memset>

			/* HTTP request header */
			len = sprintf((char *)buf, "%s %s HTTP/1.1\r\n", req->method, req->uri);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	495d      	ldr	r1, [pc, #372]	@ (800190c <httpc_send+0x1a8>)
 8001796:	68b8      	ldr	r0, [r7, #8]
 8001798:	f005 f9ba 	bl	8006b10 <siprintf>
 800179c:	4603      	mov	r3, r0
 800179e:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Host: %s\r\n", req->host);
 80017a0:	8abb      	ldrh	r3, [r7, #20]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	18d0      	adds	r0, r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4958      	ldr	r1, [pc, #352]	@ (8001910 <httpc_send+0x1ac>)
 80017ae:	f005 f9af 	bl	8006b10 <siprintf>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	8abb      	ldrh	r3, [r7, #20]
 80017b8:	4413      	add	r3, r2
 80017ba:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Connection: %s\r\n", req->connection);
 80017bc:	8abb      	ldrh	r3, [r7, #20]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	18d0      	adds	r0, r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4952      	ldr	r1, [pc, #328]	@ (8001914 <httpc_send+0x1b0>)
 80017ca:	f005 f9a1 	bl	8006b10 <siprintf>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	8abb      	ldrh	r3, [r7, #20]
 80017d4:	4413      	add	r3, r2
 80017d6:	82bb      	strh	r3, [r7, #20]

			// HTTP content type: POST / PUT only
			if(content_len > 0)
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d032      	beq.n	8001844 <httpc_send+0xe0>
			{
				len += sprintf((char *)buf+len, "Content-Length: %d\r\n", content_len);
 80017de:	8abb      	ldrh	r3, [r7, #20]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	4413      	add	r3, r2
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	494c      	ldr	r1, [pc, #304]	@ (8001918 <httpc_send+0x1b4>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 f991 	bl	8006b10 <siprintf>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	8abb      	ldrh	r3, [r7, #20]
 80017f4:	4413      	add	r3, r2
 80017f6:	82bb      	strh	r3, [r7, #20]

				if(strcmp((char *)req->content_type, HTTP_CTYPE_MULTIPART_FORM) == 0)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4947      	ldr	r1, [pc, #284]	@ (800191c <httpc_send+0x1b8>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fcee 	bl	80001e0 <strcmp>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <httpc_send+0xc4>
				{
					// HTTP content type: multipart/form-data
					len += sprintf((char *)buf+len, "Content-Type: %s; boundary=%s\r\n", req->content_type, formDataBoundary);
 800180a:	8abb      	ldrh	r3, [r7, #20]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	18d0      	adds	r0, r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <httpc_send+0x1bc>)
 8001816:	4943      	ldr	r1, [pc, #268]	@ (8001924 <httpc_send+0x1c0>)
 8001818:	f005 f97a 	bl	8006b10 <siprintf>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	8abb      	ldrh	r3, [r7, #20]
 8001822:	4413      	add	r3, r2
 8001824:	82bb      	strh	r3, [r7, #20]
 8001826:	e00d      	b.n	8001844 <httpc_send+0xe0>
				}
				else
				{
					// HTTP content type: others
					len += sprintf((char *)buf+len, "Content-Type: %s\r\n", req->content_type); // HTTP content type: others
 8001828:	8abb      	ldrh	r3, [r7, #20]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	18d0      	adds	r0, r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	461a      	mov	r2, r3
 8001834:	493c      	ldr	r1, [pc, #240]	@ (8001928 <httpc_send+0x1c4>)
 8001836:	f005 f96b 	bl	8006b10 <siprintf>
 800183a:	4603      	mov	r3, r0
 800183c:	b29a      	uxth	r2, r3
 800183e:	8abb      	ldrh	r3, [r7, #20]
 8001840:	4413      	add	r3, r2
 8001842:	82bb      	strh	r3, [r7, #20]
				}
			}
			len += sprintf((char *)buf+len, "\r\n");
 8001844:	8abb      	ldrh	r3, [r7, #20]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4413      	add	r3, r2
 800184a:	4938      	ldr	r1, [pc, #224]	@ (800192c <httpc_send+0x1c8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f005 f95f 	bl	8006b10 <siprintf>
 8001852:	4603      	mov	r3, r0
 8001854:	b29a      	uxth	r2, r3
 8001856:	8abb      	ldrh	r3, [r7, #20]
 8001858:	4413      	add	r3, r2
 800185a:	82bb      	strh	r3, [r7, #20]

			// Avoiding buffer overflow
			if((len + content_len) > DATA_BUF_SIZE) {
 800185c:	8aba      	ldrh	r2, [r7, #20]
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	4413      	add	r3, r2
 8001862:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001866:	4293      	cmp	r3, r2
 8001868:	dd05      	ble.n	8001876 <httpc_send+0x112>
				content_len = DATA_BUF_SIZE - len; // HTTP request header re-generation (do-while)
 800186a:	8abb      	ldrh	r3, [r7, #20]
 800186c:	f5c3 53da 	rsb	r3, r3, #6976	@ 0x1b40
 8001870:	3318      	adds	r3, #24
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	e001      	b.n	800187a <httpc_send+0x116>
				//http_header_generated = FAILED;
			} else {
				http_header_generated = HTTPC_SUCCESS;
 8001876:	2301      	movs	r3, #1
 8001878:	74fb      	strb	r3, [r7, #19]
			}
		} while(http_header_generated != HTTPC_SUCCESS);
 800187a:	7cfb      	ldrb	r3, [r7, #19]
 800187c:	2b01      	cmp	r3, #1
 800187e:	f47f af7f 	bne.w	8001780 <httpc_send+0x1c>

		/* HTTP request body */
		for(i = 0; i < content_len; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	82fb      	strh	r3, [r7, #22]
 8001886:	e00d      	b.n	80018a4 <httpc_send+0x140>
		{
			buf[len++] = body[i];
 8001888:	8afb      	ldrh	r3, [r7, #22]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	441a      	add	r2, r3
 800188e:	8abb      	ldrh	r3, [r7, #20]
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	82b9      	strh	r1, [r7, #20]
 8001894:	4619      	mov	r1, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	440b      	add	r3, r1
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < content_len; i++)
 800189e:	8afb      	ldrh	r3, [r7, #22]
 80018a0:	3301      	adds	r3, #1
 80018a2:	82fb      	strh	r3, [r7, #22]
 80018a4:	8afa      	ldrh	r2, [r7, #22]
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3ed      	bcc.n	8001888 <httpc_send+0x124>
		}

//#ifdef _HTTPCLIENT_DEBUG_
		printf(" >> HTTP Request - Method: %s, URI: %s, Content-Length: %d\r\n", req->method, req->uri, content_len);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	481e      	ldr	r0, [pc, #120]	@ (8001930 <httpc_send+0x1cc>)
 80018b8:	f005 f8b2 	bl	8006a20 <iprintf>
		for(i = 0; i < len; i++) printf("%c", buf[i]);
 80018bc:	2300      	movs	r3, #0
 80018be:	82fb      	strh	r3, [r7, #22]
 80018c0:	e009      	b.n	80018d6 <httpc_send+0x172>
 80018c2:	8afb      	ldrh	r3, [r7, #22]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f005 f8ba 	bl	8006a44 <putchar>
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	3301      	adds	r3, #1
 80018d4:	82fb      	strh	r3, [r7, #22]
 80018d6:	8afa      	ldrh	r2, [r7, #22]
 80018d8:	8abb      	ldrh	r3, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3f1      	bcc.n	80018c2 <httpc_send+0x15e>
		printf("\r\n");
 80018de:	4815      	ldr	r0, [pc, #84]	@ (8001934 <httpc_send+0x1d0>)
 80018e0:	f005 f90e 	bl	8006b00 <puts>
//#endif
		send(httpsock, buf, len);
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <httpc_send+0x1d4>)
 80018e6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	8aba      	ldrh	r2, [r7, #20]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f8d3 	bl	8004a9c <send>
 80018f6:	e001      	b.n	80018fc <httpc_send+0x198>
	}
	else
	{
		len = HTTPC_FAILED;
 80018f8:	2300      	movs	r3, #0
 80018fa:	82bb      	strh	r3, [r7, #20]
	}

	return len;
 80018fc:	8abb      	ldrh	r3, [r7, #20]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000155 	.word	0x20000155
 800190c:	08007d9c 	.word	0x08007d9c
 8001910:	08007db0 	.word	0x08007db0
 8001914:	08007dbc 	.word	0x08007dbc
 8001918:	08007dd0 	.word	0x08007dd0
 800191c:	08007de8 	.word	0x08007de8
 8001920:	08007dfc 	.word	0x08007dfc
 8001924:	08007e24 	.word	0x08007e24
 8001928:	08007e44 	.word	0x08007e44
 800192c:	08007e5c 	.word	0x08007e5c
 8001930:	08007ec0 	.word	0x08007ec0
 8001934:	08007ebc 	.word	0x08007ebc
 8001938:	20000148 	.word	0x20000148

0800193c <httpc_recv>:


// return: received data length
uint16_t httpc_recv(uint8_t * buf, uint16_t len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
	uint16_t recvlen;

	if(httpc_isConnected == HTTPC_TRUE)
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <httpc_recv+0x4c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d113      	bne.n	8001978 <httpc_recv+0x3c>
	{
		if(len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001956:	4293      	cmp	r3, r2
 8001958:	d902      	bls.n	8001960 <httpc_recv+0x24>
 800195a:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800195e:	807b      	strh	r3, [r7, #2]
		recvlen = recv(httpsock, buf, len);
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <httpc_recv+0x50>)
 8001962:	f993 3000 	ldrsb.w	r3, [r3]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f003 f98d 	bl	8004c8c <recv>
 8001972:	4603      	mov	r3, r0
 8001974:	81fb      	strh	r3, [r7, #14]
 8001976:	e001      	b.n	800197c <httpc_recv+0x40>
	}
	else
	{
		recvlen = HTTPC_FAILED;
 8001978:	2300      	movs	r3, #0
 800197a:	81fb      	strh	r3, [r7, #14]
	}

	return recvlen;
 800197c:	89fb      	ldrh	r3, [r7, #14]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000155 	.word	0x20000155
 800198c:	20000148 	.word	0x20000148

08001990 <get_httpc_any_port>:
}


// return: source port number for tcp client
uint16_t get_httpc_any_port(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	if(httpc_any_port)
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <get_httpc_any_port+0x74>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d014      	beq.n	80019c6 <get_httpc_any_port+0x36>
	{
		if((httpc_any_port >= HTTP_CLIENT_PORT_MIN) && (httpc_any_port < HTTP_CLIENT_PORT_MAX)) {
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <get_httpc_any_port+0x74>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 80019a4:	d30c      	bcc.n	80019c0 <get_httpc_any_port+0x30>
 80019a6:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <get_httpc_any_port+0x74>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d006      	beq.n	80019c0 <get_httpc_any_port+0x30>
			httpc_any_port++;
 80019b2:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <get_httpc_any_port+0x74>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <get_httpc_any_port+0x74>)
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	e002      	b.n	80019c6 <get_httpc_any_port+0x36>
		} else {
			httpc_any_port = 0;
 80019c0:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <get_httpc_any_port+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	801a      	strh	r2, [r3, #0]
		}
	}

	if(httpc_any_port < HTTP_CLIENT_PORT_MIN)
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <get_httpc_any_port+0x74>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 80019ce:	d214      	bcs.n	80019fa <get_httpc_any_port+0x6a>
	{
		// todo: get random seed value
		httpc_any_port = (rand() % 10000) + 46000; // 46000 ~ 55999
 80019d0:	f004 fea2 	bl	8006718 <rand>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <get_httpc_any_port+0x78>)
 80019d8:	fb82 1203 	smull	r1, r2, r2, r3
 80019dc:	1311      	asrs	r1, r2, #12
 80019de:	17da      	asrs	r2, r3, #31
 80019e0:	1a8a      	subs	r2, r1, r2
 80019e2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80019e6:	fb01 f202 	mul.w	r2, r1, r2
 80019ea:	1a9a      	subs	r2, r3, r2
 80019ec:	b293      	uxth	r3, r2
 80019ee:	f5a3 4398 	sub.w	r3, r3, #19456	@ 0x4c00
 80019f2:	3b50      	subs	r3, #80	@ 0x50
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <get_httpc_any_port+0x74>)
 80019f8:	801a      	strh	r2, [r3, #0]
	}

	return httpc_any_port;
 80019fa:	4b02      	ldr	r3, [pc, #8]	@ (8001a04 <get_httpc_any_port+0x74>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000152 	.word	0x20000152
 8001a08:	68db8bad 	.word	0x68db8bad

08001a0c <check_cable_connection>:
char firmware_buffer[MAX_FIRMWARE_SIZE] = {0};

wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 8001a12:	480e      	ldr	r0, [pc, #56]	@ (8001a4c <check_cable_connection+0x40>)
 8001a14:	f005 f874 	bl	8006b00 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	200f      	movs	r0, #15
 8001a1e:	f004 f9e5 	bl	8005dec <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8001a28:	4809      	ldr	r0, [pc, #36]	@ (8001a50 <check_cable_connection+0x44>)
 8001a2a:	f005 f869 	bl	8006b00 <puts>
			delay(1000);
 8001a2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a32:	f000 fe8b 	bl	800274c <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ea      	beq.n	8001a12 <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8001a3c:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <check_cable_connection+0x48>)
 8001a3e:	f005 f85f 	bl	8006b00 <puts>

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	08007f44 	.word	0x08007f44
 8001a50:	08007f60 	.word	0x08007f60
 8001a54:	08007f78 	.word	0x08007f78

08001a58 <display_phy_config>:

void display_phy_config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	200b      	movs	r0, #11
 8001a64:	f004 f9c2 	bl	8005dec <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8001a68:	793b      	ldrb	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 8001a6e:	4816      	ldr	r0, [pc, #88]	@ (8001ac8 <display_phy_config+0x70>)
 8001a70:	f004 ffd6 	bl	8006a20 <iprintf>
 8001a74:	e002      	b.n	8001a7c <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8001a76:	4815      	ldr	r0, [pc, #84]	@ (8001acc <display_phy_config+0x74>)
 8001a78:	f004 ffd2 	bl	8006a20 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 8001a7c:	797b      	ldrb	r3, [r7, #5]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <display_phy_config+0x2e>
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <display_phy_config+0x78>)
 8001a84:	e000      	b.n	8001a88 <display_phy_config+0x30>
 8001a86:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <display_phy_config+0x7c>)
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4813      	ldr	r0, [pc, #76]	@ (8001ad8 <display_phy_config+0x80>)
 8001a8c:	f004 ffc8 	bl	8006a20 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <display_phy_config+0x42>
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <display_phy_config+0x84>)
 8001a98:	e000      	b.n	8001a9c <display_phy_config+0x44>
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <display_phy_config+0x88>)
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4811      	ldr	r0, [pc, #68]	@ (8001ae4 <display_phy_config+0x8c>)
 8001aa0:	f004 ffbe 	bl	8006a20 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8001aa4:	79bb      	ldrb	r3, [r7, #6]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <display_phy_config+0x56>
 8001aaa:	230a      	movs	r3, #10
 8001aac:	e000      	b.n	8001ab0 <display_phy_config+0x58>
 8001aae:	2364      	movs	r3, #100	@ 0x64
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <display_phy_config+0x90>)
 8001ab4:	f004 ffb4 	bl	8006a20 <iprintf>
  printf("\r\n...");
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <display_phy_config+0x94>)
 8001aba:	f004 ffb1 	bl	8006a20 <iprintf>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	08007f8c 	.word	0x08007f8c
 8001acc:	08007fb8 	.word	0x08007fb8
 8001ad0:	08007fe4 	.word	0x08007fe4
 8001ad4:	08007fec 	.word	0x08007fec
 8001ad8:	08007ff8 	.word	0x08007ff8
 8001adc:	08008018 	.word	0x08008018
 8001ae0:	08008024 	.word	0x08008024
 8001ae4:	08008030 	.word	0x08008030
 8001ae8:	0800804c 	.word	0x0800804c
 8001aec:	08008064 	.word	0x08008064

08001af0 <main>:

int main()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af02      	add	r7, sp, #8

	uint16_t len = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	80fb      	strh	r3, [r7, #6]

	/*Enable FPU*/
	fpu_enable();
 8001afa:	f7ff fcad 	bl	8001458 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 8001afe:	f000 fe67 	bl	80027d0 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8001b02:	f000 fe9b 	bl	800283c <debug_uart_init>



	/*Initialize LED*/
	led_init();
 8001b06:	f7fe fc1b 	bl	8000340 <led_init>

	/*Initialize Push button*/
	button_init();
 8001b0a:	f7fe fc37 	bl	800037c <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8001b0e:	f7fe fbcf 	bl	80002b0 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8001b12:	f7fe fbff 	bl	8000314 <start_conversion>

    wizchip_cs_pin_init();
 8001b16:	f000 ff3f 	bl	8002998 <wizchip_cs_pin_init>
    w5500_spi_init();
 8001b1a:	f000 ffbf 	bl	8002a9c <w5500_spi_init>
    w5500_init();
 8001b1e:	f000 ffe9 	bl	8002af4 <w5500_init>


   //----------------------------------Run updater
    if(get_btn_state())
 8001b22:	f7fe fc49 	bl	80003b8 <get_btn_state>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8096 	beq.w	8001c5a <main+0x16a>
    {

#ifdef DEBUG_OUTPUT
		printf("************************************************\n\r");
 8001b2e:	484f      	ldr	r0, [pc, #316]	@ (8001c6c <main+0x17c>)
 8001b30:	f004 ff76 	bl	8006a20 <iprintf>
		printf("............Initiating Firmware Update System.........\n\r");
 8001b34:	484e      	ldr	r0, [pc, #312]	@ (8001c70 <main+0x180>)
 8001b36:	f004 ff73 	bl	8006a20 <iprintf>

#endif

		check_cable_connection();
 8001b3a:	f7ff ff67 	bl	8001a0c <check_cable_connection>
		display_phy_config();
 8001b3e:	f7ff ff8b 	bl	8001a58 <display_phy_config>


		/*Run DNS*/
		if(process_dns())
 8001b42:	f000 f8c3 	bl	8001ccc <process_dns>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <main+0x62>
		{
			flag_process_dns_success =  FLG_SET;
 8001b4c:	4b49      	ldr	r3, [pc, #292]	@ (8001c74 <main+0x184>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
		}

		if(flag_process_dns_success)
 8001b52:	4b48      	ldr	r3, [pc, #288]	@ (8001c74 <main+0x184>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d013      	beq.n	8001b82 <main+0x92>
		{
			printf(" # DNS: %s => %d.%d.%d.%d\r\n", domain_name, domain_ip[0], domain_ip[1], domain_ip[2], domain_ip[3]);
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <main+0x188>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4b45      	ldr	r3, [pc, #276]	@ (8001c78 <main+0x188>)
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	4618      	mov	r0, r3
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <main+0x188>)
 8001b68:	789b      	ldrb	r3, [r3, #2]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b42      	ldr	r3, [pc, #264]	@ (8001c78 <main+0x188>)
 8001b6e:	78db      	ldrb	r3, [r3, #3]
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	9200      	str	r2, [sp, #0]
 8001b74:	4603      	mov	r3, r0
 8001b76:	460a      	mov	r2, r1
 8001b78:	4940      	ldr	r1, [pc, #256]	@ (8001c7c <main+0x18c>)
 8001b7a:	4841      	ldr	r0, [pc, #260]	@ (8001c80 <main+0x190>)
 8001b7c:	f004 ff50 	bl	8006a20 <iprintf>
 8001b80:	e002      	b.n	8001b88 <main+0x98>

		}
		else
		{
			printf("DNS Failed\r\n");
 8001b82:	4840      	ldr	r0, [pc, #256]	@ (8001c84 <main+0x194>)
 8001b84:	f004 ffbc 	bl	8006b00 <puts>
		}

		/*Initialize http client*/
		httpc_init(SOCK_HTTP_CLIENT,domain_ip,HTTP_PORT,g_send_buff, g_recv_buff);
 8001b88:	4b3f      	ldr	r3, [pc, #252]	@ (8001c88 <main+0x198>)
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c8c <main+0x19c>)
 8001b8e:	2250      	movs	r2, #80	@ 0x50
 8001b90:	4939      	ldr	r1, [pc, #228]	@ (8001c78 <main+0x188>)
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff fc8a 	bl	80014ac <httpc_init>

		while(1)
		{
			httpc_connection_handler();
 8001b98:	f7ff fcc6 	bl	8001528 <httpc_connection_handler>
			if(httpc_isSockOpen)
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c90 <main+0x1a0>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <main+0xb8>
			{
				httpc_connect();
 8001ba4:	f7ff fdb2 	bl	800170c <httpc_connect>
			}
			if(httpc_isConnected)
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8001c94 <main+0x1a4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f3      	beq.n	8001b98 <main+0xa8>
			{
			  if(flag_http_request_sent == FLG_RESET)
 8001bb0:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <main+0x1a8>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <main+0xec>
			  {

				  /*Get firmware update text file*/
				  request.method = (uint8_t *)HTTP_GET;
 8001bb8:	4b38      	ldr	r3, [pc, #224]	@ (8001c9c <main+0x1ac>)
 8001bba:	4a39      	ldr	r2, [pc, #228]	@ (8001ca0 <main+0x1b0>)
 8001bbc:	601a      	str	r2, [r3, #0]
				  request.uri = (uint8_t *)HTTP_GET_BIN_REQUEST;
 8001bbe:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <main+0x1ac>)
 8001bc0:	4a38      	ldr	r2, [pc, #224]	@ (8001ca4 <main+0x1b4>)
 8001bc2:	605a      	str	r2, [r3, #4]
				  request.host = (uint8_t *)domain_name;
 8001bc4:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <main+0x1ac>)
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <main+0x18c>)
 8001bc8:	609a      	str	r2, [r3, #8]

				  httpc_send(&request,g_recv_buff,g_send_buff,0);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8001c8c <main+0x19c>)
 8001bce:	492e      	ldr	r1, [pc, #184]	@ (8001c88 <main+0x198>)
 8001bd0:	4832      	ldr	r0, [pc, #200]	@ (8001c9c <main+0x1ac>)
 8001bd2:	f7ff fdc7 	bl	8001764 <httpc_send>

				  flag_http_request_sent = FLG_SET;
 8001bd6:	4b30      	ldr	r3, [pc, #192]	@ (8001c98 <main+0x1a8>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
			  }

			  /*Get received data length*/
			   httpc_isReceived =  getSn_RX_RSR(SOCK_HTTP_CLIENT);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f003 fee0 	bl	80059a2 <getSn_RX_RSR>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <main+0x1b8>)
 8001be8:	801a      	strh	r2, [r3, #0]

			   if(httpc_isReceived > 0)
 8001bea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <main+0x1b8>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0d2      	beq.n	8001b98 <main+0xa8>
			   {


				   len =  httpc_recv(g_recv_buff, httpc_isReceived);
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <main+0x1b8>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4823      	ldr	r0, [pc, #140]	@ (8001c88 <main+0x198>)
 8001bfa:	f7ff fe9f 	bl	800193c <httpc_recv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
				   firmware_size =  extract_content_length((char *)g_recv_buff);
 8001c02:	4821      	ldr	r0, [pc, #132]	@ (8001c88 <main+0x198>)
 8001c04:	f7ff f860 	bl	8000cc8 <extract_content_length>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <main+0x1bc>)
 8001c0e:	601a      	str	r2, [r3, #0]
#ifdef DEBUG_OUTPUT
						   printf("STAGE: Getting the firmware....\r\n");
 8001c10:	4827      	ldr	r0, [pc, #156]	@ (8001cb0 <main+0x1c0>)
 8001c12:	f004 ff75 	bl	8006b00 <puts>

#endif

				   if(len > firmware_size)
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <main+0x1bc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d9bb      	bls.n	8001b98 <main+0xa8>
				   {

#ifdef DEBUG_OUTPUT
								printf("STAGE: Parsing the firmware....\r\n");
 8001c20:	4824      	ldr	r0, [pc, #144]	@ (8001cb4 <main+0x1c4>)
 8001c22:	f004 ff6d 	bl	8006b00 <puts>

#endif
					   get_firmware_binary((char *)g_recv_buff, "stream\r\n\r\n", (char *)firmware_buffer,firmware_size);
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <main+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <main+0x1c8>)
 8001c2c:	4923      	ldr	r1, [pc, #140]	@ (8001cbc <main+0x1cc>)
 8001c2e:	4816      	ldr	r0, [pc, #88]	@ (8001c88 <main+0x198>)
 8001c30:	f7ff f8b0 	bl	8000d94 <get_firmware_binary>

#ifdef DEBUG_OUTPUT
								printf("STAGE: Writing the firmware to memory....\r\n");
 8001c34:	4822      	ldr	r0, [pc, #136]	@ (8001cc0 <main+0x1d0>)
 8001c36:	f004 ff63 	bl	8006b00 <puts>

#endif
					   /*Write the firmware update to memory*/
					   firmware_update();
 8001c3a:	f7ff f8db 	bl	8000df4 <firmware_update>
#ifdef DEBUG_OUTPUT
		printf("STAGE: Jumping to new firmware....\r\n");
 8001c3e:	4821      	ldr	r0, [pc, #132]	@ (8001cc4 <main+0x1d4>)
 8001c40:	f004 ff5e 	bl	8006b00 <puts>
		printf("************************************************\n\r");
 8001c44:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <main+0x17c>)
 8001c46:	f004 feeb 	bl	8006a20 <iprintf>

		delay(2000);
 8001c4a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c4e:	f000 fd7d 	bl	800274c <delay>

#endif
					   /*Jump to new memory location to run firmware*/
					   jump_to_app(NEW_FIRMWARE_START_ADDRESS);
 8001c52:	481d      	ldr	r0, [pc, #116]	@ (8001cc8 <main+0x1d8>)
 8001c54:	f7ff f802 	bl	8000c5c <jump_to_app>
			httpc_connection_handler();
 8001c58:	e79e      	b.n	8001b98 <main+0xa8>
			}
		}
    }//-------- End of Run Updater------------------------------------
    else
    {
    	jump_to_app(NEW_FIRMWARE_START_ADDRESS);
 8001c5a:	481b      	ldr	r0, [pc, #108]	@ (8001cc8 <main+0x1d8>)
 8001c5c:	f7fe fffe 	bl	8000c5c <jump_to_app>
 8001c60:	2300      	movs	r3, #0
    }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	0800806c 	.word	0x0800806c
 8001c70:	080080a0 	.word	0x080080a0
 8001c74:	20000158 	.word	0x20000158
 8001c78:	2000015c 	.word	0x2000015c
 8001c7c:	2000001c 	.word	0x2000001c
 8001c80:	080080dc 	.word	0x080080dc
 8001c84:	080080f8 	.word	0x080080f8
 8001c88:	20003810 	.word	0x20003810
 8001c8c:	20001cb8 	.word	0x20001cb8
 8001c90:	20000154 	.word	0x20000154
 8001c94:	20000155 	.word	0x20000155
 8001c98:	20000159 	.word	0x20000159
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	08008104 	.word	0x08008104
 8001ca4:	08008108 	.word	0x08008108
 8001ca8:	20000156 	.word	0x20000156
 8001cac:	20005368 	.word	0x20005368
 8001cb0:	08008128 	.word	0x08008128
 8001cb4:	0800814c 	.word	0x0800814c
 8001cb8:	2000536c 	.word	0x2000536c
 8001cbc:	08008170 	.word	0x08008170
 8001cc0:	0800817c 	.word	0x0800817c
 8001cc4:	080081a8 	.word	0x080081a8
 8001cc8:	0800c000 	.word	0x0800c000

08001ccc <process_dns>:

int8_t process_dns(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	71bb      	strb	r3, [r7, #6]
	uint8_t dns_retry = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	71fb      	strb	r3, [r7, #7]

	DNS_init(SOCK_DNS, data_buff);
 8001cda:	4913      	ldr	r1, [pc, #76]	@ (8001d28 <process_dns+0x5c>)
 8001cdc:	2004      	movs	r0, #4
 8001cde:	f7fe ff1b 	bl	8000b18 <DNS_init>

	while(1)
	{
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <process_dns+0x60>)
 8001ce4:	4912      	ldr	r1, [pc, #72]	@ (8001d30 <process_dns+0x64>)
 8001ce6:	4813      	ldr	r0, [pc, #76]	@ (8001d34 <process_dns+0x68>)
 8001ce8:	f7fe ff32 	bl	8000b50 <DNS_run>
 8001cec:	4603      	mov	r3, r0
 8001cee:	71bb      	strb	r3, [r7, #6]
 8001cf0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d00e      	beq.n	8001d16 <process_dns+0x4a>
		{
			break;
		}
		else
		{
			dns_retry++;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	71fb      	strb	r3, [r7, #7]
			if(dns_retry <= 2)
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d804      	bhi.n	8001d0e <process_dns+0x42>
			{
				printf("DNS timeout occurred retry [%d]\n\r",dns_retry);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4619      	mov	r1, r3
 8001d08:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <process_dns+0x6c>)
 8001d0a:	f004 fe89 	bl	8006a20 <iprintf>
			}
			if(dns_retry > 2)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d802      	bhi.n	8001d1a <process_dns+0x4e>
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 8001d14:	e7e5      	b.n	8001ce2 <process_dns+0x16>
			break;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <process_dns+0x50>
			{
				 break;
 8001d1a:	bf00      	nop
			}
		}
	}

	return ret;
 8001d1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000160 	.word	0x20000160
 8001d2c:	2000015c 	.word	0x2000015c
 8001d30:	2000001c 	.word	0x2000001c
 8001d34:	20000018 	.word	0x20000018
 8001d38:	080081cc 	.word	0x080081cc

08001d3c <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8001d40:	4b3e      	ldr	r3, [pc, #248]	@ (8001e3c <spi1_gpio_init+0x100>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	4a3d      	ldr	r2, [pc, #244]	@ (8001e3c <spi1_gpio_init+0x100>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a3b      	ldr	r2, [pc, #236]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d56:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8001d58:	4b39      	ldr	r3, [pc, #228]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a38      	ldr	r2, [pc, #224]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d62:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8001d64:	4b36      	ldr	r3, [pc, #216]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a35      	ldr	r2, [pc, #212]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d6e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8001d70:	4b33      	ldr	r3, [pc, #204]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a32      	ldr	r2, [pc, #200]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d7a:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2f      	ldr	r2, [pc, #188]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d92:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a29      	ldr	r2, [pc, #164]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d9e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8001da0:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a26      	ldr	r2, [pc, #152]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001da6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001daa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8001dac:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001db6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8001db8:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dbe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001dc2:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dd6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a17      	ldr	r2, [pc, #92]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001de2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001de6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a14      	ldr	r2, [pc, #80]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dee:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001df2:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001e06:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001e0a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e16:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <spi1_gpio_init+0x104>)
 8001e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e22:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <spi1_gpio_init+0x100>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <spi1_gpio_init+0x100>)
 8001e2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e2e:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <spi_init+0x12>
	{
		return DEV_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e05a      	b.n	8001f0c <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <spi_init+0x26>
	{
		spi1_gpio_init();
 8001e66:	f7ff ff69 	bl	8001d3c <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e80:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ece:	ea42 0103 	orr.w	r1, r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	0c1b      	lsrs	r3, r3, #16
 8001ee8:	f003 0104 	and.w	r1, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	f003 0210 	and.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 8001f28:	f000 fc2e 	bl	8002788 <get_tick>
 8001f2c:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <spi_transmit+0x26>
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e106      	b.n	800214c <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2203      	movs	r2, #3
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	88fa      	ldrh	r2, [r7, #6]
 8001f56:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f78:	d10f      	bne.n	8001f9a <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f88:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f98:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa4:	2b40      	cmp	r3, #64	@ 0x40
 8001fa6:	d007      	beq.n	8001fb8 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fb6:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc2:	2b40      	cmp	r3, #64	@ 0x40
 8001fc4:	d007      	beq.n	8001fd6 <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fd4:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fde:	d14e      	bne.n	800207e <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <spi_transmit+0xda>
 8001fe8:	8bfb      	ldrh	r3, [r7, #30]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d141      	bne.n	8002072 <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	1c9a      	adds	r2, r3, #2
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 8002012:	e02e      	b.n	8002072 <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d012      	beq.n	8002048 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	881a      	ldrh	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	1c9a      	adds	r2, r3, #2
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002046:	e014      	b.n	8002072 <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002048:	f000 fb9e 	bl	8002788 <get_tick>
 800204c:	4602      	mov	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d803      	bhi.n	8002060 <spi_transmit+0x14c>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d102      	bne.n	8002066 <spi_transmit+0x152>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e06c      	b.n	800214c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1cb      	bne.n	8002014 <spi_transmit+0x100>
 800207c:	e051      	b.n	8002122 <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <spi_transmit+0x178>
 8002086:	8bfb      	ldrh	r3, [r7, #30]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d145      	bne.n	8002118 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	7812      	ldrb	r2, [r2, #0]
 8002098:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 80020b2:	e031      	b.n	8002118 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d013      	beq.n	80020ea <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	865a      	strh	r2, [r3, #50]	@ 0x32
 80020e8:	e016      	b.n	8002118 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80020ea:	f000 fb4d 	bl	8002788 <get_tick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d803      	bhi.n	8002102 <spi_transmit+0x1ee>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d102      	bne.n	8002108 <spi_transmit+0x1f4>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	e019      	b.n	800214c <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1c8      	bne.n	80020b4 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <spi_transmit+0x236>
	{
		return DEV_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 800214a:	2300      	movs	r3, #0

	}

}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d007      	beq.n	8002182 <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	e0d1      	b.n	8002326 <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800218a:	d112      	bne.n	80021b2 <spi_receive+0x5e>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10e      	bne.n	80021b2 <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2204      	movs	r2, #4
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f8c0 	bl	800232e <spi_transmit_receive>
 80021ae:	4603      	mov	r3, r0
 80021b0:	e0b9      	b.n	8002326 <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 80021b2:	f000 fae9 	bl	8002788 <get_tick>
 80021b6:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <spi_receive+0x70>
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	e0a8      	b.n	8002326 <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2204      	movs	r2, #4
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	88fa      	ldrh	r2, [r7, #6]
 80021f2:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002210:	2b40      	cmp	r3, #64	@ 0x40
 8002212:	d007      	beq.n	8002224 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002222:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d16c      	bne.n	8002306 <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 800222c:	e033      	b.n	8002296 <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d015      	beq.n	8002268 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f103 020c 	add.w	r2, r3, #12
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8002266:	e016      	b.n	8002296 <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8002268:	f000 fa8e 	bl	8002788 <get_tick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d803      	bhi.n	8002280 <spi_receive+0x12c>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227e:	d102      	bne.n	8002286 <spi_receive+0x132>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d107      	bne.n	8002296 <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	e047      	b.n	8002326 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1c6      	bne.n	800222e <spi_receive+0xda>
 80022a0:	e036      	b.n	8002310 <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ba:	b292      	uxth	r2, r2
 80022bc:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c2:	1c9a      	adds	r2, r3, #2
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80022d6:	e016      	b.n	8002306 <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80022d8:	f000 fa56 	bl	8002788 <get_tick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d803      	bhi.n	80022f0 <spi_receive+0x19c>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d102      	bne.n	80022f6 <spi_receive+0x1a2>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	e00f      	b.n	8002326 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1c8      	bne.n	80022a2 <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8002324:	7dfb      	ldrb	r3, [r7, #23]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	@ 0x28
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8002346:	f000 fa1f 	bl	8002788 <get_tick>
 800234a:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002352:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b40      	cmp	r3, #64	@ 0x40
 8002394:	d007      	beq.n	80023a6 <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023a4:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023ae:	d17e      	bne.n	80024ae <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <spi_transmit_receive+0x90>
 80023b8:	8a7b      	ldrh	r3, [r7, #18]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d16c      	bne.n	8002498 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	1c9a      	adds	r2, r3, #2
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023e2:	e059      	b.n	8002498 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01b      	beq.n	800242a <spi_transmit_receive+0xfc>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <spi_transmit_receive+0xfc>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d113      	bne.n	800242a <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	1c9a      	adds	r2, r3, #2
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d019      	beq.n	800246c <spi_transmit_receive+0x13e>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d014      	beq.n	800246c <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244c:	b292      	uxth	r2, r2
 800244e:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002454:	1c9a      	adds	r2, r3, #2
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8002468:	2301      	movs	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 800246c:	f000 f98c 	bl	8002788 <get_tick>
 8002470:	4602      	mov	r2, r0
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002478:	429a      	cmp	r2, r3
 800247a:	d80d      	bhi.n	8002498 <spi_transmit_receive+0x16a>
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d009      	beq.n	8002498 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8002492:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002496:	e08f      	b.n	80025b8 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1a0      	bne.n	80023e4 <spi_transmit_receive+0xb6>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d19b      	bne.n	80023e4 <spi_transmit_receive+0xb6>
 80024ac:	e082      	b.n	80025b4 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <spi_transmit_receive+0x18e>
 80024b6:	8a7b      	ldrh	r3, [r7, #18]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d171      	bne.n	80025a0 <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e2:	e05d      	b.n	80025a0 <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01c      	beq.n	800252c <spi_transmit_receive+0x1fe>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d017      	beq.n	800252c <spi_transmit_receive+0x1fe>
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d114      	bne.n	800252c <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	330c      	adds	r3, #12
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d019      	beq.n	800256e <spi_transmit_receive+0x240>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d014      	beq.n	800256e <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 800256a:	2301      	movs	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 800256e:	f000 f90b 	bl	8002788 <get_tick>
 8002572:	4602      	mov	r2, r0
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800257a:	429a      	cmp	r2, r3
 800257c:	d803      	bhi.n	8002586 <spi_transmit_receive+0x258>
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d102      	bne.n	800258c <spi_transmit_receive+0x25e>
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 800259a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800259e:	e00b      	b.n	80025b8 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d19c      	bne.n	80024e4 <spi_transmit_receive+0x1b6>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d197      	bne.n	80024e4 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 80025b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3728      	adds	r7, #40	@ 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
	return 1;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_kill>:

int _kill(int pid, int sig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025da:	f004 fc25 	bl	8006e28 <__errno>
 80025de:	4603      	mov	r3, r0
 80025e0:	2216      	movs	r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
	return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_exit>:

void _exit (int status)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ffe7 	bl	80025d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002602:	bf00      	nop
 8002604:	e7fd      	b.n	8002602 <_exit+0x12>

08002606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e00a      	b.n	800262e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002618:	f3af 8000 	nop.w
 800261c:	4601      	mov	r1, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	60ba      	str	r2, [r7, #8]
 8002624:	b2ca      	uxtb	r2, r1
 8002626:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	dbf0      	blt.n	8002618 <_read+0x12>
	}

return len;
 8002636:	687b      	ldr	r3, [r7, #4]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e009      	b.n	8002666 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	60ba      	str	r2, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f8e2 	bl	8002824 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	dbf1      	blt.n	8002652 <_write+0x12>
	}
	return len;
 800266e:	687b      	ldr	r3, [r7, #4]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_close>:

int _close(int file)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026a0:	605a      	str	r2, [r3, #4]
	return 0;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_isatty>:

int _isatty(int file)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	return 1;
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
	return 0;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e8:	4a14      	ldr	r2, [pc, #80]	@ (800273c <_sbrk+0x5c>)
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <_sbrk+0x60>)
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f4:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <_sbrk+0x64>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	@ (8002748 <_sbrk+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002702:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <_sbrk+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d207      	bcs.n	8002720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002710:	f004 fb8a 	bl	8006e28 <__errno>
 8002714:	4603      	mov	r3, r0
 8002716:	220c      	movs	r2, #12
 8002718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	e009      	b.n	8002734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002726:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <_sbrk+0x64>)
 8002730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20020000 	.word	0x20020000
 8002740:	00000400 	.word	0x00000400
 8002744:	20006ec4 	.word	0x20006ec4
 8002748:	20007568 	.word	0x20007568

0800274c <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8002754:	f000 f818 	bl	8002788 <get_tick>
 8002758:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d002      	beq.n	800276c <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3301      	adds	r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 800276c:	bf00      	nop
 800276e:	f000 f80b 	bl	8002788 <get_tick>
 8002772:	4602      	mov	r2, r0
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	429a      	cmp	r2, r3
 800277c:	d8f7      	bhi.n	800276e <delay+0x22>

}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <get_tick>:

uint32_t get_tick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800278c:	b672      	cpsid	i
}
 800278e:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <get_tick+0x24>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a06      	ldr	r2, [pc, #24]	@ (80027b0 <get_tick+0x28>)
 8002796:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002798:	b662      	cpsie	i
}
 800279a:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <get_tick+0x28>)
 800279e:	681b      	ldr	r3, [r3, #0]

}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20006ec8 	.word	0x20006ec8
 80027b0:	20006ecc 	.word	0x20006ecc

080027b4 <tick_increment>:
static void tick_increment(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <tick_increment+0x18>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	4a03      	ldr	r2, [pc, #12]	@ (80027cc <tick_increment+0x18>)
 80027c0:	6013      	str	r3, [r2, #0]
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	20006ec8 	.word	0x20006ec8

080027d0 <timebase_init>:
void timebase_init(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 80027d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <timebase_init+0x44>)
 80027da:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80027de:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <timebase_init+0x44>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <timebase_init+0x44>)
 80027e8:	2204      	movs	r2, #4
 80027ea:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <timebase_init+0x44>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a08      	ldr	r2, [pc, #32]	@ (8002814 <timebase_init+0x44>)
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <timebase_init+0x44>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <timebase_init+0x44>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002804:	b662      	cpsie	i
}
 8002806:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	tick_increment();
 800281c:	f7ff ffca 	bl	80027b4 <tick_increment>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f84f 	bl	80028d0 <uart_write>
	return ch;
 8002832:	687b      	ldr	r3, [r7, #4]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <debug_uart_init>:

void debug_uart_init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8002840:	4b1f      	ldr	r3, [pc, #124]	@ (80028c0 <debug_uart_init+0x84>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <debug_uart_init+0x84>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <debug_uart_init+0x88>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <debug_uart_init+0x88>)
 8002852:	f023 0310 	bic.w	r3, r3, #16
 8002856:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <debug_uart_init+0x88>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <debug_uart_init+0x88>)
 800285e:	f043 0320 	orr.w	r3, r3, #32
 8002862:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <debug_uart_init+0x88>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a16      	ldr	r2, [pc, #88]	@ (80028c4 <debug_uart_init+0x88>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <debug_uart_init+0x88>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <debug_uart_init+0x88>)
 8002876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800287a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <debug_uart_init+0x88>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <debug_uart_init+0x88>)
 8002882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002886:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <debug_uart_init+0x88>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <debug_uart_init+0x88>)
 800288e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002892:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8002894:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <debug_uart_init+0x84>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <debug_uart_init+0x84>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 80028a0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80028a4:	4808      	ldr	r0, [pc, #32]	@ (80028c8 <debug_uart_init+0x8c>)
 80028a6:	f000 f83f 	bl	8002928 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <debug_uart_init+0x90>)
 80028ac:	2208      	movs	r2, #8
 80028ae:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <debug_uart_init+0x90>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <debug_uart_init+0x90>)
 80028b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	40004400 	.word	0x40004400

080028d0 <uart_write>:



static void uart_write(int ch)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80028d8:	bf00      	nop
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <uart_write+0x2c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f9      	beq.n	80028da <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <uart_write+0x2c>)
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	6053      	str	r3, [r2, #4]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40004400 	.word	0x40004400

08002900 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	085a      	lsrs	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	441a      	add	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	b29b      	uxth	r3, r3
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8002932:	6839      	ldr	r1, [r7, #0]
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ffe3 	bl	8002900 <compute_uart_bd>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	4b03      	ldr	r3, [pc, #12]	@ (800294c <uart_set_baudrate+0x24>)
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40004400 	.word	0x40004400

08002950 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <ip_assigned_callback+0x14>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	200073c0 	.word	0x200073c0

08002968 <ip_update_callback>:

void ip_update_callback(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 800296c:	4b03      	ldr	r3, [pc, #12]	@ (800297c <ip_update_callback+0x14>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	200073c0 	.word	0x200073c0

08002980 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <ip_conflict_callback+0x14>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	200073c0 	.word	0x200073c0

08002998 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <wizchip_cs_pin_init+0x34>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <wizchip_cs_pin_init+0x34>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <wizchip_cs_pin_init+0x38>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <wizchip_cs_pin_init+0x38>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <wizchip_cs_pin_init+0x38>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <wizchip_cs_pin_init+0x38>)
 80029ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029be:	6013      	str	r3, [r2, #0]

}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000

080029d4 <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <wizchip_pin_cs_select+0x1c>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	4a04      	ldr	r2, [pc, #16]	@ (80029f0 <wizchip_pin_cs_select+0x1c>)
 80029de:	f023 0310 	bic.w	r3, r3, #16
 80029e2:	6153      	str	r3, [r2, #20]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40020000 	.word	0x40020000

080029f4 <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <wizchip_pin_cs_deselect+0x1c>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <wizchip_pin_cs_deselect+0x1c>)
 80029fe:	f043 0310 	orr.w	r3, r3, #16
 8002a02:	6153      	str	r3, [r2, #20]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40020000 	.word	0x40020000

08002a14 <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 8002a20:	887a      	ldrh	r2, [r7, #2]
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4803      	ldr	r0, [pc, #12]	@ (8002a38 <wizchip_read_burst+0x24>)
 8002a2a:	f7ff fb93 	bl	8002154 <spi_receive>

}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20006ed0 	.word	0x20006ed0

08002a3c <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 8002a42:	1dfb      	adds	r3, r7, #7
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ffe4 	bl	8002a14 <wizchip_read_burst>
	return byte;
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8002a64:	887a      	ldrh	r2, [r7, #2]
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <wizchip_write_burst+0x24>)
 8002a6e:	f7ff fa51 	bl	8001f14 <spi_transmit>

}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20006ed0 	.word	0x20006ed0

08002a80 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 8002a8a:	1dfb      	adds	r3, r7, #7
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ffe2 	bl	8002a58 <wizchip_write_burst>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <w5500_spi_init+0x50>)
 8002aa2:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <w5500_spi_init+0x54>)
 8002aa4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <w5500_spi_init+0x50>)
 8002aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aac:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <w5500_spi_init+0x50>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <w5500_spi_init+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <w5500_spi_init+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <w5500_spi_init+0x50>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <w5500_spi_init+0x50>)
 8002ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002acc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ace:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <w5500_spi_init+0x50>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <w5500_spi_init+0x50>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ada:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <w5500_spi_init+0x50>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8002ae0:	4802      	ldr	r0, [pc, #8]	@ (8002aec <w5500_spi_init+0x50>)
 8002ae2:	f7ff f9af 	bl	8001e44 <spi_init>

}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20006ed0 	.word	0x20006ed0
 8002af0:	40013000 	.word	0x40013000

08002af4 <w5500_init>:


 void w5500_init(void)
 {
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af6:	b093      	sub	sp, #76	@ 0x4c
 8002af8:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 8002afa:	4a4f      	ldr	r2, [pc, #316]	@ (8002c38 <w5500_init+0x144>)
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b04:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8002b08:	f107 0214 	add.w	r2, r7, #20
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fa96 	bl	8006044 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 8002b18:	4948      	ldr	r1, [pc, #288]	@ (8002c3c <w5500_init+0x148>)
 8002b1a:	4849      	ldr	r0, [pc, #292]	@ (8002c40 <w5500_init+0x14c>)
 8002b1c:	f003 f8e8 	bl	8005cf0 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 8002b20:	4948      	ldr	r1, [pc, #288]	@ (8002c44 <w5500_init+0x150>)
 8002b22:	4849      	ldr	r0, [pc, #292]	@ (8002c48 <w5500_init+0x154>)
 8002b24:	f003 f90a 	bl	8005d3c <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 8002b28:	4948      	ldr	r1, [pc, #288]	@ (8002c4c <w5500_init+0x158>)
 8002b2a:	4849      	ldr	r0, [pc, #292]	@ (8002c50 <w5500_init+0x15c>)
 8002b2c:	f003 f932 	bl	8005d94 <reg_wizchip_spiburst_cbfunc>

	 /*Update RX and TX buffers of socket1 to 8KB */
	 setSn_RXBUF_SIZE(1,8);
 8002b30:	2108      	movs	r1, #8
 8002b32:	f641 6028 	movw	r0, #7720	@ 0x1e28
 8002b36:	f002 fddd 	bl	80056f4 <WIZCHIP_WRITE>
	 setSn_TXBUF_SIZE(1,8);
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	f641 7028 	movw	r0, #7976	@ 0x1f28
 8002b40:	f002 fdd8 	bl	80056f4 <WIZCHIP_WRITE>


	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 8002b44:	2206      	movs	r2, #6
 8002b46:	4943      	ldr	r1, [pc, #268]	@ (8002c54 <w5500_init+0x160>)
 8002b48:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002b4c:	f002 fe80 	bl	8005850 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 8002b50:	4941      	ldr	r1, [pc, #260]	@ (8002c58 <w5500_init+0x164>)
 8002b52:	2000      	movs	r0, #0
 8002b54:	f001 fbaa 	bl	80042ac <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 8002b58:	4a40      	ldr	r2, [pc, #256]	@ (8002c5c <w5500_init+0x168>)
 8002b5a:	4941      	ldr	r1, [pc, #260]	@ (8002c60 <w5500_init+0x16c>)
 8002b5c:	4841      	ldr	r0, [pc, #260]	@ (8002c64 <w5500_init+0x170>)
 8002b5e:	f000 f903 	bl	8002d68 <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 8002b62:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002b66:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002b68:	e004      	b.n	8002b74 <w5500_init+0x80>
	 {
		 DHCP_run();
 8002b6a:	f001 f9e7 	bl	8003f3c <DHCP_run>
		 timeout_counter--;
 8002b6e:	8bfb      	ldrh	r3, [r7, #30]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002b74:	4b3c      	ldr	r3, [pc, #240]	@ (8002c68 <w5500_init+0x174>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f083 0301 	eor.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <w5500_init+0x96>
 8002b84:	8bfb      	ldrh	r3, [r7, #30]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ef      	bne.n	8002b6a <w5500_init+0x76>
	 }

	 if(!is_ip_assigned)
 8002b8a:	4b37      	ldr	r3, [pc, #220]	@ (8002c68 <w5500_init+0x174>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f083 0301 	eor.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d149      	bne.n	8002c2e <w5500_init+0x13a>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8002b9a:	4834      	ldr	r0, [pc, #208]	@ (8002c6c <w5500_init+0x178>)
 8002b9c:	f001 fc30 	bl	8004400 <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 8002ba0:	4833      	ldr	r0, [pc, #204]	@ (8002c70 <w5500_init+0x17c>)
 8002ba2:	f001 fc4d 	bl	8004440 <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8002ba6:	4833      	ldr	r0, [pc, #204]	@ (8002c74 <w5500_init+0x180>)
 8002ba8:	f001 fc6a 	bl	8004480 <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002bac:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <w5500_init+0x160>)
 8002bae:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 8002bb0:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002bb2:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <w5500_init+0x160>)
 8002bb4:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8002bb6:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002bb8:	4b26      	ldr	r3, [pc, #152]	@ (8002c54 <w5500_init+0x160>)
 8002bba:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8002bbc:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002bbe:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <w5500_init+0x160>)
 8002bc0:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 8002bc2:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <w5500_init+0x160>)
 8002bc6:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8002bc8:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002bca:	4b22      	ldr	r3, [pc, #136]	@ (8002c54 <w5500_init+0x160>)
 8002bcc:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 8002bce:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002bd0:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <w5500_init+0x160>)
 8002bd2:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8002bd4:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <w5500_init+0x160>)
 8002bd8:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8002bda:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <w5500_init+0x160>)
 8002bde:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 8002be0:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002be2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <w5500_init+0x160>)
 8002be4:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8002be6:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002be8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <w5500_init+0x160>)
 8002bea:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8002bec:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002bee:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <w5500_init+0x160>)
 8002bf0:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 8002bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	9308      	str	r3, [sp, #32]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	9307      	str	r3, [sp, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	9306      	str	r3, [sp, #24]
 8002c00:	9605      	str	r6, [sp, #20]
 8002c02:	9504      	str	r5, [sp, #16]
 8002c04:	9403      	str	r4, [sp, #12]
 8002c06:	9002      	str	r0, [sp, #8]
 8002c08:	9101      	str	r1, [sp, #4]
 8002c0a:	9200      	str	r2, [sp, #0]
 8002c0c:	4673      	mov	r3, lr
 8002c0e:	4662      	mov	r2, ip
 8002c10:	4919      	ldr	r1, [pc, #100]	@ (8002c78 <w5500_init+0x184>)
 8002c12:	481a      	ldr	r0, [pc, #104]	@ (8002c7c <w5500_init+0x188>)
 8002c14:	f003 ff7c 	bl	8006b10 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 8002c18:	4819      	ldr	r0, [pc, #100]	@ (8002c80 <w5500_init+0x18c>)
 8002c1a:	f003 ff71 	bl	8006b00 <puts>
    printf("%s", temp_buffer);
 8002c1e:	4917      	ldr	r1, [pc, #92]	@ (8002c7c <w5500_init+0x188>)
 8002c20:	4818      	ldr	r0, [pc, #96]	@ (8002c84 <w5500_init+0x190>)
 8002c22:	f003 fefd 	bl	8006a20 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 8002c26:	480b      	ldr	r0, [pc, #44]	@ (8002c54 <w5500_init+0x160>)
 8002c28:	f003 fc7c 	bl	8006524 <wizchip_setnetinfo>
 8002c2c:	e000      	b.n	8002c30 <w5500_init+0x13c>
		 return;
 8002c2e:	bf00      	nop

 }
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0800827c 	.word	0x0800827c
 8002c3c:	080029f5 	.word	0x080029f5
 8002c40:	080029d5 	.word	0x080029d5
 8002c44:	08002a81 	.word	0x08002a81
 8002c48:	08002a3d 	.word	0x08002a3d
 8002c4c:	08002a59 	.word	0x08002a59
 8002c50:	08002a15 	.word	0x08002a15
 8002c54:	2000003c 	.word	0x2000003c
 8002c58:	20006fc0 	.word	0x20006fc0
 8002c5c:	08002981 	.word	0x08002981
 8002c60:	08002969 	.word	0x08002969
 8002c64:	08002951 	.word	0x08002951
 8002c68:	200073c0 	.word	0x200073c0
 8002c6c:	20000042 	.word	0x20000042
 8002c70:	2000004a 	.word	0x2000004a
 8002c74:	20000046 	.word	0x20000046
 8002c78:	080081f0 	.word	0x080081f0
 8002c7c:	20006f14 	.word	0x20006f14
 8002c80:	0800823c 	.word	0x0800823c
 8002c84:	08008278 	.word	0x08008278

08002c88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c88:	480d      	ldr	r0, [pc, #52]	@ (8002cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c8a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c90:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c92:	490d      	ldr	r1, [pc, #52]	@ (8002cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ccc <LoopForever+0xe>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c98:	e002      	b.n	8002ca0 <LoopCopyDataInit>

08002c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9e:	3304      	adds	r3, #4

08002ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca4:	d3f9      	bcc.n	8002c9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd4 <LoopForever+0x16>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cac:	e001      	b.n	8002cb2 <LoopFillZerobss>

08002cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb0:	3204      	adds	r2, #4

08002cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb4:	d3fb      	bcc.n	8002cae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cb6:	f004 f8bd 	bl	8006e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cba:	f7fe ff19 	bl	8001af0 <main>

08002cbe <LoopForever>:

LoopForever:
    b LoopForever
 8002cbe:	e7fe      	b.n	8002cbe <LoopForever>
  ldr   r0, =_estack
 8002cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002ccc:	08008488 	.word	0x08008488
  ldr r2, =_sbss
 8002cd0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002cd4:	20007568 	.word	0x20007568

08002cd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cd8:	e7fe      	b.n	8002cd8 <ADC_IRQHandler>
	...

08002cdc <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	4909      	ldr	r1, [pc, #36]	@ (8002d08 <default_ip_assign+0x2c>)
 8002ce4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002ce8:	f002 fdb2 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002cec:	2204      	movs	r2, #4
 8002cee:	4907      	ldr	r1, [pc, #28]	@ (8002d0c <default_ip_assign+0x30>)
 8002cf0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002cf4:	f002 fdac 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	4905      	ldr	r1, [pc, #20]	@ (8002d10 <default_ip_assign+0x34>)
 8002cfc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d00:	f002 fda6 	bl	8005850 <WIZCHIP_WRITE_BUF>
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200073d0 	.word	0x200073d0
 8002d0c:	200073d8 	.word	0x200073d8
 8002d10:	200073d4 	.word	0x200073d4

08002d14 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002d18:	2180      	movs	r1, #128	@ 0x80
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f002 fcea 	bl	80056f4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002d20:	2000      	movs	r0, #0
 8002d22:	f002 fc9b 	bl	800565c <WIZCHIP_READ>
   default_ip_assign();
 8002d26:	f7ff ffd9 	bl	8002cdc <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002d2a:	2206      	movs	r2, #6
 8002d2c:	4903      	ldr	r1, [pc, #12]	@ (8002d3c <default_ip_update+0x28>)
 8002d2e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002d32:	f002 fd8d 	bl	8005850 <WIZCHIP_WRITE_BUF>
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200073f0 	.word	0x200073f0

08002d40 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	2000      	movs	r0, #0
 8002d48:	f002 fcd4 	bl	80056f4 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f002 fc85 	bl	800565c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002d52:	2206      	movs	r2, #6
 8002d54:	4903      	ldr	r1, [pc, #12]	@ (8002d64 <default_ip_conflict+0x24>)
 8002d56:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002d5a:	f002 fd79 	bl	8005850 <WIZCHIP_WRITE_BUF>
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200073f0 	.word	0x200073f0

08002d68 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <reg_dhcp_cbfunc+0x50>)
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <reg_dhcp_cbfunc+0x54>)
 8002d78:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <reg_dhcp_cbfunc+0x58>)
 8002d7c:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <reg_dhcp_cbfunc+0x5c>)
 8002d7e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8002d80:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <reg_dhcp_cbfunc+0x60>)
 8002d82:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <reg_dhcp_cbfunc+0x64>)
 8002d84:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <reg_dhcp_cbfunc+0x2a>
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <reg_dhcp_cbfunc+0x50>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <reg_dhcp_cbfunc+0x36>
 8002d98:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <reg_dhcp_cbfunc+0x58>)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <reg_dhcp_cbfunc+0x42>
 8002da4:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <reg_dhcp_cbfunc+0x60>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000064 	.word	0x20000064
 8002dbc:	08002cdd 	.word	0x08002cdd
 8002dc0:	20000068 	.word	0x20000068
 8002dc4:	08002d15 	.word	0x08002d15
 8002dc8:	2000006c 	.word	0x2000006c
 8002dcc:	08002d41 	.word	0x08002d41

08002dd0 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	2206      	movs	r2, #6
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002de0:	f002 fcd6 	bl	8005790 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002de4:	4b72      	ldr	r3, [pc, #456]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002dec:	4b70      	ldr	r3, [pc, #448]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002df4:	4b6e      	ldr	r3, [pc, #440]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2206      	movs	r2, #6
 8002dfa:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002dfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002e04:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002e0c:	4b69      	ldr	r3, [pc, #420]	@ (8002fb4 <makeDHCPMSG+0x1e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0e1b      	lsrs	r3, r3, #24
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002e18:	4b66      	ldr	r3, [pc, #408]	@ (8002fb4 <makeDHCPMSG+0x1e4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0c1a      	lsrs	r2, r3, #16
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3301      	adds	r3, #1
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002e26:	4b63      	ldr	r3, [pc, #396]	@ (8002fb4 <makeDHCPMSG+0x1e4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0a1a      	lsrs	r2, r3, #8
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002e34:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb4 <makeDHCPMSG+0x1e4>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3303      	adds	r3, #3
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002e40:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002e48:	4b59      	ldr	r3, [pc, #356]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330a      	adds	r3, #10
 8002e4e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2280      	movs	r2, #128	@ 0x80
 8002e54:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002e5e:	4b54      	ldr	r3, [pc, #336]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002e66:	4b52      	ldr	r3, [pc, #328]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002e6e:	4b50      	ldr	r3, [pc, #320]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002e76:	4b4e      	ldr	r3, [pc, #312]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002e86:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002e8e:	4b48      	ldr	r3, [pc, #288]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002e96:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002e9e:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002ea6:	4b42      	ldr	r3, [pc, #264]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002eae:	4b40      	ldr	r3, [pc, #256]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002ece:	4b38      	ldr	r3, [pc, #224]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002ed6:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2200      	movs	r2, #0
 8002edc:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002ede:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a35      	ldr	r2, [pc, #212]	@ (8002fb8 <makeDHCPMSG+0x1e8>)
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002ee8:	4b31      	ldr	r3, [pc, #196]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a32      	ldr	r2, [pc, #200]	@ (8002fb8 <makeDHCPMSG+0x1e8>)
 8002eee:	7852      	ldrb	r2, [r2, #1]
 8002ef0:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a30      	ldr	r2, [pc, #192]	@ (8002fb8 <makeDHCPMSG+0x1e8>)
 8002ef8:	7892      	ldrb	r2, [r2, #2]
 8002efa:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002efc:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <makeDHCPMSG+0x1e8>)
 8002f02:	78d2      	ldrb	r2, [r2, #3]
 8002f04:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002f06:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb8 <makeDHCPMSG+0x1e8>)
 8002f0c:	7912      	ldrb	r2, [r2, #4]
 8002f0e:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002f12:	4b27      	ldr	r3, [pc, #156]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <makeDHCPMSG+0x1e8>)
 8002f18:	7952      	ldrb	r2, [r2, #5]
 8002f1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002f1e:	2306      	movs	r3, #6
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	e008      	b.n	8002f36 <makeDHCPMSG+0x166>
 8002f24:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	3301      	adds	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d9f3      	bls.n	8002f24 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e009      	b.n	8002f56 <makeDHCPMSG+0x186>
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	4413      	add	r3, r2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	3301      	adds	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f5a:	d9f2      	bls.n	8002f42 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e009      	b.n	8002f76 <makeDHCPMSG+0x1a6>
 8002f62:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	4413      	add	r3, r2
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	3301      	adds	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	daf1      	bge.n	8002f62 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2263      	movs	r2, #99	@ 0x63
 8002f84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2282      	movs	r2, #130	@ 0x82
 8002f8e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2253      	movs	r2, #83	@ 0x53
 8002f98:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <makeDHCPMSG+0x1e0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2263      	movs	r2, #99	@ 0x63
 8002fa2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200073ec 	.word	0x200073ec
 8002fb4:	200073e8 	.word	0x200073e8
 8002fb8:	200073f0 	.word	0x200073f0

08002fbc <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002fbc:	b5b0      	push	{r4, r5, r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002fc6:	f7ff ff03 	bl	8002dd0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8002fca:	4b56      	ldr	r3, [pc, #344]	@ (8003124 <send_DHCP_DISCOVER+0x168>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8002fd0:	4b54      	ldr	r3, [pc, #336]	@ (8003124 <send_DHCP_DISCOVER+0x168>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8002fd6:	4b53      	ldr	r3, [pc, #332]	@ (8003124 <send_DHCP_DISCOVER+0x168>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8002fdc:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <send_DHCP_DISCOVER+0x168>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8002fe2:	4b51      	ldr	r3, [pc, #324]	@ (8003128 <send_DHCP_DISCOVER+0x16c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8002fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8003128 <send_DHCP_DISCOVER+0x16c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8002fee:	4b4e      	ldr	r3, [pc, #312]	@ (8003128 <send_DHCP_DISCOVER+0x16c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8003128 <send_DHCP_DISCOVER+0x16c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	88bb      	ldrh	r3, [r7, #4]
 8003004:	1c59      	adds	r1, r3, #1
 8003006:	80b9      	strh	r1, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	2235      	movs	r2, #53	@ 0x35
 800300c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003010:	4b46      	ldr	r3, [pc, #280]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	88bb      	ldrh	r3, [r7, #4]
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	80b9      	strh	r1, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	2201      	movs	r2, #1
 800301e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8003022:	4b42      	ldr	r3, [pc, #264]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	88bb      	ldrh	r3, [r7, #4]
 8003028:	1c59      	adds	r1, r3, #1
 800302a:	80b9      	strh	r1, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	2201      	movs	r2, #1
 8003030:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003034:	4b3d      	ldr	r3, [pc, #244]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	88bb      	ldrh	r3, [r7, #4]
 800303a:	1c59      	adds	r1, r3, #1
 800303c:	80b9      	strh	r1, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	223d      	movs	r2, #61	@ 0x3d
 8003042:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003046:	4b39      	ldr	r3, [pc, #228]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	88bb      	ldrh	r3, [r7, #4]
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	80b9      	strh	r1, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	2207      	movs	r2, #7
 8003054:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003058:	4b34      	ldr	r3, [pc, #208]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	88bb      	ldrh	r3, [r7, #4]
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	80b9      	strh	r1, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	2201      	movs	r2, #1
 8003066:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800306a:	4b30      	ldr	r3, [pc, #192]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	88bb      	ldrh	r3, [r7, #4]
 8003070:	1c59      	adds	r1, r3, #1
 8003072:	80b9      	strh	r1, [r7, #4]
 8003074:	4618      	mov	r0, r3
 8003076:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <send_DHCP_DISCOVER+0x174>)
 8003078:	7819      	ldrb	r1, [r3, #0]
 800307a:	1813      	adds	r3, r2, r0
 800307c:	460a      	mov	r2, r1
 800307e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003082:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	88bb      	ldrh	r3, [r7, #4]
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	80b9      	strh	r1, [r7, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <send_DHCP_DISCOVER+0x174>)
 8003090:	7859      	ldrb	r1, [r3, #1]
 8003092:	1813      	adds	r3, r2, r0
 8003094:	460a      	mov	r2, r1
 8003096:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800309a:	4b24      	ldr	r3, [pc, #144]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	88bb      	ldrh	r3, [r7, #4]
 80030a0:	1c59      	adds	r1, r3, #1
 80030a2:	80b9      	strh	r1, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	4b22      	ldr	r3, [pc, #136]	@ (8003130 <send_DHCP_DISCOVER+0x174>)
 80030a8:	7899      	ldrb	r1, [r3, #2]
 80030aa:	1813      	adds	r3, r2, r0
 80030ac:	460a      	mov	r2, r1
 80030ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	88bb      	ldrh	r3, [r7, #4]
 80030b8:	1c59      	adds	r1, r3, #1
 80030ba:	80b9      	strh	r1, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <send_DHCP_DISCOVER+0x174>)
 80030c0:	78d9      	ldrb	r1, [r3, #3]
 80030c2:	1813      	adds	r3, r2, r0
 80030c4:	460a      	mov	r2, r1
 80030c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80030ca:	4b18      	ldr	r3, [pc, #96]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	88bb      	ldrh	r3, [r7, #4]
 80030d0:	1c59      	adds	r1, r3, #1
 80030d2:	80b9      	strh	r1, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <send_DHCP_DISCOVER+0x174>)
 80030d8:	7919      	ldrb	r1, [r3, #4]
 80030da:	1813      	adds	r3, r2, r0
 80030dc:	460a      	mov	r2, r1
 80030de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80030e2:	4b12      	ldr	r3, [pc, #72]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	88bb      	ldrh	r3, [r7, #4]
 80030e8:	1c59      	adds	r1, r3, #1
 80030ea:	80b9      	strh	r1, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <send_DHCP_DISCOVER+0x174>)
 80030f0:	7959      	ldrb	r1, [r3, #5]
 80030f2:	1813      	adds	r3, r2, r0
 80030f4:	460a      	mov	r2, r1
 80030f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80030fa:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	1c59      	adds	r1, r3, #1
 8003102:	80b9      	strh	r1, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	220c      	movs	r2, #12
 8003108:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <send_DHCP_DISCOVER+0x170>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	88bb      	ldrh	r3, [r7, #4]
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	80b9      	strh	r1, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	2200      	movs	r2, #0
 800311a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	80fb      	strh	r3, [r7, #6]
 8003122:	e017      	b.n	8003154 <send_DHCP_DISCOVER+0x198>
 8003124:	200073c4 	.word	0x200073c4
 8003128:	200073c8 	.word	0x200073c8
 800312c:	200073ec 	.word	0x200073ec
 8003130:	200073f0 	.word	0x200073f0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8003134:	88f9      	ldrh	r1, [r7, #6]
 8003136:	4b80      	ldr	r3, [pc, #512]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	88bb      	ldrh	r3, [r7, #4]
 800313c:	1c58      	adds	r0, r3, #1
 800313e:	80b8      	strh	r0, [r7, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	4b7e      	ldr	r3, [pc, #504]	@ (800333c <send_DHCP_DISCOVER+0x380>)
 8003144:	5c59      	ldrb	r1, [r3, r1]
 8003146:	1813      	adds	r3, r2, r0
 8003148:	460a      	mov	r2, r1
 800314a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	3301      	adds	r3, #1
 8003152:	80fb      	strh	r3, [r7, #6]
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	4a79      	ldr	r2, [pc, #484]	@ (800333c <send_DHCP_DISCOVER+0x380>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1ea      	bne.n	8003134 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800315e:	4b78      	ldr	r3, [pc, #480]	@ (8003340 <send_DHCP_DISCOVER+0x384>)
 8003160:	78db      	ldrb	r3, [r3, #3]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4b74      	ldr	r3, [pc, #464]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003168:	681c      	ldr	r4, [r3, #0]
 800316a:	88bb      	ldrh	r3, [r7, #4]
 800316c:	1c59      	adds	r1, r3, #1
 800316e:	80b9      	strh	r1, [r7, #4]
 8003170:	461d      	mov	r5, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f001 f9a4 	bl	80044c0 <NibbleToHex>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	1963      	adds	r3, r4, r5
 800317e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8003182:	4b6f      	ldr	r3, [pc, #444]	@ (8003340 <send_DHCP_DISCOVER+0x384>)
 8003184:	78da      	ldrb	r2, [r3, #3]
 8003186:	4b6c      	ldr	r3, [pc, #432]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003188:	681c      	ldr	r4, [r3, #0]
 800318a:	88bb      	ldrh	r3, [r7, #4]
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	80b9      	strh	r1, [r7, #4]
 8003190:	461d      	mov	r5, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f001 f994 	bl	80044c0 <NibbleToHex>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	1963      	adds	r3, r4, r5
 800319e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80031a2:	4b67      	ldr	r3, [pc, #412]	@ (8003340 <send_DHCP_DISCOVER+0x384>)
 80031a4:	791b      	ldrb	r3, [r3, #4]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4b63      	ldr	r3, [pc, #396]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	88bb      	ldrh	r3, [r7, #4]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	80b9      	strh	r1, [r7, #4]
 80031b4:	461d      	mov	r5, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f001 f982 	bl	80044c0 <NibbleToHex>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	1963      	adds	r3, r4, r5
 80031c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80031c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003340 <send_DHCP_DISCOVER+0x384>)
 80031c8:	791a      	ldrb	r2, [r3, #4]
 80031ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80031cc:	681c      	ldr	r4, [r3, #0]
 80031ce:	88bb      	ldrh	r3, [r7, #4]
 80031d0:	1c59      	adds	r1, r3, #1
 80031d2:	80b9      	strh	r1, [r7, #4]
 80031d4:	461d      	mov	r5, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f001 f972 	bl	80044c0 <NibbleToHex>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	1963      	adds	r3, r4, r5
 80031e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80031e6:	4b56      	ldr	r3, [pc, #344]	@ (8003340 <send_DHCP_DISCOVER+0x384>)
 80031e8:	795b      	ldrb	r3, [r3, #5]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	4b52      	ldr	r3, [pc, #328]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80031f0:	681c      	ldr	r4, [r3, #0]
 80031f2:	88bb      	ldrh	r3, [r7, #4]
 80031f4:	1c59      	adds	r1, r3, #1
 80031f6:	80b9      	strh	r1, [r7, #4]
 80031f8:	461d      	mov	r5, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f001 f960 	bl	80044c0 <NibbleToHex>
 8003200:	4603      	mov	r3, r0
 8003202:	461a      	mov	r2, r3
 8003204:	1963      	adds	r3, r4, r5
 8003206:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800320a:	4b4d      	ldr	r3, [pc, #308]	@ (8003340 <send_DHCP_DISCOVER+0x384>)
 800320c:	795a      	ldrb	r2, [r3, #5]
 800320e:	4b4a      	ldr	r3, [pc, #296]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003210:	681c      	ldr	r4, [r3, #0]
 8003212:	88bb      	ldrh	r3, [r7, #4]
 8003214:	1c59      	adds	r1, r3, #1
 8003216:	80b9      	strh	r1, [r7, #4]
 8003218:	461d      	mov	r5, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f001 f950 	bl	80044c0 <NibbleToHex>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	1963      	adds	r3, r4, r5
 8003226:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	b2d9      	uxtb	r1, r3
 800322e:	4b42      	ldr	r3, [pc, #264]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	88b8      	ldrh	r0, [r7, #4]
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	3307      	adds	r3, #7
 8003238:	1ac3      	subs	r3, r0, r3
 800323a:	3106      	adds	r1, #6
 800323c:	b2c9      	uxtb	r1, r1
 800323e:	4413      	add	r3, r2
 8003240:	460a      	mov	r2, r1
 8003242:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8003246:	4b3c      	ldr	r3, [pc, #240]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	88bb      	ldrh	r3, [r7, #4]
 800324c:	1c59      	adds	r1, r3, #1
 800324e:	80b9      	strh	r1, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	2237      	movs	r2, #55	@ 0x37
 8003254:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8003258:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	88bb      	ldrh	r3, [r7, #4]
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	80b9      	strh	r1, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	2206      	movs	r2, #6
 8003266:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800326a:	4b33      	ldr	r3, [pc, #204]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	88bb      	ldrh	r3, [r7, #4]
 8003270:	1c59      	adds	r1, r3, #1
 8003272:	80b9      	strh	r1, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	2201      	movs	r2, #1
 8003278:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800327c:	4b2e      	ldr	r3, [pc, #184]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	88bb      	ldrh	r3, [r7, #4]
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	80b9      	strh	r1, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	2203      	movs	r2, #3
 800328a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800328e:	4b2a      	ldr	r3, [pc, #168]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	88bb      	ldrh	r3, [r7, #4]
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	80b9      	strh	r1, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	2206      	movs	r2, #6
 800329c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80032a0:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	88bb      	ldrh	r3, [r7, #4]
 80032a6:	1c59      	adds	r1, r3, #1
 80032a8:	80b9      	strh	r1, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	220f      	movs	r2, #15
 80032ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80032b2:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	88bb      	ldrh	r3, [r7, #4]
 80032b8:	1c59      	adds	r1, r3, #1
 80032ba:	80b9      	strh	r1, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	223a      	movs	r2, #58	@ 0x3a
 80032c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80032c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	88bb      	ldrh	r3, [r7, #4]
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	80b9      	strh	r1, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	223b      	movs	r2, #59	@ 0x3b
 80032d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80032d6:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	88bb      	ldrh	r3, [r7, #4]
 80032dc:	1c59      	adds	r1, r3, #1
 80032de:	80b9      	strh	r1, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	22ff      	movs	r2, #255	@ 0xff
 80032e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80032e8:	88bb      	ldrh	r3, [r7, #4]
 80032ea:	80fb      	strh	r3, [r7, #6]
 80032ec:	e009      	b.n	8003302 <send_DHCP_DISCOVER+0x346>
 80032ee:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	4413      	add	r3, r2
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	3301      	adds	r3, #1
 8003300:	80fb      	strh	r3, [r7, #6]
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003308:	d3f1      	bcc.n	80032ee <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800330a:	23ff      	movs	r3, #255	@ 0xff
 800330c:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800330e:	23ff      	movs	r3, #255	@ 0xff
 8003310:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8003312:	23ff      	movs	r3, #255	@ 0xff
 8003314:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8003316:	23ff      	movs	r3, #255	@ 0xff
 8003318:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <send_DHCP_DISCOVER+0x388>)
 800331c:	7818      	ldrb	r0, [r3, #0]
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <send_DHCP_DISCOVER+0x37c>)
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	463b      	mov	r3, r7
 8003324:	2243      	movs	r2, #67	@ 0x43
 8003326:	9200      	str	r2, [sp, #0]
 8003328:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800332c:	f001 fd62 	bl	8004df4 <sendto>
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bdb0      	pop	{r4, r5, r7, pc}
 8003338:	200073ec 	.word	0x200073ec
 800333c:	2000005c 	.word	0x2000005c
 8003340:	200073f0 	.word	0x200073f0
 8003344:	200073c1 	.word	0x200073c1

08003348 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8003352:	f7ff fd3d 	bl	8002dd0 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8003356:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <send_DHCP_REQUEST+0x7c>)
 8003358:	f993 3000 	ldrsb.w	r3, [r3]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d004      	beq.n	800336a <send_DHCP_REQUEST+0x22>
 8003360:	4b18      	ldr	r3, [pc, #96]	@ (80033c4 <send_DHCP_REQUEST+0x7c>)
 8003362:	f993 3000 	ldrsb.w	r3, [r3]
 8003366:	2b04      	cmp	r3, #4
 8003368:	d134      	bne.n	80033d4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800336a:	4b17      	ldr	r3, [pc, #92]	@ (80033c8 <send_DHCP_REQUEST+0x80>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330a      	adds	r3, #10
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003374:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <send_DHCP_REQUEST+0x80>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330a      	adds	r3, #10
 800337a:	3301      	adds	r3, #1
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8003380:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <send_DHCP_REQUEST+0x80>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a11      	ldr	r2, [pc, #68]	@ (80033cc <send_DHCP_REQUEST+0x84>)
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800338a:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <send_DHCP_REQUEST+0x80>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a0f      	ldr	r2, [pc, #60]	@ (80033cc <send_DHCP_REQUEST+0x84>)
 8003390:	7852      	ldrb	r2, [r2, #1]
 8003392:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8003394:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <send_DHCP_REQUEST+0x80>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0c      	ldr	r2, [pc, #48]	@ (80033cc <send_DHCP_REQUEST+0x84>)
 800339a:	7892      	ldrb	r2, [r2, #2]
 800339c:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800339e:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <send_DHCP_REQUEST+0x80>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <send_DHCP_REQUEST+0x84>)
 80033a4:	78d2      	ldrb	r2, [r2, #3]
 80033a6:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80033a8:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <send_DHCP_REQUEST+0x88>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80033ae:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <send_DHCP_REQUEST+0x88>)
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <send_DHCP_REQUEST+0x88>)
 80033b6:	789b      	ldrb	r3, [r3, #2]
 80033b8:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80033ba:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <send_DHCP_REQUEST+0x88>)
 80033bc:	78db      	ldrb	r3, [r3, #3]
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	e010      	b.n	80033e4 <send_DHCP_REQUEST+0x9c>
 80033c2:	bf00      	nop
 80033c4:	200073e0 	.word	0x200073e0
 80033c8:	200073ec 	.word	0x200073ec
 80033cc:	200073d0 	.word	0x200073d0
 80033d0:	200073c4 	.word	0x200073c4
   }
   else
   {
   	ip[0] = 255;
 80033d4:	23ff      	movs	r3, #255	@ 0xff
 80033d6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80033d8:	23ff      	movs	r3, #255	@ 0xff
 80033da:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80033dc:	23ff      	movs	r3, #255	@ 0xff
 80033de:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80033e0:	23ff      	movs	r3, #255	@ 0xff
 80033e2:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80033e4:	2304      	movs	r3, #4
 80033e6:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80033e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	897b      	ldrh	r3, [r7, #10]
 80033ee:	1c59      	adds	r1, r3, #1
 80033f0:	8179      	strh	r1, [r7, #10]
 80033f2:	4413      	add	r3, r2
 80033f4:	2235      	movs	r2, #53	@ 0x35
 80033f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80033fa:	4b89      	ldr	r3, [pc, #548]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	1c59      	adds	r1, r3, #1
 8003402:	8179      	strh	r1, [r7, #10]
 8003404:	4413      	add	r3, r2
 8003406:	2201      	movs	r2, #1
 8003408:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 800340c:	4b84      	ldr	r3, [pc, #528]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	897b      	ldrh	r3, [r7, #10]
 8003412:	1c59      	adds	r1, r3, #1
 8003414:	8179      	strh	r1, [r7, #10]
 8003416:	4413      	add	r3, r2
 8003418:	2203      	movs	r2, #3
 800341a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800341e:	4b80      	ldr	r3, [pc, #512]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	1c59      	adds	r1, r3, #1
 8003426:	8179      	strh	r1, [r7, #10]
 8003428:	4413      	add	r3, r2
 800342a:	223d      	movs	r2, #61	@ 0x3d
 800342c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003430:	4b7b      	ldr	r3, [pc, #492]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	897b      	ldrh	r3, [r7, #10]
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	8179      	strh	r1, [r7, #10]
 800343a:	4413      	add	r3, r2
 800343c:	2207      	movs	r2, #7
 800343e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003442:	4b77      	ldr	r3, [pc, #476]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	1c59      	adds	r1, r3, #1
 800344a:	8179      	strh	r1, [r7, #10]
 800344c:	4413      	add	r3, r2
 800344e:	2201      	movs	r2, #1
 8003450:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003454:	4b72      	ldr	r3, [pc, #456]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	8179      	strh	r1, [r7, #10]
 800345e:	4618      	mov	r0, r3
 8003460:	4b70      	ldr	r3, [pc, #448]	@ (8003624 <send_DHCP_REQUEST+0x2dc>)
 8003462:	7819      	ldrb	r1, [r3, #0]
 8003464:	1813      	adds	r3, r2, r0
 8003466:	460a      	mov	r2, r1
 8003468:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800346c:	4b6c      	ldr	r3, [pc, #432]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	897b      	ldrh	r3, [r7, #10]
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	8179      	strh	r1, [r7, #10]
 8003476:	4618      	mov	r0, r3
 8003478:	4b6a      	ldr	r3, [pc, #424]	@ (8003624 <send_DHCP_REQUEST+0x2dc>)
 800347a:	7859      	ldrb	r1, [r3, #1]
 800347c:	1813      	adds	r3, r2, r0
 800347e:	460a      	mov	r2, r1
 8003480:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003484:	4b66      	ldr	r3, [pc, #408]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	897b      	ldrh	r3, [r7, #10]
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	8179      	strh	r1, [r7, #10]
 800348e:	4618      	mov	r0, r3
 8003490:	4b64      	ldr	r3, [pc, #400]	@ (8003624 <send_DHCP_REQUEST+0x2dc>)
 8003492:	7899      	ldrb	r1, [r3, #2]
 8003494:	1813      	adds	r3, r2, r0
 8003496:	460a      	mov	r2, r1
 8003498:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800349c:	4b60      	ldr	r3, [pc, #384]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	897b      	ldrh	r3, [r7, #10]
 80034a2:	1c59      	adds	r1, r3, #1
 80034a4:	8179      	strh	r1, [r7, #10]
 80034a6:	4618      	mov	r0, r3
 80034a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003624 <send_DHCP_REQUEST+0x2dc>)
 80034aa:	78d9      	ldrb	r1, [r3, #3]
 80034ac:	1813      	adds	r3, r2, r0
 80034ae:	460a      	mov	r2, r1
 80034b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80034b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	8179      	strh	r1, [r7, #10]
 80034be:	4618      	mov	r0, r3
 80034c0:	4b58      	ldr	r3, [pc, #352]	@ (8003624 <send_DHCP_REQUEST+0x2dc>)
 80034c2:	7919      	ldrb	r1, [r3, #4]
 80034c4:	1813      	adds	r3, r2, r0
 80034c6:	460a      	mov	r2, r1
 80034c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80034cc:	4b54      	ldr	r3, [pc, #336]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	897b      	ldrh	r3, [r7, #10]
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	8179      	strh	r1, [r7, #10]
 80034d6:	4618      	mov	r0, r3
 80034d8:	4b52      	ldr	r3, [pc, #328]	@ (8003624 <send_DHCP_REQUEST+0x2dc>)
 80034da:	7959      	ldrb	r1, [r3, #5]
 80034dc:	1813      	adds	r3, r2, r0
 80034de:	460a      	mov	r2, r1
 80034e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	2bff      	cmp	r3, #255	@ 0xff
 80034e8:	f040 8084 	bne.w	80035f4 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80034ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	8179      	strh	r1, [r7, #10]
 80034f6:	4413      	add	r3, r2
 80034f8:	2232      	movs	r2, #50	@ 0x32
 80034fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80034fe:	4b48      	ldr	r3, [pc, #288]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	1c59      	adds	r1, r3, #1
 8003506:	8179      	strh	r1, [r7, #10]
 8003508:	4413      	add	r3, r2
 800350a:	2204      	movs	r2, #4
 800350c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003510:	4b43      	ldr	r3, [pc, #268]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	8179      	strh	r1, [r7, #10]
 800351a:	4618      	mov	r0, r3
 800351c:	4b42      	ldr	r3, [pc, #264]	@ (8003628 <send_DHCP_REQUEST+0x2e0>)
 800351e:	7819      	ldrb	r1, [r3, #0]
 8003520:	1813      	adds	r3, r2, r0
 8003522:	460a      	mov	r2, r1
 8003524:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003528:	4b3d      	ldr	r3, [pc, #244]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	897b      	ldrh	r3, [r7, #10]
 800352e:	1c59      	adds	r1, r3, #1
 8003530:	8179      	strh	r1, [r7, #10]
 8003532:	4618      	mov	r0, r3
 8003534:	4b3c      	ldr	r3, [pc, #240]	@ (8003628 <send_DHCP_REQUEST+0x2e0>)
 8003536:	7859      	ldrb	r1, [r3, #1]
 8003538:	1813      	adds	r3, r2, r0
 800353a:	460a      	mov	r2, r1
 800353c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003540:	4b37      	ldr	r3, [pc, #220]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	1c59      	adds	r1, r3, #1
 8003548:	8179      	strh	r1, [r7, #10]
 800354a:	4618      	mov	r0, r3
 800354c:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <send_DHCP_REQUEST+0x2e0>)
 800354e:	7899      	ldrb	r1, [r3, #2]
 8003550:	1813      	adds	r3, r2, r0
 8003552:	460a      	mov	r2, r1
 8003554:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003558:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	897b      	ldrh	r3, [r7, #10]
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	8179      	strh	r1, [r7, #10]
 8003562:	4618      	mov	r0, r3
 8003564:	4b30      	ldr	r3, [pc, #192]	@ (8003628 <send_DHCP_REQUEST+0x2e0>)
 8003566:	78d9      	ldrb	r1, [r3, #3]
 8003568:	1813      	adds	r3, r2, r0
 800356a:	460a      	mov	r2, r1
 800356c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003570:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	8179      	strh	r1, [r7, #10]
 800357a:	4413      	add	r3, r2
 800357c:	2236      	movs	r2, #54	@ 0x36
 800357e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8003582:	4b27      	ldr	r3, [pc, #156]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	1c59      	adds	r1, r3, #1
 800358a:	8179      	strh	r1, [r7, #10]
 800358c:	4413      	add	r3, r2
 800358e:	2204      	movs	r2, #4
 8003590:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003594:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	897b      	ldrh	r3, [r7, #10]
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	8179      	strh	r1, [r7, #10]
 800359e:	4618      	mov	r0, r3
 80035a0:	4b22      	ldr	r3, [pc, #136]	@ (800362c <send_DHCP_REQUEST+0x2e4>)
 80035a2:	7819      	ldrb	r1, [r3, #0]
 80035a4:	1813      	adds	r3, r2, r0
 80035a6:	460a      	mov	r2, r1
 80035a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80035ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	897b      	ldrh	r3, [r7, #10]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	8179      	strh	r1, [r7, #10]
 80035b6:	4618      	mov	r0, r3
 80035b8:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <send_DHCP_REQUEST+0x2e4>)
 80035ba:	7859      	ldrb	r1, [r3, #1]
 80035bc:	1813      	adds	r3, r2, r0
 80035be:	460a      	mov	r2, r1
 80035c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80035c4:	4b16      	ldr	r3, [pc, #88]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	8179      	strh	r1, [r7, #10]
 80035ce:	4618      	mov	r0, r3
 80035d0:	4b16      	ldr	r3, [pc, #88]	@ (800362c <send_DHCP_REQUEST+0x2e4>)
 80035d2:	7899      	ldrb	r1, [r3, #2]
 80035d4:	1813      	adds	r3, r2, r0
 80035d6:	460a      	mov	r2, r1
 80035d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80035dc:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	1c59      	adds	r1, r3, #1
 80035e4:	8179      	strh	r1, [r7, #10]
 80035e6:	4618      	mov	r0, r3
 80035e8:	4b10      	ldr	r3, [pc, #64]	@ (800362c <send_DHCP_REQUEST+0x2e4>)
 80035ea:	78d9      	ldrb	r1, [r3, #3]
 80035ec:	1813      	adds	r3, r2, r0
 80035ee:	460a      	mov	r2, r1
 80035f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80035f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	897b      	ldrh	r3, [r7, #10]
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	8179      	strh	r1, [r7, #10]
 80035fe:	4413      	add	r3, r2
 8003600:	220c      	movs	r2, #12
 8003602:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <send_DHCP_REQUEST+0x2d8>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	8179      	strh	r1, [r7, #10]
 8003610:	4413      	add	r3, r2
 8003612:	2200      	movs	r2, #0
 8003614:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e019      	b.n	8003652 <send_DHCP_REQUEST+0x30a>
 800361e:	bf00      	nop
 8003620:	200073ec 	.word	0x200073ec
 8003624:	200073f0 	.word	0x200073f0
 8003628:	200073d0 	.word	0x200073d0
 800362c:	200073c4 	.word	0x200073c4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8003630:	4b86      	ldr	r3, [pc, #536]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	897b      	ldrh	r3, [r7, #10]
 8003636:	1c59      	adds	r1, r3, #1
 8003638:	8179      	strh	r1, [r7, #10]
 800363a:	4618      	mov	r0, r3
 800363c:	4984      	ldr	r1, [pc, #528]	@ (8003850 <send_DHCP_REQUEST+0x508>)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	440b      	add	r3, r1
 8003642:	7819      	ldrb	r1, [r3, #0]
 8003644:	1813      	adds	r3, r2, r0
 8003646:	460a      	mov	r2, r1
 8003648:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3301      	adds	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4a7f      	ldr	r2, [pc, #508]	@ (8003850 <send_DHCP_REQUEST+0x508>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e8      	bne.n	8003630 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800365e:	4b7d      	ldr	r3, [pc, #500]	@ (8003854 <send_DHCP_REQUEST+0x50c>)
 8003660:	78db      	ldrb	r3, [r3, #3]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b79      	ldr	r3, [pc, #484]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003668:	681c      	ldr	r4, [r3, #0]
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	1c59      	adds	r1, r3, #1
 800366e:	8179      	strh	r1, [r7, #10]
 8003670:	461d      	mov	r5, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 ff24 	bl	80044c0 <NibbleToHex>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	1963      	adds	r3, r4, r5
 800367e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8003682:	4b74      	ldr	r3, [pc, #464]	@ (8003854 <send_DHCP_REQUEST+0x50c>)
 8003684:	78da      	ldrb	r2, [r3, #3]
 8003686:	4b71      	ldr	r3, [pc, #452]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003688:	681c      	ldr	r4, [r3, #0]
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	8179      	strh	r1, [r7, #10]
 8003690:	461d      	mov	r5, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 ff14 	bl	80044c0 <NibbleToHex>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	1963      	adds	r3, r4, r5
 800369e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80036a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003854 <send_DHCP_REQUEST+0x50c>)
 80036a4:	791b      	ldrb	r3, [r3, #4]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b68      	ldr	r3, [pc, #416]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80036ac:	681c      	ldr	r4, [r3, #0]
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	1c59      	adds	r1, r3, #1
 80036b2:	8179      	strh	r1, [r7, #10]
 80036b4:	461d      	mov	r5, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f000 ff02 	bl	80044c0 <NibbleToHex>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	1963      	adds	r3, r4, r5
 80036c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80036c6:	4b63      	ldr	r3, [pc, #396]	@ (8003854 <send_DHCP_REQUEST+0x50c>)
 80036c8:	791a      	ldrb	r2, [r3, #4]
 80036ca:	4b60      	ldr	r3, [pc, #384]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80036cc:	681c      	ldr	r4, [r3, #0]
 80036ce:	897b      	ldrh	r3, [r7, #10]
 80036d0:	1c59      	adds	r1, r3, #1
 80036d2:	8179      	strh	r1, [r7, #10]
 80036d4:	461d      	mov	r5, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 fef2 	bl	80044c0 <NibbleToHex>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	1963      	adds	r3, r4, r5
 80036e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80036e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003854 <send_DHCP_REQUEST+0x50c>)
 80036e8:	795b      	ldrb	r3, [r3, #5]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b57      	ldr	r3, [pc, #348]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80036f0:	681c      	ldr	r4, [r3, #0]
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	8179      	strh	r1, [r7, #10]
 80036f8:	461d      	mov	r5, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 fee0 	bl	80044c0 <NibbleToHex>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	1963      	adds	r3, r4, r5
 8003706:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800370a:	4b52      	ldr	r3, [pc, #328]	@ (8003854 <send_DHCP_REQUEST+0x50c>)
 800370c:	795a      	ldrb	r2, [r3, #5]
 800370e:	4b4f      	ldr	r3, [pc, #316]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003710:	681c      	ldr	r4, [r3, #0]
 8003712:	897b      	ldrh	r3, [r7, #10]
 8003714:	1c59      	adds	r1, r3, #1
 8003716:	8179      	strh	r1, [r7, #10]
 8003718:	461d      	mov	r5, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fed0 	bl	80044c0 <NibbleToHex>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	1963      	adds	r3, r4, r5
 8003726:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	b2d9      	uxtb	r1, r3
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	8978      	ldrh	r0, [r7, #10]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3307      	adds	r3, #7
 8003738:	1ac3      	subs	r3, r0, r3
 800373a:	3106      	adds	r1, #6
 800373c:	b2c9      	uxtb	r1, r1
 800373e:	4413      	add	r3, r2
 8003740:	460a      	mov	r2, r1
 8003742:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8003746:	4b41      	ldr	r3, [pc, #260]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	1c59      	adds	r1, r3, #1
 800374e:	8179      	strh	r1, [r7, #10]
 8003750:	4413      	add	r3, r2
 8003752:	2237      	movs	r2, #55	@ 0x37
 8003754:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8003758:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <send_DHCP_REQUEST+0x504>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	897b      	ldrh	r3, [r7, #10]
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	8179      	strh	r1, [r7, #10]
 8003762:	4413      	add	r3, r2
 8003764:	2208      	movs	r2, #8
 8003766:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800376a:	4b38      	ldr	r3, [pc, #224]	@ (800384c <send_DHCP_REQUEST+0x504>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	897b      	ldrh	r3, [r7, #10]
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	8179      	strh	r1, [r7, #10]
 8003774:	4413      	add	r3, r2
 8003776:	2201      	movs	r2, #1
 8003778:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800377c:	4b33      	ldr	r3, [pc, #204]	@ (800384c <send_DHCP_REQUEST+0x504>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	897b      	ldrh	r3, [r7, #10]
 8003782:	1c59      	adds	r1, r3, #1
 8003784:	8179      	strh	r1, [r7, #10]
 8003786:	4413      	add	r3, r2
 8003788:	2203      	movs	r2, #3
 800378a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800378e:	4b2f      	ldr	r3, [pc, #188]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	897b      	ldrh	r3, [r7, #10]
 8003794:	1c59      	adds	r1, r3, #1
 8003796:	8179      	strh	r1, [r7, #10]
 8003798:	4413      	add	r3, r2
 800379a:	2206      	movs	r2, #6
 800379c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80037a0:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	897b      	ldrh	r3, [r7, #10]
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	8179      	strh	r1, [r7, #10]
 80037aa:	4413      	add	r3, r2
 80037ac:	220f      	movs	r2, #15
 80037ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	1c59      	adds	r1, r3, #1
 80037ba:	8179      	strh	r1, [r7, #10]
 80037bc:	4413      	add	r3, r2
 80037be:	223a      	movs	r2, #58	@ 0x3a
 80037c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	897b      	ldrh	r3, [r7, #10]
 80037ca:	1c59      	adds	r1, r3, #1
 80037cc:	8179      	strh	r1, [r7, #10]
 80037ce:	4413      	add	r3, r2
 80037d0:	223b      	movs	r2, #59	@ 0x3b
 80037d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	897b      	ldrh	r3, [r7, #10]
 80037dc:	1c59      	adds	r1, r3, #1
 80037de:	8179      	strh	r1, [r7, #10]
 80037e0:	4413      	add	r3, r2
 80037e2:	221f      	movs	r2, #31
 80037e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80037e8:	4b18      	ldr	r3, [pc, #96]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	897b      	ldrh	r3, [r7, #10]
 80037ee:	1c59      	adds	r1, r3, #1
 80037f0:	8179      	strh	r1, [r7, #10]
 80037f2:	4413      	add	r3, r2
 80037f4:	2221      	movs	r2, #33	@ 0x21
 80037f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80037fa:	4b14      	ldr	r3, [pc, #80]	@ (800384c <send_DHCP_REQUEST+0x504>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	1c59      	adds	r1, r3, #1
 8003802:	8179      	strh	r1, [r7, #10]
 8003804:	4413      	add	r3, r2
 8003806:	22ff      	movs	r2, #255	@ 0xff
 8003808:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e009      	b.n	8003826 <send_DHCP_REQUEST+0x4de>
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	33ec      	adds	r3, #236	@ 0xec
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800382c:	dbf1      	blt.n	8003812 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800382e:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <send_DHCP_REQUEST+0x510>)
 8003830:	7818      	ldrb	r0, [r3, #0]
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <send_DHCP_REQUEST+0x504>)
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2243      	movs	r2, #67	@ 0x43
 800383a:	9200      	str	r2, [sp, #0]
 800383c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003840:	f001 fad8 	bl	8004df4 <sendto>

}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bdb0      	pop	{r4, r5, r7, pc}
 800384c:	200073ec 	.word	0x200073ec
 8003850:	2000005c 	.word	0x2000005c
 8003854:	200073f0 	.word	0x200073f0
 8003858:	200073c1 	.word	0x200073c1

0800385c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8003866:	f7ff fab3 	bl	8002dd0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800386a:	2304      	movs	r3, #4
 800386c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800386e:	4b9f      	ldr	r3, [pc, #636]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330a      	adds	r3, #10
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003878:	4b9c      	ldr	r3, [pc, #624]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330a      	adds	r3, #10
 800387e:	3301      	adds	r3, #1
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003884:	4b99      	ldr	r3, [pc, #612]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	897b      	ldrh	r3, [r7, #10]
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	8179      	strh	r1, [r7, #10]
 800388e:	4413      	add	r3, r2
 8003890:	2235      	movs	r2, #53	@ 0x35
 8003892:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003896:	4b95      	ldr	r3, [pc, #596]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	897b      	ldrh	r3, [r7, #10]
 800389c:	1c59      	adds	r1, r3, #1
 800389e:	8179      	strh	r1, [r7, #10]
 80038a0:	4413      	add	r3, r2
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80038a8:	4b90      	ldr	r3, [pc, #576]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	8179      	strh	r1, [r7, #10]
 80038b2:	4413      	add	r3, r2
 80038b4:	2204      	movs	r2, #4
 80038b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80038ba:	4b8c      	ldr	r3, [pc, #560]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	1c59      	adds	r1, r3, #1
 80038c2:	8179      	strh	r1, [r7, #10]
 80038c4:	4413      	add	r3, r2
 80038c6:	223d      	movs	r2, #61	@ 0x3d
 80038c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80038cc:	4b87      	ldr	r3, [pc, #540]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	897b      	ldrh	r3, [r7, #10]
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	8179      	strh	r1, [r7, #10]
 80038d6:	4413      	add	r3, r2
 80038d8:	2207      	movs	r2, #7
 80038da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80038de:	4b83      	ldr	r3, [pc, #524]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	1c59      	adds	r1, r3, #1
 80038e6:	8179      	strh	r1, [r7, #10]
 80038e8:	4413      	add	r3, r2
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80038f0:	4b7e      	ldr	r3, [pc, #504]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	897b      	ldrh	r3, [r7, #10]
 80038f6:	1c59      	adds	r1, r3, #1
 80038f8:	8179      	strh	r1, [r7, #10]
 80038fa:	4618      	mov	r0, r3
 80038fc:	4b7c      	ldr	r3, [pc, #496]	@ (8003af0 <send_DHCP_DECLINE+0x294>)
 80038fe:	7819      	ldrb	r1, [r3, #0]
 8003900:	1813      	adds	r3, r2, r0
 8003902:	460a      	mov	r2, r1
 8003904:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003908:	4b78      	ldr	r3, [pc, #480]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	8179      	strh	r1, [r7, #10]
 8003912:	4618      	mov	r0, r3
 8003914:	4b76      	ldr	r3, [pc, #472]	@ (8003af0 <send_DHCP_DECLINE+0x294>)
 8003916:	7859      	ldrb	r1, [r3, #1]
 8003918:	1813      	adds	r3, r2, r0
 800391a:	460a      	mov	r2, r1
 800391c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003920:	4b72      	ldr	r3, [pc, #456]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	8179      	strh	r1, [r7, #10]
 800392a:	4618      	mov	r0, r3
 800392c:	4b70      	ldr	r3, [pc, #448]	@ (8003af0 <send_DHCP_DECLINE+0x294>)
 800392e:	7899      	ldrb	r1, [r3, #2]
 8003930:	1813      	adds	r3, r2, r0
 8003932:	460a      	mov	r2, r1
 8003934:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003938:	4b6c      	ldr	r3, [pc, #432]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	897b      	ldrh	r3, [r7, #10]
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	8179      	strh	r1, [r7, #10]
 8003942:	4618      	mov	r0, r3
 8003944:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <send_DHCP_DECLINE+0x294>)
 8003946:	78d9      	ldrb	r1, [r3, #3]
 8003948:	1813      	adds	r3, r2, r0
 800394a:	460a      	mov	r2, r1
 800394c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003950:	4b66      	ldr	r3, [pc, #408]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	1c59      	adds	r1, r3, #1
 8003958:	8179      	strh	r1, [r7, #10]
 800395a:	4618      	mov	r0, r3
 800395c:	4b64      	ldr	r3, [pc, #400]	@ (8003af0 <send_DHCP_DECLINE+0x294>)
 800395e:	7919      	ldrb	r1, [r3, #4]
 8003960:	1813      	adds	r3, r2, r0
 8003962:	460a      	mov	r2, r1
 8003964:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003968:	4b60      	ldr	r3, [pc, #384]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	897b      	ldrh	r3, [r7, #10]
 800396e:	1c59      	adds	r1, r3, #1
 8003970:	8179      	strh	r1, [r7, #10]
 8003972:	4618      	mov	r0, r3
 8003974:	4b5e      	ldr	r3, [pc, #376]	@ (8003af0 <send_DHCP_DECLINE+0x294>)
 8003976:	7959      	ldrb	r1, [r3, #5]
 8003978:	1813      	adds	r3, r2, r0
 800397a:	460a      	mov	r2, r1
 800397c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003980:	4b5a      	ldr	r3, [pc, #360]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	1c59      	adds	r1, r3, #1
 8003988:	8179      	strh	r1, [r7, #10]
 800398a:	4413      	add	r3, r2
 800398c:	2232      	movs	r2, #50	@ 0x32
 800398e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003992:	4b56      	ldr	r3, [pc, #344]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	1c59      	adds	r1, r3, #1
 800399a:	8179      	strh	r1, [r7, #10]
 800399c:	4413      	add	r3, r2
 800399e:	2204      	movs	r2, #4
 80039a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80039a4:	4b51      	ldr	r3, [pc, #324]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	897b      	ldrh	r3, [r7, #10]
 80039aa:	1c59      	adds	r1, r3, #1
 80039ac:	8179      	strh	r1, [r7, #10]
 80039ae:	4618      	mov	r0, r3
 80039b0:	4b50      	ldr	r3, [pc, #320]	@ (8003af4 <send_DHCP_DECLINE+0x298>)
 80039b2:	7819      	ldrb	r1, [r3, #0]
 80039b4:	1813      	adds	r3, r2, r0
 80039b6:	460a      	mov	r2, r1
 80039b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80039bc:	4b4b      	ldr	r3, [pc, #300]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	897b      	ldrh	r3, [r7, #10]
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	8179      	strh	r1, [r7, #10]
 80039c6:	4618      	mov	r0, r3
 80039c8:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <send_DHCP_DECLINE+0x298>)
 80039ca:	7859      	ldrb	r1, [r3, #1]
 80039cc:	1813      	adds	r3, r2, r0
 80039ce:	460a      	mov	r2, r1
 80039d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80039d4:	4b45      	ldr	r3, [pc, #276]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	897b      	ldrh	r3, [r7, #10]
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	8179      	strh	r1, [r7, #10]
 80039de:	4618      	mov	r0, r3
 80039e0:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <send_DHCP_DECLINE+0x298>)
 80039e2:	7899      	ldrb	r1, [r3, #2]
 80039e4:	1813      	adds	r3, r2, r0
 80039e6:	460a      	mov	r2, r1
 80039e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80039ec:	4b3f      	ldr	r3, [pc, #252]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	1c59      	adds	r1, r3, #1
 80039f4:	8179      	strh	r1, [r7, #10]
 80039f6:	4618      	mov	r0, r3
 80039f8:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <send_DHCP_DECLINE+0x298>)
 80039fa:	78d9      	ldrb	r1, [r3, #3]
 80039fc:	1813      	adds	r3, r2, r0
 80039fe:	460a      	mov	r2, r1
 8003a00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	8179      	strh	r1, [r7, #10]
 8003a0e:	4413      	add	r3, r2
 8003a10:	2236      	movs	r2, #54	@ 0x36
 8003a12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003a16:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	897b      	ldrh	r3, [r7, #10]
 8003a1c:	1c59      	adds	r1, r3, #1
 8003a1e:	8179      	strh	r1, [r7, #10]
 8003a20:	4413      	add	r3, r2
 8003a22:	2204      	movs	r2, #4
 8003a24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003a28:	4b30      	ldr	r3, [pc, #192]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	897b      	ldrh	r3, [r7, #10]
 8003a2e:	1c59      	adds	r1, r3, #1
 8003a30:	8179      	strh	r1, [r7, #10]
 8003a32:	4618      	mov	r0, r3
 8003a34:	4b30      	ldr	r3, [pc, #192]	@ (8003af8 <send_DHCP_DECLINE+0x29c>)
 8003a36:	7819      	ldrb	r1, [r3, #0]
 8003a38:	1813      	adds	r3, r2, r0
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003a40:	4b2a      	ldr	r3, [pc, #168]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	1c59      	adds	r1, r3, #1
 8003a48:	8179      	strh	r1, [r7, #10]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <send_DHCP_DECLINE+0x29c>)
 8003a4e:	7859      	ldrb	r1, [r3, #1]
 8003a50:	1813      	adds	r3, r2, r0
 8003a52:	460a      	mov	r2, r1
 8003a54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003a58:	4b24      	ldr	r3, [pc, #144]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	897b      	ldrh	r3, [r7, #10]
 8003a5e:	1c59      	adds	r1, r3, #1
 8003a60:	8179      	strh	r1, [r7, #10]
 8003a62:	4618      	mov	r0, r3
 8003a64:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <send_DHCP_DECLINE+0x29c>)
 8003a66:	7899      	ldrb	r1, [r3, #2]
 8003a68:	1813      	adds	r3, r2, r0
 8003a6a:	460a      	mov	r2, r1
 8003a6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	1c59      	adds	r1, r3, #1
 8003a78:	8179      	strh	r1, [r7, #10]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <send_DHCP_DECLINE+0x29c>)
 8003a7e:	78d9      	ldrb	r1, [r3, #3]
 8003a80:	1813      	adds	r3, r2, r0
 8003a82:	460a      	mov	r2, r1
 8003a84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003a88:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	1c59      	adds	r1, r3, #1
 8003a90:	8179      	strh	r1, [r7, #10]
 8003a92:	4413      	add	r3, r2
 8003a94:	22ff      	movs	r2, #255	@ 0xff
 8003a96:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e009      	b.n	8003ab4 <send_DHCP_DECLINE+0x258>
 8003aa0:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	33ec      	adds	r3, #236	@ 0xec
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003aba:	dbf1      	blt.n	8003aa0 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003abc:	23ff      	movs	r3, #255	@ 0xff
 8003abe:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8003ac0:	23ff      	movs	r3, #255	@ 0xff
 8003ac2:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003ac4:	23ff      	movs	r3, #255	@ 0xff
 8003ac6:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003ac8:	23ff      	movs	r3, #255	@ 0xff
 8003aca:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <send_DHCP_DECLINE+0x2a0>)
 8003ace:	7818      	ldrb	r0, [r3, #0]
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <send_DHCP_DECLINE+0x290>)
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	2243      	movs	r2, #67	@ 0x43
 8003ad8:	9200      	str	r2, [sp, #0]
 8003ada:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003ade:	f001 f989 	bl	8004df4 <sendto>
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200073ec 	.word	0x200073ec
 8003af0:	200073f0 	.word	0x200073f0
 8003af4:	200073d0 	.word	0x200073d0
 8003af8:	200073c4 	.word	0x200073c4
 8003afc:	200073c1 	.word	0x200073c1

08003b00 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b089      	sub	sp, #36	@ 0x24
 8003b04:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003b0a:	4ba1      	ldr	r3, [pc, #644]	@ (8003d90 <parseDHCPMSG+0x290>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 ff47 	bl	80059a2 <getSn_RX_RSR>
 8003b14:	4603      	mov	r3, r0
 8003b16:	823b      	strh	r3, [r7, #16]
 8003b18:	8a3b      	ldrh	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8003b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8003d90 <parseDHCPMSG+0x290>)
 8003b20:	7818      	ldrb	r0, [r3, #0]
 8003b22:	4b9c      	ldr	r3, [pc, #624]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	1d3c      	adds	r4, r7, #4
 8003b28:	8a3a      	ldrh	r2, [r7, #16]
 8003b2a:	1cbb      	adds	r3, r7, #2
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	4623      	mov	r3, r4
 8003b30:	f001 fa94 	bl	800505c <recvfrom>
 8003b34:	4603      	mov	r3, r0
 8003b36:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8003b38:	887b      	ldrh	r3, [r7, #2]
 8003b3a:	2b43      	cmp	r3, #67	@ 0x43
 8003b3c:	f040 81ed 	bne.w	8003f1a <parseDHCPMSG+0x41a>
 8003b40:	e001      	b.n	8003b46 <parseDHCPMSG+0x46>
   else return 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e1eb      	b.n	8003f1e <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003b46:	4b93      	ldr	r3, [pc, #588]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	7f1a      	ldrb	r2, [r3, #28]
 8003b4c:	4b92      	ldr	r3, [pc, #584]	@ (8003d98 <parseDHCPMSG+0x298>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d124      	bne.n	8003b9e <parseDHCPMSG+0x9e>
 8003b54:	4b8f      	ldr	r3, [pc, #572]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	7f5a      	ldrb	r2, [r3, #29]
 8003b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003d98 <parseDHCPMSG+0x298>)
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d11d      	bne.n	8003b9e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003b62:	4b8c      	ldr	r3, [pc, #560]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	7f9a      	ldrb	r2, [r3, #30]
 8003b68:	4b8b      	ldr	r3, [pc, #556]	@ (8003d98 <parseDHCPMSG+0x298>)
 8003b6a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d116      	bne.n	8003b9e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003b70:	4b88      	ldr	r3, [pc, #544]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	7fda      	ldrb	r2, [r3, #31]
 8003b76:	4b88      	ldr	r3, [pc, #544]	@ (8003d98 <parseDHCPMSG+0x298>)
 8003b78:	78db      	ldrb	r3, [r3, #3]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d10f      	bne.n	8003b9e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003b7e:	4b85      	ldr	r3, [pc, #532]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003b86:	4b84      	ldr	r3, [pc, #528]	@ (8003d98 <parseDHCPMSG+0x298>)
 8003b88:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d107      	bne.n	8003b9e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003b8e:	4b81      	ldr	r3, [pc, #516]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003b96:	4b80      	ldr	r3, [pc, #512]	@ (8003d98 <parseDHCPMSG+0x298>)
 8003b98:	795b      	ldrb	r3, [r3, #5]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d001      	beq.n	8003ba2 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e1bd      	b.n	8003f1e <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8003ba2:	4b7e      	ldr	r3, [pc, #504]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <parseDHCPMSG+0xc2>
 8003baa:	4b7c      	ldr	r3, [pc, #496]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <parseDHCPMSG+0xc2>
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003bb4:	789b      	ldrb	r3, [r3, #2]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <parseDHCPMSG+0xc2>
 8003bba:	4b78      	ldr	r3, [pc, #480]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003bbc:	78db      	ldrb	r3, [r3, #3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d029      	beq.n	8003c16 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003bc2:	793a      	ldrb	r2, [r7, #4]
 8003bc4:	4b75      	ldr	r3, [pc, #468]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d10e      	bne.n	8003bea <parseDHCPMSG+0xea>
 8003bcc:	797a      	ldrb	r2, [r7, #5]
 8003bce:	4b73      	ldr	r3, [pc, #460]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d109      	bne.n	8003bea <parseDHCPMSG+0xea>
 8003bd6:	79ba      	ldrb	r2, [r7, #6]
 8003bd8:	4b70      	ldr	r3, [pc, #448]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003bda:	789b      	ldrb	r3, [r3, #2]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d104      	bne.n	8003bea <parseDHCPMSG+0xea>
 8003be0:	79fa      	ldrb	r2, [r7, #7]
 8003be2:	4b6e      	ldr	r3, [pc, #440]	@ (8003d9c <parseDHCPMSG+0x29c>)
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d015      	beq.n	8003c16 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003bea:	793a      	ldrb	r2, [r7, #4]
 8003bec:	4b6c      	ldr	r3, [pc, #432]	@ (8003da0 <parseDHCPMSG+0x2a0>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d10e      	bne.n	8003c12 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003bf4:	797a      	ldrb	r2, [r7, #5]
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8003da0 <parseDHCPMSG+0x2a0>)
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d109      	bne.n	8003c12 <parseDHCPMSG+0x112>
 8003bfe:	79ba      	ldrb	r2, [r7, #6]
 8003c00:	4b67      	ldr	r3, [pc, #412]	@ (8003da0 <parseDHCPMSG+0x2a0>)
 8003c02:	789b      	ldrb	r3, [r3, #2]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d104      	bne.n	8003c12 <parseDHCPMSG+0x112>
 8003c08:	79fa      	ldrb	r2, [r7, #7]
 8003c0a:	4b65      	ldr	r3, [pc, #404]	@ (8003da0 <parseDHCPMSG+0x2a0>)
 8003c0c:	78db      	ldrb	r3, [r3, #3]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e183      	b.n	8003f1e <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003c16:	4b5f      	ldr	r3, [pc, #380]	@ (8003d94 <parseDHCPMSG+0x294>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	33f0      	adds	r3, #240	@ 0xf0
 8003c20:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8003c22:	8a3b      	ldrh	r3, [r7, #16]
 8003c24:	3bf0      	subs	r3, #240	@ 0xf0
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003c2c:	e170      	b.n	8003f10 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b36      	cmp	r3, #54	@ 0x36
 8003c34:	dc76      	bgt.n	8003d24 <parseDHCPMSG+0x224>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f2c0 815d 	blt.w	8003ef6 <parseDHCPMSG+0x3f6>
 8003c3c:	2b36      	cmp	r3, #54	@ 0x36
 8003c3e:	f200 815a 	bhi.w	8003ef6 <parseDHCPMSG+0x3f6>
 8003c42:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <parseDHCPMSG+0x148>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003d31 	.word	0x08003d31
 8003c4c:	08003d51 	.word	0x08003d51
 8003c50:	08003ef7 	.word	0x08003ef7
 8003c54:	08003da9 	.word	0x08003da9
 8003c58:	08003ef7 	.word	0x08003ef7
 8003c5c:	08003ef7 	.word	0x08003ef7
 8003c60:	08003df5 	.word	0x08003df5
 8003c64:	08003ef7 	.word	0x08003ef7
 8003c68:	08003ef7 	.word	0x08003ef7
 8003c6c:	08003ef7 	.word	0x08003ef7
 8003c70:	08003ef7 	.word	0x08003ef7
 8003c74:	08003ef7 	.word	0x08003ef7
 8003c78:	08003ef7 	.word	0x08003ef7
 8003c7c:	08003ef7 	.word	0x08003ef7
 8003c80:	08003ef7 	.word	0x08003ef7
 8003c84:	08003ef7 	.word	0x08003ef7
 8003c88:	08003ef7 	.word	0x08003ef7
 8003c8c:	08003ef7 	.word	0x08003ef7
 8003c90:	08003ef7 	.word	0x08003ef7
 8003c94:	08003ef7 	.word	0x08003ef7
 8003c98:	08003ef7 	.word	0x08003ef7
 8003c9c:	08003ef7 	.word	0x08003ef7
 8003ca0:	08003ef7 	.word	0x08003ef7
 8003ca4:	08003ef7 	.word	0x08003ef7
 8003ca8:	08003ef7 	.word	0x08003ef7
 8003cac:	08003ef7 	.word	0x08003ef7
 8003cb0:	08003ef7 	.word	0x08003ef7
 8003cb4:	08003ef7 	.word	0x08003ef7
 8003cb8:	08003ef7 	.word	0x08003ef7
 8003cbc:	08003ef7 	.word	0x08003ef7
 8003cc0:	08003ef7 	.word	0x08003ef7
 8003cc4:	08003ef7 	.word	0x08003ef7
 8003cc8:	08003ef7 	.word	0x08003ef7
 8003ccc:	08003ef7 	.word	0x08003ef7
 8003cd0:	08003ef7 	.word	0x08003ef7
 8003cd4:	08003ef7 	.word	0x08003ef7
 8003cd8:	08003ef7 	.word	0x08003ef7
 8003cdc:	08003ef7 	.word	0x08003ef7
 8003ce0:	08003ef7 	.word	0x08003ef7
 8003ce4:	08003ef7 	.word	0x08003ef7
 8003ce8:	08003ef7 	.word	0x08003ef7
 8003cec:	08003ef7 	.word	0x08003ef7
 8003cf0:	08003ef7 	.word	0x08003ef7
 8003cf4:	08003ef7 	.word	0x08003ef7
 8003cf8:	08003ef7 	.word	0x08003ef7
 8003cfc:	08003ef7 	.word	0x08003ef7
 8003d00:	08003ef7 	.word	0x08003ef7
 8003d04:	08003ef7 	.word	0x08003ef7
 8003d08:	08003ef7 	.word	0x08003ef7
 8003d0c:	08003ef7 	.word	0x08003ef7
 8003d10:	08003ef7 	.word	0x08003ef7
 8003d14:	08003e41 	.word	0x08003e41
 8003d18:	08003ef7 	.word	0x08003ef7
 8003d1c:	08003d39 	.word	0x08003d39
 8003d20:	08003e9d 	.word	0x08003e9d
 8003d24:	2bff      	cmp	r3, #255	@ 0xff
 8003d26:	f040 80e6 	bne.w	8003ef6 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	617b      	str	r3, [r7, #20]
   				break;
 8003d2e:	e0ef      	b.n	8003f10 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
   				break;
 8003d36:	e0eb      	b.n	8003f10 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	617b      	str	r3, [r7, #20]
   				p++;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	617a      	str	r2, [r7, #20]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	74fb      	strb	r3, [r7, #19]
   				break;
 8003d4e:	e0df      	b.n	8003f10 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3301      	adds	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
   				p++;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	617a      	str	r2, [r7, #20]
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <parseDHCPMSG+0x2a4>)
 8003d66:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	617a      	str	r2, [r7, #20]
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <parseDHCPMSG+0x2a4>)
 8003d72:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	617a      	str	r2, [r7, #20]
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <parseDHCPMSG+0x2a4>)
 8003d7e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	617a      	str	r2, [r7, #20]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <parseDHCPMSG+0x2a4>)
 8003d8a:	70da      	strb	r2, [r3, #3]
   				break;
 8003d8c:	e0c0      	b.n	8003f10 <parseDHCPMSG+0x410>
 8003d8e:	bf00      	nop
 8003d90:	200073c1 	.word	0x200073c1
 8003d94:	200073ec 	.word	0x200073ec
 8003d98:	200073f0 	.word	0x200073f0
 8003d9c:	200073c4 	.word	0x200073c4
 8003da0:	200073c8 	.word	0x200073c8
 8003da4:	200073d8 	.word	0x200073d8
   			case routersOnSubnet :
   				p++;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3301      	adds	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	617a      	str	r2, [r7, #20]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	617a      	str	r2, [r7, #20]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	4b59      	ldr	r3, [pc, #356]	@ (8003f28 <parseDHCPMSG+0x428>)
 8003dc2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	617a      	str	r2, [r7, #20]
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	4b56      	ldr	r3, [pc, #344]	@ (8003f28 <parseDHCPMSG+0x428>)
 8003dce:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	617a      	str	r2, [r7, #20]
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	4b53      	ldr	r3, [pc, #332]	@ (8003f28 <parseDHCPMSG+0x428>)
 8003dda:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	617a      	str	r2, [r7, #20]
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	4b50      	ldr	r3, [pc, #320]	@ (8003f28 <parseDHCPMSG+0x428>)
 8003de6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003de8:	7afb      	ldrb	r3, [r7, #11]
 8003dea:	3b04      	subs	r3, #4
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4413      	add	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
   				break;
 8003df2:	e08d      	b.n	8003f10 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3301      	adds	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	617a      	str	r2, [r7, #20]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	617a      	str	r2, [r7, #20]
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <parseDHCPMSG+0x42c>)
 8003e0e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	617a      	str	r2, [r7, #20]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	4b44      	ldr	r3, [pc, #272]	@ (8003f2c <parseDHCPMSG+0x42c>)
 8003e1a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	617a      	str	r2, [r7, #20]
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	4b41      	ldr	r3, [pc, #260]	@ (8003f2c <parseDHCPMSG+0x42c>)
 8003e26:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	617a      	str	r2, [r7, #20]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	4b3e      	ldr	r3, [pc, #248]	@ (8003f2c <parseDHCPMSG+0x42c>)
 8003e32:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003e34:	7afb      	ldrb	r3, [r7, #11]
 8003e36:	3b04      	subs	r3, #4
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
   				break;
 8003e3e:	e067      	b.n	8003f10 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	617a      	str	r2, [r7, #20]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	617a      	str	r2, [r7, #20]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b35      	ldr	r3, [pc, #212]	@ (8003f30 <parseDHCPMSG+0x430>)
 8003e5c:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003e5e:	4b34      	ldr	r3, [pc, #208]	@ (8003f30 <parseDHCPMSG+0x430>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	021a      	lsls	r2, r3, #8
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1c59      	adds	r1, r3, #1
 8003e68:	6179      	str	r1, [r7, #20]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4a30      	ldr	r2, [pc, #192]	@ (8003f30 <parseDHCPMSG+0x430>)
 8003e70:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003e72:	4b2f      	ldr	r3, [pc, #188]	@ (8003f30 <parseDHCPMSG+0x430>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	021a      	lsls	r2, r3, #8
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	6179      	str	r1, [r7, #20]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	4a2b      	ldr	r2, [pc, #172]	@ (8003f30 <parseDHCPMSG+0x430>)
 8003e84:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003e86:	4b2a      	ldr	r3, [pc, #168]	@ (8003f30 <parseDHCPMSG+0x430>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1c59      	adds	r1, r3, #1
 8003e90:	6179      	str	r1, [r7, #20]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	4413      	add	r3, r2
 8003e96:	4a26      	ldr	r2, [pc, #152]	@ (8003f30 <parseDHCPMSG+0x430>)
 8003e98:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003e9a:	e039      	b.n	8003f10 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	617a      	str	r2, [r7, #20]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	617a      	str	r2, [r7, #20]
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f34 <parseDHCPMSG+0x434>)
 8003eb6:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	617a      	str	r2, [r7, #20]
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f34 <parseDHCPMSG+0x434>)
 8003ec2:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	617a      	str	r2, [r7, #20]
 8003eca:	781a      	ldrb	r2, [r3, #0]
 8003ecc:	4b19      	ldr	r3, [pc, #100]	@ (8003f34 <parseDHCPMSG+0x434>)
 8003ece:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	617a      	str	r2, [r7, #20]
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	4b16      	ldr	r3, [pc, #88]	@ (8003f34 <parseDHCPMSG+0x434>)
 8003eda:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003edc:	793a      	ldrb	r2, [r7, #4]
 8003ede:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <parseDHCPMSG+0x438>)
 8003ee0:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003ee2:	797a      	ldrb	r2, [r7, #5]
 8003ee4:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <parseDHCPMSG+0x438>)
 8003ee6:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003ee8:	79ba      	ldrb	r2, [r7, #6]
 8003eea:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <parseDHCPMSG+0x438>)
 8003eec:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003eee:	79fa      	ldrb	r2, [r7, #7]
 8003ef0:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <parseDHCPMSG+0x438>)
 8003ef2:	70da      	strb	r2, [r3, #3]
   				break;
 8003ef4:	e00c      	b.n	8003f10 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	617a      	str	r2, [r7, #20]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003f06:	7afb      	ldrb	r3, [r7, #11]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
   				break;
 8003f0e:	bf00      	nop
		while ( p < e ) {
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	f4ff ae8a 	bcc.w	8003c2e <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003f1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd90      	pop	{r4, r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200073d4 	.word	0x200073d4
 8003f2c:	200073dc 	.word	0x200073dc
 8003f30:	20000054 	.word	0x20000054
 8003f34:	200073c4 	.word	0x200073c4
 8003f38:	200073c8 	.word	0x200073c8

08003f3c <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003f42:	4b7f      	ldr	r3, [pc, #508]	@ (8004140 <DHCP_run+0x204>)
 8003f44:	f993 3000 	ldrsb.w	r3, [r3]
 8003f48:	2b06      	cmp	r3, #6
 8003f4a:	d101      	bne.n	8003f50 <DHCP_run+0x14>
 8003f4c:	2305      	movs	r3, #5
 8003f4e:	e0f3      	b.n	8004138 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003f50:	4b7c      	ldr	r3, [pc, #496]	@ (8004144 <DHCP_run+0x208>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	3301      	adds	r3, #1
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 fb7c 	bl	800565c <WIZCHIP_READ>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b22      	cmp	r3, #34	@ 0x22
 8003f68:	d006      	beq.n	8003f78 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003f6a:	4b76      	ldr	r3, [pc, #472]	@ (8004144 <DHCP_run+0x208>)
 8003f6c:	7818      	ldrb	r0, [r3, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2244      	movs	r2, #68	@ 0x44
 8003f72:	2102      	movs	r1, #2
 8003f74:	f000 fabe 	bl	80044f4 <socket>

	ret = DHCP_RUNNING;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003f7c:	f7ff fdc0 	bl	8003b00 <parseDHCPMSG>
 8003f80:	4603      	mov	r3, r0
 8003f82:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003f84:	4b6e      	ldr	r3, [pc, #440]	@ (8004140 <DHCP_run+0x204>)
 8003f86:	f993 3000 	ldrsb.w	r3, [r3]
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	f200 80d0 	bhi.w	8004130 <DHCP_run+0x1f4>
 8003f90:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <DHCP_run+0x5c>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fad 	.word	0x08003fad
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08004015 	.word	0x08004015
 8003fa4:	08004065 	.word	0x08004065
 8003fa8:	080040bf 	.word	0x080040bf
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003fac:	4b66      	ldr	r3, [pc, #408]	@ (8004148 <DHCP_run+0x20c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003fb2:	4b65      	ldr	r3, [pc, #404]	@ (8004148 <DHCP_run+0x20c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003fb8:	4b63      	ldr	r3, [pc, #396]	@ (8004148 <DHCP_run+0x20c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8003fbe:	4b62      	ldr	r3, [pc, #392]	@ (8004148 <DHCP_run+0x20c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003fc4:	f7fe fffa 	bl	8002fbc <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003fc8:	4b5d      	ldr	r3, [pc, #372]	@ (8004140 <DHCP_run+0x204>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
   		break;
 8003fce:	e0b2      	b.n	8004136 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8003fd0:	79bb      	ldrb	r3, [r7, #6]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d119      	bne.n	800400a <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800414c <DHCP_run+0x210>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	7c1a      	ldrb	r2, [r3, #16]
 8003fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8004148 <DHCP_run+0x20c>)
 8003fde:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8003fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800414c <DHCP_run+0x210>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	7c5a      	ldrb	r2, [r3, #17]
 8003fe6:	4b58      	ldr	r3, [pc, #352]	@ (8004148 <DHCP_run+0x20c>)
 8003fe8:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8003fea:	4b58      	ldr	r3, [pc, #352]	@ (800414c <DHCP_run+0x210>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	7c9a      	ldrb	r2, [r3, #18]
 8003ff0:	4b55      	ldr	r3, [pc, #340]	@ (8004148 <DHCP_run+0x20c>)
 8003ff2:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8003ff4:	4b55      	ldr	r3, [pc, #340]	@ (800414c <DHCP_run+0x210>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	7cda      	ldrb	r2, [r3, #19]
 8003ffa:	4b53      	ldr	r3, [pc, #332]	@ (8004148 <DHCP_run+0x20c>)
 8003ffc:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8003ffe:	f7ff f9a3 	bl	8003348 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8004002:	4b4f      	ldr	r3, [pc, #316]	@ (8004140 <DHCP_run+0x204>)
 8004004:	2202      	movs	r2, #2
 8004006:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8004008:	e095      	b.n	8004136 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800400a:	f000 f8b1 	bl	8004170 <check_DHCP_timeout>
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
         break;
 8004012:	e090      	b.n	8004136 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8004014:	79bb      	ldrb	r3, [r7, #6]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d116      	bne.n	8004048 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800401a:	f000 f909 	bl	8004230 <check_DHCP_leasedIP>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8004024:	4b4a      	ldr	r3, [pc, #296]	@ (8004150 <DHCP_run+0x214>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4798      	blx	r3
					reset_DHCP_timeout();
 800402a:	f000 f9d3 	bl	80043d4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800402e:	4b44      	ldr	r3, [pc, #272]	@ (8004140 <DHCP_run+0x204>)
 8004030:	2203      	movs	r2, #3
 8004032:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8004034:	e07f      	b.n	8004136 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8004036:	f000 f9cd 	bl	80043d4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800403a:	4b46      	ldr	r3, [pc, #280]	@ (8004154 <DHCP_run+0x218>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8004040:	4b3f      	ldr	r3, [pc, #252]	@ (8004140 <DHCP_run+0x204>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
		break;
 8004046:	e076      	b.n	8004136 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8004048:	79bb      	ldrb	r3, [r7, #6]
 800404a:	2b06      	cmp	r3, #6
 800404c:	d105      	bne.n	800405a <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800404e:	f000 f9c1 	bl	80043d4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004052:	4b3b      	ldr	r3, [pc, #236]	@ (8004140 <DHCP_run+0x204>)
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
		break;
 8004058:	e06d      	b.n	8004136 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800405a:	f000 f889 	bl	8004170 <check_DHCP_timeout>
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
		break;
 8004062:	e068      	b.n	8004136 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8004064:	2304      	movs	r3, #4
 8004066:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8004068:	4b3b      	ldr	r3, [pc, #236]	@ (8004158 <DHCP_run+0x21c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d060      	beq.n	8004134 <DHCP_run+0x1f8>
 8004072:	4b39      	ldr	r3, [pc, #228]	@ (8004158 <DHCP_run+0x21c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	085a      	lsrs	r2, r3, #1
 8004078:	4b38      	ldr	r3, [pc, #224]	@ (800415c <DHCP_run+0x220>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d259      	bcs.n	8004134 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8004084:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <DHCP_run+0x20c>)
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <DHCP_run+0x224>)
 800408a:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 800408c:	4b2e      	ldr	r3, [pc, #184]	@ (8004148 <DHCP_run+0x20c>)
 800408e:	785a      	ldrb	r2, [r3, #1]
 8004090:	4b33      	ldr	r3, [pc, #204]	@ (8004160 <DHCP_run+0x224>)
 8004092:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004094:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <DHCP_run+0x20c>)
 8004096:	789a      	ldrb	r2, [r3, #2]
 8004098:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <DHCP_run+0x224>)
 800409a:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 800409c:	4b2a      	ldr	r3, [pc, #168]	@ (8004148 <DHCP_run+0x20c>)
 800409e:	78da      	ldrb	r2, [r3, #3]
 80040a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004160 <DHCP_run+0x224>)
 80040a2:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80040a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004164 <DHCP_run+0x228>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004164 <DHCP_run+0x228>)
 80040ac:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80040ae:	f7ff f94b 	bl	8003348 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80040b2:	f000 f98f 	bl	80043d4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80040b6:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <DHCP_run+0x204>)
 80040b8:	2204      	movs	r2, #4
 80040ba:	701a      	strb	r2, [r3, #0]
			}
		break;
 80040bc:	e03a      	b.n	8004134 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80040be:	2304      	movs	r3, #4
 80040c0:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80040c2:	79bb      	ldrb	r3, [r7, #6]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d125      	bne.n	8004114 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80040c8:	4b27      	ldr	r3, [pc, #156]	@ (8004168 <DHCP_run+0x22c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80040ce:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <DHCP_run+0x224>)
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004148 <DHCP_run+0x20c>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d111      	bne.n	80040fe <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80040da:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <DHCP_run+0x224>)
 80040dc:	785a      	ldrb	r2, [r3, #1]
 80040de:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <DHCP_run+0x20c>)
 80040e0:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d10b      	bne.n	80040fe <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80040e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <DHCP_run+0x224>)
 80040e8:	789a      	ldrb	r2, [r3, #2]
 80040ea:	4b17      	ldr	r3, [pc, #92]	@ (8004148 <DHCP_run+0x20c>)
 80040ec:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d105      	bne.n	80040fe <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80040f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <DHCP_run+0x224>)
 80040f4:	78da      	ldrb	r2, [r3, #3]
 80040f6:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <DHCP_run+0x20c>)
 80040f8:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d004      	beq.n	8004108 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80040fe:	2303      	movs	r3, #3
 8004100:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8004102:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <DHCP_run+0x230>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8004108:	f000 f964 	bl	80043d4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 800410c:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <DHCP_run+0x204>)
 800410e:	2203      	movs	r2, #3
 8004110:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8004112:	e010      	b.n	8004136 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8004114:	79bb      	ldrb	r3, [r7, #6]
 8004116:	2b06      	cmp	r3, #6
 8004118:	d105      	bne.n	8004126 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800411a:	f000 f95b 	bl	80043d4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <DHCP_run+0x204>)
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
	   	break;
 8004124:	e007      	b.n	8004136 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8004126:	f000 f823 	bl	8004170 <check_DHCP_timeout>
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
	   	break;
 800412e:	e002      	b.n	8004136 <DHCP_run+0x1fa>
		default :
   		break;
 8004130:	bf00      	nop
 8004132:	e000      	b.n	8004136 <DHCP_run+0x1fa>
		break;
 8004134:	bf00      	nop
	}

	return ret;
 8004136:	79fb      	ldrb	r3, [r7, #7]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200073e0 	.word	0x200073e0
 8004144:	200073c1 	.word	0x200073c1
 8004148:	200073d0 	.word	0x200073d0
 800414c:	200073ec 	.word	0x200073ec
 8004150:	20000064 	.word	0x20000064
 8004154:	2000006c 	.word	0x2000006c
 8004158:	20000054 	.word	0x20000054
 800415c:	200073e4 	.word	0x200073e4
 8004160:	200073cc 	.word	0x200073cc
 8004164:	200073e8 	.word	0x200073e8
 8004168:	200073e1 	.word	0x200073e1
 800416c:	20000068 	.word	0x20000068

08004170 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8004176:	2301      	movs	r3, #1
 8004178:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800417a:	4b29      	ldr	r3, [pc, #164]	@ (8004220 <check_DHCP_timeout+0xb0>)
 800417c:	f993 3000 	ldrsb.w	r3, [r3]
 8004180:	2b01      	cmp	r3, #1
 8004182:	dc2d      	bgt.n	80041e0 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8004184:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <check_DHCP_timeout+0xb4>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <check_DHCP_timeout+0xb8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d242      	bcs.n	8004216 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8004190:	4b26      	ldr	r3, [pc, #152]	@ (800422c <check_DHCP_timeout+0xbc>)
 8004192:	f993 3000 	ldrsb.w	r3, [r3]
 8004196:	2b04      	cmp	r3, #4
 8004198:	d00c      	beq.n	80041b4 <check_DHCP_timeout+0x44>
 800419a:	2b04      	cmp	r3, #4
 800419c:	dc0d      	bgt.n	80041ba <check_DHCP_timeout+0x4a>
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d002      	beq.n	80041a8 <check_DHCP_timeout+0x38>
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d003      	beq.n	80041ae <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80041a6:	e008      	b.n	80041ba <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80041a8:	f7fe ff08 	bl	8002fbc <send_DHCP_DISCOVER>
				break;
 80041ac:	e006      	b.n	80041bc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80041ae:	f7ff f8cb 	bl	8003348 <send_DHCP_REQUEST>
				break;
 80041b2:	e003      	b.n	80041bc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80041b4:	f7ff f8c8 	bl	8003348 <send_DHCP_REQUEST>
				break;
 80041b8:	e000      	b.n	80041bc <check_DHCP_timeout+0x4c>
				break;
 80041ba:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80041bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <check_DHCP_timeout+0xb8>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80041c2:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <check_DHCP_timeout+0xb8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330a      	adds	r3, #10
 80041c8:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <check_DHCP_timeout+0xb4>)
 80041ca:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <check_DHCP_timeout+0xb0>)
 80041ce:	f993 3000 	ldrsb.w	r3, [r3]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	3301      	adds	r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	b25a      	sxtb	r2, r3
 80041da:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <check_DHCP_timeout+0xb0>)
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e01a      	b.n	8004216 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <check_DHCP_timeout+0xbc>)
 80041e2:	f993 3000 	ldrsb.w	r3, [r3]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d00c      	beq.n	8004204 <check_DHCP_timeout+0x94>
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	dc10      	bgt.n	8004210 <check_DHCP_timeout+0xa0>
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d002      	beq.n	80041f8 <check_DHCP_timeout+0x88>
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d006      	beq.n	8004204 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80041f6:	e00b      	b.n	8004210 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <check_DHCP_timeout+0xbc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80041fe:	2300      	movs	r3, #0
 8004200:	71fb      	strb	r3, [r7, #7]
				break;
 8004202:	e006      	b.n	8004212 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8004204:	f7fe feda 	bl	8002fbc <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004208:	4b08      	ldr	r3, [pc, #32]	@ (800422c <check_DHCP_timeout+0xbc>)
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
				break;
 800420e:	e000      	b.n	8004212 <check_DHCP_timeout+0xa2>
				break;
 8004210:	bf00      	nop
		}
		reset_DHCP_timeout();
 8004212:	f000 f8df 	bl	80043d4 <reset_DHCP_timeout>
	}
	return ret;
 8004216:	79fb      	ldrb	r3, [r7, #7]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	200073e1 	.word	0x200073e1
 8004224:	20000058 	.word	0x20000058
 8004228:	200073e4 	.word	0x200073e4
 800422c:	200073e0 	.word	0x200073e0

08004230 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8004236:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800423a:	f001 fa0f 	bl	800565c <WIZCHIP_READ>
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8004242:	2103      	movs	r1, #3
 8004244:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004248:	f001 fa54 	bl	80056f4 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800424c:	4b13      	ldr	r3, [pc, #76]	@ (800429c <check_DHCP_leasedIP+0x6c>)
 800424e:	7818      	ldrb	r0, [r3, #0]
 8004250:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <check_DHCP_leasedIP+0x70>)
 8004258:	2211      	movs	r2, #17
 800425a:	4912      	ldr	r1, [pc, #72]	@ (80042a4 <check_DHCP_leasedIP+0x74>)
 800425c:	f000 fdca 	bl	8004df4 <sendto>
 8004260:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	4619      	mov	r1, r3
 8004266:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800426a:	f001 fa43 	bl	80056f4 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f113 0f0d 	cmn.w	r3, #13
 8004274:	d101      	bne.n	800427a <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8004276:	2301      	movs	r3, #1
 8004278:	e00c      	b.n	8004294 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800427a:	f7ff faef 	bl	800385c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800427e:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <check_DHCP_leasedIP+0x78>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8004284:	bf00      	nop
 8004286:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <check_DHCP_leasedIP+0x78>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d9f9      	bls.n	8004286 <check_DHCP_leasedIP+0x56>

		return 0;
 8004292:	2300      	movs	r3, #0
	}
}	
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	200073c1 	.word	0x200073c1
 80042a0:	200073d0 	.word	0x200073d0
 80042a4:	08008284 	.word	0x08008284
 80042a8:	200073e4 	.word	0x200073e4

080042ac <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80042bc:	2206      	movs	r2, #6
 80042be:	493f      	ldr	r1, [pc, #252]	@ (80043bc <DHCP_init+0x110>)
 80042c0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80042c4:	f001 fa64 	bl	8005790 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80042c8:	4b3c      	ldr	r3, [pc, #240]	@ (80043bc <DHCP_init+0x110>)
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	4b3b      	ldr	r3, [pc, #236]	@ (80043bc <DHCP_init+0x110>)
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <DHCP_init+0x110>)
 80042d6:	789b      	ldrb	r3, [r3, #2]
 80042d8:	4313      	orrs	r3, r2
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	4b37      	ldr	r3, [pc, #220]	@ (80043bc <DHCP_init+0x110>)
 80042de:	78db      	ldrb	r3, [r3, #3]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b35      	ldr	r3, [pc, #212]	@ (80043bc <DHCP_init+0x110>)
 80042e6:	791b      	ldrb	r3, [r3, #4]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	4b33      	ldr	r3, [pc, #204]	@ (80043bc <DHCP_init+0x110>)
 80042ee:	795b      	ldrb	r3, [r3, #5]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d117      	bne.n	8004328 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 80042f8:	4b30      	ldr	r3, [pc, #192]	@ (80043bc <DHCP_init+0x110>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80042fe:	4b2f      	ldr	r3, [pc, #188]	@ (80043bc <DHCP_init+0x110>)
 8004300:	2208      	movs	r2, #8
 8004302:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8004304:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <DHCP_init+0x110>)
 8004306:	22dc      	movs	r2, #220	@ 0xdc
 8004308:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800430a:	4b2c      	ldr	r3, [pc, #176]	@ (80043bc <DHCP_init+0x110>)
 800430c:	2200      	movs	r2, #0
 800430e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8004310:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <DHCP_init+0x110>)
 8004312:	2200      	movs	r2, #0
 8004314:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8004316:	4b29      	ldr	r3, [pc, #164]	@ (80043bc <DHCP_init+0x110>)
 8004318:	2200      	movs	r2, #0
 800431a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800431c:	2206      	movs	r2, #6
 800431e:	4927      	ldr	r1, [pc, #156]	@ (80043bc <DHCP_init+0x110>)
 8004320:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004324:	f001 fa94 	bl	8005850 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8004328:	4a25      	ldr	r2, [pc, #148]	@ (80043c0 <DHCP_init+0x114>)
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800432e:	4a25      	ldr	r2, [pc, #148]	@ (80043c4 <DHCP_init+0x118>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8004334:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <DHCP_init+0x11c>)
 8004336:	4a25      	ldr	r2, [pc, #148]	@ (80043cc <DHCP_init+0x120>)
 8004338:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800433a:	4b20      	ldr	r3, [pc, #128]	@ (80043bc <DHCP_init+0x110>)
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	461a      	mov	r2, r3
 8004340:	4b21      	ldr	r3, [pc, #132]	@ (80043c8 <DHCP_init+0x11c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4413      	add	r3, r2
 8004346:	4a20      	ldr	r2, [pc, #128]	@ (80043c8 <DHCP_init+0x11c>)
 8004348:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800434a:	4b1c      	ldr	r3, [pc, #112]	@ (80043bc <DHCP_init+0x110>)
 800434c:	791b      	ldrb	r3, [r3, #4]
 800434e:	461a      	mov	r2, r3
 8004350:	4b1d      	ldr	r3, [pc, #116]	@ (80043c8 <DHCP_init+0x11c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4413      	add	r3, r2
 8004356:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <DHCP_init+0x11c>)
 8004358:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800435a:	4b18      	ldr	r3, [pc, #96]	@ (80043bc <DHCP_init+0x110>)
 800435c:	795b      	ldrb	r3, [r3, #5]
 800435e:	461a      	mov	r2, r3
 8004360:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <DHCP_init+0x11c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4413      	add	r3, r2
 8004366:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <DHCP_init+0x11c>)
 8004368:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800436a:	4b14      	ldr	r3, [pc, #80]	@ (80043bc <DHCP_init+0x110>)
 800436c:	78da      	ldrb	r2, [r3, #3]
 800436e:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <DHCP_init+0x110>)
 8004370:	791b      	ldrb	r3, [r3, #4]
 8004372:	4053      	eors	r3, r2
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b11      	ldr	r3, [pc, #68]	@ (80043bc <DHCP_init+0x110>)
 8004378:	795b      	ldrb	r3, [r3, #5]
 800437a:	4053      	eors	r3, r2
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	4b11      	ldr	r3, [pc, #68]	@ (80043c8 <DHCP_init+0x11c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4413      	add	r3, r2
 8004386:	4a10      	ldr	r2, [pc, #64]	@ (80043c8 <DHCP_init+0x11c>)
 8004388:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	2204      	movs	r2, #4
 8004390:	4619      	mov	r1, r3
 8004392:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004396:	f001 fa5b 	bl	8005850 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	2204      	movs	r2, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80043a6:	f001 fa53 	bl	8005850 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80043aa:	f000 f813 	bl	80043d4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80043ae:	4b08      	ldr	r3, [pc, #32]	@ (80043d0 <DHCP_init+0x124>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	200073f0 	.word	0x200073f0
 80043c0:	200073c1 	.word	0x200073c1
 80043c4:	200073ec 	.word	0x200073ec
 80043c8:	200073e8 	.word	0x200073e8
 80043cc:	12345678 	.word	0x12345678
 80043d0:	200073e0 	.word	0x200073e0

080043d4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80043d8:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <reset_DHCP_timeout+0x20>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80043de:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <reset_DHCP_timeout+0x24>)
 80043e0:	220a      	movs	r2, #10
 80043e2:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <reset_DHCP_timeout+0x28>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	200073e4 	.word	0x200073e4
 80043f8:	20000058 	.word	0x20000058
 80043fc:	200073e1 	.word	0x200073e1

08004400 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8004408:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <getIPfromDHCP+0x3c>)
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	4a09      	ldr	r2, [pc, #36]	@ (800443c <getIPfromDHCP+0x3c>)
 8004416:	7852      	ldrb	r2, [r2, #1]
 8004418:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3302      	adds	r3, #2
 800441e:	4a07      	ldr	r2, [pc, #28]	@ (800443c <getIPfromDHCP+0x3c>)
 8004420:	7892      	ldrb	r2, [r2, #2]
 8004422:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3303      	adds	r3, #3
 8004428:	4a04      	ldr	r2, [pc, #16]	@ (800443c <getIPfromDHCP+0x3c>)
 800442a:	78d2      	ldrb	r2, [r2, #3]
 800442c:	701a      	strb	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	200073d0 	.word	0x200073d0

08004440 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8004448:	4b0c      	ldr	r3, [pc, #48]	@ (800447c <getGWfromDHCP+0x3c>)
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3301      	adds	r3, #1
 8004454:	4a09      	ldr	r2, [pc, #36]	@ (800447c <getGWfromDHCP+0x3c>)
 8004456:	7852      	ldrb	r2, [r2, #1]
 8004458:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3302      	adds	r3, #2
 800445e:	4a07      	ldr	r2, [pc, #28]	@ (800447c <getGWfromDHCP+0x3c>)
 8004460:	7892      	ldrb	r2, [r2, #2]
 8004462:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3303      	adds	r3, #3
 8004468:	4a04      	ldr	r2, [pc, #16]	@ (800447c <getGWfromDHCP+0x3c>)
 800446a:	78d2      	ldrb	r2, [r2, #3]
 800446c:	701a      	strb	r2, [r3, #0]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	200073d4 	.word	0x200073d4

08004480 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <getSNfromDHCP+0x3c>)
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3301      	adds	r3, #1
 8004494:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <getSNfromDHCP+0x3c>)
 8004496:	7852      	ldrb	r2, [r2, #1]
 8004498:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3302      	adds	r3, #2
 800449e:	4a07      	ldr	r2, [pc, #28]	@ (80044bc <getSNfromDHCP+0x3c>)
 80044a0:	7892      	ldrb	r2, [r2, #2]
 80044a2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3303      	adds	r3, #3
 80044a8:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <getSNfromDHCP+0x3c>)
 80044aa:	78d2      	ldrb	r2, [r2, #3]
 80044ac:	701a      	strb	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	200073d8 	.word	0x200073d8

080044c0 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	2b09      	cmp	r3, #9
 80044d6:	d803      	bhi.n	80044e0 <NibbleToHex+0x20>
    return nibble + '0';
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	3330      	adds	r3, #48	@ 0x30
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e002      	b.n	80044e6 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	3337      	adds	r3, #55	@ 0x37
 80044e4:	b2db      	uxtb	r3, r3
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4623      	mov	r3, r4
 8004504:	71fb      	strb	r3, [r7, #7]
 8004506:	4603      	mov	r3, r0
 8004508:	71bb      	strb	r3, [r7, #6]
 800450a:	460b      	mov	r3, r1
 800450c:	80bb      	strh	r3, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d902      	bls.n	800451e <socket+0x2a>
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	e0f0      	b.n	8004700 <socket+0x20c>
	switch(protocol)
 800451e:	79bb      	ldrb	r3, [r7, #6]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d005      	beq.n	8004530 <socket+0x3c>
 8004524:	2b00      	cmp	r3, #0
 8004526:	dd11      	ble.n	800454c <socket+0x58>
 8004528:	3b02      	subs	r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d80e      	bhi.n	800454c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800452e:	e011      	b.n	8004554 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8004530:	f107 030c 	add.w	r3, r7, #12
 8004534:	2204      	movs	r2, #4
 8004536:	4619      	mov	r1, r3
 8004538:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800453c:	f001 f928 	bl	8005790 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <socket+0x5e>
 8004546:	f06f 0302 	mvn.w	r3, #2
 800454a:	e0d9      	b.n	8004700 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800454c:	f06f 0304 	mvn.w	r3, #4
 8004550:	e0d6      	b.n	8004700 <socket+0x20c>
	    break;
 8004552:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <socket+0x70>
 800455e:	f06f 0305 	mvn.w	r3, #5
 8004562:	e0cd      	b.n	8004700 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d028      	beq.n	80045bc <socket+0xc8>
	{
   	switch(protocol)
 800456a:	79bb      	ldrb	r3, [r7, #6]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d002      	beq.n	8004576 <socket+0x82>
 8004570:	2b02      	cmp	r3, #2
 8004572:	d008      	beq.n	8004586 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004574:	e022      	b.n	80045bc <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800457c:	2b00      	cmp	r3, #0
 800457e:	d11a      	bne.n	80045b6 <socket+0xc2>
 8004580:	f06f 0305 	mvn.w	r3, #5
 8004584:	e0bc      	b.n	8004700 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004594:	2b00      	cmp	r3, #0
 8004596:	db02      	blt.n	800459e <socket+0xaa>
 8004598:	f06f 0305 	mvn.w	r3, #5
 800459c:	e0b0      	b.n	8004700 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80045a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	db04      	blt.n	80045ba <socket+0xc6>
 80045b0:	f06f 0305 	mvn.w	r3, #5
 80045b4:	e0a4      	b.n	8004700 <socket+0x20c>
   	      break;
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <socket+0xc8>
   	      break;
 80045ba:	bf00      	nop
   	}
   }
	close(sn);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f8ac 	bl	800471c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3301      	adds	r3, #1
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4618      	mov	r0, r3
 80045ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d2:	f023 030f 	bic.w	r3, r3, #15
 80045d6:	b25a      	sxtb	r2, r3
 80045d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80045dc:	4313      	orrs	r3, r2
 80045de:	b25b      	sxtb	r3, r3
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	4619      	mov	r1, r3
 80045e4:	f001 f886 	bl	80056f4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80045e8:	88bb      	ldrh	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d110      	bne.n	8004610 <socket+0x11c>
	{
	   port = sock_any_port++;
 80045ee:	4b46      	ldr	r3, [pc, #280]	@ (8004708 <socket+0x214>)
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	b291      	uxth	r1, r2
 80045f6:	4a44      	ldr	r2, [pc, #272]	@ (8004708 <socket+0x214>)
 80045f8:	8011      	strh	r1, [r2, #0]
 80045fa:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80045fc:	4b42      	ldr	r3, [pc, #264]	@ (8004708 <socket+0x214>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <socket+0x11c>
 8004608:	4b3f      	ldr	r3, [pc, #252]	@ (8004708 <socket+0x214>)
 800460a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800460e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	3301      	adds	r3, #1
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800461c:	461a      	mov	r2, r3
 800461e:	88bb      	ldrh	r3, [r7, #4]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	b29b      	uxth	r3, r3
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f001 f863 	bl	80056f4 <WIZCHIP_WRITE>
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	3301      	adds	r3, #1
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463a:	461a      	mov	r2, r3
 800463c:	88bb      	ldrh	r3, [r7, #4]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f001 f856 	bl	80056f4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	3301      	adds	r3, #1
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f001 f84c 	bl	80056f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800465c:	bf00      	nop
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	3301      	adds	r3, #1
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fff6 	bl	800565c <WIZCHIP_READ>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f3      	bne.n	800465e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	2201      	movs	r2, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	b21b      	sxth	r3, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	b21a      	sxth	r2, r3
 8004684:	4b21      	ldr	r3, [pc, #132]	@ (800470c <socket+0x218>)
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b21b      	sxth	r3, r3
 800468a:	4013      	ands	r3, r2
 800468c:	b21b      	sxth	r3, r3
 800468e:	b29a      	uxth	r2, r3
 8004690:	4b1e      	ldr	r3, [pc, #120]	@ (800470c <socket+0x218>)
 8004692:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 0201 	and.w	r2, r3, #1
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	b21a      	sxth	r2, r3
 80046a2:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <socket+0x218>)
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b21b      	sxth	r3, r3
 80046a8:	4313      	orrs	r3, r2
 80046aa:	b21b      	sxth	r3, r3
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	4b17      	ldr	r3, [pc, #92]	@ (800470c <socket+0x218>)
 80046b0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	2201      	movs	r2, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	b21a      	sxth	r2, r3
 80046c0:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <socket+0x21c>)
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	4013      	ands	r3, r2
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <socket+0x21c>)
 80046ce:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	4a10      	ldr	r2, [pc, #64]	@ (8004714 <socket+0x220>)
 80046d4:	2100      	movs	r1, #0
 80046d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004718 <socket+0x224>)
 80046de:	2100      	movs	r1, #0
 80046e0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80046e2:	bf00      	nop
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	3301      	adds	r3, #1
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 ffb3 	bl	800565c <WIZCHIP_READ>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f3      	beq.n	80046e4 <socket+0x1f0>
   return (int8_t)sn;
 80046fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bd90      	pop	{r4, r7, pc}
 8004708:	20000070 	.word	0x20000070
 800470c:	200073f6 	.word	0x200073f6
 8004710:	200073f8 	.word	0x200073f8
 8004714:	200073fc 	.word	0x200073fc
 8004718:	2000740c 	.word	0x2000740c

0800471c <close>:

int8_t close(uint8_t sn)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d902      	bls.n	8004732 <close+0x16>
 800472c:	f04f 33ff 	mov.w	r3, #4294967295
 8004730:	e055      	b.n	80047de <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	3301      	adds	r3, #1
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800473e:	2110      	movs	r1, #16
 8004740:	4618      	mov	r0, r3
 8004742:	f000 ffd7 	bl	80056f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004746:	bf00      	nop
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	3301      	adds	r3, #1
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004754:	4618      	mov	r0, r3
 8004756:	f000 ff81 	bl	800565c <WIZCHIP_READ>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f3      	bne.n	8004748 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	3301      	adds	r3, #1
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800476c:	211f      	movs	r1, #31
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ffc0 	bl	80056f4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	2201      	movs	r2, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	b21b      	sxth	r3, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	b21a      	sxth	r2, r3
 8004782:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <close+0xcc>)
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b21b      	sxth	r3, r3
 8004788:	4013      	ands	r3, r2
 800478a:	b21b      	sxth	r3, r3
 800478c:	b29a      	uxth	r2, r3
 800478e:	4b16      	ldr	r3, [pc, #88]	@ (80047e8 <close+0xcc>)
 8004790:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	2201      	movs	r2, #1
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	b21b      	sxth	r3, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	b21a      	sxth	r2, r3
 80047a0:	4b12      	ldr	r3, [pc, #72]	@ (80047ec <close+0xd0>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	4013      	ands	r3, r2
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <close+0xd0>)
 80047ae:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	4a0f      	ldr	r2, [pc, #60]	@ (80047f0 <close+0xd4>)
 80047b4:	2100      	movs	r1, #0
 80047b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	4a0d      	ldr	r2, [pc, #52]	@ (80047f4 <close+0xd8>)
 80047be:	2100      	movs	r1, #0
 80047c0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80047c2:	bf00      	nop
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	3301      	adds	r3, #1
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 ff43 	bl	800565c <WIZCHIP_READ>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f3      	bne.n	80047c4 <close+0xa8>
	return SOCK_OK;
 80047dc:	2301      	movs	r3, #1
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	200073f6 	.word	0x200073f6
 80047ec:	200073f8 	.word	0x200073f8
 80047f0:	200073fc 	.word	0x200073fc
 80047f4:	2000740c 	.word	0x2000740c

080047f8 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	71fb      	strb	r3, [r7, #7]
 8004804:	4613      	mov	r3, r2
 8004806:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d902      	bls.n	8004814 <connect+0x1c>
 800480e:	f04f 33ff 	mov.w	r3, #4294967295
 8004812:	e0c6      	b.n	80049a2 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	3301      	adds	r3, #1
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4618      	mov	r0, r3
 800481e:	f000 ff1d 	bl	800565c <WIZCHIP_READ>
 8004822:	4603      	mov	r3, r0
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	2b01      	cmp	r3, #1
 800482a:	d002      	beq.n	8004832 <connect+0x3a>
 800482c:	f06f 0304 	mvn.w	r3, #4
 8004830:	e0b7      	b.n	80049a2 <connect+0x1aa>
   CHECK_SOCKINIT();
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	3301      	adds	r3, #1
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff0c 	bl	800565c <WIZCHIP_READ>
 8004844:	4603      	mov	r3, r0
 8004846:	2b13      	cmp	r3, #19
 8004848:	d002      	beq.n	8004850 <connect+0x58>
 800484a:	f06f 0302 	mvn.w	r3, #2
 800484e:	e0a8      	b.n	80049a2 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	3201      	adds	r2, #1
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	4413      	add	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	3202      	adds	r2, #2
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	4413      	add	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	3203      	adds	r2, #3
 800487a:	7812      	ldrb	r2, [r2, #0]
 800487c:	4413      	add	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d002      	beq.n	800488e <connect+0x96>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <connect+0x9c>
 800488e:	f06f 030b 	mvn.w	r3, #11
 8004892:	e086      	b.n	80049a2 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004894:	88bb      	ldrh	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <connect+0xa8>
 800489a:	f06f 030a 	mvn.w	r3, #10
 800489e:	e080      	b.n	80049a2 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	3301      	adds	r3, #1
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80048ac:	2204      	movs	r2, #4
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 ffcd 	bl	8005850 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	3301      	adds	r3, #1
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048c2:	461a      	mov	r2, r3
 80048c4:	88bb      	ldrh	r3, [r7, #4]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 ff10 	bl	80056f4 <WIZCHIP_WRITE>
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	3301      	adds	r3, #1
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80048e0:	461a      	mov	r2, r3
 80048e2:	88bb      	ldrh	r3, [r7, #4]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f000 ff03 	bl	80056f4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	3301      	adds	r3, #1
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048fa:	2104      	movs	r1, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fef9 	bl	80056f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004902:	bf00      	nop
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	3301      	adds	r3, #1
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fea3 	bl	800565c <WIZCHIP_READ>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f3      	bne.n	8004904 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800491c:	4b23      	ldr	r3, [pc, #140]	@ (80049ac <connect+0x1b4>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	fa42 f303 	asr.w	r3, r2, r3
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02b      	beq.n	8004988 <connect+0x190>
 8004930:	2300      	movs	r3, #0
 8004932:	e036      	b.n	80049a2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	3301      	adds	r3, #1
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fe8b 	bl	800565c <WIZCHIP_READ>
 8004946:	4603      	mov	r3, r0
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	3301      	adds	r3, #1
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800495c:	2108      	movs	r1, #8
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fec8 	bl	80056f4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004964:	f06f 030c 	mvn.w	r3, #12
 8004968:	e01b      	b.n	80049a2 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	3301      	adds	r3, #1
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fe70 	bl	800565c <WIZCHIP_READ>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8004982:	f06f 0303 	mvn.w	r3, #3
 8004986:	e00c      	b.n	80049a2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	3301      	adds	r3, #1
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fe61 	bl	800565c <WIZCHIP_READ>
 800499a:	4603      	mov	r3, r0
 800499c:	2b17      	cmp	r3, #23
 800499e:	d1c9      	bne.n	8004934 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80049a0:	2301      	movs	r3, #1
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200073f6 	.word	0x200073f6

080049b0 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d902      	bls.n	80049c6 <disconnect+0x16>
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295
 80049c4:	e062      	b.n	8004a8c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3301      	adds	r3, #1
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fe44 	bl	800565c <WIZCHIP_READ>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d002      	beq.n	80049e4 <disconnect+0x34>
 80049de:	f06f 0304 	mvn.w	r3, #4
 80049e2:	e053      	b.n	8004a8c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	3301      	adds	r3, #1
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049f0:	2108      	movs	r1, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fe7e 	bl	80056f4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80049f8:	bf00      	nop
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	3301      	adds	r3, #1
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fe28 	bl	800565c <WIZCHIP_READ>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f3      	bne.n	80049fa <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	2201      	movs	r2, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	b21b      	sxth	r3, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	b21a      	sxth	r2, r3
 8004a20:	4b1c      	ldr	r3, [pc, #112]	@ (8004a94 <disconnect+0xe4>)
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	4013      	ands	r3, r2
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <disconnect+0xe4>)
 8004a2e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004a30:	4b19      	ldr	r3, [pc, #100]	@ (8004a98 <disconnect+0xe8>)
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	fa42 f303 	asr.w	r3, r2, r3
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d016      	beq.n	8004a72 <disconnect+0xc2>
 8004a44:	2300      	movs	r3, #0
 8004a46:	e021      	b.n	8004a8c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fe01 	bl	800565c <WIZCHIP_READ>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d006      	beq.n	8004a72 <disconnect+0xc2>
	   {
	      close(sn);
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fe58 	bl	800471c <close>
	      return SOCKERR_TIMEOUT;
 8004a6c:	f06f 030c 	mvn.w	r3, #12
 8004a70:	e00c      	b.n	8004a8c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	3301      	adds	r3, #1
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fdec 	bl	800565c <WIZCHIP_READ>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1de      	bne.n	8004a48 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	200073f8 	.word	0x200073f8
 8004a98:	200073f6 	.word	0x200073f6

08004a9c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6039      	str	r1, [r7, #0]
 8004aa6:	71fb      	strb	r3, [r7, #7]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d902      	bls.n	8004ac0 <send+0x24>
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
 8004abe:	e0dd      	b.n	8004c7c <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fdc7 	bl	800565c <WIZCHIP_READ>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <send+0x42>
 8004ad8:	f06f 0304 	mvn.w	r3, #4
 8004adc:	e0ce      	b.n	8004c7c <send+0x1e0>
   CHECK_SOCKDATA();
 8004ade:	88bb      	ldrh	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <send+0x4e>
 8004ae4:	f06f 030d 	mvn.w	r3, #13
 8004ae8:	e0c8      	b.n	8004c7c <send+0x1e0>
   tmp = getSn_SR(sn);
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	3301      	adds	r3, #1
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fdb0 	bl	800565c <WIZCHIP_READ>
 8004afc:	4603      	mov	r3, r0
 8004afe:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b17      	cmp	r3, #23
 8004b04:	d005      	beq.n	8004b12 <send+0x76>
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b1c      	cmp	r3, #28
 8004b0a:	d002      	beq.n	8004b12 <send+0x76>
 8004b0c:	f06f 0306 	mvn.w	r3, #6
 8004b10:	e0b4      	b.n	8004c7c <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004b12:	4b5c      	ldr	r3, [pc, #368]	@ (8004c84 <send+0x1e8>)
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	fa42 f303 	asr.w	r3, r2, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d039      	beq.n	8004b9a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fd92 	bl	800565c <WIZCHIP_READ>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d019      	beq.n	8004b7e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	3301      	adds	r3, #1
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004b56:	2110      	movs	r1, #16
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fdcb 	bl	80056f4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	2201      	movs	r2, #1
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	b21b      	sxth	r3, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	b21a      	sxth	r2, r3
 8004b6c:	4b45      	ldr	r3, [pc, #276]	@ (8004c84 <send+0x1e8>)
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b21b      	sxth	r3, r3
 8004b72:	4013      	ands	r3, r2
 8004b74:	b21b      	sxth	r3, r3
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	4b42      	ldr	r3, [pc, #264]	@ (8004c84 <send+0x1e8>)
 8004b7a:	801a      	strh	r2, [r3, #0]
 8004b7c:	e00d      	b.n	8004b9a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <send+0xfa>
      {
         close(sn);
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fdc6 	bl	800471c <close>
         return SOCKERR_TIMEOUT;
 8004b90:	f06f 030c 	mvn.w	r3, #12
 8004b94:	e072      	b.n	8004c7c <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e070      	b.n	8004c7c <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fd58 	bl	800565c <WIZCHIP_READ>
 8004bac:	4603      	mov	r3, r0
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004bb2:	88ba      	ldrh	r2, [r7, #4]
 8004bb4:	89bb      	ldrh	r3, [r7, #12]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d901      	bls.n	8004bbe <send+0x122>
 8004bba:	89bb      	ldrh	r3, [r7, #12]
 8004bbc:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fea5 	bl	8005910 <getSn_TX_FSR>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	3301      	adds	r3, #1
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fd40 	bl	800565c <WIZCHIP_READ>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b17      	cmp	r3, #23
 8004be4:	d009      	beq.n	8004bfa <send+0x15e>
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b1c      	cmp	r3, #28
 8004bea:	d006      	beq.n	8004bfa <send+0x15e>
      {
         close(sn);
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fd94 	bl	800471c <close>
         return SOCKERR_SOCKSTATUS;
 8004bf4:	f06f 0306 	mvn.w	r3, #6
 8004bf8:	e040      	b.n	8004c7c <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004bfa:	4b23      	ldr	r3, [pc, #140]	@ (8004c88 <send+0x1ec>)
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	fa42 f303 	asr.w	r3, r2, r3
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <send+0x17e>
 8004c0e:	88ba      	ldrh	r2, [r7, #4]
 8004c10:	89bb      	ldrh	r3, [r7, #12]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d901      	bls.n	8004c1a <send+0x17e>
 8004c16:	2300      	movs	r3, #0
 8004c18:	e030      	b.n	8004c7c <send+0x1e0>
      if(len <= freesize) break;
 8004c1a:	88ba      	ldrh	r2, [r7, #4]
 8004c1c:	89bb      	ldrh	r3, [r7, #12]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d900      	bls.n	8004c24 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004c22:	e7cc      	b.n	8004bbe <send+0x122>
      if(len <= freesize) break;
 8004c24:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004c26:	88ba      	ldrh	r2, [r7, #4]
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ff01 	bl	8005a34 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	3301      	adds	r3, #1
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c3e:	2120      	movs	r1, #32
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fd57 	bl	80056f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004c46:	bf00      	nop
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fd01 	bl	800565c <WIZCHIP_READ>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f3      	bne.n	8004c48 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	2201      	movs	r2, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	b21a      	sxth	r2, r3
 8004c6a:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <send+0x1e8>)
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	4b03      	ldr	r3, [pc, #12]	@ (8004c84 <send+0x1e8>)
 8004c78:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004c7a:	88bb      	ldrh	r3, [r7, #4]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	200073f8 	.word	0x200073f8
 8004c88:	200073f6 	.word	0x200073f6

08004c8c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	71fb      	strb	r3, [r7, #7]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d902      	bls.n	8004cb0 <recv+0x24>
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	e09b      	b.n	8004de8 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fccf 	bl	800565c <WIZCHIP_READ>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d002      	beq.n	8004cce <recv+0x42>
 8004cc8:	f06f 0304 	mvn.w	r3, #4
 8004ccc:	e08c      	b.n	8004de8 <recv+0x15c>
   CHECK_SOCKDATA();
 8004cce:	88bb      	ldrh	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <recv+0x4e>
 8004cd4:	f06f 030d 	mvn.w	r3, #13
 8004cd8:	e086      	b.n	8004de8 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	3301      	adds	r3, #1
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fcb8 	bl	800565c <WIZCHIP_READ>
 8004cec:	4603      	mov	r3, r0
 8004cee:	029b      	lsls	r3, r3, #10
 8004cf0:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004cf2:	89ba      	ldrh	r2, [r7, #12]
 8004cf4:	88bb      	ldrh	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d201      	bcs.n	8004cfe <recv+0x72>
 8004cfa:	89bb      	ldrh	r3, [r7, #12]
 8004cfc:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fe4e 	bl	80059a2 <getSn_RX_RSR>
 8004d06:	4603      	mov	r3, r0
 8004d08:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	3301      	adds	r3, #1
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fca0 	bl	800565c <WIZCHIP_READ>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b17      	cmp	r3, #23
 8004d24:	d026      	beq.n	8004d74 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b1c      	cmp	r3, #28
 8004d2a:	d11c      	bne.n	8004d66 <recv+0xda>
            {
               if(recvsize != 0) break;
 8004d2c:	89bb      	ldrh	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d133      	bne.n	8004d9a <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fdeb 	bl	8005910 <getSn_TX_FSR>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	461c      	mov	r4, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	3301      	adds	r3, #1
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fc86 	bl	800565c <WIZCHIP_READ>
 8004d50:	4603      	mov	r3, r0
 8004d52:	029b      	lsls	r3, r3, #10
 8004d54:	429c      	cmp	r4, r3
 8004d56:	d10d      	bne.n	8004d74 <recv+0xe8>
               {
                  close(sn);
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fcde 	bl	800471c <close>
                  return SOCKERR_SOCKSTATUS;
 8004d60:	f06f 0306 	mvn.w	r3, #6
 8004d64:	e040      	b.n	8004de8 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fcd7 	bl	800471c <close>
               return SOCKERR_SOCKSTATUS;
 8004d6e:	f06f 0306 	mvn.w	r3, #6
 8004d72:	e039      	b.n	8004de8 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004d74:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <recv+0x164>)
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	fa42 f303 	asr.w	r3, r2, r3
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <recv+0x106>
 8004d88:	89bb      	ldrh	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <recv+0x106>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e02a      	b.n	8004de8 <recv+0x15c>
         if(recvsize != 0) break;
 8004d92:	89bb      	ldrh	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004d98:	e7b1      	b.n	8004cfe <recv+0x72>
               if(recvsize != 0) break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <recv+0x114>
         if(recvsize != 0) break;
 8004d9e:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004da0:	89ba      	ldrh	r2, [r7, #12]
 8004da2:	88bb      	ldrh	r3, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d201      	bcs.n	8004dac <recv+0x120>
 8004da8:	89bb      	ldrh	r3, [r7, #12]
 8004daa:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004dac:	88ba      	ldrh	r2, [r7, #4]
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fe98 	bl	8005ae8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004dc4:	2140      	movs	r1, #64	@ 0x40
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fc94 	bl	80056f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004dcc:	bf00      	nop
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fc3e 	bl	800565c <WIZCHIP_READ>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f3      	bne.n	8004dce <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004de6:	88bb      	ldrh	r3, [r7, #4]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}
 8004df0:	200073f6 	.word	0x200073f6

08004df4 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	4603      	mov	r3, r0
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	4613      	mov	r3, r2
 8004e04:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d902      	bls.n	8004e1a <sendto+0x26>
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	e11a      	b.n	8005050 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	3301      	adds	r3, #1
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fc1a 	bl	800565c <WIZCHIP_READ>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	3b02      	subs	r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d902      	bls.n	8004e3a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004e34:	f06f 0304 	mvn.w	r3, #4
 8004e38:	e10a      	b.n	8005050 <sendto+0x25c>
         break;
 8004e3a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004e3c:	89bb      	ldrh	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <sendto+0x54>
 8004e42:	f06f 030d 	mvn.w	r3, #13
 8004e46:	e103      	b.n	8005050 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	3201      	adds	r2, #1
 8004e56:	7812      	ldrb	r2, [r2, #0]
 8004e58:	4413      	add	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	3202      	adds	r2, #2
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	3203      	adds	r2, #3
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	4413      	add	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10e      	bne.n	8004e9c <sendto+0xa8>
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	3301      	adds	r3, #1
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fbe8 	bl	800565c <WIZCHIP_READ>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d002      	beq.n	8004e9c <sendto+0xa8>
 8004e96:	f06f 030b 	mvn.w	r3, #11
 8004e9a:	e0d9      	b.n	8005050 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004e9c:	8c3b      	ldrh	r3, [r7, #32]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10e      	bne.n	8004ec0 <sendto+0xcc>
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fbd6 	bl	800565c <WIZCHIP_READ>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d002      	beq.n	8004ec0 <sendto+0xcc>
 8004eba:	f06f 030a 	mvn.w	r3, #10
 8004ebe:	e0c7      	b.n	8005050 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fbc5 	bl	800565c <WIZCHIP_READ>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	2b42      	cmp	r3, #66	@ 0x42
 8004eda:	d008      	beq.n	8004eee <sendto+0xfa>
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b22      	cmp	r3, #34	@ 0x22
 8004ee0:	d005      	beq.n	8004eee <sendto+0xfa>
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b32      	cmp	r3, #50	@ 0x32
 8004ee6:	d002      	beq.n	8004eee <sendto+0xfa>
 8004ee8:	f06f 0306 	mvn.w	r3, #6
 8004eec:	e0b0      	b.n	8005050 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004efa:	2204      	movs	r2, #4
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fca6 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	3301      	adds	r3, #1
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f10:	461a      	mov	r2, r3
 8004f12:	8c3b      	ldrh	r3, [r7, #32]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f000 fbe9 	bl	80056f4 <WIZCHIP_WRITE>
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	3301      	adds	r3, #1
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004f2e:	461a      	mov	r2, r3
 8004f30:	8c3b      	ldrh	r3, [r7, #32]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 fbdc 	bl	80056f4 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	3301      	adds	r3, #1
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fb87 	bl	800565c <WIZCHIP_READ>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004f54:	89ba      	ldrh	r2, [r7, #12]
 8004f56:	8abb      	ldrh	r3, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d901      	bls.n	8004f60 <sendto+0x16c>
 8004f5c:	8abb      	ldrh	r3, [r7, #20]
 8004f5e:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fcd4 	bl	8005910 <getSn_TX_FSR>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	3301      	adds	r3, #1
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fb6f 	bl	800565c <WIZCHIP_READ>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <sendto+0x196>
 8004f84:	f06f 0303 	mvn.w	r3, #3
 8004f88:	e062      	b.n	8005050 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004f8a:	4b33      	ldr	r3, [pc, #204]	@ (8005058 <sendto+0x264>)
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	fa42 f303 	asr.w	r3, r2, r3
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <sendto+0x1b6>
 8004f9e:	89ba      	ldrh	r2, [r7, #12]
 8004fa0:	8abb      	ldrh	r3, [r7, #20]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d901      	bls.n	8004faa <sendto+0x1b6>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e052      	b.n	8005050 <sendto+0x25c>
      if(len <= freesize) break;
 8004faa:	89ba      	ldrh	r2, [r7, #12]
 8004fac:	8abb      	ldrh	r3, [r7, #20]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d900      	bls.n	8004fb4 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8004fb2:	e7d5      	b.n	8004f60 <sendto+0x16c>
      if(len <= freesize) break;
 8004fb4:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8004fb6:	89ba      	ldrh	r2, [r7, #12]
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fd39 	bl	8005a34 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004fce:	2120      	movs	r1, #32
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fb8f 	bl	80056f4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004fd6:	bf00      	nop
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	3301      	adds	r3, #1
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fb39 	bl	800565c <WIZCHIP_READ>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f3      	bne.n	8004fd8 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fb2d 	bl	800565c <WIZCHIP_READ>
 8005002:	4603      	mov	r3, r0
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	3301      	adds	r3, #1
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005020:	2110      	movs	r1, #16
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fb66 	bl	80056f4 <WIZCHIP_WRITE>
         break;
 8005028:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800502a:	89bb      	ldrh	r3, [r7, #12]
 800502c:	e010      	b.n	8005050 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 800502e:	7dfb      	ldrb	r3, [r7, #23]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0db      	beq.n	8004ff0 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	3301      	adds	r3, #1
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005044:	2108      	movs	r1, #8
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fb54 	bl	80056f4 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800504c:	f06f 030c 	mvn.w	r3, #12
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	200073f6 	.word	0x200073f6

0800505c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	4603      	mov	r3, r0
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	4613      	mov	r3, r2
 800506c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800506e:	2300      	movs	r3, #0
 8005070:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d902      	bls.n	800507e <recvfrom+0x22>
 8005078:	f04f 33ff 	mov.w	r3, #4294967295
 800507c:	e1d2      	b.n	8005424 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	3301      	adds	r3, #1
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fae8 	bl	800565c <WIZCHIP_READ>
 800508c:	4603      	mov	r3, r0
 800508e:	777b      	strb	r3, [r7, #29]
 8005090:	7f7b      	ldrb	r3, [r7, #29]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	3b02      	subs	r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d902      	bls.n	80050a2 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800509c:	f06f 0304 	mvn.w	r3, #4
 80050a0:	e1c0      	b.n	8005424 <recvfrom+0x3c8>
         break;
 80050a2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80050a4:	89bb      	ldrh	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <recvfrom+0x54>
 80050aa:	f06f 030d 	mvn.w	r3, #13
 80050ae:	e1b9      	b.n	8005424 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	4a87      	ldr	r2, [pc, #540]	@ (80052d0 <recvfrom+0x274>)
 80050b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d128      	bne.n	800510e <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fc6f 	bl	80059a2 <getSn_RX_RSR>
 80050c4:	4603      	mov	r3, r0
 80050c6:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	3301      	adds	r3, #1
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fac1 	bl	800565c <WIZCHIP_READ>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <recvfrom+0x8a>
 80050e0:	f06f 0303 	mvn.w	r3, #3
 80050e4:	e19e      	b.n	8005424 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80050e6:	4b7b      	ldr	r3, [pc, #492]	@ (80052d4 <recvfrom+0x278>)
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	fa42 f303 	asr.w	r3, r2, r3
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <recvfrom+0xa8>
 80050fa:	8bfb      	ldrh	r3, [r7, #30]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <recvfrom+0xa8>
 8005100:	2300      	movs	r3, #0
 8005102:	e18f      	b.n	8005424 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8005104:	8bfb      	ldrh	r3, [r7, #30]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d100      	bne.n	800510c <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800510a:	e7d7      	b.n	80050bc <recvfrom+0x60>
         if(pack_len != 0) break;
 800510c:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800510e:	7f7b      	ldrb	r3, [r7, #29]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	2b04      	cmp	r3, #4
 8005116:	d078      	beq.n	800520a <recvfrom+0x1ae>
 8005118:	2b04      	cmp	r3, #4
 800511a:	f300 8140 	bgt.w	800539e <recvfrom+0x342>
 800511e:	2b02      	cmp	r3, #2
 8005120:	d003      	beq.n	800512a <recvfrom+0xce>
 8005122:	2b03      	cmp	r3, #3
 8005124:	f000 80da 	beq.w	80052dc <recvfrom+0x280>
 8005128:	e139      	b.n	800539e <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	4a68      	ldr	r2, [pc, #416]	@ (80052d0 <recvfrom+0x274>)
 800512e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d151      	bne.n	80051da <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8005136:	f107 0114 	add.w	r1, r7, #20
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2208      	movs	r2, #8
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fcd2 	bl	8005ae8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	3301      	adds	r3, #1
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005150:	2140      	movs	r1, #64	@ 0x40
 8005152:	4618      	mov	r0, r3
 8005154:	f000 face 	bl	80056f4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005158:	bf00      	nop
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	3301      	adds	r3, #1
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fa78 	bl	800565c <WIZCHIP_READ>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f3      	bne.n	800515a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8005172:	7d3a      	ldrb	r2, [r7, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3301      	adds	r3, #1
 800517c:	7d7a      	ldrb	r2, [r7, #21]
 800517e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3302      	adds	r3, #2
 8005184:	7dba      	ldrb	r2, [r7, #22]
 8005186:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3303      	adds	r3, #3
 800518c:	7dfa      	ldrb	r2, [r7, #23]
 800518e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8005190:	7e3b      	ldrb	r3, [r7, #24]
 8005192:	461a      	mov	r2, r3
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8005198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	b29b      	uxth	r3, r3
 80051a0:	7e7a      	ldrb	r2, [r7, #25]
 80051a2:	4413      	add	r3, r2
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80051aa:	7eba      	ldrb	r2, [r7, #26]
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4a47      	ldr	r2, [pc, #284]	@ (80052d0 <recvfrom+0x274>)
 80051b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	4a45      	ldr	r2, [pc, #276]	@ (80052d0 <recvfrom+0x274>)
 80051ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	7efb      	ldrb	r3, [r7, #27]
 80051c4:	4619      	mov	r1, r3
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	440a      	add	r2, r1
 80051ca:	b291      	uxth	r1, r2
 80051cc:	4a40      	ldr	r2, [pc, #256]	@ (80052d0 <recvfrom+0x274>)
 80051ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	4a40      	ldr	r2, [pc, #256]	@ (80052d8 <recvfrom+0x27c>)
 80051d6:	2180      	movs	r1, #128	@ 0x80
 80051d8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	4a3c      	ldr	r2, [pc, #240]	@ (80052d0 <recvfrom+0x274>)
 80051de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e2:	89ba      	ldrh	r2, [r7, #12]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d202      	bcs.n	80051ee <recvfrom+0x192>
 80051e8:	89bb      	ldrh	r3, [r7, #12]
 80051ea:	83fb      	strh	r3, [r7, #30]
 80051ec:	e004      	b.n	80051f8 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	4a37      	ldr	r2, [pc, #220]	@ (80052d0 <recvfrom+0x274>)
 80051f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f6:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80051f8:	8bfb      	ldrh	r3, [r7, #30]
 80051fa:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80051fc:	8bfa      	ldrh	r2, [r7, #30]
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fc70 	bl	8005ae8 <wiz_recv_data>
			break;
 8005208:	e0d5      	b.n	80053b6 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	4a30      	ldr	r2, [pc, #192]	@ (80052d0 <recvfrom+0x274>)
 800520e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d145      	bne.n	80052a2 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8005216:	f107 0114 	add.w	r1, r7, #20
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	2202      	movs	r2, #2
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fc62 	bl	8005ae8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	3301      	adds	r3, #1
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005230:	2140      	movs	r1, #64	@ 0x40
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa5e 	bl	80056f4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005238:	bf00      	nop
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	3301      	adds	r3, #1
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fa08 	bl	800565c <WIZCHIP_READ>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f3      	bne.n	800523a <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8005252:	7d3a      	ldrb	r2, [r7, #20]
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	4611      	mov	r1, r2
 8005258:	4a1d      	ldr	r2, [pc, #116]	@ (80052d0 <recvfrom+0x274>)
 800525a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <recvfrom+0x274>)
 8005262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	b29b      	uxth	r3, r3
 800526a:	7d7a      	ldrb	r2, [r7, #21]
 800526c:	4413      	add	r3, r2
 800526e:	b29a      	uxth	r2, r3
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	3a02      	subs	r2, #2
 8005274:	b291      	uxth	r1, r2
 8005276:	4a16      	ldr	r2, [pc, #88]	@ (80052d0 <recvfrom+0x274>)
 8005278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	4a14      	ldr	r2, [pc, #80]	@ (80052d0 <recvfrom+0x274>)
 8005280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005284:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8005288:	4293      	cmp	r3, r2
 800528a:	d906      	bls.n	800529a <recvfrom+0x23e>
   			{
   			   close(sn);
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fa44 	bl	800471c <close>
   			   return SOCKFATAL_PACKLEN;
 8005294:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8005298:	e0c4      	b.n	8005424 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	4a0e      	ldr	r2, [pc, #56]	@ (80052d8 <recvfrom+0x27c>)
 800529e:	2180      	movs	r1, #128	@ 0x80
 80052a0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	4a0a      	ldr	r2, [pc, #40]	@ (80052d0 <recvfrom+0x274>)
 80052a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052aa:	89ba      	ldrh	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d202      	bcs.n	80052b6 <recvfrom+0x25a>
 80052b0:	89bb      	ldrh	r3, [r7, #12]
 80052b2:	83fb      	strh	r3, [r7, #30]
 80052b4:	e004      	b.n	80052c0 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	4a05      	ldr	r2, [pc, #20]	@ (80052d0 <recvfrom+0x274>)
 80052ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052be:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80052c0:	8bfa      	ldrh	r2, [r7, #30]
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fc0e 	bl	8005ae8 <wiz_recv_data>
		   break;
 80052cc:	e073      	b.n	80053b6 <recvfrom+0x35a>
 80052ce:	bf00      	nop
 80052d0:	200073fc 	.word	0x200073fc
 80052d4:	200073f6 	.word	0x200073f6
 80052d8:	2000740c 	.word	0x2000740c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	4a53      	ldr	r2, [pc, #332]	@ (800542c <recvfrom+0x3d0>)
 80052e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d144      	bne.n	8005372 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 80052e8:	f107 0114 	add.w	r1, r7, #20
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2206      	movs	r2, #6
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fbf9 	bl	8005ae8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	3301      	adds	r3, #1
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005302:	2140      	movs	r1, #64	@ 0x40
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f9f5 	bl	80056f4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800530a:	bf00      	nop
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	3301      	adds	r3, #1
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f99f 	bl	800565c <WIZCHIP_READ>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f3      	bne.n	800530c <recvfrom+0x2b0>
   			addr[0] = head[0];
 8005324:	7d3a      	ldrb	r2, [r7, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3301      	adds	r3, #1
 800532e:	7d7a      	ldrb	r2, [r7, #21]
 8005330:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3302      	adds	r3, #2
 8005336:	7dba      	ldrb	r2, [r7, #22]
 8005338:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3303      	adds	r3, #3
 800533e:	7dfa      	ldrb	r2, [r7, #23]
 8005340:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8005342:	7e3a      	ldrb	r2, [r7, #24]
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	4611      	mov	r1, r2
 8005348:	4a38      	ldr	r2, [pc, #224]	@ (800542c <recvfrom+0x3d0>)
 800534a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	4a36      	ldr	r2, [pc, #216]	@ (800542c <recvfrom+0x3d0>)
 8005352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	b29a      	uxth	r2, r3
 800535a:	7e7b      	ldrb	r3, [r7, #25]
 800535c:	4619      	mov	r1, r3
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	440a      	add	r2, r1
 8005362:	b291      	uxth	r1, r2
 8005364:	4a31      	ldr	r2, [pc, #196]	@ (800542c <recvfrom+0x3d0>)
 8005366:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	4a30      	ldr	r2, [pc, #192]	@ (8005430 <recvfrom+0x3d4>)
 800536e:	2180      	movs	r1, #128	@ 0x80
 8005370:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	4a2d      	ldr	r2, [pc, #180]	@ (800542c <recvfrom+0x3d0>)
 8005376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800537a:	89ba      	ldrh	r2, [r7, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d202      	bcs.n	8005386 <recvfrom+0x32a>
 8005380:	89bb      	ldrh	r3, [r7, #12]
 8005382:	83fb      	strh	r3, [r7, #30]
 8005384:	e004      	b.n	8005390 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	4a28      	ldr	r2, [pc, #160]	@ (800542c <recvfrom+0x3d0>)
 800538a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800538e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005390:	8bfa      	ldrh	r2, [r7, #30]
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fba6 	bl	8005ae8 <wiz_recv_data>
			break;
 800539c:	e00b      	b.n	80053b6 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800539e:	8bfa      	ldrh	r2, [r7, #30]
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fbf9 	bl	8005b9c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	491f      	ldr	r1, [pc, #124]	@ (800542c <recvfrom+0x3d0>)
 80053ae:	8bfa      	ldrh	r2, [r7, #30]
 80053b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80053b4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	3301      	adds	r3, #1
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053c2:	2140      	movs	r1, #64	@ 0x40
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 f995 	bl	80056f4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80053ca:	bf00      	nop
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	3301      	adds	r3, #1
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 f93f 	bl	800565c <WIZCHIP_READ>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f3      	bne.n	80053cc <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	4a11      	ldr	r2, [pc, #68]	@ (800542c <recvfrom+0x3d0>)
 80053e8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	8bfa      	ldrh	r2, [r7, #30]
 80053f0:	1a8a      	subs	r2, r1, r2
 80053f2:	b291      	uxth	r1, r2
 80053f4:	4a0d      	ldr	r2, [pc, #52]	@ (800542c <recvfrom+0x3d0>)
 80053f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	4a0b      	ldr	r2, [pc, #44]	@ (800542c <recvfrom+0x3d0>)
 80053fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <recvfrom+0x3d4>)
 800540a:	5cd2      	ldrb	r2, [r2, r3]
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	b2d1      	uxtb	r1, r2
 8005414:	4a06      	ldr	r2, [pc, #24]	@ (8005430 <recvfrom+0x3d4>)
 8005416:	54d1      	strb	r1, [r2, r3]
 8005418:	e003      	b.n	8005422 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	4a04      	ldr	r2, [pc, #16]	@ (8005430 <recvfrom+0x3d4>)
 800541e:	2100      	movs	r1, #0
 8005420:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8005422:	8bfb      	ldrh	r3, [r7, #30]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200073fc 	.word	0x200073fc
 8005430:	2000740c 	.word	0x2000740c

08005434 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	603a      	str	r2, [r7, #0]
 800543e:	71fb      	strb	r3, [r7, #7]
 8005440:	460b      	mov	r3, r1
 8005442:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	2b08      	cmp	r3, #8
 8005448:	d902      	bls.n	8005450 <getsockopt+0x1c>
 800544a:	f04f 33ff 	mov.w	r3, #4294967295
 800544e:	e0fd      	b.n	800564c <getsockopt+0x218>
   switch(sotype)
 8005450:	79bb      	ldrb	r3, [r7, #6]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	f200 80f6 	bhi.w	8005644 <getsockopt+0x210>
 8005458:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <getsockopt+0x2c>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005495 	.word	0x08005495
 8005464:	080054b1 	.word	0x080054b1
 8005468:	080054cd 	.word	0x080054cd
 800546c:	080054e9 	.word	0x080054e9
 8005470:	0800551f 	.word	0x0800551f
 8005474:	08005537 	.word	0x08005537
 8005478:	08005645 	.word	0x08005645
 800547c:	0800556d 	.word	0x0800556d
 8005480:	080055a7 	.word	0x080055a7
 8005484:	080055b9 	.word	0x080055b9
 8005488:	080055cb 	.word	0x080055cb
 800548c:	080055e7 	.word	0x080055e7
 8005490:	0800561f 	.word	0x0800561f
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	3301      	adds	r3, #1
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f8dd 	bl	800565c <WIZCHIP_READ>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f023 030f 	bic.w	r3, r3, #15
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	701a      	strb	r2, [r3, #0]
         break;
 80054ae:	e0cc      	b.n	800564a <getsockopt+0x216>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	3301      	adds	r3, #1
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	f503 53b0 	add.w	r3, r3, #5632	@ 0x1600
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f8cd 	bl	800565c <WIZCHIP_READ>
 80054c2:	4603      	mov	r3, r0
 80054c4:	461a      	mov	r2, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	701a      	strb	r2, [r3, #0]
         break;
 80054ca:	e0be      	b.n	800564a <getsockopt+0x216>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	3301      	adds	r3, #1
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f8bf 	bl	800565c <WIZCHIP_READ>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	701a      	strb	r2, [r3, #0]
         break;
 80054e6:	e0b0      	b.n	800564a <getsockopt+0x216>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	3301      	adds	r3, #1
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f8b1 	bl	800565c <WIZCHIP_READ>
 80054fa:	4603      	mov	r3, r0
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	b29c      	uxth	r4, r3
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	3301      	adds	r3, #1
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 800550c:	4618      	mov	r0, r3
 800550e:	f000 f8a5 	bl	800565c <WIZCHIP_READ>
 8005512:	4603      	mov	r3, r0
 8005514:	4423      	add	r3, r4
 8005516:	b29a      	uxth	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	801a      	strh	r2, [r3, #0]
         break;
 800551c:	e095      	b.n	800564a <getsockopt+0x216>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	3301      	adds	r3, #1
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800552a:	2204      	movs	r2, #4
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f92e 	bl	8005790 <WIZCHIP_READ_BUF>
         break;
 8005534:	e089      	b.n	800564a <getsockopt+0x216>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	3301      	adds	r3, #1
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f88a 	bl	800565c <WIZCHIP_READ>
 8005548:	4603      	mov	r3, r0
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	b29c      	uxth	r4, r3
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	3301      	adds	r3, #1
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800555a:	4618      	mov	r0, r3
 800555c:	f000 f87e 	bl	800565c <WIZCHIP_READ>
 8005560:	4603      	mov	r3, r0
 8005562:	4423      	add	r3, r4
 8005564:	b29a      	uxth	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	801a      	strh	r2, [r3, #0]
         break;
 800556a:	e06e      	b.n	800564a <getsockopt+0x216>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	3301      	adds	r3, #1
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f871 	bl	800565c <WIZCHIP_READ>
 800557a:	4603      	mov	r3, r0
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2b01      	cmp	r3, #1
 8005582:	d002      	beq.n	800558a <getsockopt+0x156>
 8005584:	f06f 0304 	mvn.w	r3, #4
 8005588:	e060      	b.n	800564c <getsockopt+0x218>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	3301      	adds	r3, #1
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	f503 533c 	add.w	r3, r3, #12032	@ 0x2f00
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f860 	bl	800565c <WIZCHIP_READ>
 800559c:	4603      	mov	r3, r0
 800559e:	461a      	mov	r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	801a      	strh	r2, [r3, #0]
         break;
 80055a4:	e051      	b.n	800564a <getsockopt+0x216>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f9b1 	bl	8005910 <getSn_TX_FSR>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	801a      	strh	r2, [r3, #0]
         break;
 80055b6:	e048      	b.n	800564a <getsockopt+0x216>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f9f1 	bl	80059a2 <getSn_RX_RSR>
 80055c0:	4603      	mov	r3, r0
 80055c2:	461a      	mov	r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	801a      	strh	r2, [r3, #0]
         break;
 80055c8:	e03f      	b.n	800564a <getsockopt+0x216>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	3301      	adds	r3, #1
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f840 	bl	800565c <WIZCHIP_READ>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	701a      	strb	r2, [r3, #0]
         break;
 80055e4:	e031      	b.n	800564a <getsockopt+0x216>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	3301      	adds	r3, #1
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f834 	bl	800565c <WIZCHIP_READ>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <getsockopt+0x1dc>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f9ce 	bl	80059a2 <getSn_RX_RSR>
 8005606:	4603      	mov	r3, r0
 8005608:	461a      	mov	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 800560e:	e01c      	b.n	800564a <getsockopt+0x216>
            *(uint16_t*)arg = sock_remained_size[sn];
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	4a10      	ldr	r2, [pc, #64]	@ (8005654 <getsockopt+0x220>)
 8005614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	801a      	strh	r2, [r3, #0]
         break;
 800561c:	e015      	b.n	800564a <getsockopt+0x216>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	3301      	adds	r3, #1
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f818 	bl	800565c <WIZCHIP_READ>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d102      	bne.n	8005638 <getsockopt+0x204>
             return SOCKERR_SOCKMODE;
 8005632:	f06f 0304 	mvn.w	r3, #4
 8005636:	e009      	b.n	800564c <getsockopt+0x218>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	4a07      	ldr	r2, [pc, #28]	@ (8005658 <getsockopt+0x224>)
 800563c:	5cd2      	ldrb	r2, [r2, r3]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	701a      	strb	r2, [r3, #0]
         break;
 8005642:	e002      	b.n	800564a <getsockopt+0x216>
      default:
         return SOCKERR_SOCKOPT;
 8005644:	f06f 0301 	mvn.w	r3, #1
 8005648:	e000      	b.n	800564c <getsockopt+0x218>
   }
   return SOCK_OK;
 800564a:	2301      	movs	r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bd90      	pop	{r4, r7, pc}
 8005654:	200073fc 	.word	0x200073fc
 8005658:	2000740c 	.word	0x2000740c

0800565c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8005664:	4b22      	ldr	r3, [pc, #136]	@ (80056f0 <WIZCHIP_READ+0x94>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4798      	blx	r3
   WIZCHIP.CS._select();
 800566a:	4b21      	ldr	r3, [pc, #132]	@ (80056f0 <WIZCHIP_READ+0x94>)
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005670:	4b1f      	ldr	r3, [pc, #124]	@ (80056f0 <WIZCHIP_READ+0x94>)
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <WIZCHIP_READ+0x24>
 8005678:	4b1d      	ldr	r3, [pc, #116]	@ (80056f0 <WIZCHIP_READ+0x94>)
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d114      	bne.n	80056aa <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005680:	4b1b      	ldr	r3, [pc, #108]	@ (80056f0 <WIZCHIP_READ+0x94>)
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	0c12      	lsrs	r2, r2, #16
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	4610      	mov	r0, r2
 800568c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800568e:	4b18      	ldr	r3, [pc, #96]	@ (80056f0 <WIZCHIP_READ+0x94>)
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	0a12      	lsrs	r2, r2, #8
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800569c:	4b14      	ldr	r3, [pc, #80]	@ (80056f0 <WIZCHIP_READ+0x94>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	4610      	mov	r0, r2
 80056a6:	4798      	blx	r3
 80056a8:	e011      	b.n	80056ce <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	0a1b      	lsrs	r3, r3, #8
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80056c0:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <WIZCHIP_READ+0x94>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	f107 020c 	add.w	r2, r7, #12
 80056c8:	2103      	movs	r1, #3
 80056ca:	4610      	mov	r0, r2
 80056cc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80056ce:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <WIZCHIP_READ+0x94>)
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	4798      	blx	r3
 80056d4:	4603      	mov	r3, r0
 80056d6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <WIZCHIP_READ+0x94>)
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80056de:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <WIZCHIP_READ+0x94>)
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	4798      	blx	r3
   return ret;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000074 	.word	0x20000074

080056f4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8005700:	4b22      	ldr	r3, [pc, #136]	@ (800578c <WIZCHIP_WRITE+0x98>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005706:	4b21      	ldr	r3, [pc, #132]	@ (800578c <WIZCHIP_WRITE+0x98>)
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005714:	4b1d      	ldr	r3, [pc, #116]	@ (800578c <WIZCHIP_WRITE+0x98>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d119      	bne.n	8005750 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800571c:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <WIZCHIP_WRITE+0x98>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	0c12      	lsrs	r2, r2, #16
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800572a:	4b18      	ldr	r3, [pc, #96]	@ (800578c <WIZCHIP_WRITE+0x98>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	0a12      	lsrs	r2, r2, #8
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005738:	4b14      	ldr	r3, [pc, #80]	@ (800578c <WIZCHIP_WRITE+0x98>)
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	4610      	mov	r0, r2
 8005742:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8005744:	4b11      	ldr	r3, [pc, #68]	@ (800578c <WIZCHIP_WRITE+0x98>)
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	4610      	mov	r0, r2
 800574c:	4798      	blx	r3
 800574e:	e013      	b.n	8005778 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	b2db      	uxtb	r3, r3
 8005756:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	b2db      	uxtb	r3, r3
 800575e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800576a:	4b08      	ldr	r3, [pc, #32]	@ (800578c <WIZCHIP_WRITE+0x98>)
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	f107 020c 	add.w	r2, r7, #12
 8005772:	2104      	movs	r1, #4
 8005774:	4610      	mov	r0, r2
 8005776:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005778:	4b04      	ldr	r3, [pc, #16]	@ (800578c <WIZCHIP_WRITE+0x98>)
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800577e:	4b03      	ldr	r3, [pc, #12]	@ (800578c <WIZCHIP_WRITE+0x98>)
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	4798      	blx	r3
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000074 	.word	0x20000074

08005790 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800579e:	4b2b      	ldr	r3, [pc, #172]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80057a4:	4b29      	ldr	r3, [pc, #164]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80057aa:	4b28      	ldr	r3, [pc, #160]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <WIZCHIP_READ_BUF+0x2a>
 80057b2:	4b26      	ldr	r3, [pc, #152]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d126      	bne.n	8005808 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	0c12      	lsrs	r2, r2, #16
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80057c8:	4b20      	ldr	r3, [pc, #128]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	0a12      	lsrs	r2, r2, #8
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	4610      	mov	r0, r2
 80057d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80057d6:	4b1d      	ldr	r3, [pc, #116]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	4610      	mov	r0, r2
 80057e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	82fb      	strh	r3, [r7, #22]
 80057e6:	e00a      	b.n	80057fe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80057e8:	4b18      	ldr	r3, [pc, #96]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	8afa      	ldrh	r2, [r7, #22]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	188c      	adds	r4, r1, r2
 80057f2:	4798      	blx	r3
 80057f4:	4603      	mov	r3, r0
 80057f6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80057f8:	8afb      	ldrh	r3, [r7, #22]
 80057fa:	3301      	adds	r3, #1
 80057fc:	82fb      	strh	r3, [r7, #22]
 80057fe:	8afa      	ldrh	r2, [r7, #22]
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	429a      	cmp	r2, r3
 8005804:	d3f0      	bcc.n	80057e8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005806:	e017      	b.n	8005838 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	0c1b      	lsrs	r3, r3, #16
 800580c:	b2db      	uxtb	r3, r3
 800580e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	b2db      	uxtb	r3, r3
 8005816:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	f107 0210 	add.w	r2, r7, #16
 8005826:	2103      	movs	r1, #3
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800582c:	4b07      	ldr	r3, [pc, #28]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	4611      	mov	r1, r2
 8005834:	68b8      	ldr	r0, [r7, #8]
 8005836:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005838:	4b04      	ldr	r3, [pc, #16]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800583e:	4b03      	ldr	r3, [pc, #12]	@ (800584c <WIZCHIP_READ_BUF+0xbc>)
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	4798      	blx	r3
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd90      	pop	{r4, r7, pc}
 800584c:	20000074 	.word	0x20000074

08005850 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800585e:	4b2b      	ldr	r3, [pc, #172]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005864:	4b29      	ldr	r3, [pc, #164]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005872:	4b26      	ldr	r3, [pc, #152]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	2b00      	cmp	r3, #0
 8005878:	d126      	bne.n	80058c8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800587a:	4b24      	ldr	r3, [pc, #144]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	0c12      	lsrs	r2, r2, #16
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	4610      	mov	r0, r2
 8005886:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005888:	4b20      	ldr	r3, [pc, #128]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	0a12      	lsrs	r2, r2, #8
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	4610      	mov	r0, r2
 8005894:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005896:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	4610      	mov	r0, r2
 80058a0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	82fb      	strh	r3, [r7, #22]
 80058a6:	e00a      	b.n	80058be <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80058a8:	4b18      	ldr	r3, [pc, #96]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	8afa      	ldrh	r2, [r7, #22]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	440a      	add	r2, r1
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80058b8:	8afb      	ldrh	r3, [r7, #22]
 80058ba:	3301      	adds	r3, #1
 80058bc:	82fb      	strh	r3, [r7, #22]
 80058be:	8afa      	ldrh	r2, [r7, #22]
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3f0      	bcc.n	80058a8 <WIZCHIP_WRITE_BUF+0x58>
 80058c6:	e017      	b.n	80058f8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	0c1b      	lsrs	r3, r3, #16
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80058de:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	f107 0210 	add.w	r2, r7, #16
 80058e6:	2103      	movs	r1, #3
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80058ec:	4b07      	ldr	r3, [pc, #28]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	88fa      	ldrh	r2, [r7, #6]
 80058f2:	4611      	mov	r1, r2
 80058f4:	68b8      	ldr	r0, [r7, #8]
 80058f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80058f8:	4b04      	ldr	r3, [pc, #16]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80058fe:	4b03      	ldr	r3, [pc, #12]	@ (800590c <WIZCHIP_WRITE_BUF+0xbc>)
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	4798      	blx	r3
}
 8005904:	bf00      	nop
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000074 	.word	0x20000074

08005910 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800591a:	2300      	movs	r3, #0
 800591c:	81fb      	strh	r3, [r7, #14]
 800591e:	2300      	movs	r3, #0
 8005920:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	3301      	adds	r3, #1
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fe94 	bl	800565c <WIZCHIP_READ>
 8005934:	4603      	mov	r3, r0
 8005936:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005938:	89bb      	ldrh	r3, [r7, #12]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	b29c      	uxth	r4, r3
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	3301      	adds	r3, #1
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fe86 	bl	800565c <WIZCHIP_READ>
 8005950:	4603      	mov	r3, r0
 8005952:	4423      	add	r3, r4
 8005954:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005956:	89bb      	ldrh	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d019      	beq.n	8005990 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3301      	adds	r3, #1
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fe77 	bl	800565c <WIZCHIP_READ>
 800596e:	4603      	mov	r3, r0
 8005970:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005972:	89fb      	ldrh	r3, [r7, #14]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	b29c      	uxth	r4, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	3301      	adds	r3, #1
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fe69 	bl	800565c <WIZCHIP_READ>
 800598a:	4603      	mov	r3, r0
 800598c:	4423      	add	r3, r4
 800598e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005990:	89fa      	ldrh	r2, [r7, #14]
 8005992:	89bb      	ldrh	r3, [r7, #12]
 8005994:	429a      	cmp	r2, r3
 8005996:	d1c4      	bne.n	8005922 <getSn_TX_FSR+0x12>
   return val;
 8005998:	89fb      	ldrh	r3, [r7, #14]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd90      	pop	{r4, r7, pc}

080059a2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80059a2:	b590      	push	{r4, r7, lr}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	4603      	mov	r3, r0
 80059aa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	81fb      	strh	r3, [r7, #14]
 80059b0:	2300      	movs	r3, #0
 80059b2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	3301      	adds	r3, #1
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fe4b 	bl	800565c <WIZCHIP_READ>
 80059c6:	4603      	mov	r3, r0
 80059c8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80059ca:	89bb      	ldrh	r3, [r7, #12]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	b29c      	uxth	r4, r3
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	3301      	adds	r3, #1
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fe3d 	bl	800565c <WIZCHIP_READ>
 80059e2:	4603      	mov	r3, r0
 80059e4:	4423      	add	r3, r4
 80059e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80059e8:	89bb      	ldrh	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d019      	beq.n	8005a22 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	3301      	adds	r3, #1
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fe2e 	bl	800565c <WIZCHIP_READ>
 8005a00:	4603      	mov	r3, r0
 8005a02:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005a04:	89fb      	ldrh	r3, [r7, #14]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	b29c      	uxth	r4, r3
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	3301      	adds	r3, #1
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fe20 	bl	800565c <WIZCHIP_READ>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4423      	add	r3, r4
 8005a20:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005a22:	89fa      	ldrh	r2, [r7, #14]
 8005a24:	89bb      	ldrh	r3, [r7, #12]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d1c4      	bne.n	80059b4 <getSn_RX_RSR+0x12>
   return val;
 8005a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd90      	pop	{r4, r7, pc}

08005a34 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	6039      	str	r1, [r7, #0]
 8005a3e:	71fb      	strb	r3, [r7, #7]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005a4c:	88bb      	ldrh	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d046      	beq.n	8005ae0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	3301      	adds	r3, #1
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fdfc 	bl	800565c <WIZCHIP_READ>
 8005a64:	4603      	mov	r3, r0
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	b29c      	uxth	r4, r3
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	3301      	adds	r3, #1
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fdf0 	bl	800565c <WIZCHIP_READ>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4423      	add	r3, r4
 8005a80:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8005a82:	89fb      	ldrh	r3, [r7, #14]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	79fa      	ldrb	r2, [r7, #7]
 8005a88:	0092      	lsls	r2, r2, #2
 8005a8a:	3202      	adds	r2, #2
 8005a8c:	00d2      	lsls	r2, r2, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005a92:	88bb      	ldrh	r3, [r7, #4]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	68b8      	ldr	r0, [r7, #8]
 8005a9a:	f7ff fed9 	bl	8005850 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005a9e:	89fa      	ldrh	r2, [r7, #14]
 8005aa0:	88bb      	ldrh	r3, [r7, #4]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	3301      	adds	r3, #1
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f7ff fe18 	bl	80056f4 <WIZCHIP_WRITE>
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	3301      	adds	r3, #1
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	89fb      	ldrh	r3, [r7, #14]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f7ff fe0b 	bl	80056f4 <WIZCHIP_WRITE>
 8005ade:	e000      	b.n	8005ae2 <wiz_send_data+0xae>
   if(len == 0)  return;
 8005ae0:	bf00      	nop
}
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd90      	pop	{r4, r7, pc}

08005ae8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	71fb      	strb	r3, [r7, #7]
 8005af4:	4613      	mov	r3, r2
 8005af6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005b00:	88bb      	ldrh	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d046      	beq.n	8005b94 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fda2 	bl	800565c <WIZCHIP_READ>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	b29c      	uxth	r4, r3
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	3301      	adds	r3, #1
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fd96 	bl	800565c <WIZCHIP_READ>
 8005b30:	4603      	mov	r3, r0
 8005b32:	4423      	add	r3, r4
 8005b34:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005b36:	89fb      	ldrh	r3, [r7, #14]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	79fa      	ldrb	r2, [r7, #7]
 8005b3c:	0092      	lsls	r2, r2, #2
 8005b3e:	3203      	adds	r2, #3
 8005b40:	00d2      	lsls	r2, r2, #3
 8005b42:	4413      	add	r3, r2
 8005b44:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005b46:	88bb      	ldrh	r3, [r7, #4]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	68b8      	ldr	r0, [r7, #8]
 8005b4e:	f7ff fe1f 	bl	8005790 <WIZCHIP_READ_BUF>
   ptr += len;
 8005b52:	89fa      	ldrh	r2, [r7, #14]
 8005b54:	88bb      	ldrh	r3, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	3301      	adds	r3, #1
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005b66:	461a      	mov	r2, r3
 8005b68:	89fb      	ldrh	r3, [r7, #14]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f7ff fdbe 	bl	80056f4 <WIZCHIP_WRITE>
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005b84:	461a      	mov	r2, r3
 8005b86:	89fb      	ldrh	r3, [r7, #14]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7ff fdb1 	bl	80056f4 <WIZCHIP_WRITE>
 8005b92:	e000      	b.n	8005b96 <wiz_recv_data+0xae>
   if(len == 0) return;
 8005b94:	bf00      	nop
}
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd90      	pop	{r4, r7, pc}

08005b9c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005b9c:	b590      	push	{r4, r7, lr}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	460a      	mov	r2, r1
 8005ba6:	71fb      	strb	r3, [r7, #7]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fd4d 	bl	800565c <WIZCHIP_READ>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	b29c      	uxth	r4, r3
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	3301      	adds	r3, #1
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fd41 	bl	800565c <WIZCHIP_READ>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4423      	add	r3, r4
 8005bde:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005be0:	89fa      	ldrh	r2, [r7, #14]
 8005be2:	88bb      	ldrh	r3, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	3301      	adds	r3, #1
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	89fb      	ldrh	r3, [r7, #14]
 8005bf8:	0a1b      	lsrs	r3, r3, #8
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7ff fd77 	bl	80056f4 <WIZCHIP_WRITE>
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005c12:	461a      	mov	r2, r3
 8005c14:	89fb      	ldrh	r3, [r7, #14]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f7ff fd6a 	bl	80056f4 <WIZCHIP_WRITE>
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd90      	pop	{r4, r7, pc}

08005c28 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	bf00      	nop
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005c52:	b480      	push	{r7}
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	bf00      	nop
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	807b      	strh	r3, [r7, #2]
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	807b      	strh	r3, [r7, #2]
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <reg_wizchip_cs_cbfunc+0x16>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005d06:	4b0a      	ldr	r3, [pc, #40]	@ (8005d30 <reg_wizchip_cs_cbfunc+0x40>)
 8005d08:	4a0a      	ldr	r2, [pc, #40]	@ (8005d34 <reg_wizchip_cs_cbfunc+0x44>)
 8005d0a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005d0c:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <reg_wizchip_cs_cbfunc+0x40>)
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d38 <reg_wizchip_cs_cbfunc+0x48>)
 8005d10:	619a      	str	r2, [r3, #24]
 8005d12:	e006      	b.n	8005d22 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005d14:	4a06      	ldr	r2, [pc, #24]	@ (8005d30 <reg_wizchip_cs_cbfunc+0x40>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005d1a:	4a05      	ldr	r2, [pc, #20]	@ (8005d30 <reg_wizchip_cs_cbfunc+0x40>)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6193      	str	r3, [r2, #24]
   }
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000074 	.word	0x20000074
 8005d34:	08005c45 	.word	0x08005c45
 8005d38:	08005c53 	.word	0x08005c53

08005d3c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005d46:	bf00      	nop
 8005d48:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f9      	beq.n	8005d48 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <reg_wizchip_spi_cbfunc+0x24>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005d60:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d62:	4a0a      	ldr	r2, [pc, #40]	@ (8005d8c <reg_wizchip_spi_cbfunc+0x50>)
 8005d64:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005d66:	4b08      	ldr	r3, [pc, #32]	@ (8005d88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d68:	4a09      	ldr	r2, [pc, #36]	@ (8005d90 <reg_wizchip_spi_cbfunc+0x54>)
 8005d6a:	621a      	str	r2, [r3, #32]
 8005d6c:	e006      	b.n	8005d7c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005d6e:	4a06      	ldr	r2, [pc, #24]	@ (8005d88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005d74:	4a04      	ldr	r2, [pc, #16]	@ (8005d88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6213      	str	r3, [r2, #32]
   }
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	20000074 	.word	0x20000074
 8005d8c:	08005c99 	.word	0x08005c99
 8005d90:	08005ca9 	.word	0x08005ca9

08005d94 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005d9e:	bf00      	nop
 8005da0:	4b0f      	ldr	r3, [pc, #60]	@ (8005de0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f9      	beq.n	8005da0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <reg_wizchip_spiburst_cbfunc+0x24>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005dba:	4a0a      	ldr	r2, [pc, #40]	@ (8005de4 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005dbc:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005dbe:	4b08      	ldr	r3, [pc, #32]	@ (8005de0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005dc0:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dc4:	e006      	b.n	8005dd4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005dc6:	4a06      	ldr	r2, [pc, #24]	@ (8005de0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005dcc:	4a04      	ldr	r2, [pc, #16]	@ (8005de0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000074 	.word	0x20000074
 8005de4:	08005cbf 	.word	0x08005cbf
 8005de8:	08005cd7 	.word	0x08005cd7

08005dec <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005dec:	b590      	push	{r4, r7, lr}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	6039      	str	r1, [r7, #0]
 8005df6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	2b0f      	cmp	r3, #15
 8005e08:	f200 80c5 	bhi.w	8005f96 <ctlwizchip+0x1aa>
 8005e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e14 <ctlwizchip+0x28>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005e55 	.word	0x08005e55
 8005e18:	08005e5b 	.word	0x08005e5b
 8005e1c:	08005e87 	.word	0x08005e87
 8005e20:	08005e7b 	.word	0x08005e7b
 8005e24:	08005e95 	.word	0x08005e95
 8005e28:	08005ea1 	.word	0x08005ea1
 8005e2c:	08005eaf 	.word	0x08005eaf
 8005e30:	08005ed5 	.word	0x08005ed5
 8005e34:	08005ef7 	.word	0x08005ef7
 8005e38:	08005f3b 	.word	0x08005f3b
 8005e3c:	08005f41 	.word	0x08005f41
 8005e40:	08005f49 	.word	0x08005f49
 8005e44:	08005f9d 	.word	0x08005f9d
 8005e48:	08005f51 	.word	0x08005f51
 8005e4c:	08005f5f 	.word	0x08005f5f
 8005e50:	08005f7b 	.word	0x08005f7b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005e54:	f000 f8aa 	bl	8005fac <wizchip_sw_reset>
         break;
 8005e58:	e0a1      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3308      	adds	r3, #8
 8005e68:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f8e7 	bl	8006044 <wizchip_init>
 8005e76:	4603      	mov	r3, r0
 8005e78:	e092      	b.n	8005fa0 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f96c 	bl	800615c <wizchip_clrinterrupt>
         break;
 8005e84:	e08b      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005e86:	f000 f99d 	bl	80061c4 <wizchip_getinterrupt>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	801a      	strh	r2, [r3, #0]
         break;
 8005e92:	e084      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f9b8 	bl	800620e <wizchip_setinterruptmask>
         break;         
 8005e9e:	e07e      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005ea0:	f000 f9d0 	bl	8006244 <wizchip_getinterruptmask>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	801a      	strh	r2, [r3, #0]
         break;
 8005eac:	e077      	b.n	8005f9e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005ebe:	f7ff fc19 	bl	80056f4 <WIZCHIP_WRITE>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005ece:	f7ff fc11 	bl	80056f4 <WIZCHIP_WRITE>
         break;
 8005ed2:	e064      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005ed4:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005ed8:	f7ff fbc0 	bl	800565c <WIZCHIP_READ>
 8005edc:	4603      	mov	r3, r0
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	b29c      	uxth	r4, r3
 8005ee2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005ee6:	f7ff fbb9 	bl	800565c <WIZCHIP_READ>
 8005eea:	4603      	mov	r3, r0
 8005eec:	4423      	add	r3, r4
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	801a      	strh	r2, [r3, #0]
         break;
 8005ef4:	e053      	b.n	8005f9e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa8 <ctlwizchip+0x1bc>)
 8005ef8:	789a      	ldrb	r2, [r3, #2]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	4a29      	ldr	r2, [pc, #164]	@ (8005fa8 <ctlwizchip+0x1bc>)
 8005f04:	78d2      	ldrb	r2, [r2, #3]
 8005f06:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	4a26      	ldr	r2, [pc, #152]	@ (8005fa8 <ctlwizchip+0x1bc>)
 8005f0e:	7912      	ldrb	r2, [r2, #4]
 8005f10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	3303      	adds	r3, #3
 8005f16:	4a24      	ldr	r2, [pc, #144]	@ (8005fa8 <ctlwizchip+0x1bc>)
 8005f18:	7952      	ldrb	r2, [r2, #5]
 8005f1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4a21      	ldr	r2, [pc, #132]	@ (8005fa8 <ctlwizchip+0x1bc>)
 8005f22:	7992      	ldrb	r2, [r2, #6]
 8005f24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	3305      	adds	r3, #5
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <ctlwizchip+0x1bc>)
 8005f2c:	79d2      	ldrb	r2, [r2, #7]
 8005f2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	3306      	adds	r3, #6
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
         break;
 8005f38:	e031      	b.n	8005f9e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005f3a:	f000 f9d5 	bl	80062e8 <wizphy_reset>
         break;
 8005f3e:	e02e      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005f40:	6838      	ldr	r0, [r7, #0]
 8005f42:	f000 f9f8 	bl	8006336 <wizphy_setphyconf>
         break;
 8005f46:	e02a      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005f48:	6838      	ldr	r0, [r7, #0]
 8005f4a:	f000 fa37 	bl	80063bc <wizphy_getphyconf>
         break;
 8005f4e:	e026      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fa9b 	bl	8006490 <wizphy_setphypmode>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e020      	b.n	8005fa0 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005f5e:	f000 f9aa 	bl	80062b6 <wizphy_getphypmode>
 8005f62:	4603      	mov	r3, r0
 8005f64:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	2bff      	cmp	r3, #255	@ 0xff
 8005f6a:	d102      	bne.n	8005f72 <ctlwizchip+0x186>
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f70:	e016      	b.n	8005fa0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	7dfa      	ldrb	r2, [r7, #23]
 8005f76:	701a      	strb	r2, [r3, #0]
         break;
 8005f78:	e011      	b.n	8005f9e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005f7a:	f000 f986 	bl	800628a <wizphy_getphylink>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	2bff      	cmp	r3, #255	@ 0xff
 8005f86:	d102      	bne.n	8005f8e <ctlwizchip+0x1a2>
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	e008      	b.n	8005fa0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	7dfa      	ldrb	r2, [r7, #23]
 8005f92:	701a      	strb	r2, [r3, #0]
         break;
 8005f94:	e003      	b.n	8005f9e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9a:	e001      	b.n	8005fa0 <ctlwizchip+0x1b4>
         break;
 8005f9c:	bf00      	nop
   }
   return 0;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}
 8005fa8:	20000074 	.word	0x20000074

08005fac <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	2206      	movs	r2, #6
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005fbc:	f7ff fbe8 	bl	8005790 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005fcc:	f7ff fbe0 	bl	8005790 <WIZCHIP_READ_BUF>
 8005fd0:	f107 0310 	add.w	r3, r7, #16
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005fdc:	f7ff fbd8 	bl	8005790 <WIZCHIP_READ_BUF>
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005fec:	f7ff fbd0 	bl	8005790 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005ff0:	2180      	movs	r1, #128	@ 0x80
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f7ff fb7e 	bl	80056f4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f7ff fb2f 	bl	800565c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005ffe:	1d3b      	adds	r3, r7, #4
 8006000:	2206      	movs	r2, #6
 8006002:	4619      	mov	r1, r3
 8006004:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006008:	f7ff fc22 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	2204      	movs	r2, #4
 8006012:	4619      	mov	r1, r3
 8006014:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006018:	f7ff fc1a 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800601c:	f107 0310 	add.w	r3, r7, #16
 8006020:	2204      	movs	r2, #4
 8006022:	4619      	mov	r1, r3
 8006024:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006028:	f7ff fc12 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800602c:	f107 030c 	add.w	r3, r7, #12
 8006030:	2204      	movs	r2, #4
 8006032:	4619      	mov	r1, r3
 8006034:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006038:	f7ff fc0a 	bl	8005850 <WIZCHIP_WRITE_BUF>
}
 800603c:	bf00      	nop
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006052:	f7ff ffab 	bl	8005fac <wizchip_sw_reset>
   if(txsize)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d03b      	beq.n	80060d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]
 8006064:	e015      	b.n	8006092 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8006066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	4413      	add	r3, r2
 8006074:	b2db      	uxtb	r3, r3
 8006076:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800607c:	2b10      	cmp	r3, #16
 800607e:	dd02      	ble.n	8006086 <wizchip_init+0x42>
 8006080:	f04f 33ff 	mov.w	r3, #4294967295
 8006084:	e066      	b.n	8006154 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	3301      	adds	r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	73fb      	strb	r3, [r7, #15]
 8006092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006096:	2b07      	cmp	r3, #7
 8006098:	dde5      	ble.n	8006066 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	e015      	b.n	80060cc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80060a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	3301      	adds	r3, #1
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80060ae:	4618      	mov	r0, r3
 80060b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	4619      	mov	r1, r3
 80060bc:	f7ff fb1a 	bl	80056f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	3301      	adds	r3, #1
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	73fb      	strb	r3, [r7, #15]
 80060cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	dde5      	ble.n	80060a0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03b      	beq.n	8006152 <wizchip_init+0x10e>
   {
      tmp = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
 80060e2:	e015      	b.n	8006110 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80060e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	4413      	add	r3, r2
 80060ec:	781a      	ldrb	r2, [r3, #0]
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	4413      	add	r3, r2
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80060f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	dd02      	ble.n	8006104 <wizchip_init+0xc0>
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006102:	e027      	b.n	8006154 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	3301      	adds	r3, #1
 800610c:	b2db      	uxtb	r3, r3
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006114:	2b07      	cmp	r3, #7
 8006116:	dde5      	ble.n	80060e4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e015      	b.n	800614a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800611e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	3301      	adds	r3, #1
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800612c:	4618      	mov	r0, r3
 800612e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4413      	add	r3, r2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	4619      	mov	r1, r3
 800613a:	f7ff fadb 	bl	80056f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	3301      	adds	r3, #1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	73fb      	strb	r3, [r7, #15]
 800614a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614e:	2b07      	cmp	r3, #7
 8006150:	dde5      	ble.n	800611e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006166:	88fb      	ldrh	r3, [r7, #6]
 8006168:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	b29b      	uxth	r3, r3
 8006170:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	f023 030f 	bic.w	r3, r3, #15
 8006178:	b2db      	uxtb	r3, r3
 800617a:	4619      	mov	r1, r3
 800617c:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006180:	f7ff fab8 	bl	80056f4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
 8006188:	e014      	b.n	80061b4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800618a:	7bba      	ldrb	r2, [r7, #14]
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	fa42 f303 	asr.w	r3, r2, r3
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <wizchip_clrinterrupt+0x52>
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	3301      	adds	r3, #1
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80061a6:	211f      	movs	r1, #31
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff faa3 	bl	80056f4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	3301      	adds	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b07      	cmp	r3, #7
 80061b8:	d9e7      	bls.n	800618a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80061d6:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80061da:	f7ff fa3f 	bl	800565c <WIZCHIP_READ>
 80061de:	4603      	mov	r3, r0
 80061e0:	f023 030f 	bic.w	r3, r3, #15
 80061e4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80061e6:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80061ea:	f7ff fa37 	bl	800565c <WIZCHIP_READ>
 80061ee:	4603      	mov	r3, r0
 80061f0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80061f2:	79bb      	ldrb	r3, [r7, #6]
 80061f4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80061f6:	88bb      	ldrh	r3, [r7, #4]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4413      	add	r3, r2
 8006202:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006204:	88bb      	ldrh	r3, [r7, #4]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	4603      	mov	r3, r0
 8006216:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	4619      	mov	r1, r3
 8006228:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800622c:	f7ff fa62 	bl	80056f4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	4619      	mov	r1, r3
 8006234:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006238:	f7ff fa5c 	bl	80056f4 <WIZCHIP_WRITE>
#endif   
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8006256:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800625a:	f7ff f9ff 	bl	800565c <WIZCHIP_READ>
 800625e:	4603      	mov	r3, r0
 8006260:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8006262:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006266:	f7ff f9f9 	bl	800565c <WIZCHIP_READ>
 800626a:	4603      	mov	r3, r0
 800626c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800626e:	79bb      	ldrb	r3, [r7, #6]
 8006270:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006272:	88bb      	ldrh	r3, [r7, #4]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	b29a      	uxth	r2, r3
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	b29b      	uxth	r3, r3
 800627c:	4413      	add	r3, r2
 800627e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006280:	88bb      	ldrh	r3, [r7, #4]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8006290:	2300      	movs	r3, #0
 8006292:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006294:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006298:	f7ff f9e0 	bl	800565c <WIZCHIP_READ>
 800629c:	4603      	mov	r3, r0
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80062a6:	2301      	movs	r3, #1
 80062a8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80062aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80062c0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80062c4:	f7ff f9ca 	bl	800565c <WIZCHIP_READ>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062ce:	2b30      	cmp	r3, #48	@ 0x30
 80062d0:	d102      	bne.n	80062d8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80062d2:	2301      	movs	r3, #1
 80062d4:	71fb      	strb	r3, [r7, #7]
 80062d6:	e001      	b.n	80062dc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80062d8:	2300      	movs	r3, #0
 80062da:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80062dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80062ee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80062f2:	f7ff f9b3 	bl	800565c <WIZCHIP_READ>
 80062f6:	4603      	mov	r3, r0
 80062f8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006300:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	4619      	mov	r1, r3
 8006306:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800630a:	f7ff f9f3 	bl	80056f4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800630e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006312:	f7ff f9a3 	bl	800565c <WIZCHIP_READ>
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006320:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	4619      	mov	r1, r3
 8006326:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800632a:	f7ff f9e3 	bl	80056f4 <WIZCHIP_WRITE>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d104      	bne.n	8006354 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006350:	73fb      	strb	r3, [r7, #15]
 8006352:	e003      	b.n	800635c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800635a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d104      	bne.n	800636e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e019      	b.n	80063a2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	78db      	ldrb	r3, [r3, #3]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10d      	bne.n	8006392 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d104      	bne.n	8006388 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	f043 0318 	orr.w	r3, r3, #24
 8006384:	73fb      	strb	r3, [r7, #15]
 8006386:	e00c      	b.n	80063a2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	f043 0308 	orr.w	r3, r3, #8
 800638e:	73fb      	strb	r3, [r7, #15]
 8006390:	e007      	b.n	80063a2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	789b      	ldrb	r3, [r3, #2]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d103      	bne.n	80063a2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	f043 0310 	orr.w	r3, r3, #16
 80063a0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80063aa:	f7ff f9a3 	bl	80056f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80063ae:	f7ff ff9b 	bl	80062e8 <wizphy_reset>
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80063c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80063cc:	f7ff f946 	bl	800565c <WIZCHIP_READ>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	119b      	asrs	r3, r3, #6
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d001      	beq.n	80063f2 <wizphy_getphyconf+0x36>
 80063ee:	2b38      	cmp	r3, #56	@ 0x38
 80063f0:	d103      	bne.n	80063fa <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	705a      	strb	r2, [r3, #1]
         break;
 80063f8:	e003      	b.n	8006402 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	705a      	strb	r2, [r3, #1]
         break;
 8006400:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006408:	3b10      	subs	r3, #16
 800640a:	2b10      	cmp	r3, #16
 800640c:	bf8c      	ite	hi
 800640e:	2201      	movhi	r2, #1
 8006410:	2200      	movls	r2, #0
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	2a00      	cmp	r2, #0
 8006416:	d10f      	bne.n	8006438 <wizphy_getphyconf+0x7c>
 8006418:	4a1b      	ldr	r2, [pc, #108]	@ (8006488 <wizphy_getphyconf+0xcc>)
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf14      	ite	ne
 8006426:	2301      	movne	r3, #1
 8006428:	2300      	moveq	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	709a      	strb	r2, [r3, #2]
         break;
 8006436:	e003      	b.n	8006440 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	709a      	strb	r2, [r3, #2]
         break;
 800643e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006446:	3b08      	subs	r3, #8
 8006448:	2b18      	cmp	r3, #24
 800644a:	bf8c      	ite	hi
 800644c:	2201      	movhi	r2, #1
 800644e:	2200      	movls	r2, #0
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	2a00      	cmp	r2, #0
 8006454:	d10f      	bne.n	8006476 <wizphy_getphyconf+0xba>
 8006456:	4a0d      	ldr	r2, [pc, #52]	@ (800648c <wizphy_getphyconf+0xd0>)
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	70da      	strb	r2, [r3, #3]
         break;
 8006474:	e003      	b.n	800647e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	70da      	strb	r2, [r3, #3]
         break;
 800647c:	bf00      	nop
   }
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	00010101 	.word	0x00010101
 800648c:	01010001 	.word	0x01010001

08006490 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800649e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80064a2:	f7ff f8db 	bl	800565c <WIZCHIP_READ>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <wizphy_setphypmode+0x2a>
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	e030      	b.n	800651c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80064c0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d104      	bne.n	80064d2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80064ce:	73fb      	strb	r3, [r7, #15]
 80064d0:	e003      	b.n	80064da <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80064d8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	4619      	mov	r1, r3
 80064de:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80064e2:	f7ff f907 	bl	80056f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80064e6:	f7ff feff 	bl	80062e8 <wizphy_reset>
   tmp = getPHYCFGR();
 80064ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80064ee:	f7ff f8b5 	bl	800565c <WIZCHIP_READ>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d106      	bne.n	800650a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <wizphy_setphypmode+0x88>
 8006506:	2300      	movs	r3, #0
 8006508:	e008      	b.n	800651c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <wizphy_setphypmode+0x88>
 8006514:	2300      	movs	r3, #0
 8006516:	e001      	b.n	800651c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2206      	movs	r2, #6
 8006530:	4619      	mov	r1, r3
 8006532:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006536:	f7ff f98b 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	330e      	adds	r3, #14
 800653e:	2204      	movs	r2, #4
 8006540:	4619      	mov	r1, r3
 8006542:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006546:	f7ff f983 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	330a      	adds	r3, #10
 800654e:	2204      	movs	r2, #4
 8006550:	4619      	mov	r1, r3
 8006552:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006556:	f7ff f97b 	bl	8005850 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3306      	adds	r3, #6
 800655e:	2204      	movs	r2, #4
 8006560:	4619      	mov	r1, r3
 8006562:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006566:	f7ff f973 	bl	8005850 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7c9a      	ldrb	r2, [r3, #18]
 800656e:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <wizchip_setnetinfo+0x78>)
 8006570:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	7cda      	ldrb	r2, [r3, #19]
 8006576:	4b09      	ldr	r3, [pc, #36]	@ (800659c <wizchip_setnetinfo+0x78>)
 8006578:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	7d1a      	ldrb	r2, [r3, #20]
 800657e:	4b07      	ldr	r3, [pc, #28]	@ (800659c <wizchip_setnetinfo+0x78>)
 8006580:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7d5a      	ldrb	r2, [r3, #21]
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <wizchip_setnetinfo+0x78>)
 8006588:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7d9a      	ldrb	r2, [r3, #22]
 800658e:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <wizchip_setnetinfo+0x7c>)
 8006590:	701a      	strb	r2, [r3, #0]
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20007414 	.word	0x20007414
 80065a0:	20007418 	.word	0x20007418

080065a4 <atoi>:
 80065a4:	220a      	movs	r2, #10
 80065a6:	2100      	movs	r1, #0
 80065a8:	f000 b96e 	b.w	8006888 <strtol>

080065ac <malloc>:
 80065ac:	4b02      	ldr	r3, [pc, #8]	@ (80065b8 <malloc+0xc>)
 80065ae:	4601      	mov	r1, r0
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	f000 b825 	b.w	8006600 <_malloc_r>
 80065b6:	bf00      	nop
 80065b8:	200000ac 	.word	0x200000ac

080065bc <sbrk_aligned>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4e0f      	ldr	r6, [pc, #60]	@ (80065fc <sbrk_aligned+0x40>)
 80065c0:	460c      	mov	r4, r1
 80065c2:	6831      	ldr	r1, [r6, #0]
 80065c4:	4605      	mov	r5, r0
 80065c6:	b911      	cbnz	r1, 80065ce <sbrk_aligned+0x12>
 80065c8:	f000 fc0c 	bl	8006de4 <_sbrk_r>
 80065cc:	6030      	str	r0, [r6, #0]
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 fc07 	bl	8006de4 <_sbrk_r>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d103      	bne.n	80065e2 <sbrk_aligned+0x26>
 80065da:	f04f 34ff 	mov.w	r4, #4294967295
 80065de:	4620      	mov	r0, r4
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	1cc4      	adds	r4, r0, #3
 80065e4:	f024 0403 	bic.w	r4, r4, #3
 80065e8:	42a0      	cmp	r0, r4
 80065ea:	d0f8      	beq.n	80065de <sbrk_aligned+0x22>
 80065ec:	1a21      	subs	r1, r4, r0
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 fbf8 	bl	8006de4 <_sbrk_r>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1f2      	bne.n	80065de <sbrk_aligned+0x22>
 80065f8:	e7ef      	b.n	80065da <sbrk_aligned+0x1e>
 80065fa:	bf00      	nop
 80065fc:	2000741c 	.word	0x2000741c

08006600 <_malloc_r>:
 8006600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006604:	1ccd      	adds	r5, r1, #3
 8006606:	f025 0503 	bic.w	r5, r5, #3
 800660a:	3508      	adds	r5, #8
 800660c:	2d0c      	cmp	r5, #12
 800660e:	bf38      	it	cc
 8006610:	250c      	movcc	r5, #12
 8006612:	2d00      	cmp	r5, #0
 8006614:	4606      	mov	r6, r0
 8006616:	db01      	blt.n	800661c <_malloc_r+0x1c>
 8006618:	42a9      	cmp	r1, r5
 800661a:	d904      	bls.n	8006626 <_malloc_r+0x26>
 800661c:	230c      	movs	r3, #12
 800661e:	6033      	str	r3, [r6, #0]
 8006620:	2000      	movs	r0, #0
 8006622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066fc <_malloc_r+0xfc>
 800662a:	f000 f869 	bl	8006700 <__malloc_lock>
 800662e:	f8d8 3000 	ldr.w	r3, [r8]
 8006632:	461c      	mov	r4, r3
 8006634:	bb44      	cbnz	r4, 8006688 <_malloc_r+0x88>
 8006636:	4629      	mov	r1, r5
 8006638:	4630      	mov	r0, r6
 800663a:	f7ff ffbf 	bl	80065bc <sbrk_aligned>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	4604      	mov	r4, r0
 8006642:	d158      	bne.n	80066f6 <_malloc_r+0xf6>
 8006644:	f8d8 4000 	ldr.w	r4, [r8]
 8006648:	4627      	mov	r7, r4
 800664a:	2f00      	cmp	r7, #0
 800664c:	d143      	bne.n	80066d6 <_malloc_r+0xd6>
 800664e:	2c00      	cmp	r4, #0
 8006650:	d04b      	beq.n	80066ea <_malloc_r+0xea>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	4639      	mov	r1, r7
 8006656:	4630      	mov	r0, r6
 8006658:	eb04 0903 	add.w	r9, r4, r3
 800665c:	f000 fbc2 	bl	8006de4 <_sbrk_r>
 8006660:	4581      	cmp	r9, r0
 8006662:	d142      	bne.n	80066ea <_malloc_r+0xea>
 8006664:	6821      	ldr	r1, [r4, #0]
 8006666:	1a6d      	subs	r5, r5, r1
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff ffa6 	bl	80065bc <sbrk_aligned>
 8006670:	3001      	adds	r0, #1
 8006672:	d03a      	beq.n	80066ea <_malloc_r+0xea>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	442b      	add	r3, r5
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	f8d8 3000 	ldr.w	r3, [r8]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	bb62      	cbnz	r2, 80066dc <_malloc_r+0xdc>
 8006682:	f8c8 7000 	str.w	r7, [r8]
 8006686:	e00f      	b.n	80066a8 <_malloc_r+0xa8>
 8006688:	6822      	ldr	r2, [r4, #0]
 800668a:	1b52      	subs	r2, r2, r5
 800668c:	d420      	bmi.n	80066d0 <_malloc_r+0xd0>
 800668e:	2a0b      	cmp	r2, #11
 8006690:	d917      	bls.n	80066c2 <_malloc_r+0xc2>
 8006692:	1961      	adds	r1, r4, r5
 8006694:	42a3      	cmp	r3, r4
 8006696:	6025      	str	r5, [r4, #0]
 8006698:	bf18      	it	ne
 800669a:	6059      	strne	r1, [r3, #4]
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	bf08      	it	eq
 80066a0:	f8c8 1000 	streq.w	r1, [r8]
 80066a4:	5162      	str	r2, [r4, r5]
 80066a6:	604b      	str	r3, [r1, #4]
 80066a8:	4630      	mov	r0, r6
 80066aa:	f000 f82f 	bl	800670c <__malloc_unlock>
 80066ae:	f104 000b 	add.w	r0, r4, #11
 80066b2:	1d23      	adds	r3, r4, #4
 80066b4:	f020 0007 	bic.w	r0, r0, #7
 80066b8:	1ac2      	subs	r2, r0, r3
 80066ba:	bf1c      	itt	ne
 80066bc:	1a1b      	subne	r3, r3, r0
 80066be:	50a3      	strne	r3, [r4, r2]
 80066c0:	e7af      	b.n	8006622 <_malloc_r+0x22>
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	bf0c      	ite	eq
 80066c8:	f8c8 2000 	streq.w	r2, [r8]
 80066cc:	605a      	strne	r2, [r3, #4]
 80066ce:	e7eb      	b.n	80066a8 <_malloc_r+0xa8>
 80066d0:	4623      	mov	r3, r4
 80066d2:	6864      	ldr	r4, [r4, #4]
 80066d4:	e7ae      	b.n	8006634 <_malloc_r+0x34>
 80066d6:	463c      	mov	r4, r7
 80066d8:	687f      	ldr	r7, [r7, #4]
 80066da:	e7b6      	b.n	800664a <_malloc_r+0x4a>
 80066dc:	461a      	mov	r2, r3
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d1fb      	bne.n	80066dc <_malloc_r+0xdc>
 80066e4:	2300      	movs	r3, #0
 80066e6:	6053      	str	r3, [r2, #4]
 80066e8:	e7de      	b.n	80066a8 <_malloc_r+0xa8>
 80066ea:	230c      	movs	r3, #12
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	4630      	mov	r0, r6
 80066f0:	f000 f80c 	bl	800670c <__malloc_unlock>
 80066f4:	e794      	b.n	8006620 <_malloc_r+0x20>
 80066f6:	6005      	str	r5, [r0, #0]
 80066f8:	e7d6      	b.n	80066a8 <_malloc_r+0xa8>
 80066fa:	bf00      	nop
 80066fc:	20007420 	.word	0x20007420

08006700 <__malloc_lock>:
 8006700:	4801      	ldr	r0, [pc, #4]	@ (8006708 <__malloc_lock+0x8>)
 8006702:	f000 bbbc 	b.w	8006e7e <__retarget_lock_acquire_recursive>
 8006706:	bf00      	nop
 8006708:	20007564 	.word	0x20007564

0800670c <__malloc_unlock>:
 800670c:	4801      	ldr	r0, [pc, #4]	@ (8006714 <__malloc_unlock+0x8>)
 800670e:	f000 bbb7 	b.w	8006e80 <__retarget_lock_release_recursive>
 8006712:	bf00      	nop
 8006714:	20007564 	.word	0x20007564

08006718 <rand>:
 8006718:	4b16      	ldr	r3, [pc, #88]	@ (8006774 <rand+0x5c>)
 800671a:	b510      	push	{r4, lr}
 800671c:	681c      	ldr	r4, [r3, #0]
 800671e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006720:	b9b3      	cbnz	r3, 8006750 <rand+0x38>
 8006722:	2018      	movs	r0, #24
 8006724:	f7ff ff42 	bl	80065ac <malloc>
 8006728:	4602      	mov	r2, r0
 800672a:	6320      	str	r0, [r4, #48]	@ 0x30
 800672c:	b920      	cbnz	r0, 8006738 <rand+0x20>
 800672e:	4b12      	ldr	r3, [pc, #72]	@ (8006778 <rand+0x60>)
 8006730:	4812      	ldr	r0, [pc, #72]	@ (800677c <rand+0x64>)
 8006732:	2152      	movs	r1, #82	@ 0x52
 8006734:	f000 fbbc 	bl	8006eb0 <__assert_func>
 8006738:	4911      	ldr	r1, [pc, #68]	@ (8006780 <rand+0x68>)
 800673a:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <rand+0x6c>)
 800673c:	e9c0 1300 	strd	r1, r3, [r0]
 8006740:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <rand+0x70>)
 8006742:	6083      	str	r3, [r0, #8]
 8006744:	230b      	movs	r3, #11
 8006746:	8183      	strh	r3, [r0, #12]
 8006748:	2100      	movs	r1, #0
 800674a:	2001      	movs	r0, #1
 800674c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006750:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006752:	480e      	ldr	r0, [pc, #56]	@ (800678c <rand+0x74>)
 8006754:	690b      	ldr	r3, [r1, #16]
 8006756:	694c      	ldr	r4, [r1, #20]
 8006758:	4a0d      	ldr	r2, [pc, #52]	@ (8006790 <rand+0x78>)
 800675a:	4358      	muls	r0, r3
 800675c:	fb02 0004 	mla	r0, r2, r4, r0
 8006760:	fba3 3202 	umull	r3, r2, r3, r2
 8006764:	3301      	adds	r3, #1
 8006766:	eb40 0002 	adc.w	r0, r0, r2
 800676a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800676e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006772:	bd10      	pop	{r4, pc}
 8006774:	200000ac 	.word	0x200000ac
 8006778:	08008296 	.word	0x08008296
 800677c:	080082ad 	.word	0x080082ad
 8006780:	abcd330e 	.word	0xabcd330e
 8006784:	e66d1234 	.word	0xe66d1234
 8006788:	0005deec 	.word	0x0005deec
 800678c:	5851f42d 	.word	0x5851f42d
 8006790:	4c957f2d 	.word	0x4c957f2d

08006794 <_strtol_l.constprop.0>:
 8006794:	2b24      	cmp	r3, #36	@ 0x24
 8006796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800679a:	4686      	mov	lr, r0
 800679c:	4690      	mov	r8, r2
 800679e:	d801      	bhi.n	80067a4 <_strtol_l.constprop.0+0x10>
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d106      	bne.n	80067b2 <_strtol_l.constprop.0+0x1e>
 80067a4:	f000 fb40 	bl	8006e28 <__errno>
 80067a8:	2316      	movs	r3, #22
 80067aa:	6003      	str	r3, [r0, #0]
 80067ac:	2000      	movs	r0, #0
 80067ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b2:	4834      	ldr	r0, [pc, #208]	@ (8006884 <_strtol_l.constprop.0+0xf0>)
 80067b4:	460d      	mov	r5, r1
 80067b6:	462a      	mov	r2, r5
 80067b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067bc:	5d06      	ldrb	r6, [r0, r4]
 80067be:	f016 0608 	ands.w	r6, r6, #8
 80067c2:	d1f8      	bne.n	80067b6 <_strtol_l.constprop.0+0x22>
 80067c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80067c6:	d12d      	bne.n	8006824 <_strtol_l.constprop.0+0x90>
 80067c8:	782c      	ldrb	r4, [r5, #0]
 80067ca:	2601      	movs	r6, #1
 80067cc:	1c95      	adds	r5, r2, #2
 80067ce:	f033 0210 	bics.w	r2, r3, #16
 80067d2:	d109      	bne.n	80067e8 <_strtol_l.constprop.0+0x54>
 80067d4:	2c30      	cmp	r4, #48	@ 0x30
 80067d6:	d12a      	bne.n	800682e <_strtol_l.constprop.0+0x9a>
 80067d8:	782a      	ldrb	r2, [r5, #0]
 80067da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067de:	2a58      	cmp	r2, #88	@ 0x58
 80067e0:	d125      	bne.n	800682e <_strtol_l.constprop.0+0x9a>
 80067e2:	786c      	ldrb	r4, [r5, #1]
 80067e4:	2310      	movs	r3, #16
 80067e6:	3502      	adds	r5, #2
 80067e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80067ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80067f0:	2200      	movs	r2, #0
 80067f2:	fbbc f9f3 	udiv	r9, ip, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80067fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006800:	2f09      	cmp	r7, #9
 8006802:	d81b      	bhi.n	800683c <_strtol_l.constprop.0+0xa8>
 8006804:	463c      	mov	r4, r7
 8006806:	42a3      	cmp	r3, r4
 8006808:	dd27      	ble.n	800685a <_strtol_l.constprop.0+0xc6>
 800680a:	1c57      	adds	r7, r2, #1
 800680c:	d007      	beq.n	800681e <_strtol_l.constprop.0+0x8a>
 800680e:	4581      	cmp	r9, r0
 8006810:	d320      	bcc.n	8006854 <_strtol_l.constprop.0+0xc0>
 8006812:	d101      	bne.n	8006818 <_strtol_l.constprop.0+0x84>
 8006814:	45a2      	cmp	sl, r4
 8006816:	db1d      	blt.n	8006854 <_strtol_l.constprop.0+0xc0>
 8006818:	fb00 4003 	mla	r0, r0, r3, r4
 800681c:	2201      	movs	r2, #1
 800681e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006822:	e7eb      	b.n	80067fc <_strtol_l.constprop.0+0x68>
 8006824:	2c2b      	cmp	r4, #43	@ 0x2b
 8006826:	bf04      	itt	eq
 8006828:	782c      	ldrbeq	r4, [r5, #0]
 800682a:	1c95      	addeq	r5, r2, #2
 800682c:	e7cf      	b.n	80067ce <_strtol_l.constprop.0+0x3a>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1da      	bne.n	80067e8 <_strtol_l.constprop.0+0x54>
 8006832:	2c30      	cmp	r4, #48	@ 0x30
 8006834:	bf0c      	ite	eq
 8006836:	2308      	moveq	r3, #8
 8006838:	230a      	movne	r3, #10
 800683a:	e7d5      	b.n	80067e8 <_strtol_l.constprop.0+0x54>
 800683c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006840:	2f19      	cmp	r7, #25
 8006842:	d801      	bhi.n	8006848 <_strtol_l.constprop.0+0xb4>
 8006844:	3c37      	subs	r4, #55	@ 0x37
 8006846:	e7de      	b.n	8006806 <_strtol_l.constprop.0+0x72>
 8006848:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800684c:	2f19      	cmp	r7, #25
 800684e:	d804      	bhi.n	800685a <_strtol_l.constprop.0+0xc6>
 8006850:	3c57      	subs	r4, #87	@ 0x57
 8006852:	e7d8      	b.n	8006806 <_strtol_l.constprop.0+0x72>
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	e7e1      	b.n	800681e <_strtol_l.constprop.0+0x8a>
 800685a:	1c53      	adds	r3, r2, #1
 800685c:	d108      	bne.n	8006870 <_strtol_l.constprop.0+0xdc>
 800685e:	2322      	movs	r3, #34	@ 0x22
 8006860:	f8ce 3000 	str.w	r3, [lr]
 8006864:	4660      	mov	r0, ip
 8006866:	f1b8 0f00 	cmp.w	r8, #0
 800686a:	d0a0      	beq.n	80067ae <_strtol_l.constprop.0+0x1a>
 800686c:	1e69      	subs	r1, r5, #1
 800686e:	e006      	b.n	800687e <_strtol_l.constprop.0+0xea>
 8006870:	b106      	cbz	r6, 8006874 <_strtol_l.constprop.0+0xe0>
 8006872:	4240      	negs	r0, r0
 8006874:	f1b8 0f00 	cmp.w	r8, #0
 8006878:	d099      	beq.n	80067ae <_strtol_l.constprop.0+0x1a>
 800687a:	2a00      	cmp	r2, #0
 800687c:	d1f6      	bne.n	800686c <_strtol_l.constprop.0+0xd8>
 800687e:	f8c8 1000 	str.w	r1, [r8]
 8006882:	e794      	b.n	80067ae <_strtol_l.constprop.0+0x1a>
 8006884:	08008306 	.word	0x08008306

08006888 <strtol>:
 8006888:	4613      	mov	r3, r2
 800688a:	460a      	mov	r2, r1
 800688c:	4601      	mov	r1, r0
 800688e:	4802      	ldr	r0, [pc, #8]	@ (8006898 <strtol+0x10>)
 8006890:	6800      	ldr	r0, [r0, #0]
 8006892:	f7ff bf7f 	b.w	8006794 <_strtol_l.constprop.0>
 8006896:	bf00      	nop
 8006898:	200000ac 	.word	0x200000ac

0800689c <std>:
 800689c:	2300      	movs	r3, #0
 800689e:	b510      	push	{r4, lr}
 80068a0:	4604      	mov	r4, r0
 80068a2:	e9c0 3300 	strd	r3, r3, [r0]
 80068a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068aa:	6083      	str	r3, [r0, #8]
 80068ac:	8181      	strh	r1, [r0, #12]
 80068ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80068b0:	81c2      	strh	r2, [r0, #14]
 80068b2:	6183      	str	r3, [r0, #24]
 80068b4:	4619      	mov	r1, r3
 80068b6:	2208      	movs	r2, #8
 80068b8:	305c      	adds	r0, #92	@ 0x5c
 80068ba:	f000 fa21 	bl	8006d00 <memset>
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <std+0x58>)
 80068c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80068c2:	4b0d      	ldr	r3, [pc, #52]	@ (80068f8 <std+0x5c>)
 80068c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <std+0x60>)
 80068c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <std+0x64>)
 80068cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <std+0x68>)
 80068d0:	6224      	str	r4, [r4, #32]
 80068d2:	429c      	cmp	r4, r3
 80068d4:	d006      	beq.n	80068e4 <std+0x48>
 80068d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068da:	4294      	cmp	r4, r2
 80068dc:	d002      	beq.n	80068e4 <std+0x48>
 80068de:	33d0      	adds	r3, #208	@ 0xd0
 80068e0:	429c      	cmp	r4, r3
 80068e2:	d105      	bne.n	80068f0 <std+0x54>
 80068e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ec:	f000 bac6 	b.w	8006e7c <__retarget_lock_init_recursive>
 80068f0:	bd10      	pop	{r4, pc}
 80068f2:	bf00      	nop
 80068f4:	08006b51 	.word	0x08006b51
 80068f8:	08006b73 	.word	0x08006b73
 80068fc:	08006bab 	.word	0x08006bab
 8006900:	08006bcf 	.word	0x08006bcf
 8006904:	20007424 	.word	0x20007424

08006908 <stdio_exit_handler>:
 8006908:	4a02      	ldr	r2, [pc, #8]	@ (8006914 <stdio_exit_handler+0xc>)
 800690a:	4903      	ldr	r1, [pc, #12]	@ (8006918 <stdio_exit_handler+0x10>)
 800690c:	4803      	ldr	r0, [pc, #12]	@ (800691c <stdio_exit_handler+0x14>)
 800690e:	f000 b869 	b.w	80069e4 <_fwalk_sglue>
 8006912:	bf00      	nop
 8006914:	200000a0 	.word	0x200000a0
 8006918:	080078d9 	.word	0x080078d9
 800691c:	200000b0 	.word	0x200000b0

08006920 <cleanup_stdio>:
 8006920:	6841      	ldr	r1, [r0, #4]
 8006922:	4b0c      	ldr	r3, [pc, #48]	@ (8006954 <cleanup_stdio+0x34>)
 8006924:	4299      	cmp	r1, r3
 8006926:	b510      	push	{r4, lr}
 8006928:	4604      	mov	r4, r0
 800692a:	d001      	beq.n	8006930 <cleanup_stdio+0x10>
 800692c:	f000 ffd4 	bl	80078d8 <_fflush_r>
 8006930:	68a1      	ldr	r1, [r4, #8]
 8006932:	4b09      	ldr	r3, [pc, #36]	@ (8006958 <cleanup_stdio+0x38>)
 8006934:	4299      	cmp	r1, r3
 8006936:	d002      	beq.n	800693e <cleanup_stdio+0x1e>
 8006938:	4620      	mov	r0, r4
 800693a:	f000 ffcd 	bl	80078d8 <_fflush_r>
 800693e:	68e1      	ldr	r1, [r4, #12]
 8006940:	4b06      	ldr	r3, [pc, #24]	@ (800695c <cleanup_stdio+0x3c>)
 8006942:	4299      	cmp	r1, r3
 8006944:	d004      	beq.n	8006950 <cleanup_stdio+0x30>
 8006946:	4620      	mov	r0, r4
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	f000 bfc4 	b.w	80078d8 <_fflush_r>
 8006950:	bd10      	pop	{r4, pc}
 8006952:	bf00      	nop
 8006954:	20007424 	.word	0x20007424
 8006958:	2000748c 	.word	0x2000748c
 800695c:	200074f4 	.word	0x200074f4

08006960 <global_stdio_init.part.0>:
 8006960:	b510      	push	{r4, lr}
 8006962:	4b0b      	ldr	r3, [pc, #44]	@ (8006990 <global_stdio_init.part.0+0x30>)
 8006964:	4c0b      	ldr	r4, [pc, #44]	@ (8006994 <global_stdio_init.part.0+0x34>)
 8006966:	4a0c      	ldr	r2, [pc, #48]	@ (8006998 <global_stdio_init.part.0+0x38>)
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	4620      	mov	r0, r4
 800696c:	2200      	movs	r2, #0
 800696e:	2104      	movs	r1, #4
 8006970:	f7ff ff94 	bl	800689c <std>
 8006974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006978:	2201      	movs	r2, #1
 800697a:	2109      	movs	r1, #9
 800697c:	f7ff ff8e 	bl	800689c <std>
 8006980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006984:	2202      	movs	r2, #2
 8006986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698a:	2112      	movs	r1, #18
 800698c:	f7ff bf86 	b.w	800689c <std>
 8006990:	2000755c 	.word	0x2000755c
 8006994:	20007424 	.word	0x20007424
 8006998:	08006909 	.word	0x08006909

0800699c <__sfp_lock_acquire>:
 800699c:	4801      	ldr	r0, [pc, #4]	@ (80069a4 <__sfp_lock_acquire+0x8>)
 800699e:	f000 ba6e 	b.w	8006e7e <__retarget_lock_acquire_recursive>
 80069a2:	bf00      	nop
 80069a4:	20007565 	.word	0x20007565

080069a8 <__sfp_lock_release>:
 80069a8:	4801      	ldr	r0, [pc, #4]	@ (80069b0 <__sfp_lock_release+0x8>)
 80069aa:	f000 ba69 	b.w	8006e80 <__retarget_lock_release_recursive>
 80069ae:	bf00      	nop
 80069b0:	20007565 	.word	0x20007565

080069b4 <__sinit>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4604      	mov	r4, r0
 80069b8:	f7ff fff0 	bl	800699c <__sfp_lock_acquire>
 80069bc:	6a23      	ldr	r3, [r4, #32]
 80069be:	b11b      	cbz	r3, 80069c8 <__sinit+0x14>
 80069c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c4:	f7ff bff0 	b.w	80069a8 <__sfp_lock_release>
 80069c8:	4b04      	ldr	r3, [pc, #16]	@ (80069dc <__sinit+0x28>)
 80069ca:	6223      	str	r3, [r4, #32]
 80069cc:	4b04      	ldr	r3, [pc, #16]	@ (80069e0 <__sinit+0x2c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f5      	bne.n	80069c0 <__sinit+0xc>
 80069d4:	f7ff ffc4 	bl	8006960 <global_stdio_init.part.0>
 80069d8:	e7f2      	b.n	80069c0 <__sinit+0xc>
 80069da:	bf00      	nop
 80069dc:	08006921 	.word	0x08006921
 80069e0:	2000755c 	.word	0x2000755c

080069e4 <_fwalk_sglue>:
 80069e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e8:	4607      	mov	r7, r0
 80069ea:	4688      	mov	r8, r1
 80069ec:	4614      	mov	r4, r2
 80069ee:	2600      	movs	r6, #0
 80069f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f4:	f1b9 0901 	subs.w	r9, r9, #1
 80069f8:	d505      	bpl.n	8006a06 <_fwalk_sglue+0x22>
 80069fa:	6824      	ldr	r4, [r4, #0]
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	d1f7      	bne.n	80069f0 <_fwalk_sglue+0xc>
 8006a00:	4630      	mov	r0, r6
 8006a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a06:	89ab      	ldrh	r3, [r5, #12]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d907      	bls.n	8006a1c <_fwalk_sglue+0x38>
 8006a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a10:	3301      	adds	r3, #1
 8006a12:	d003      	beq.n	8006a1c <_fwalk_sglue+0x38>
 8006a14:	4629      	mov	r1, r5
 8006a16:	4638      	mov	r0, r7
 8006a18:	47c0      	blx	r8
 8006a1a:	4306      	orrs	r6, r0
 8006a1c:	3568      	adds	r5, #104	@ 0x68
 8006a1e:	e7e9      	b.n	80069f4 <_fwalk_sglue+0x10>

08006a20 <iprintf>:
 8006a20:	b40f      	push	{r0, r1, r2, r3}
 8006a22:	b507      	push	{r0, r1, r2, lr}
 8006a24:	4906      	ldr	r1, [pc, #24]	@ (8006a40 <iprintf+0x20>)
 8006a26:	ab04      	add	r3, sp, #16
 8006a28:	6808      	ldr	r0, [r1, #0]
 8006a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2e:	6881      	ldr	r1, [r0, #8]
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	f000 fc27 	bl	8007284 <_vfiprintf_r>
 8006a36:	b003      	add	sp, #12
 8006a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a3c:	b004      	add	sp, #16
 8006a3e:	4770      	bx	lr
 8006a40:	200000ac 	.word	0x200000ac

08006a44 <putchar>:
 8006a44:	4b02      	ldr	r3, [pc, #8]	@ (8006a50 <putchar+0xc>)
 8006a46:	4601      	mov	r1, r0
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	6882      	ldr	r2, [r0, #8]
 8006a4c:	f000 bfe0 	b.w	8007a10 <_putc_r>
 8006a50:	200000ac 	.word	0x200000ac

08006a54 <_puts_r>:
 8006a54:	6a03      	ldr	r3, [r0, #32]
 8006a56:	b570      	push	{r4, r5, r6, lr}
 8006a58:	6884      	ldr	r4, [r0, #8]
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	460e      	mov	r6, r1
 8006a5e:	b90b      	cbnz	r3, 8006a64 <_puts_r+0x10>
 8006a60:	f7ff ffa8 	bl	80069b4 <__sinit>
 8006a64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a66:	07db      	lsls	r3, r3, #31
 8006a68:	d405      	bmi.n	8006a76 <_puts_r+0x22>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	0598      	lsls	r0, r3, #22
 8006a6e:	d402      	bmi.n	8006a76 <_puts_r+0x22>
 8006a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a72:	f000 fa04 	bl	8006e7e <__retarget_lock_acquire_recursive>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	0719      	lsls	r1, r3, #28
 8006a7a:	d502      	bpl.n	8006a82 <_puts_r+0x2e>
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d135      	bne.n	8006aee <_puts_r+0x9a>
 8006a82:	4621      	mov	r1, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f8e5 	bl	8006c54 <__swsetup_r>
 8006a8a:	b380      	cbz	r0, 8006aee <_puts_r+0x9a>
 8006a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a92:	07da      	lsls	r2, r3, #31
 8006a94:	d405      	bmi.n	8006aa2 <_puts_r+0x4e>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	059b      	lsls	r3, r3, #22
 8006a9a:	d402      	bmi.n	8006aa2 <_puts_r+0x4e>
 8006a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a9e:	f000 f9ef 	bl	8006e80 <__retarget_lock_release_recursive>
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da04      	bge.n	8006ab4 <_puts_r+0x60>
 8006aaa:	69a2      	ldr	r2, [r4, #24]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	dc17      	bgt.n	8006ae0 <_puts_r+0x8c>
 8006ab0:	290a      	cmp	r1, #10
 8006ab2:	d015      	beq.n	8006ae0 <_puts_r+0x8c>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	6022      	str	r2, [r4, #0]
 8006aba:	7019      	strb	r1, [r3, #0]
 8006abc:	68a3      	ldr	r3, [r4, #8]
 8006abe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	d1ed      	bne.n	8006aa6 <_puts_r+0x52>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da11      	bge.n	8006af2 <_puts_r+0x9e>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	210a      	movs	r1, #10
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f87f 	bl	8006bd6 <__swbuf_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d0d7      	beq.n	8006a8c <_puts_r+0x38>
 8006adc:	250a      	movs	r5, #10
 8006ade:	e7d7      	b.n	8006a90 <_puts_r+0x3c>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 f877 	bl	8006bd6 <__swbuf_r>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d1e7      	bne.n	8006abc <_puts_r+0x68>
 8006aec:	e7ce      	b.n	8006a8c <_puts_r+0x38>
 8006aee:	3e01      	subs	r6, #1
 8006af0:	e7e4      	b.n	8006abc <_puts_r+0x68>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	6022      	str	r2, [r4, #0]
 8006af8:	220a      	movs	r2, #10
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e7ee      	b.n	8006adc <_puts_r+0x88>
	...

08006b00 <puts>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	@ (8006b0c <puts+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f7ff bfa5 	b.w	8006a54 <_puts_r>
 8006b0a:	bf00      	nop
 8006b0c:	200000ac 	.word	0x200000ac

08006b10 <siprintf>:
 8006b10:	b40e      	push	{r1, r2, r3}
 8006b12:	b500      	push	{lr}
 8006b14:	b09c      	sub	sp, #112	@ 0x70
 8006b16:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b18:	9002      	str	r0, [sp, #8]
 8006b1a:	9006      	str	r0, [sp, #24]
 8006b1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b20:	4809      	ldr	r0, [pc, #36]	@ (8006b48 <siprintf+0x38>)
 8006b22:	9107      	str	r1, [sp, #28]
 8006b24:	9104      	str	r1, [sp, #16]
 8006b26:	4909      	ldr	r1, [pc, #36]	@ (8006b4c <siprintf+0x3c>)
 8006b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2c:	9105      	str	r1, [sp, #20]
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	a902      	add	r1, sp, #8
 8006b34:	f000 fa80 	bl	8007038 <_svfiprintf_r>
 8006b38:	9b02      	ldr	r3, [sp, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	b01c      	add	sp, #112	@ 0x70
 8006b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b44:	b003      	add	sp, #12
 8006b46:	4770      	bx	lr
 8006b48:	200000ac 	.word	0x200000ac
 8006b4c:	ffff0208 	.word	0xffff0208

08006b50 <__sread>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	460c      	mov	r4, r1
 8006b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b58:	f000 f932 	bl	8006dc0 <_read_r>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	bfab      	itete	ge
 8006b60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b62:	89a3      	ldrhlt	r3, [r4, #12]
 8006b64:	181b      	addge	r3, r3, r0
 8006b66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b6a:	bfac      	ite	ge
 8006b6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b6e:	81a3      	strhlt	r3, [r4, #12]
 8006b70:	bd10      	pop	{r4, pc}

08006b72 <__swrite>:
 8006b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b76:	461f      	mov	r7, r3
 8006b78:	898b      	ldrh	r3, [r1, #12]
 8006b7a:	05db      	lsls	r3, r3, #23
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	4616      	mov	r6, r2
 8006b82:	d505      	bpl.n	8006b90 <__swrite+0x1e>
 8006b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b88:	2302      	movs	r3, #2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f000 f906 	bl	8006d9c <_lseek_r>
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b9a:	81a3      	strh	r3, [r4, #12]
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba6:	f000 b92d 	b.w	8006e04 <_write_r>

08006baa <__sseek>:
 8006baa:	b510      	push	{r4, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb2:	f000 f8f3 	bl	8006d9c <_lseek_r>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	bf15      	itete	ne
 8006bbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bc6:	81a3      	strheq	r3, [r4, #12]
 8006bc8:	bf18      	it	ne
 8006bca:	81a3      	strhne	r3, [r4, #12]
 8006bcc:	bd10      	pop	{r4, pc}

08006bce <__sclose>:
 8006bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd2:	f000 b8d3 	b.w	8006d7c <_close_r>

08006bd6 <__swbuf_r>:
 8006bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd8:	460e      	mov	r6, r1
 8006bda:	4614      	mov	r4, r2
 8006bdc:	4605      	mov	r5, r0
 8006bde:	b118      	cbz	r0, 8006be8 <__swbuf_r+0x12>
 8006be0:	6a03      	ldr	r3, [r0, #32]
 8006be2:	b90b      	cbnz	r3, 8006be8 <__swbuf_r+0x12>
 8006be4:	f7ff fee6 	bl	80069b4 <__sinit>
 8006be8:	69a3      	ldr	r3, [r4, #24]
 8006bea:	60a3      	str	r3, [r4, #8]
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	071a      	lsls	r2, r3, #28
 8006bf0:	d501      	bpl.n	8006bf6 <__swbuf_r+0x20>
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	b943      	cbnz	r3, 8006c08 <__swbuf_r+0x32>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f82b 	bl	8006c54 <__swsetup_r>
 8006bfe:	b118      	cbz	r0, 8006c08 <__swbuf_r+0x32>
 8006c00:	f04f 37ff 	mov.w	r7, #4294967295
 8006c04:	4638      	mov	r0, r7
 8006c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	6922      	ldr	r2, [r4, #16]
 8006c0c:	1a98      	subs	r0, r3, r2
 8006c0e:	6963      	ldr	r3, [r4, #20]
 8006c10:	b2f6      	uxtb	r6, r6
 8006c12:	4283      	cmp	r3, r0
 8006c14:	4637      	mov	r7, r6
 8006c16:	dc05      	bgt.n	8006c24 <__swbuf_r+0x4e>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 fe5c 	bl	80078d8 <_fflush_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d1ed      	bne.n	8006c00 <__swbuf_r+0x2a>
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	701e      	strb	r6, [r3, #0]
 8006c32:	6962      	ldr	r2, [r4, #20]
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d004      	beq.n	8006c44 <__swbuf_r+0x6e>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	07db      	lsls	r3, r3, #31
 8006c3e:	d5e1      	bpl.n	8006c04 <__swbuf_r+0x2e>
 8006c40:	2e0a      	cmp	r6, #10
 8006c42:	d1df      	bne.n	8006c04 <__swbuf_r+0x2e>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 fe46 	bl	80078d8 <_fflush_r>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d0d9      	beq.n	8006c04 <__swbuf_r+0x2e>
 8006c50:	e7d6      	b.n	8006c00 <__swbuf_r+0x2a>
	...

08006c54 <__swsetup_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4b29      	ldr	r3, [pc, #164]	@ (8006cfc <__swsetup_r+0xa8>)
 8006c58:	4605      	mov	r5, r0
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	b118      	cbz	r0, 8006c68 <__swsetup_r+0x14>
 8006c60:	6a03      	ldr	r3, [r0, #32]
 8006c62:	b90b      	cbnz	r3, 8006c68 <__swsetup_r+0x14>
 8006c64:	f7ff fea6 	bl	80069b4 <__sinit>
 8006c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6c:	0719      	lsls	r1, r3, #28
 8006c6e:	d422      	bmi.n	8006cb6 <__swsetup_r+0x62>
 8006c70:	06da      	lsls	r2, r3, #27
 8006c72:	d407      	bmi.n	8006c84 <__swsetup_r+0x30>
 8006c74:	2209      	movs	r2, #9
 8006c76:	602a      	str	r2, [r5, #0]
 8006c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c82:	e033      	b.n	8006cec <__swsetup_r+0x98>
 8006c84:	0758      	lsls	r0, r3, #29
 8006c86:	d512      	bpl.n	8006cae <__swsetup_r+0x5a>
 8006c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c8a:	b141      	cbz	r1, 8006c9e <__swsetup_r+0x4a>
 8006c8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c90:	4299      	cmp	r1, r3
 8006c92:	d002      	beq.n	8006c9a <__swsetup_r+0x46>
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f929 	bl	8006eec <_free_r>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6063      	str	r3, [r4, #4]
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f043 0308 	orr.w	r3, r3, #8
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	b94b      	cbnz	r3, 8006cce <__swsetup_r+0x7a>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc4:	d003      	beq.n	8006cce <__swsetup_r+0x7a>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f000 fe65 	bl	8007998 <__smakebuf_r>
 8006cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd2:	f013 0201 	ands.w	r2, r3, #1
 8006cd6:	d00a      	beq.n	8006cee <__swsetup_r+0x9a>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	60a2      	str	r2, [r4, #8]
 8006cdc:	6962      	ldr	r2, [r4, #20]
 8006cde:	4252      	negs	r2, r2
 8006ce0:	61a2      	str	r2, [r4, #24]
 8006ce2:	6922      	ldr	r2, [r4, #16]
 8006ce4:	b942      	cbnz	r2, 8006cf8 <__swsetup_r+0xa4>
 8006ce6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cea:	d1c5      	bne.n	8006c78 <__swsetup_r+0x24>
 8006cec:	bd38      	pop	{r3, r4, r5, pc}
 8006cee:	0799      	lsls	r1, r3, #30
 8006cf0:	bf58      	it	pl
 8006cf2:	6962      	ldrpl	r2, [r4, #20]
 8006cf4:	60a2      	str	r2, [r4, #8]
 8006cf6:	e7f4      	b.n	8006ce2 <__swsetup_r+0x8e>
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	e7f7      	b.n	8006cec <__swsetup_r+0x98>
 8006cfc:	200000ac 	.word	0x200000ac

08006d00 <memset>:
 8006d00:	4402      	add	r2, r0
 8006d02:	4603      	mov	r3, r0
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d100      	bne.n	8006d0a <memset+0xa>
 8006d08:	4770      	bx	lr
 8006d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0e:	e7f9      	b.n	8006d04 <memset+0x4>

08006d10 <strchr>:
 8006d10:	b2c9      	uxtb	r1, r1
 8006d12:	4603      	mov	r3, r0
 8006d14:	4618      	mov	r0, r3
 8006d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d1a:	b112      	cbz	r2, 8006d22 <strchr+0x12>
 8006d1c:	428a      	cmp	r2, r1
 8006d1e:	d1f9      	bne.n	8006d14 <strchr+0x4>
 8006d20:	4770      	bx	lr
 8006d22:	2900      	cmp	r1, #0
 8006d24:	bf18      	it	ne
 8006d26:	2000      	movne	r0, #0
 8006d28:	4770      	bx	lr

08006d2a <strncpy>:
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	3901      	subs	r1, #1
 8006d2e:	4603      	mov	r3, r0
 8006d30:	b132      	cbz	r2, 8006d40 <strncpy+0x16>
 8006d32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d36:	f803 4b01 	strb.w	r4, [r3], #1
 8006d3a:	3a01      	subs	r2, #1
 8006d3c:	2c00      	cmp	r4, #0
 8006d3e:	d1f7      	bne.n	8006d30 <strncpy+0x6>
 8006d40:	441a      	add	r2, r3
 8006d42:	2100      	movs	r1, #0
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d100      	bne.n	8006d4a <strncpy+0x20>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4e:	e7f9      	b.n	8006d44 <strncpy+0x1a>

08006d50 <strstr>:
 8006d50:	780a      	ldrb	r2, [r1, #0]
 8006d52:	b570      	push	{r4, r5, r6, lr}
 8006d54:	b96a      	cbnz	r2, 8006d72 <strstr+0x22>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d109      	bne.n	8006d70 <strstr+0x20>
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	4605      	mov	r5, r0
 8006d60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f6      	beq.n	8006d56 <strstr+0x6>
 8006d68:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006d6c:	429e      	cmp	r6, r3
 8006d6e:	d0f7      	beq.n	8006d60 <strstr+0x10>
 8006d70:	3001      	adds	r0, #1
 8006d72:	7803      	ldrb	r3, [r0, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1ef      	bne.n	8006d58 <strstr+0x8>
 8006d78:	4618      	mov	r0, r3
 8006d7a:	e7ec      	b.n	8006d56 <strstr+0x6>

08006d7c <_close_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d06      	ldr	r5, [pc, #24]	@ (8006d98 <_close_r+0x1c>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f7fb fc76 	bl	8002678 <_close>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_close_r+0x1a>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_close_r+0x1a>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	20007560 	.word	0x20007560

08006d9c <_lseek_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	@ (8006dbc <_lseek_r+0x20>)
 8006da0:	4604      	mov	r4, r0
 8006da2:	4608      	mov	r0, r1
 8006da4:	4611      	mov	r1, r2
 8006da6:	2200      	movs	r2, #0
 8006da8:	602a      	str	r2, [r5, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f7fb fc8b 	bl	80026c6 <_lseek>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_lseek_r+0x1e>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_lseek_r+0x1e>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20007560 	.word	0x20007560

08006dc0 <_read_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	@ (8006de0 <_read_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fb fc19 	bl	8002606 <_read>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_read_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_read_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20007560 	.word	0x20007560

08006de4 <_sbrk_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	@ (8006e00 <_sbrk_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fb fc76 	bl	80026e0 <_sbrk>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_sbrk_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_sbrk_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	20007560 	.word	0x20007560

08006e04 <_write_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d07      	ldr	r5, [pc, #28]	@ (8006e24 <_write_r+0x20>)
 8006e08:	4604      	mov	r4, r0
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	2200      	movs	r2, #0
 8006e10:	602a      	str	r2, [r5, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f7fb fc14 	bl	8002640 <_write>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_write_r+0x1e>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_write_r+0x1e>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	20007560 	.word	0x20007560

08006e28 <__errno>:
 8006e28:	4b01      	ldr	r3, [pc, #4]	@ (8006e30 <__errno+0x8>)
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	200000ac 	.word	0x200000ac

08006e34 <__libc_init_array>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4d0d      	ldr	r5, [pc, #52]	@ (8006e6c <__libc_init_array+0x38>)
 8006e38:	4c0d      	ldr	r4, [pc, #52]	@ (8006e70 <__libc_init_array+0x3c>)
 8006e3a:	1b64      	subs	r4, r4, r5
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	2600      	movs	r6, #0
 8006e40:	42a6      	cmp	r6, r4
 8006e42:	d109      	bne.n	8006e58 <__libc_init_array+0x24>
 8006e44:	4d0b      	ldr	r5, [pc, #44]	@ (8006e74 <__libc_init_array+0x40>)
 8006e46:	4c0c      	ldr	r4, [pc, #48]	@ (8006e78 <__libc_init_array+0x44>)
 8006e48:	f000 fed4 	bl	8007bf4 <_init>
 8006e4c:	1b64      	subs	r4, r4, r5
 8006e4e:	10a4      	asrs	r4, r4, #2
 8006e50:	2600      	movs	r6, #0
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	d105      	bne.n	8006e62 <__libc_init_array+0x2e>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5c:	4798      	blx	r3
 8006e5e:	3601      	adds	r6, #1
 8006e60:	e7ee      	b.n	8006e40 <__libc_init_array+0xc>
 8006e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e66:	4798      	blx	r3
 8006e68:	3601      	adds	r6, #1
 8006e6a:	e7f2      	b.n	8006e52 <__libc_init_array+0x1e>
 8006e6c:	08008480 	.word	0x08008480
 8006e70:	08008480 	.word	0x08008480
 8006e74:	08008480 	.word	0x08008480
 8006e78:	08008484 	.word	0x08008484

08006e7c <__retarget_lock_init_recursive>:
 8006e7c:	4770      	bx	lr

08006e7e <__retarget_lock_acquire_recursive>:
 8006e7e:	4770      	bx	lr

08006e80 <__retarget_lock_release_recursive>:
 8006e80:	4770      	bx	lr

08006e82 <strcpy>:
 8006e82:	4603      	mov	r3, r0
 8006e84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e88:	f803 2b01 	strb.w	r2, [r3], #1
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	d1f9      	bne.n	8006e84 <strcpy+0x2>
 8006e90:	4770      	bx	lr

08006e92 <memcpy>:
 8006e92:	440a      	add	r2, r1
 8006e94:	4291      	cmp	r1, r2
 8006e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e9a:	d100      	bne.n	8006e9e <memcpy+0xc>
 8006e9c:	4770      	bx	lr
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ea8:	4291      	cmp	r1, r2
 8006eaa:	d1f9      	bne.n	8006ea0 <memcpy+0xe>
 8006eac:	bd10      	pop	{r4, pc}
	...

08006eb0 <__assert_func>:
 8006eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eb2:	4614      	mov	r4, r2
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <__assert_func+0x2c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4605      	mov	r5, r0
 8006ebc:	68d8      	ldr	r0, [r3, #12]
 8006ebe:	b954      	cbnz	r4, 8006ed6 <__assert_func+0x26>
 8006ec0:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <__assert_func+0x30>)
 8006ec2:	461c      	mov	r4, r3
 8006ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ec8:	9100      	str	r1, [sp, #0]
 8006eca:	462b      	mov	r3, r5
 8006ecc:	4905      	ldr	r1, [pc, #20]	@ (8006ee4 <__assert_func+0x34>)
 8006ece:	f000 fd2b 	bl	8007928 <fiprintf>
 8006ed2:	f000 fe0d 	bl	8007af0 <abort>
 8006ed6:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <__assert_func+0x38>)
 8006ed8:	e7f4      	b.n	8006ec4 <__assert_func+0x14>
 8006eda:	bf00      	nop
 8006edc:	200000ac 	.word	0x200000ac
 8006ee0:	08008441 	.word	0x08008441
 8006ee4:	08008413 	.word	0x08008413
 8006ee8:	08008406 	.word	0x08008406

08006eec <_free_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4605      	mov	r5, r0
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	d041      	beq.n	8006f78 <_free_r+0x8c>
 8006ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef8:	1f0c      	subs	r4, r1, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfb8      	it	lt
 8006efe:	18e4      	addlt	r4, r4, r3
 8006f00:	f7ff fbfe 	bl	8006700 <__malloc_lock>
 8006f04:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <_free_r+0x90>)
 8006f06:	6813      	ldr	r3, [r2, #0]
 8006f08:	b933      	cbnz	r3, 8006f18 <_free_r+0x2c>
 8006f0a:	6063      	str	r3, [r4, #4]
 8006f0c:	6014      	str	r4, [r2, #0]
 8006f0e:	4628      	mov	r0, r5
 8006f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f14:	f7ff bbfa 	b.w	800670c <__malloc_unlock>
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d908      	bls.n	8006f2e <_free_r+0x42>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf01      	itttt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	e7ed      	b.n	8006f0a <_free_r+0x1e>
 8006f2e:	461a      	mov	r2, r3
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b10b      	cbz	r3, 8006f38 <_free_r+0x4c>
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	d9fa      	bls.n	8006f2e <_free_r+0x42>
 8006f38:	6811      	ldr	r1, [r2, #0]
 8006f3a:	1850      	adds	r0, r2, r1
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d10b      	bne.n	8006f58 <_free_r+0x6c>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	4401      	add	r1, r0
 8006f44:	1850      	adds	r0, r2, r1
 8006f46:	4283      	cmp	r3, r0
 8006f48:	6011      	str	r1, [r2, #0]
 8006f4a:	d1e0      	bne.n	8006f0e <_free_r+0x22>
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	6053      	str	r3, [r2, #4]
 8006f52:	4408      	add	r0, r1
 8006f54:	6010      	str	r0, [r2, #0]
 8006f56:	e7da      	b.n	8006f0e <_free_r+0x22>
 8006f58:	d902      	bls.n	8006f60 <_free_r+0x74>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	e7d6      	b.n	8006f0e <_free_r+0x22>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428b      	cmp	r3, r1
 8006f66:	bf04      	itt	eq
 8006f68:	6819      	ldreq	r1, [r3, #0]
 8006f6a:	685b      	ldreq	r3, [r3, #4]
 8006f6c:	6063      	str	r3, [r4, #4]
 8006f6e:	bf04      	itt	eq
 8006f70:	1809      	addeq	r1, r1, r0
 8006f72:	6021      	streq	r1, [r4, #0]
 8006f74:	6054      	str	r4, [r2, #4]
 8006f76:	e7ca      	b.n	8006f0e <_free_r+0x22>
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20007420 	.word	0x20007420

08006f80 <__ssputs_r>:
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	688e      	ldr	r6, [r1, #8]
 8006f86:	461f      	mov	r7, r3
 8006f88:	42be      	cmp	r6, r7
 8006f8a:	680b      	ldr	r3, [r1, #0]
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4690      	mov	r8, r2
 8006f92:	d82d      	bhi.n	8006ff0 <__ssputs_r+0x70>
 8006f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f9c:	d026      	beq.n	8006fec <__ssputs_r+0x6c>
 8006f9e:	6965      	ldr	r5, [r4, #20]
 8006fa0:	6909      	ldr	r1, [r1, #16]
 8006fa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa6:	eba3 0901 	sub.w	r9, r3, r1
 8006faa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fae:	1c7b      	adds	r3, r7, #1
 8006fb0:	444b      	add	r3, r9
 8006fb2:	106d      	asrs	r5, r5, #1
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	bf38      	it	cc
 8006fb8:	461d      	movcc	r5, r3
 8006fba:	0553      	lsls	r3, r2, #21
 8006fbc:	d527      	bpl.n	800700e <__ssputs_r+0x8e>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7ff fb1e 	bl	8006600 <_malloc_r>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	b360      	cbz	r0, 8007022 <__ssputs_r+0xa2>
 8006fc8:	6921      	ldr	r1, [r4, #16]
 8006fca:	464a      	mov	r2, r9
 8006fcc:	f7ff ff61 	bl	8006e92 <memcpy>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	6126      	str	r6, [r4, #16]
 8006fde:	6165      	str	r5, [r4, #20]
 8006fe0:	444e      	add	r6, r9
 8006fe2:	eba5 0509 	sub.w	r5, r5, r9
 8006fe6:	6026      	str	r6, [r4, #0]
 8006fe8:	60a5      	str	r5, [r4, #8]
 8006fea:	463e      	mov	r6, r7
 8006fec:	42be      	cmp	r6, r7
 8006fee:	d900      	bls.n	8006ff2 <__ssputs_r+0x72>
 8006ff0:	463e      	mov	r6, r7
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	f000 fd3e 	bl	8007a78 <memmove>
 8006ffc:	68a3      	ldr	r3, [r4, #8]
 8006ffe:	1b9b      	subs	r3, r3, r6
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	4433      	add	r3, r6
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	2000      	movs	r0, #0
 800700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700e:	462a      	mov	r2, r5
 8007010:	f000 fd75 	bl	8007afe <_realloc_r>
 8007014:	4606      	mov	r6, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	d1e0      	bne.n	8006fdc <__ssputs_r+0x5c>
 800701a:	6921      	ldr	r1, [r4, #16]
 800701c:	4650      	mov	r0, sl
 800701e:	f7ff ff65 	bl	8006eec <_free_r>
 8007022:	230c      	movs	r3, #12
 8007024:	f8ca 3000 	str.w	r3, [sl]
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	e7e9      	b.n	800700a <__ssputs_r+0x8a>
	...

08007038 <_svfiprintf_r>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4698      	mov	r8, r3
 800703e:	898b      	ldrh	r3, [r1, #12]
 8007040:	061b      	lsls	r3, r3, #24
 8007042:	b09d      	sub	sp, #116	@ 0x74
 8007044:	4607      	mov	r7, r0
 8007046:	460d      	mov	r5, r1
 8007048:	4614      	mov	r4, r2
 800704a:	d510      	bpl.n	800706e <_svfiprintf_r+0x36>
 800704c:	690b      	ldr	r3, [r1, #16]
 800704e:	b973      	cbnz	r3, 800706e <_svfiprintf_r+0x36>
 8007050:	2140      	movs	r1, #64	@ 0x40
 8007052:	f7ff fad5 	bl	8006600 <_malloc_r>
 8007056:	6028      	str	r0, [r5, #0]
 8007058:	6128      	str	r0, [r5, #16]
 800705a:	b930      	cbnz	r0, 800706a <_svfiprintf_r+0x32>
 800705c:	230c      	movs	r3, #12
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	b01d      	add	sp, #116	@ 0x74
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	2340      	movs	r3, #64	@ 0x40
 800706c:	616b      	str	r3, [r5, #20]
 800706e:	2300      	movs	r3, #0
 8007070:	9309      	str	r3, [sp, #36]	@ 0x24
 8007072:	2320      	movs	r3, #32
 8007074:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007078:	f8cd 800c 	str.w	r8, [sp, #12]
 800707c:	2330      	movs	r3, #48	@ 0x30
 800707e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800721c <_svfiprintf_r+0x1e4>
 8007082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007086:	f04f 0901 	mov.w	r9, #1
 800708a:	4623      	mov	r3, r4
 800708c:	469a      	mov	sl, r3
 800708e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007092:	b10a      	cbz	r2, 8007098 <_svfiprintf_r+0x60>
 8007094:	2a25      	cmp	r2, #37	@ 0x25
 8007096:	d1f9      	bne.n	800708c <_svfiprintf_r+0x54>
 8007098:	ebba 0b04 	subs.w	fp, sl, r4
 800709c:	d00b      	beq.n	80070b6 <_svfiprintf_r+0x7e>
 800709e:	465b      	mov	r3, fp
 80070a0:	4622      	mov	r2, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	4638      	mov	r0, r7
 80070a6:	f7ff ff6b 	bl	8006f80 <__ssputs_r>
 80070aa:	3001      	adds	r0, #1
 80070ac:	f000 80a7 	beq.w	80071fe <_svfiprintf_r+0x1c6>
 80070b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070b2:	445a      	add	r2, fp
 80070b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070b6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 809f 	beq.w	80071fe <_svfiprintf_r+0x1c6>
 80070c0:	2300      	movs	r3, #0
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295
 80070c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ca:	f10a 0a01 	add.w	sl, sl, #1
 80070ce:	9304      	str	r3, [sp, #16]
 80070d0:	9307      	str	r3, [sp, #28]
 80070d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80070d8:	4654      	mov	r4, sl
 80070da:	2205      	movs	r2, #5
 80070dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e0:	484e      	ldr	r0, [pc, #312]	@ (800721c <_svfiprintf_r+0x1e4>)
 80070e2:	f7f9 f895 	bl	8000210 <memchr>
 80070e6:	9a04      	ldr	r2, [sp, #16]
 80070e8:	b9d8      	cbnz	r0, 8007122 <_svfiprintf_r+0xea>
 80070ea:	06d0      	lsls	r0, r2, #27
 80070ec:	bf44      	itt	mi
 80070ee:	2320      	movmi	r3, #32
 80070f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070f4:	0711      	lsls	r1, r2, #28
 80070f6:	bf44      	itt	mi
 80070f8:	232b      	movmi	r3, #43	@ 0x2b
 80070fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007102:	2b2a      	cmp	r3, #42	@ 0x2a
 8007104:	d015      	beq.n	8007132 <_svfiprintf_r+0xfa>
 8007106:	9a07      	ldr	r2, [sp, #28]
 8007108:	4654      	mov	r4, sl
 800710a:	2000      	movs	r0, #0
 800710c:	f04f 0c0a 	mov.w	ip, #10
 8007110:	4621      	mov	r1, r4
 8007112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007116:	3b30      	subs	r3, #48	@ 0x30
 8007118:	2b09      	cmp	r3, #9
 800711a:	d94b      	bls.n	80071b4 <_svfiprintf_r+0x17c>
 800711c:	b1b0      	cbz	r0, 800714c <_svfiprintf_r+0x114>
 800711e:	9207      	str	r2, [sp, #28]
 8007120:	e014      	b.n	800714c <_svfiprintf_r+0x114>
 8007122:	eba0 0308 	sub.w	r3, r0, r8
 8007126:	fa09 f303 	lsl.w	r3, r9, r3
 800712a:	4313      	orrs	r3, r2
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	46a2      	mov	sl, r4
 8007130:	e7d2      	b.n	80070d8 <_svfiprintf_r+0xa0>
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	1d19      	adds	r1, r3, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	9103      	str	r1, [sp, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	bfbb      	ittet	lt
 800713e:	425b      	neglt	r3, r3
 8007140:	f042 0202 	orrlt.w	r2, r2, #2
 8007144:	9307      	strge	r3, [sp, #28]
 8007146:	9307      	strlt	r3, [sp, #28]
 8007148:	bfb8      	it	lt
 800714a:	9204      	strlt	r2, [sp, #16]
 800714c:	7823      	ldrb	r3, [r4, #0]
 800714e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007150:	d10a      	bne.n	8007168 <_svfiprintf_r+0x130>
 8007152:	7863      	ldrb	r3, [r4, #1]
 8007154:	2b2a      	cmp	r3, #42	@ 0x2a
 8007156:	d132      	bne.n	80071be <_svfiprintf_r+0x186>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	9203      	str	r2, [sp, #12]
 8007160:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007164:	3402      	adds	r4, #2
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800722c <_svfiprintf_r+0x1f4>
 800716c:	7821      	ldrb	r1, [r4, #0]
 800716e:	2203      	movs	r2, #3
 8007170:	4650      	mov	r0, sl
 8007172:	f7f9 f84d 	bl	8000210 <memchr>
 8007176:	b138      	cbz	r0, 8007188 <_svfiprintf_r+0x150>
 8007178:	9b04      	ldr	r3, [sp, #16]
 800717a:	eba0 000a 	sub.w	r0, r0, sl
 800717e:	2240      	movs	r2, #64	@ 0x40
 8007180:	4082      	lsls	r2, r0
 8007182:	4313      	orrs	r3, r2
 8007184:	3401      	adds	r4, #1
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	4824      	ldr	r0, [pc, #144]	@ (8007220 <_svfiprintf_r+0x1e8>)
 800718e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007192:	2206      	movs	r2, #6
 8007194:	f7f9 f83c 	bl	8000210 <memchr>
 8007198:	2800      	cmp	r0, #0
 800719a:	d036      	beq.n	800720a <_svfiprintf_r+0x1d2>
 800719c:	4b21      	ldr	r3, [pc, #132]	@ (8007224 <_svfiprintf_r+0x1ec>)
 800719e:	bb1b      	cbnz	r3, 80071e8 <_svfiprintf_r+0x1b0>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	3307      	adds	r3, #7
 80071a4:	f023 0307 	bic.w	r3, r3, #7
 80071a8:	3308      	adds	r3, #8
 80071aa:	9303      	str	r3, [sp, #12]
 80071ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ae:	4433      	add	r3, r6
 80071b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071b2:	e76a      	b.n	800708a <_svfiprintf_r+0x52>
 80071b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b8:	460c      	mov	r4, r1
 80071ba:	2001      	movs	r0, #1
 80071bc:	e7a8      	b.n	8007110 <_svfiprintf_r+0xd8>
 80071be:	2300      	movs	r3, #0
 80071c0:	3401      	adds	r4, #1
 80071c2:	9305      	str	r3, [sp, #20]
 80071c4:	4619      	mov	r1, r3
 80071c6:	f04f 0c0a 	mov.w	ip, #10
 80071ca:	4620      	mov	r0, r4
 80071cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d0:	3a30      	subs	r2, #48	@ 0x30
 80071d2:	2a09      	cmp	r2, #9
 80071d4:	d903      	bls.n	80071de <_svfiprintf_r+0x1a6>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0c6      	beq.n	8007168 <_svfiprintf_r+0x130>
 80071da:	9105      	str	r1, [sp, #20]
 80071dc:	e7c4      	b.n	8007168 <_svfiprintf_r+0x130>
 80071de:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e2:	4604      	mov	r4, r0
 80071e4:	2301      	movs	r3, #1
 80071e6:	e7f0      	b.n	80071ca <_svfiprintf_r+0x192>
 80071e8:	ab03      	add	r3, sp, #12
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	462a      	mov	r2, r5
 80071ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007228 <_svfiprintf_r+0x1f0>)
 80071f0:	a904      	add	r1, sp, #16
 80071f2:	4638      	mov	r0, r7
 80071f4:	f3af 8000 	nop.w
 80071f8:	1c42      	adds	r2, r0, #1
 80071fa:	4606      	mov	r6, r0
 80071fc:	d1d6      	bne.n	80071ac <_svfiprintf_r+0x174>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	065b      	lsls	r3, r3, #25
 8007202:	f53f af2d 	bmi.w	8007060 <_svfiprintf_r+0x28>
 8007206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007208:	e72c      	b.n	8007064 <_svfiprintf_r+0x2c>
 800720a:	ab03      	add	r3, sp, #12
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	462a      	mov	r2, r5
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <_svfiprintf_r+0x1f0>)
 8007212:	a904      	add	r1, sp, #16
 8007214:	4638      	mov	r0, r7
 8007216:	f000 f9bb 	bl	8007590 <_printf_i>
 800721a:	e7ed      	b.n	80071f8 <_svfiprintf_r+0x1c0>
 800721c:	08008442 	.word	0x08008442
 8007220:	0800844c 	.word	0x0800844c
 8007224:	00000000 	.word	0x00000000
 8007228:	08006f81 	.word	0x08006f81
 800722c:	08008448 	.word	0x08008448

08007230 <__sfputc_r>:
 8007230:	6893      	ldr	r3, [r2, #8]
 8007232:	3b01      	subs	r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	b410      	push	{r4}
 8007238:	6093      	str	r3, [r2, #8]
 800723a:	da08      	bge.n	800724e <__sfputc_r+0x1e>
 800723c:	6994      	ldr	r4, [r2, #24]
 800723e:	42a3      	cmp	r3, r4
 8007240:	db01      	blt.n	8007246 <__sfputc_r+0x16>
 8007242:	290a      	cmp	r1, #10
 8007244:	d103      	bne.n	800724e <__sfputc_r+0x1e>
 8007246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800724a:	f7ff bcc4 	b.w	8006bd6 <__swbuf_r>
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	1c58      	adds	r0, r3, #1
 8007252:	6010      	str	r0, [r2, #0]
 8007254:	7019      	strb	r1, [r3, #0]
 8007256:	4608      	mov	r0, r1
 8007258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800725c:	4770      	bx	lr

0800725e <__sfputs_r>:
 800725e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007260:	4606      	mov	r6, r0
 8007262:	460f      	mov	r7, r1
 8007264:	4614      	mov	r4, r2
 8007266:	18d5      	adds	r5, r2, r3
 8007268:	42ac      	cmp	r4, r5
 800726a:	d101      	bne.n	8007270 <__sfputs_r+0x12>
 800726c:	2000      	movs	r0, #0
 800726e:	e007      	b.n	8007280 <__sfputs_r+0x22>
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	463a      	mov	r2, r7
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff ffda 	bl	8007230 <__sfputc_r>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d1f3      	bne.n	8007268 <__sfputs_r+0xa>
 8007280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007284 <_vfiprintf_r>:
 8007284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	460d      	mov	r5, r1
 800728a:	b09d      	sub	sp, #116	@ 0x74
 800728c:	4614      	mov	r4, r2
 800728e:	4698      	mov	r8, r3
 8007290:	4606      	mov	r6, r0
 8007292:	b118      	cbz	r0, 800729c <_vfiprintf_r+0x18>
 8007294:	6a03      	ldr	r3, [r0, #32]
 8007296:	b90b      	cbnz	r3, 800729c <_vfiprintf_r+0x18>
 8007298:	f7ff fb8c 	bl	80069b4 <__sinit>
 800729c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d405      	bmi.n	80072ae <_vfiprintf_r+0x2a>
 80072a2:	89ab      	ldrh	r3, [r5, #12]
 80072a4:	059a      	lsls	r2, r3, #22
 80072a6:	d402      	bmi.n	80072ae <_vfiprintf_r+0x2a>
 80072a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072aa:	f7ff fde8 	bl	8006e7e <__retarget_lock_acquire_recursive>
 80072ae:	89ab      	ldrh	r3, [r5, #12]
 80072b0:	071b      	lsls	r3, r3, #28
 80072b2:	d501      	bpl.n	80072b8 <_vfiprintf_r+0x34>
 80072b4:	692b      	ldr	r3, [r5, #16]
 80072b6:	b99b      	cbnz	r3, 80072e0 <_vfiprintf_r+0x5c>
 80072b8:	4629      	mov	r1, r5
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff fcca 	bl	8006c54 <__swsetup_r>
 80072c0:	b170      	cbz	r0, 80072e0 <_vfiprintf_r+0x5c>
 80072c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072c4:	07dc      	lsls	r4, r3, #31
 80072c6:	d504      	bpl.n	80072d2 <_vfiprintf_r+0x4e>
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	b01d      	add	sp, #116	@ 0x74
 80072ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d2:	89ab      	ldrh	r3, [r5, #12]
 80072d4:	0598      	lsls	r0, r3, #22
 80072d6:	d4f7      	bmi.n	80072c8 <_vfiprintf_r+0x44>
 80072d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072da:	f7ff fdd1 	bl	8006e80 <__retarget_lock_release_recursive>
 80072de:	e7f3      	b.n	80072c8 <_vfiprintf_r+0x44>
 80072e0:	2300      	movs	r3, #0
 80072e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e4:	2320      	movs	r3, #32
 80072e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ee:	2330      	movs	r3, #48	@ 0x30
 80072f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074a0 <_vfiprintf_r+0x21c>
 80072f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072f8:	f04f 0901 	mov.w	r9, #1
 80072fc:	4623      	mov	r3, r4
 80072fe:	469a      	mov	sl, r3
 8007300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007304:	b10a      	cbz	r2, 800730a <_vfiprintf_r+0x86>
 8007306:	2a25      	cmp	r2, #37	@ 0x25
 8007308:	d1f9      	bne.n	80072fe <_vfiprintf_r+0x7a>
 800730a:	ebba 0b04 	subs.w	fp, sl, r4
 800730e:	d00b      	beq.n	8007328 <_vfiprintf_r+0xa4>
 8007310:	465b      	mov	r3, fp
 8007312:	4622      	mov	r2, r4
 8007314:	4629      	mov	r1, r5
 8007316:	4630      	mov	r0, r6
 8007318:	f7ff ffa1 	bl	800725e <__sfputs_r>
 800731c:	3001      	adds	r0, #1
 800731e:	f000 80a7 	beq.w	8007470 <_vfiprintf_r+0x1ec>
 8007322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007324:	445a      	add	r2, fp
 8007326:	9209      	str	r2, [sp, #36]	@ 0x24
 8007328:	f89a 3000 	ldrb.w	r3, [sl]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 809f 	beq.w	8007470 <_vfiprintf_r+0x1ec>
 8007332:	2300      	movs	r3, #0
 8007334:	f04f 32ff 	mov.w	r2, #4294967295
 8007338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800733c:	f10a 0a01 	add.w	sl, sl, #1
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007348:	931a      	str	r3, [sp, #104]	@ 0x68
 800734a:	4654      	mov	r4, sl
 800734c:	2205      	movs	r2, #5
 800734e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007352:	4853      	ldr	r0, [pc, #332]	@ (80074a0 <_vfiprintf_r+0x21c>)
 8007354:	f7f8 ff5c 	bl	8000210 <memchr>
 8007358:	9a04      	ldr	r2, [sp, #16]
 800735a:	b9d8      	cbnz	r0, 8007394 <_vfiprintf_r+0x110>
 800735c:	06d1      	lsls	r1, r2, #27
 800735e:	bf44      	itt	mi
 8007360:	2320      	movmi	r3, #32
 8007362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007366:	0713      	lsls	r3, r2, #28
 8007368:	bf44      	itt	mi
 800736a:	232b      	movmi	r3, #43	@ 0x2b
 800736c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007370:	f89a 3000 	ldrb.w	r3, [sl]
 8007374:	2b2a      	cmp	r3, #42	@ 0x2a
 8007376:	d015      	beq.n	80073a4 <_vfiprintf_r+0x120>
 8007378:	9a07      	ldr	r2, [sp, #28]
 800737a:	4654      	mov	r4, sl
 800737c:	2000      	movs	r0, #0
 800737e:	f04f 0c0a 	mov.w	ip, #10
 8007382:	4621      	mov	r1, r4
 8007384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007388:	3b30      	subs	r3, #48	@ 0x30
 800738a:	2b09      	cmp	r3, #9
 800738c:	d94b      	bls.n	8007426 <_vfiprintf_r+0x1a2>
 800738e:	b1b0      	cbz	r0, 80073be <_vfiprintf_r+0x13a>
 8007390:	9207      	str	r2, [sp, #28]
 8007392:	e014      	b.n	80073be <_vfiprintf_r+0x13a>
 8007394:	eba0 0308 	sub.w	r3, r0, r8
 8007398:	fa09 f303 	lsl.w	r3, r9, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	46a2      	mov	sl, r4
 80073a2:	e7d2      	b.n	800734a <_vfiprintf_r+0xc6>
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	1d19      	adds	r1, r3, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	9103      	str	r1, [sp, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bfbb      	ittet	lt
 80073b0:	425b      	neglt	r3, r3
 80073b2:	f042 0202 	orrlt.w	r2, r2, #2
 80073b6:	9307      	strge	r3, [sp, #28]
 80073b8:	9307      	strlt	r3, [sp, #28]
 80073ba:	bfb8      	it	lt
 80073bc:	9204      	strlt	r2, [sp, #16]
 80073be:	7823      	ldrb	r3, [r4, #0]
 80073c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80073c2:	d10a      	bne.n	80073da <_vfiprintf_r+0x156>
 80073c4:	7863      	ldrb	r3, [r4, #1]
 80073c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073c8:	d132      	bne.n	8007430 <_vfiprintf_r+0x1ac>
 80073ca:	9b03      	ldr	r3, [sp, #12]
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	9203      	str	r2, [sp, #12]
 80073d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073d6:	3402      	adds	r4, #2
 80073d8:	9305      	str	r3, [sp, #20]
 80073da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074b0 <_vfiprintf_r+0x22c>
 80073de:	7821      	ldrb	r1, [r4, #0]
 80073e0:	2203      	movs	r2, #3
 80073e2:	4650      	mov	r0, sl
 80073e4:	f7f8 ff14 	bl	8000210 <memchr>
 80073e8:	b138      	cbz	r0, 80073fa <_vfiprintf_r+0x176>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	eba0 000a 	sub.w	r0, r0, sl
 80073f0:	2240      	movs	r2, #64	@ 0x40
 80073f2:	4082      	lsls	r2, r0
 80073f4:	4313      	orrs	r3, r2
 80073f6:	3401      	adds	r4, #1
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fe:	4829      	ldr	r0, [pc, #164]	@ (80074a4 <_vfiprintf_r+0x220>)
 8007400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007404:	2206      	movs	r2, #6
 8007406:	f7f8 ff03 	bl	8000210 <memchr>
 800740a:	2800      	cmp	r0, #0
 800740c:	d03f      	beq.n	800748e <_vfiprintf_r+0x20a>
 800740e:	4b26      	ldr	r3, [pc, #152]	@ (80074a8 <_vfiprintf_r+0x224>)
 8007410:	bb1b      	cbnz	r3, 800745a <_vfiprintf_r+0x1d6>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	3307      	adds	r3, #7
 8007416:	f023 0307 	bic.w	r3, r3, #7
 800741a:	3308      	adds	r3, #8
 800741c:	9303      	str	r3, [sp, #12]
 800741e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007420:	443b      	add	r3, r7
 8007422:	9309      	str	r3, [sp, #36]	@ 0x24
 8007424:	e76a      	b.n	80072fc <_vfiprintf_r+0x78>
 8007426:	fb0c 3202 	mla	r2, ip, r2, r3
 800742a:	460c      	mov	r4, r1
 800742c:	2001      	movs	r0, #1
 800742e:	e7a8      	b.n	8007382 <_vfiprintf_r+0xfe>
 8007430:	2300      	movs	r3, #0
 8007432:	3401      	adds	r4, #1
 8007434:	9305      	str	r3, [sp, #20]
 8007436:	4619      	mov	r1, r3
 8007438:	f04f 0c0a 	mov.w	ip, #10
 800743c:	4620      	mov	r0, r4
 800743e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007442:	3a30      	subs	r2, #48	@ 0x30
 8007444:	2a09      	cmp	r2, #9
 8007446:	d903      	bls.n	8007450 <_vfiprintf_r+0x1cc>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0c6      	beq.n	80073da <_vfiprintf_r+0x156>
 800744c:	9105      	str	r1, [sp, #20]
 800744e:	e7c4      	b.n	80073da <_vfiprintf_r+0x156>
 8007450:	fb0c 2101 	mla	r1, ip, r1, r2
 8007454:	4604      	mov	r4, r0
 8007456:	2301      	movs	r3, #1
 8007458:	e7f0      	b.n	800743c <_vfiprintf_r+0x1b8>
 800745a:	ab03      	add	r3, sp, #12
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	462a      	mov	r2, r5
 8007460:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <_vfiprintf_r+0x228>)
 8007462:	a904      	add	r1, sp, #16
 8007464:	4630      	mov	r0, r6
 8007466:	f3af 8000 	nop.w
 800746a:	4607      	mov	r7, r0
 800746c:	1c78      	adds	r0, r7, #1
 800746e:	d1d6      	bne.n	800741e <_vfiprintf_r+0x19a>
 8007470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007472:	07d9      	lsls	r1, r3, #31
 8007474:	d405      	bmi.n	8007482 <_vfiprintf_r+0x1fe>
 8007476:	89ab      	ldrh	r3, [r5, #12]
 8007478:	059a      	lsls	r2, r3, #22
 800747a:	d402      	bmi.n	8007482 <_vfiprintf_r+0x1fe>
 800747c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800747e:	f7ff fcff 	bl	8006e80 <__retarget_lock_release_recursive>
 8007482:	89ab      	ldrh	r3, [r5, #12]
 8007484:	065b      	lsls	r3, r3, #25
 8007486:	f53f af1f 	bmi.w	80072c8 <_vfiprintf_r+0x44>
 800748a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800748c:	e71e      	b.n	80072cc <_vfiprintf_r+0x48>
 800748e:	ab03      	add	r3, sp, #12
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	462a      	mov	r2, r5
 8007494:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <_vfiprintf_r+0x228>)
 8007496:	a904      	add	r1, sp, #16
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f879 	bl	8007590 <_printf_i>
 800749e:	e7e4      	b.n	800746a <_vfiprintf_r+0x1e6>
 80074a0:	08008442 	.word	0x08008442
 80074a4:	0800844c 	.word	0x0800844c
 80074a8:	00000000 	.word	0x00000000
 80074ac:	0800725f 	.word	0x0800725f
 80074b0:	08008448 	.word	0x08008448

080074b4 <_printf_common>:
 80074b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	4616      	mov	r6, r2
 80074ba:	4698      	mov	r8, r3
 80074bc:	688a      	ldr	r2, [r1, #8]
 80074be:	690b      	ldr	r3, [r1, #16]
 80074c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074c4:	4293      	cmp	r3, r2
 80074c6:	bfb8      	it	lt
 80074c8:	4613      	movlt	r3, r2
 80074ca:	6033      	str	r3, [r6, #0]
 80074cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074d0:	4607      	mov	r7, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	b10a      	cbz	r2, 80074da <_printf_common+0x26>
 80074d6:	3301      	adds	r3, #1
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	0699      	lsls	r1, r3, #26
 80074de:	bf42      	ittt	mi
 80074e0:	6833      	ldrmi	r3, [r6, #0]
 80074e2:	3302      	addmi	r3, #2
 80074e4:	6033      	strmi	r3, [r6, #0]
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	f015 0506 	ands.w	r5, r5, #6
 80074ec:	d106      	bne.n	80074fc <_printf_common+0x48>
 80074ee:	f104 0a19 	add.w	sl, r4, #25
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	6832      	ldr	r2, [r6, #0]
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dc26      	bgt.n	800754a <_printf_common+0x96>
 80074fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	3b00      	subs	r3, #0
 8007504:	bf18      	it	ne
 8007506:	2301      	movne	r3, #1
 8007508:	0692      	lsls	r2, r2, #26
 800750a:	d42b      	bmi.n	8007564 <_printf_common+0xb0>
 800750c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007510:	4641      	mov	r1, r8
 8007512:	4638      	mov	r0, r7
 8007514:	47c8      	blx	r9
 8007516:	3001      	adds	r0, #1
 8007518:	d01e      	beq.n	8007558 <_printf_common+0xa4>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	6922      	ldr	r2, [r4, #16]
 800751e:	f003 0306 	and.w	r3, r3, #6
 8007522:	2b04      	cmp	r3, #4
 8007524:	bf02      	ittt	eq
 8007526:	68e5      	ldreq	r5, [r4, #12]
 8007528:	6833      	ldreq	r3, [r6, #0]
 800752a:	1aed      	subeq	r5, r5, r3
 800752c:	68a3      	ldr	r3, [r4, #8]
 800752e:	bf0c      	ite	eq
 8007530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007534:	2500      	movne	r5, #0
 8007536:	4293      	cmp	r3, r2
 8007538:	bfc4      	itt	gt
 800753a:	1a9b      	subgt	r3, r3, r2
 800753c:	18ed      	addgt	r5, r5, r3
 800753e:	2600      	movs	r6, #0
 8007540:	341a      	adds	r4, #26
 8007542:	42b5      	cmp	r5, r6
 8007544:	d11a      	bne.n	800757c <_printf_common+0xc8>
 8007546:	2000      	movs	r0, #0
 8007548:	e008      	b.n	800755c <_printf_common+0xa8>
 800754a:	2301      	movs	r3, #1
 800754c:	4652      	mov	r2, sl
 800754e:	4641      	mov	r1, r8
 8007550:	4638      	mov	r0, r7
 8007552:	47c8      	blx	r9
 8007554:	3001      	adds	r0, #1
 8007556:	d103      	bne.n	8007560 <_printf_common+0xac>
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007560:	3501      	adds	r5, #1
 8007562:	e7c6      	b.n	80074f2 <_printf_common+0x3e>
 8007564:	18e1      	adds	r1, r4, r3
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	2030      	movs	r0, #48	@ 0x30
 800756a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800756e:	4422      	add	r2, r4
 8007570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007578:	3302      	adds	r3, #2
 800757a:	e7c7      	b.n	800750c <_printf_common+0x58>
 800757c:	2301      	movs	r3, #1
 800757e:	4622      	mov	r2, r4
 8007580:	4641      	mov	r1, r8
 8007582:	4638      	mov	r0, r7
 8007584:	47c8      	blx	r9
 8007586:	3001      	adds	r0, #1
 8007588:	d0e6      	beq.n	8007558 <_printf_common+0xa4>
 800758a:	3601      	adds	r6, #1
 800758c:	e7d9      	b.n	8007542 <_printf_common+0x8e>
	...

08007590 <_printf_i>:
 8007590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	7e0f      	ldrb	r7, [r1, #24]
 8007596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007598:	2f78      	cmp	r7, #120	@ 0x78
 800759a:	4691      	mov	r9, r2
 800759c:	4680      	mov	r8, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	469a      	mov	sl, r3
 80075a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075a6:	d807      	bhi.n	80075b8 <_printf_i+0x28>
 80075a8:	2f62      	cmp	r7, #98	@ 0x62
 80075aa:	d80a      	bhi.n	80075c2 <_printf_i+0x32>
 80075ac:	2f00      	cmp	r7, #0
 80075ae:	f000 80d2 	beq.w	8007756 <_printf_i+0x1c6>
 80075b2:	2f58      	cmp	r7, #88	@ 0x58
 80075b4:	f000 80b9 	beq.w	800772a <_printf_i+0x19a>
 80075b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075c0:	e03a      	b.n	8007638 <_printf_i+0xa8>
 80075c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075c6:	2b15      	cmp	r3, #21
 80075c8:	d8f6      	bhi.n	80075b8 <_printf_i+0x28>
 80075ca:	a101      	add	r1, pc, #4	@ (adr r1, 80075d0 <_printf_i+0x40>)
 80075cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d0:	08007629 	.word	0x08007629
 80075d4:	0800763d 	.word	0x0800763d
 80075d8:	080075b9 	.word	0x080075b9
 80075dc:	080075b9 	.word	0x080075b9
 80075e0:	080075b9 	.word	0x080075b9
 80075e4:	080075b9 	.word	0x080075b9
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	080075b9 	.word	0x080075b9
 80075f0:	080075b9 	.word	0x080075b9
 80075f4:	080075b9 	.word	0x080075b9
 80075f8:	080075b9 	.word	0x080075b9
 80075fc:	0800773d 	.word	0x0800773d
 8007600:	08007667 	.word	0x08007667
 8007604:	080076f7 	.word	0x080076f7
 8007608:	080075b9 	.word	0x080075b9
 800760c:	080075b9 	.word	0x080075b9
 8007610:	0800775f 	.word	0x0800775f
 8007614:	080075b9 	.word	0x080075b9
 8007618:	08007667 	.word	0x08007667
 800761c:	080075b9 	.word	0x080075b9
 8007620:	080075b9 	.word	0x080075b9
 8007624:	080076ff 	.word	0x080076ff
 8007628:	6833      	ldr	r3, [r6, #0]
 800762a:	1d1a      	adds	r2, r3, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6032      	str	r2, [r6, #0]
 8007630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007638:	2301      	movs	r3, #1
 800763a:	e09d      	b.n	8007778 <_printf_i+0x1e8>
 800763c:	6833      	ldr	r3, [r6, #0]
 800763e:	6820      	ldr	r0, [r4, #0]
 8007640:	1d19      	adds	r1, r3, #4
 8007642:	6031      	str	r1, [r6, #0]
 8007644:	0606      	lsls	r6, r0, #24
 8007646:	d501      	bpl.n	800764c <_printf_i+0xbc>
 8007648:	681d      	ldr	r5, [r3, #0]
 800764a:	e003      	b.n	8007654 <_printf_i+0xc4>
 800764c:	0645      	lsls	r5, r0, #25
 800764e:	d5fb      	bpl.n	8007648 <_printf_i+0xb8>
 8007650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007654:	2d00      	cmp	r5, #0
 8007656:	da03      	bge.n	8007660 <_printf_i+0xd0>
 8007658:	232d      	movs	r3, #45	@ 0x2d
 800765a:	426d      	negs	r5, r5
 800765c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007660:	4859      	ldr	r0, [pc, #356]	@ (80077c8 <_printf_i+0x238>)
 8007662:	230a      	movs	r3, #10
 8007664:	e011      	b.n	800768a <_printf_i+0xfa>
 8007666:	6821      	ldr	r1, [r4, #0]
 8007668:	6833      	ldr	r3, [r6, #0]
 800766a:	0608      	lsls	r0, r1, #24
 800766c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007670:	d402      	bmi.n	8007678 <_printf_i+0xe8>
 8007672:	0649      	lsls	r1, r1, #25
 8007674:	bf48      	it	mi
 8007676:	b2ad      	uxthmi	r5, r5
 8007678:	2f6f      	cmp	r7, #111	@ 0x6f
 800767a:	4853      	ldr	r0, [pc, #332]	@ (80077c8 <_printf_i+0x238>)
 800767c:	6033      	str	r3, [r6, #0]
 800767e:	bf14      	ite	ne
 8007680:	230a      	movne	r3, #10
 8007682:	2308      	moveq	r3, #8
 8007684:	2100      	movs	r1, #0
 8007686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800768a:	6866      	ldr	r6, [r4, #4]
 800768c:	60a6      	str	r6, [r4, #8]
 800768e:	2e00      	cmp	r6, #0
 8007690:	bfa2      	ittt	ge
 8007692:	6821      	ldrge	r1, [r4, #0]
 8007694:	f021 0104 	bicge.w	r1, r1, #4
 8007698:	6021      	strge	r1, [r4, #0]
 800769a:	b90d      	cbnz	r5, 80076a0 <_printf_i+0x110>
 800769c:	2e00      	cmp	r6, #0
 800769e:	d04b      	beq.n	8007738 <_printf_i+0x1a8>
 80076a0:	4616      	mov	r6, r2
 80076a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80076a6:	fb03 5711 	mls	r7, r3, r1, r5
 80076aa:	5dc7      	ldrb	r7, [r0, r7]
 80076ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076b0:	462f      	mov	r7, r5
 80076b2:	42bb      	cmp	r3, r7
 80076b4:	460d      	mov	r5, r1
 80076b6:	d9f4      	bls.n	80076a2 <_printf_i+0x112>
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d10b      	bne.n	80076d4 <_printf_i+0x144>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	07df      	lsls	r7, r3, #31
 80076c0:	d508      	bpl.n	80076d4 <_printf_i+0x144>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	6861      	ldr	r1, [r4, #4]
 80076c6:	4299      	cmp	r1, r3
 80076c8:	bfde      	ittt	le
 80076ca:	2330      	movle	r3, #48	@ 0x30
 80076cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076d4:	1b92      	subs	r2, r2, r6
 80076d6:	6122      	str	r2, [r4, #16]
 80076d8:	f8cd a000 	str.w	sl, [sp]
 80076dc:	464b      	mov	r3, r9
 80076de:	aa03      	add	r2, sp, #12
 80076e0:	4621      	mov	r1, r4
 80076e2:	4640      	mov	r0, r8
 80076e4:	f7ff fee6 	bl	80074b4 <_printf_common>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d14a      	bne.n	8007782 <_printf_i+0x1f2>
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	b004      	add	sp, #16
 80076f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	f043 0320 	orr.w	r3, r3, #32
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	4833      	ldr	r0, [pc, #204]	@ (80077cc <_printf_i+0x23c>)
 8007700:	2778      	movs	r7, #120	@ 0x78
 8007702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	6831      	ldr	r1, [r6, #0]
 800770a:	061f      	lsls	r7, r3, #24
 800770c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007710:	d402      	bmi.n	8007718 <_printf_i+0x188>
 8007712:	065f      	lsls	r7, r3, #25
 8007714:	bf48      	it	mi
 8007716:	b2ad      	uxthmi	r5, r5
 8007718:	6031      	str	r1, [r6, #0]
 800771a:	07d9      	lsls	r1, r3, #31
 800771c:	bf44      	itt	mi
 800771e:	f043 0320 	orrmi.w	r3, r3, #32
 8007722:	6023      	strmi	r3, [r4, #0]
 8007724:	b11d      	cbz	r5, 800772e <_printf_i+0x19e>
 8007726:	2310      	movs	r3, #16
 8007728:	e7ac      	b.n	8007684 <_printf_i+0xf4>
 800772a:	4827      	ldr	r0, [pc, #156]	@ (80077c8 <_printf_i+0x238>)
 800772c:	e7e9      	b.n	8007702 <_printf_i+0x172>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	f023 0320 	bic.w	r3, r3, #32
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	e7f6      	b.n	8007726 <_printf_i+0x196>
 8007738:	4616      	mov	r6, r2
 800773a:	e7bd      	b.n	80076b8 <_printf_i+0x128>
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	6825      	ldr	r5, [r4, #0]
 8007740:	6961      	ldr	r1, [r4, #20]
 8007742:	1d18      	adds	r0, r3, #4
 8007744:	6030      	str	r0, [r6, #0]
 8007746:	062e      	lsls	r6, r5, #24
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	d501      	bpl.n	8007750 <_printf_i+0x1c0>
 800774c:	6019      	str	r1, [r3, #0]
 800774e:	e002      	b.n	8007756 <_printf_i+0x1c6>
 8007750:	0668      	lsls	r0, r5, #25
 8007752:	d5fb      	bpl.n	800774c <_printf_i+0x1bc>
 8007754:	8019      	strh	r1, [r3, #0]
 8007756:	2300      	movs	r3, #0
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	4616      	mov	r6, r2
 800775c:	e7bc      	b.n	80076d8 <_printf_i+0x148>
 800775e:	6833      	ldr	r3, [r6, #0]
 8007760:	1d1a      	adds	r2, r3, #4
 8007762:	6032      	str	r2, [r6, #0]
 8007764:	681e      	ldr	r6, [r3, #0]
 8007766:	6862      	ldr	r2, [r4, #4]
 8007768:	2100      	movs	r1, #0
 800776a:	4630      	mov	r0, r6
 800776c:	f7f8 fd50 	bl	8000210 <memchr>
 8007770:	b108      	cbz	r0, 8007776 <_printf_i+0x1e6>
 8007772:	1b80      	subs	r0, r0, r6
 8007774:	6060      	str	r0, [r4, #4]
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	2300      	movs	r3, #0
 800777c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007780:	e7aa      	b.n	80076d8 <_printf_i+0x148>
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	4632      	mov	r2, r6
 8007786:	4649      	mov	r1, r9
 8007788:	4640      	mov	r0, r8
 800778a:	47d0      	blx	sl
 800778c:	3001      	adds	r0, #1
 800778e:	d0ad      	beq.n	80076ec <_printf_i+0x15c>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	079b      	lsls	r3, r3, #30
 8007794:	d413      	bmi.n	80077be <_printf_i+0x22e>
 8007796:	68e0      	ldr	r0, [r4, #12]
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	4298      	cmp	r0, r3
 800779c:	bfb8      	it	lt
 800779e:	4618      	movlt	r0, r3
 80077a0:	e7a6      	b.n	80076f0 <_printf_i+0x160>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4632      	mov	r2, r6
 80077a6:	4649      	mov	r1, r9
 80077a8:	4640      	mov	r0, r8
 80077aa:	47d0      	blx	sl
 80077ac:	3001      	adds	r0, #1
 80077ae:	d09d      	beq.n	80076ec <_printf_i+0x15c>
 80077b0:	3501      	adds	r5, #1
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	9903      	ldr	r1, [sp, #12]
 80077b6:	1a5b      	subs	r3, r3, r1
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dcf2      	bgt.n	80077a2 <_printf_i+0x212>
 80077bc:	e7eb      	b.n	8007796 <_printf_i+0x206>
 80077be:	2500      	movs	r5, #0
 80077c0:	f104 0619 	add.w	r6, r4, #25
 80077c4:	e7f5      	b.n	80077b2 <_printf_i+0x222>
 80077c6:	bf00      	nop
 80077c8:	08008453 	.word	0x08008453
 80077cc:	08008464 	.word	0x08008464

080077d0 <__sflush_r>:
 80077d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d8:	0716      	lsls	r6, r2, #28
 80077da:	4605      	mov	r5, r0
 80077dc:	460c      	mov	r4, r1
 80077de:	d454      	bmi.n	800788a <__sflush_r+0xba>
 80077e0:	684b      	ldr	r3, [r1, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	dc02      	bgt.n	80077ec <__sflush_r+0x1c>
 80077e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dd48      	ble.n	800787e <__sflush_r+0xae>
 80077ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077ee:	2e00      	cmp	r6, #0
 80077f0:	d045      	beq.n	800787e <__sflush_r+0xae>
 80077f2:	2300      	movs	r3, #0
 80077f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077f8:	682f      	ldr	r7, [r5, #0]
 80077fa:	6a21      	ldr	r1, [r4, #32]
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	d030      	beq.n	8007862 <__sflush_r+0x92>
 8007800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	0759      	lsls	r1, r3, #29
 8007806:	d505      	bpl.n	8007814 <__sflush_r+0x44>
 8007808:	6863      	ldr	r3, [r4, #4]
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800780e:	b10b      	cbz	r3, 8007814 <__sflush_r+0x44>
 8007810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	2300      	movs	r3, #0
 8007816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007818:	6a21      	ldr	r1, [r4, #32]
 800781a:	4628      	mov	r0, r5
 800781c:	47b0      	blx	r6
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	d106      	bne.n	8007832 <__sflush_r+0x62>
 8007824:	6829      	ldr	r1, [r5, #0]
 8007826:	291d      	cmp	r1, #29
 8007828:	d82b      	bhi.n	8007882 <__sflush_r+0xb2>
 800782a:	4a2a      	ldr	r2, [pc, #168]	@ (80078d4 <__sflush_r+0x104>)
 800782c:	410a      	asrs	r2, r1
 800782e:	07d6      	lsls	r6, r2, #31
 8007830:	d427      	bmi.n	8007882 <__sflush_r+0xb2>
 8007832:	2200      	movs	r2, #0
 8007834:	6062      	str	r2, [r4, #4]
 8007836:	04d9      	lsls	r1, r3, #19
 8007838:	6922      	ldr	r2, [r4, #16]
 800783a:	6022      	str	r2, [r4, #0]
 800783c:	d504      	bpl.n	8007848 <__sflush_r+0x78>
 800783e:	1c42      	adds	r2, r0, #1
 8007840:	d101      	bne.n	8007846 <__sflush_r+0x76>
 8007842:	682b      	ldr	r3, [r5, #0]
 8007844:	b903      	cbnz	r3, 8007848 <__sflush_r+0x78>
 8007846:	6560      	str	r0, [r4, #84]	@ 0x54
 8007848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800784a:	602f      	str	r7, [r5, #0]
 800784c:	b1b9      	cbz	r1, 800787e <__sflush_r+0xae>
 800784e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007852:	4299      	cmp	r1, r3
 8007854:	d002      	beq.n	800785c <__sflush_r+0x8c>
 8007856:	4628      	mov	r0, r5
 8007858:	f7ff fb48 	bl	8006eec <_free_r>
 800785c:	2300      	movs	r3, #0
 800785e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007860:	e00d      	b.n	800787e <__sflush_r+0xae>
 8007862:	2301      	movs	r3, #1
 8007864:	4628      	mov	r0, r5
 8007866:	47b0      	blx	r6
 8007868:	4602      	mov	r2, r0
 800786a:	1c50      	adds	r0, r2, #1
 800786c:	d1c9      	bne.n	8007802 <__sflush_r+0x32>
 800786e:	682b      	ldr	r3, [r5, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0c6      	beq.n	8007802 <__sflush_r+0x32>
 8007874:	2b1d      	cmp	r3, #29
 8007876:	d001      	beq.n	800787c <__sflush_r+0xac>
 8007878:	2b16      	cmp	r3, #22
 800787a:	d11e      	bne.n	80078ba <__sflush_r+0xea>
 800787c:	602f      	str	r7, [r5, #0]
 800787e:	2000      	movs	r0, #0
 8007880:	e022      	b.n	80078c8 <__sflush_r+0xf8>
 8007882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007886:	b21b      	sxth	r3, r3
 8007888:	e01b      	b.n	80078c2 <__sflush_r+0xf2>
 800788a:	690f      	ldr	r7, [r1, #16]
 800788c:	2f00      	cmp	r7, #0
 800788e:	d0f6      	beq.n	800787e <__sflush_r+0xae>
 8007890:	0793      	lsls	r3, r2, #30
 8007892:	680e      	ldr	r6, [r1, #0]
 8007894:	bf08      	it	eq
 8007896:	694b      	ldreq	r3, [r1, #20]
 8007898:	600f      	str	r7, [r1, #0]
 800789a:	bf18      	it	ne
 800789c:	2300      	movne	r3, #0
 800789e:	eba6 0807 	sub.w	r8, r6, r7
 80078a2:	608b      	str	r3, [r1, #8]
 80078a4:	f1b8 0f00 	cmp.w	r8, #0
 80078a8:	dde9      	ble.n	800787e <__sflush_r+0xae>
 80078aa:	6a21      	ldr	r1, [r4, #32]
 80078ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078ae:	4643      	mov	r3, r8
 80078b0:	463a      	mov	r2, r7
 80078b2:	4628      	mov	r0, r5
 80078b4:	47b0      	blx	r6
 80078b6:	2800      	cmp	r0, #0
 80078b8:	dc08      	bgt.n	80078cc <__sflush_r+0xfc>
 80078ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078cc:	4407      	add	r7, r0
 80078ce:	eba8 0800 	sub.w	r8, r8, r0
 80078d2:	e7e7      	b.n	80078a4 <__sflush_r+0xd4>
 80078d4:	dfbffffe 	.word	0xdfbffffe

080078d8 <_fflush_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	690b      	ldr	r3, [r1, #16]
 80078dc:	4605      	mov	r5, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	b913      	cbnz	r3, 80078e8 <_fflush_r+0x10>
 80078e2:	2500      	movs	r5, #0
 80078e4:	4628      	mov	r0, r5
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	b118      	cbz	r0, 80078f2 <_fflush_r+0x1a>
 80078ea:	6a03      	ldr	r3, [r0, #32]
 80078ec:	b90b      	cbnz	r3, 80078f2 <_fflush_r+0x1a>
 80078ee:	f7ff f861 	bl	80069b4 <__sinit>
 80078f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f3      	beq.n	80078e2 <_fflush_r+0xa>
 80078fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078fc:	07d0      	lsls	r0, r2, #31
 80078fe:	d404      	bmi.n	800790a <_fflush_r+0x32>
 8007900:	0599      	lsls	r1, r3, #22
 8007902:	d402      	bmi.n	800790a <_fflush_r+0x32>
 8007904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007906:	f7ff faba 	bl	8006e7e <__retarget_lock_acquire_recursive>
 800790a:	4628      	mov	r0, r5
 800790c:	4621      	mov	r1, r4
 800790e:	f7ff ff5f 	bl	80077d0 <__sflush_r>
 8007912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007914:	07da      	lsls	r2, r3, #31
 8007916:	4605      	mov	r5, r0
 8007918:	d4e4      	bmi.n	80078e4 <_fflush_r+0xc>
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	059b      	lsls	r3, r3, #22
 800791e:	d4e1      	bmi.n	80078e4 <_fflush_r+0xc>
 8007920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007922:	f7ff faad 	bl	8006e80 <__retarget_lock_release_recursive>
 8007926:	e7dd      	b.n	80078e4 <_fflush_r+0xc>

08007928 <fiprintf>:
 8007928:	b40e      	push	{r1, r2, r3}
 800792a:	b503      	push	{r0, r1, lr}
 800792c:	4601      	mov	r1, r0
 800792e:	ab03      	add	r3, sp, #12
 8007930:	4805      	ldr	r0, [pc, #20]	@ (8007948 <fiprintf+0x20>)
 8007932:	f853 2b04 	ldr.w	r2, [r3], #4
 8007936:	6800      	ldr	r0, [r0, #0]
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	f7ff fca3 	bl	8007284 <_vfiprintf_r>
 800793e:	b002      	add	sp, #8
 8007940:	f85d eb04 	ldr.w	lr, [sp], #4
 8007944:	b003      	add	sp, #12
 8007946:	4770      	bx	lr
 8007948:	200000ac 	.word	0x200000ac

0800794c <__swhatbuf_r>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	460c      	mov	r4, r1
 8007950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007954:	2900      	cmp	r1, #0
 8007956:	b096      	sub	sp, #88	@ 0x58
 8007958:	4615      	mov	r5, r2
 800795a:	461e      	mov	r6, r3
 800795c:	da0d      	bge.n	800797a <__swhatbuf_r+0x2e>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007964:	f04f 0100 	mov.w	r1, #0
 8007968:	bf14      	ite	ne
 800796a:	2340      	movne	r3, #64	@ 0x40
 800796c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007970:	2000      	movs	r0, #0
 8007972:	6031      	str	r1, [r6, #0]
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	b016      	add	sp, #88	@ 0x58
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	466a      	mov	r2, sp
 800797c:	f000 f896 	bl	8007aac <_fstat_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	dbec      	blt.n	800795e <__swhatbuf_r+0x12>
 8007984:	9901      	ldr	r1, [sp, #4]
 8007986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800798a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800798e:	4259      	negs	r1, r3
 8007990:	4159      	adcs	r1, r3
 8007992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007996:	e7eb      	b.n	8007970 <__swhatbuf_r+0x24>

08007998 <__smakebuf_r>:
 8007998:	898b      	ldrh	r3, [r1, #12]
 800799a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799c:	079d      	lsls	r5, r3, #30
 800799e:	4606      	mov	r6, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	d507      	bpl.n	80079b4 <__smakebuf_r+0x1c>
 80079a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	6123      	str	r3, [r4, #16]
 80079ac:	2301      	movs	r3, #1
 80079ae:	6163      	str	r3, [r4, #20]
 80079b0:	b003      	add	sp, #12
 80079b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b4:	ab01      	add	r3, sp, #4
 80079b6:	466a      	mov	r2, sp
 80079b8:	f7ff ffc8 	bl	800794c <__swhatbuf_r>
 80079bc:	9f00      	ldr	r7, [sp, #0]
 80079be:	4605      	mov	r5, r0
 80079c0:	4639      	mov	r1, r7
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7fe fe1c 	bl	8006600 <_malloc_r>
 80079c8:	b948      	cbnz	r0, 80079de <__smakebuf_r+0x46>
 80079ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ce:	059a      	lsls	r2, r3, #22
 80079d0:	d4ee      	bmi.n	80079b0 <__smakebuf_r+0x18>
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	f043 0302 	orr.w	r3, r3, #2
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	e7e2      	b.n	80079a4 <__smakebuf_r+0xc>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	6020      	str	r0, [r4, #0]
 80079e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079ee:	b15b      	cbz	r3, 8007a08 <__smakebuf_r+0x70>
 80079f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f86b 	bl	8007ad0 <_isatty_r>
 80079fa:	b128      	cbz	r0, 8007a08 <__smakebuf_r+0x70>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	431d      	orrs	r5, r3
 8007a0c:	81a5      	strh	r5, [r4, #12]
 8007a0e:	e7cf      	b.n	80079b0 <__smakebuf_r+0x18>

08007a10 <_putc_r>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	460d      	mov	r5, r1
 8007a14:	4614      	mov	r4, r2
 8007a16:	4606      	mov	r6, r0
 8007a18:	b118      	cbz	r0, 8007a22 <_putc_r+0x12>
 8007a1a:	6a03      	ldr	r3, [r0, #32]
 8007a1c:	b90b      	cbnz	r3, 8007a22 <_putc_r+0x12>
 8007a1e:	f7fe ffc9 	bl	80069b4 <__sinit>
 8007a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a24:	07d8      	lsls	r0, r3, #31
 8007a26:	d405      	bmi.n	8007a34 <_putc_r+0x24>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	0599      	lsls	r1, r3, #22
 8007a2c:	d402      	bmi.n	8007a34 <_putc_r+0x24>
 8007a2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a30:	f7ff fa25 	bl	8006e7e <__retarget_lock_acquire_recursive>
 8007a34:	68a3      	ldr	r3, [r4, #8]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	60a3      	str	r3, [r4, #8]
 8007a3c:	da05      	bge.n	8007a4a <_putc_r+0x3a>
 8007a3e:	69a2      	ldr	r2, [r4, #24]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	db12      	blt.n	8007a6a <_putc_r+0x5a>
 8007a44:	b2eb      	uxtb	r3, r5
 8007a46:	2b0a      	cmp	r3, #10
 8007a48:	d00f      	beq.n	8007a6a <_putc_r+0x5a>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	6022      	str	r2, [r4, #0]
 8007a50:	701d      	strb	r5, [r3, #0]
 8007a52:	b2ed      	uxtb	r5, r5
 8007a54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a56:	07da      	lsls	r2, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_putc_r+0x56>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	059b      	lsls	r3, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_putc_r+0x56>
 8007a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a62:	f7ff fa0d 	bl	8006e80 <__retarget_lock_release_recursive>
 8007a66:	4628      	mov	r0, r5
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7ff f8b1 	bl	8006bd6 <__swbuf_r>
 8007a74:	4605      	mov	r5, r0
 8007a76:	e7ed      	b.n	8007a54 <_putc_r+0x44>

08007a78 <memmove>:
 8007a78:	4288      	cmp	r0, r1
 8007a7a:	b510      	push	{r4, lr}
 8007a7c:	eb01 0402 	add.w	r4, r1, r2
 8007a80:	d902      	bls.n	8007a88 <memmove+0x10>
 8007a82:	4284      	cmp	r4, r0
 8007a84:	4623      	mov	r3, r4
 8007a86:	d807      	bhi.n	8007a98 <memmove+0x20>
 8007a88:	1e43      	subs	r3, r0, #1
 8007a8a:	42a1      	cmp	r1, r4
 8007a8c:	d008      	beq.n	8007aa0 <memmove+0x28>
 8007a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a96:	e7f8      	b.n	8007a8a <memmove+0x12>
 8007a98:	4402      	add	r2, r0
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	428a      	cmp	r2, r1
 8007a9e:	d100      	bne.n	8007aa2 <memmove+0x2a>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aaa:	e7f7      	b.n	8007a9c <memmove+0x24>

08007aac <_fstat_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	@ (8007acc <_fstat_r+0x20>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	f7fa fde9 	bl	8002690 <_fstat>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	d102      	bne.n	8007ac8 <_fstat_r+0x1c>
 8007ac2:	682b      	ldr	r3, [r5, #0]
 8007ac4:	b103      	cbz	r3, 8007ac8 <_fstat_r+0x1c>
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	bd38      	pop	{r3, r4, r5, pc}
 8007aca:	bf00      	nop
 8007acc:	20007560 	.word	0x20007560

08007ad0 <_isatty_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d06      	ldr	r5, [pc, #24]	@ (8007aec <_isatty_r+0x1c>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7fa fde8 	bl	80026b0 <_isatty>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_isatty_r+0x1a>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_isatty_r+0x1a>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20007560 	.word	0x20007560

08007af0 <abort>:
 8007af0:	b508      	push	{r3, lr}
 8007af2:	2006      	movs	r0, #6
 8007af4:	f000 f85a 	bl	8007bac <raise>
 8007af8:	2001      	movs	r0, #1
 8007afa:	f7fa fd79 	bl	80025f0 <_exit>

08007afe <_realloc_r>:
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	4680      	mov	r8, r0
 8007b04:	4615      	mov	r5, r2
 8007b06:	460c      	mov	r4, r1
 8007b08:	b921      	cbnz	r1, 8007b14 <_realloc_r+0x16>
 8007b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0e:	4611      	mov	r1, r2
 8007b10:	f7fe bd76 	b.w	8006600 <_malloc_r>
 8007b14:	b92a      	cbnz	r2, 8007b22 <_realloc_r+0x24>
 8007b16:	f7ff f9e9 	bl	8006eec <_free_r>
 8007b1a:	2400      	movs	r4, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b22:	f000 f85f 	bl	8007be4 <_malloc_usable_size_r>
 8007b26:	4285      	cmp	r5, r0
 8007b28:	4606      	mov	r6, r0
 8007b2a:	d802      	bhi.n	8007b32 <_realloc_r+0x34>
 8007b2c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b30:	d8f4      	bhi.n	8007b1c <_realloc_r+0x1e>
 8007b32:	4629      	mov	r1, r5
 8007b34:	4640      	mov	r0, r8
 8007b36:	f7fe fd63 	bl	8006600 <_malloc_r>
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d0ec      	beq.n	8007b1a <_realloc_r+0x1c>
 8007b40:	42b5      	cmp	r5, r6
 8007b42:	462a      	mov	r2, r5
 8007b44:	4621      	mov	r1, r4
 8007b46:	bf28      	it	cs
 8007b48:	4632      	movcs	r2, r6
 8007b4a:	f7ff f9a2 	bl	8006e92 <memcpy>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4640      	mov	r0, r8
 8007b52:	f7ff f9cb 	bl	8006eec <_free_r>
 8007b56:	463c      	mov	r4, r7
 8007b58:	e7e0      	b.n	8007b1c <_realloc_r+0x1e>

08007b5a <_raise_r>:
 8007b5a:	291f      	cmp	r1, #31
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4605      	mov	r5, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	d904      	bls.n	8007b6e <_raise_r+0x14>
 8007b64:	2316      	movs	r3, #22
 8007b66:	6003      	str	r3, [r0, #0]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b70:	b112      	cbz	r2, 8007b78 <_raise_r+0x1e>
 8007b72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b76:	b94b      	cbnz	r3, 8007b8c <_raise_r+0x32>
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 f831 	bl	8007be0 <_getpid_r>
 8007b7e:	4622      	mov	r2, r4
 8007b80:	4601      	mov	r1, r0
 8007b82:	4628      	mov	r0, r5
 8007b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b88:	f000 b818 	b.w	8007bbc <_kill_r>
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d00a      	beq.n	8007ba6 <_raise_r+0x4c>
 8007b90:	1c59      	adds	r1, r3, #1
 8007b92:	d103      	bne.n	8007b9c <_raise_r+0x42>
 8007b94:	2316      	movs	r3, #22
 8007b96:	6003      	str	r3, [r0, #0]
 8007b98:	2001      	movs	r0, #1
 8007b9a:	e7e7      	b.n	8007b6c <_raise_r+0x12>
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4798      	blx	r3
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e7e0      	b.n	8007b6c <_raise_r+0x12>
	...

08007bac <raise>:
 8007bac:	4b02      	ldr	r3, [pc, #8]	@ (8007bb8 <raise+0xc>)
 8007bae:	4601      	mov	r1, r0
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	f7ff bfd2 	b.w	8007b5a <_raise_r>
 8007bb6:	bf00      	nop
 8007bb8:	200000ac 	.word	0x200000ac

08007bbc <_kill_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d07      	ldr	r5, [pc, #28]	@ (8007bdc <_kill_r+0x20>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	f7fa fd01 	bl	80025d0 <_kill>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	d102      	bne.n	8007bd8 <_kill_r+0x1c>
 8007bd2:	682b      	ldr	r3, [r5, #0]
 8007bd4:	b103      	cbz	r3, 8007bd8 <_kill_r+0x1c>
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
 8007bda:	bf00      	nop
 8007bdc:	20007560 	.word	0x20007560

08007be0 <_getpid_r>:
 8007be0:	f7fa bcee 	b.w	80025c0 <_getpid>

08007be4 <_malloc_usable_size_r>:
 8007be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be8:	1f18      	subs	r0, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bfbc      	itt	lt
 8007bee:	580b      	ldrlt	r3, [r1, r0]
 8007bf0:	18c0      	addlt	r0, r0, r3
 8007bf2:	4770      	bx	lr

08007bf4 <_init>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr

08007c00 <_fini>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr

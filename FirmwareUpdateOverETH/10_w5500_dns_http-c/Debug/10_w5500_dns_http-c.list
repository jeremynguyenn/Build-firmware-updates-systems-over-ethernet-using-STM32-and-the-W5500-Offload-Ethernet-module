
10_w5500_dns_http-c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006174  08006174  00007174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c4  080063c4  000080d0  2**0
                  CONTENTS
  4 .ARM          00000008  080063c4  080063c4  000073c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063cc  080063cc  000080d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063cc  080063cc  000073cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080063d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000222c  200000d0  080064a4  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022fc  080064a4  000082fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056c5  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194a  00000000  00000000  0000d7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000499  00000000  00000000  0000f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011149  00000000  00000000  0000fbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ad5  00000000  00000000  00020d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005aa71  00000000  00000000  000297ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00084270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002024  00000000  00000000  000842b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000862d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800615c 	.word	0x0800615c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800615c 	.word	0x0800615c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000294:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <pa1_adc_init+0x58>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000298:	4a13      	ldr	r2, [pc, #76]	@ (80002e8 <pa1_adc_init+0x58>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80002a0:	4b12      	ldr	r3, [pc, #72]	@ (80002ec <pa1_adc_init+0x5c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a11      	ldr	r2, [pc, #68]	@ (80002ec <pa1_adc_init+0x5c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80002ac:	4b0f      	ldr	r3, [pc, #60]	@ (80002ec <pa1_adc_init+0x5c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0e      	ldr	r2, [pc, #56]	@ (80002ec <pa1_adc_init+0x5c>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <pa1_adc_init+0x58>)
 80002ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002bc:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <pa1_adc_init+0x58>)
 80002be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002c2:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <pa1_adc_init+0x60>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 80002ca:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <pa1_adc_init+0x60>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 80002d0:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <pa1_adc_init+0x60>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a06      	ldr	r2, [pc, #24]	@ (80002f0 <pa1_adc_init+0x60>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6093      	str	r3, [r2, #8]

}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020000 	.word	0x40020000
 80002f0:	40012000 	.word	0x40012000

080002f4 <start_conversion>:


void start_conversion(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <start_conversion+0x28>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a07      	ldr	r2, [pc, #28]	@ (800031c <start_conversion+0x28>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8000304:	4b05      	ldr	r3, [pc, #20]	@ (800031c <start_conversion+0x28>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4a04      	ldr	r2, [pc, #16]	@ (800031c <start_conversion+0x28>)
 800030a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800030e:	6093      	str	r3, [r2, #8]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40012000 	.word	0x40012000

08000320 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000324:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <led_init+0x34>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <led_init+0x34>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <led_init+0x38>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a08      	ldr	r2, [pc, #32]	@ (8000358 <led_init+0x38>)
 8000336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800033a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <led_init+0x38>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a05      	ldr	r2, [pc, #20]	@ (8000358 <led_init+0x38>)
 8000342:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000

0800035c <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 8000360:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <button_init+0x34>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <button_init+0x34>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <button_init+0x38>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a08      	ldr	r2, [pc, #32]	@ (8000394 <button_init+0x38>)
 8000372:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <button_init+0x38>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <button_init+0x38>)
 800037e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000382:	6013      	str	r3, [r2, #0]

}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40020800 	.word	0x40020800

08000398 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	607a      	str	r2, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	021b      	lsls	r3, r3, #8
 80003aa:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	89fb      	ldrh	r3, [r7, #14]
 80003b4:	4413      	add	r3, r2
 80003b6:	81fb      	strh	r3, [r7, #14]
	return i;
 80003b8:	89fb      	ldrh	r3, [r7, #14]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80003d2:	887b      	ldrh	r3, [r7, #2]
 80003d4:	0a1b      	lsrs	r3, r3, #8
 80003d6:	b299      	uxth	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	607a      	str	r2, [r7, #4]
 80003de:	b2ca      	uxtb	r2, r1
 80003e0:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	1c5a      	adds	r2, r3, #1
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	887a      	ldrh	r2, [r7, #2]
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	701a      	strb	r2, [r3, #0]
	return s;
 80003ee:	687b      	ldr	r3, [r7, #4]
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b08b      	sub	sp, #44	@ 0x2c
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
 8000408:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 800041a:	6a3b      	ldr	r3, [r7, #32]
 800041c:	1c5a      	adds	r2, r3, #1
 800041e:	623a      	str	r2, [r7, #32]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d102      	bne.n	8000430 <parse_name+0x34>
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	3301      	adds	r3, #1
 800042e:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8000430:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000436:	2bc0      	cmp	r3, #192	@ 0xc0
 8000438:	d117      	bne.n	800046a <parse_name+0x6e>
		{
			if (!indirect)
 800043a:	69bb      	ldr	r3, [r7, #24]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d102      	bne.n	8000446 <parse_name+0x4a>
				clen++;
 8000440:	69fb      	ldr	r3, [r7, #28]
 8000442:	3301      	adds	r3, #1
 8000444:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 800044a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800044c:	021b      	lsls	r3, r3, #8
 800044e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000452:	6a3a      	ldr	r2, [r7, #32]
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	4413      	add	r3, r2
 8000458:	461a      	mov	r2, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	4413      	add	r3, r2
 800045e:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8000460:	6a3b      	ldr	r3, [r7, #32]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	623a      	str	r2, [r7, #32]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 800046a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800046c:	2b00      	cmp	r3, #0
 800046e:	d02b      	beq.n	80004c8 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8000470:	887a      	ldrh	r2, [r7, #2]
 8000472:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	b29b      	uxth	r3, r3
 8000478:	3b01      	subs	r3, #1
 800047a:	b29b      	uxth	r3, r3
 800047c:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800047e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000482:	2b00      	cmp	r3, #0
 8000484:	da02      	bge.n	800048c <parse_name+0x90>
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e038      	b.n	80004fe <parse_name+0x102>

		if (!indirect) clen += slen;
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d10c      	bne.n	80004ac <parse_name+0xb0>
 8000492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000494:	69fa      	ldr	r2, [r7, #28]
 8000496:	4413      	add	r3, r2
 8000498:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 800049a:	e007      	b.n	80004ac <parse_name+0xb0>
 800049c:	6a3a      	ldr	r2, [r7, #32]
 800049e:	1c53      	adds	r3, r2, #1
 80004a0:	623b      	str	r3, [r7, #32]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	1c59      	adds	r1, r3, #1
 80004a6:	6079      	str	r1, [r7, #4]
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004ae:	1e5a      	subs	r2, r3, #1
 80004b0:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d1f2      	bne.n	800049c <parse_name+0xa0>
		*buf++ = '.';
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	1c5a      	adds	r2, r3, #1
 80004ba:	607a      	str	r2, [r7, #4]
 80004bc:	222e      	movs	r2, #46	@ 0x2e
 80004be:	701a      	strb	r2, [r3, #0]
		nseg++;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	3301      	adds	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 80004c6:	e7a8      	b.n	800041a <parse_name+0x1e>
			break;
 80004c8:	bf00      	nop
	}

	if (nseg == 0)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d10a      	bne.n	80004e6 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	222e      	movs	r2, #46	@ 0x2e
 80004d8:	701a      	strb	r2, [r3, #0]
		len--;
 80004da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	3b01      	subs	r3, #1
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
	len--;
 80004f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	3b01      	subs	r3, #1
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80004fc:	69fb      	ldr	r3, [r7, #28]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	372c      	adds	r7, #44	@ 0x2c
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b0b4      	sub	sp, #208	@ 0xd0
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000514:	f107 020c 	add.w	r2, r7, #12
 8000518:	23c0      	movs	r3, #192	@ 0xc0
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff6d 	bl	80003fc <parse_name>
 8000522:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8000526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800052a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052e:	d101      	bne.n	8000534 <dns_question+0x2a>
 8000530:	2300      	movs	r3, #0
 8000532:	e00b      	b.n	800054c <dns_question+0x42>

	cp += len;
 8000534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	4413      	add	r3, r2
 800053c:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	3302      	adds	r3, #2
 8000542:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	3302      	adds	r3, #2
 8000548:	603b      	str	r3, [r7, #0]

	return cp;
 800054a:	683b      	ldr	r3, [r7, #0]
}
 800054c:	4618      	mov	r0, r3
 800054e:	37d0      	adds	r7, #208	@ 0xd0
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b0b6      	sub	sp, #216	@ 0xd8
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000560:	f107 0210 	add.w	r2, r7, #16
 8000564:	23c0      	movs	r3, #192	@ 0xc0
 8000566:	68b9      	ldr	r1, [r7, #8]
 8000568:	68f8      	ldr	r0, [r7, #12]
 800056a:	f7ff ff47 	bl	80003fc <parse_name>
 800056e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8000572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057a:	d101      	bne.n	8000580 <dns_answer+0x2c>
 800057c:	2300      	movs	r3, #0
 800057e:	e0f9      	b.n	8000774 <dns_answer+0x220>

	cp += len;
 8000580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	4413      	add	r3, r2
 8000588:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800058a:	68b8      	ldr	r0, [r7, #8]
 800058c:	f7ff ff04 	bl	8000398 <get16>
 8000590:	4603      	mov	r3, r0
 8000592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	3302      	adds	r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	3302      	adds	r3, #2
 80005a0:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	3304      	adds	r3, #4
 80005a6:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	3302      	adds	r3, #2
 80005ac:	60bb      	str	r3, [r7, #8]


	switch (type)
 80005ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005b2:	2b10      	cmp	r3, #16
 80005b4:	f000 80da 	beq.w	800076c <dns_answer+0x218>
 80005b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005bc:	2b10      	cmp	r3, #16
 80005be:	f300 80d7 	bgt.w	8000770 <dns_answer+0x21c>
 80005c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	d07d      	beq.n	80006c6 <dns_answer+0x172>
 80005ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005ce:	2b0f      	cmp	r3, #15
 80005d0:	f300 80ce 	bgt.w	8000770 <dns_answer+0x21c>
 80005d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005d8:	2b0c      	cmp	r3, #12
 80005da:	dc26      	bgt.n	800062a <dns_answer+0xd6>
 80005dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	f340 80c5 	ble.w	8000770 <dns_answer+0x21c>
 80005e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005ea:	2201      	movs	r2, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 80005f4:	401a      	ands	r2, r3
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2201      	movne	r2, #1
 80005fc:	2200      	moveq	r2, #0
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	2a00      	cmp	r2, #0
 8000602:	d133      	bne.n	800066c <dns_answer+0x118>
 8000604:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000608:	2a00      	cmp	r2, #0
 800060a:	bf14      	ite	ne
 800060c:	2201      	movne	r2, #1
 800060e:	2200      	moveq	r2, #0
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	2a00      	cmp	r2, #0
 8000614:	d170      	bne.n	80006f8 <dns_answer+0x1a4>
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf14      	ite	ne
 800061e:	2301      	movne	r3, #1
 8000620:	2300      	moveq	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d105      	bne.n	8000634 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8000628:	e0a2      	b.n	8000770 <dns_answer+0x21c>
	switch (type)
 800062a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800062e:	2b0d      	cmp	r3, #13
 8000630:	d032      	beq.n	8000698 <dns_answer+0x144>
		break;
 8000632:	e09d      	b.n	8000770 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	3201      	adds	r2, #1
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	60ba      	str	r2, [r7, #8]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3202      	adds	r2, #2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	3203      	adds	r2, #3
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	7013      	strb	r3, [r2, #0]
		break;
 800066a:	e082      	b.n	8000772 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800066c:	f107 0210 	add.w	r2, r7, #16
 8000670:	23c0      	movs	r3, #192	@ 0xc0
 8000672:	68b9      	ldr	r1, [r7, #8]
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f7ff fec1 	bl	80003fc <parse_name>
 800067a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800067e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000686:	d101      	bne.n	800068c <dns_answer+0x138>
 8000688:	2300      	movs	r3, #0
 800068a:	e073      	b.n	8000774 <dns_answer+0x220>
		cp += len;
 800068c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	4413      	add	r3, r2
 8000694:	60bb      	str	r3, [r7, #8]
		break;
 8000696:	e06c      	b.n	8000772 <dns_answer+0x21e>
		len = *cp++;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	60ba      	str	r2, [r7, #8]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	60ba      	str	r2, [r7, #8]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	4413      	add	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
		break;
 80006c4:	e055      	b.n	8000772 <dns_answer+0x21e>
		cp += 2;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	3302      	adds	r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80006cc:	f107 0210 	add.w	r2, r7, #16
 80006d0:	23c0      	movs	r3, #192	@ 0xc0
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f7ff fe91 	bl	80003fc <parse_name>
 80006da:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80006de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e6:	d101      	bne.n	80006ec <dns_answer+0x198>
 80006e8:	2300      	movs	r3, #0
 80006ea:	e043      	b.n	8000774 <dns_answer+0x220>
		cp += len;
 80006ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	60bb      	str	r3, [r7, #8]
		break;
 80006f6:	e03c      	b.n	8000772 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80006f8:	f107 0210 	add.w	r2, r7, #16
 80006fc:	23c0      	movs	r3, #192	@ 0xc0
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff fe7b 	bl	80003fc <parse_name>
 8000706:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800070a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000712:	d101      	bne.n	8000718 <dns_answer+0x1c4>
 8000714:	2300      	movs	r3, #0
 8000716:	e02d      	b.n	8000774 <dns_answer+0x220>
		cp += len;
 8000718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	4413      	add	r3, r2
 8000720:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8000722:	f107 0210 	add.w	r2, r7, #16
 8000726:	23c0      	movs	r3, #192	@ 0xc0
 8000728:	68b9      	ldr	r1, [r7, #8]
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f7ff fe66 	bl	80003fc <parse_name>
 8000730:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8000734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800073c:	d101      	bne.n	8000742 <dns_answer+0x1ee>
 800073e:	2300      	movs	r3, #0
 8000740:	e018      	b.n	8000774 <dns_answer+0x220>
		cp += len;
 8000742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	4413      	add	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	3304      	adds	r3, #4
 8000750:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3304      	adds	r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	3304      	adds	r3, #4
 800075c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	3304      	adds	r3, #4
 8000762:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3304      	adds	r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
		break;
 800076a:	e002      	b.n	8000772 <dns_answer+0x21e>
		break;
 800076c:	bf00      	nop
 800076e:	e000      	b.n	8000772 <dns_answer+0x21e>
		break;
 8000770:	bf00      	nop
	}

	return cp;
 8000772:	68bb      	ldr	r3, [r7, #8]
}
 8000774:	4618      	mov	r0, r3
 8000776:	37d8      	adds	r7, #216	@ 0xd8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 800078c:	2212      	movs	r2, #18
 800078e:	2100      	movs	r1, #0
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f004 fe2f 	bl	80053f4 <memset>

	pdhdr->id = get16(&msg[0]);
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff fdfe 	bl	8000398 <get16>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	3302      	adds	r3, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fdf5 	bl	8000398 <get16>
 80007ae:	4603      	mov	r3, r0
 80007b0:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80007b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da02      	bge.n	80007c0 <parseDNSMSG+0x44>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2201      	movs	r2, #1
 80007be:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 80007c0:	8a7b      	ldrh	r3, [r7, #18]
 80007c2:	0adb      	lsrs	r3, r3, #11
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 80007d2:	8a7b      	ldrh	r3, [r7, #18]
 80007d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <parseDNSMSG+0x66>
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2201      	movs	r2, #1
 80007e0:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 80007e2:	8a7b      	ldrh	r3, [r7, #18]
 80007e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <parseDNSMSG+0x76>
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2201      	movs	r2, #1
 80007f0:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80007f2:	8a7b      	ldrh	r3, [r7, #18]
 80007f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <parseDNSMSG+0x86>
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2201      	movs	r2, #1
 8000800:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8000802:	8a7b      	ldrh	r3, [r7, #18]
 8000804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <parseDNSMSG+0x96>
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2201      	movs	r2, #1
 8000810:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8000812:	8a7b      	ldrh	r3, [r7, #18]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 030f 	and.w	r3, r3, #15
 800081a:	b2da      	uxtb	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3304      	adds	r3, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fdb7 	bl	8000398 <get16>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3306      	adds	r3, #6
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fdae 	bl	8000398 <get16>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3308      	adds	r3, #8
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fda5 	bl	8000398 <get16>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	330a      	adds	r3, #10
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fd9c 	bl	8000398 <get16>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	330c      	adds	r3, #12
 800086c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	83fb      	strh	r3, [r7, #30]
 8000872:	e00d      	b.n	8000890 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8000874:	69b9      	ldr	r1, [r7, #24]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff fe47 	bl	800050a <dns_question>
 800087c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <parseDNSMSG+0x10e>
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	e03b      	b.n	8000902 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 800088a:	8bfb      	ldrh	r3, [r7, #30]
 800088c:	3301      	adds	r3, #1
 800088e:	83fb      	strh	r3, [r7, #30]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	895b      	ldrh	r3, [r3, #10]
 8000894:	8bfa      	ldrh	r2, [r7, #30]
 8000896:	429a      	cmp	r2, r3
 8000898:	d3ec      	bcc.n	8000874 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 800089a:	2300      	movs	r3, #0
 800089c:	83fb      	strh	r3, [r7, #30]
 800089e:	e00e      	b.n	80008be <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	69b9      	ldr	r1, [r7, #24]
 80008a4:	6978      	ldr	r0, [r7, #20]
 80008a6:	f7ff fe55 	bl	8000554 <dns_answer>
 80008aa:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <parseDNSMSG+0x13c>
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e024      	b.n	8000902 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80008b8:	8bfb      	ldrh	r3, [r7, #30]
 80008ba:	3301      	adds	r3, #1
 80008bc:	83fb      	strh	r3, [r7, #30]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	899b      	ldrh	r3, [r3, #12]
 80008c2:	8bfa      	ldrh	r2, [r7, #30]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d3eb      	bcc.n	80008a0 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	83fb      	strh	r3, [r7, #30]
 80008cc:	e002      	b.n	80008d4 <parseDNSMSG+0x158>
 80008ce:	8bfb      	ldrh	r3, [r7, #30]
 80008d0:	3301      	adds	r3, #1
 80008d2:	83fb      	strh	r3, [r7, #30]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	89db      	ldrh	r3, [r3, #14]
 80008d8:	8bfa      	ldrh	r2, [r7, #30]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3f7      	bcc.n	80008ce <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	83fb      	strh	r3, [r7, #30]
 80008e2:	e002      	b.n	80008ea <parseDNSMSG+0x16e>
 80008e4:	8bfb      	ldrh	r3, [r7, #30]
 80008e6:	3301      	adds	r3, #1
 80008e8:	83fb      	strh	r3, [r7, #30]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	8a1b      	ldrh	r3, [r3, #16]
 80008ee:	8bfa      	ldrh	r2, [r7, #30]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d3f7      	bcc.n	80008e4 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	7a1b      	ldrb	r3, [r3, #8]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <parseDNSMSG+0x184>
 80008fc:	2301      	movs	r3, #1
 80008fe:	e000      	b.n	8000902 <parseDNSMSG+0x186>
	else return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0b8      	sub	sp, #224	@ 0xe0
 8000910:	af00      	add	r7, sp, #0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	461a      	mov	r2, r3
 8000918:	4603      	mov	r3, r0
 800091a:	81fb      	strh	r3, [r7, #14]
 800091c:	4613      	mov	r3, r2
 800091e:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 8000926:	4b57      	ldr	r3, [pc, #348]	@ (8000a84 <dns_makequery+0x178>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b55      	ldr	r3, [pc, #340]	@ (8000a84 <dns_makequery+0x178>)
 8000930:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8000932:	4b54      	ldr	r3, [pc, #336]	@ (8000a84 <dns_makequery+0x178>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	4619      	mov	r1, r3
 8000938:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800093c:	f7ff fd43 	bl	80003c6 <put16>
 8000940:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	02db      	lsls	r3, r3, #11
 8000948:	b21b      	sxth	r3, r3
 800094a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800094e:	b21b      	sxth	r3, r3
 8000950:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8000954:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000958:	4619      	mov	r1, r3
 800095a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800095e:	f7ff fd32 	bl	80003c6 <put16>
 8000962:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 8000966:	2101      	movs	r1, #1
 8000968:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800096c:	f7ff fd2b 	bl	80003c6 <put16>
 8000970:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8000974:	2100      	movs	r1, #0
 8000976:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800097a:	f7ff fd24 	bl	80003c6 <put16>
 800097e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8000982:	2100      	movs	r1, #0
 8000984:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000988:	f7ff fd1d 	bl	80003c6 <put16>
 800098c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8000990:	2100      	movs	r1, #0
 8000992:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000996:	f7ff fd16 	bl	80003c6 <put16>
 800099a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 fdd0 	bl	800554a <strcpy>
	dname = sname;
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 80009b2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80009b6:	f7ff fc13 	bl	80001e0 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 80009c0:	212e      	movs	r1, #46	@ 0x2e
 80009c2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80009c6:	f004 fd1d 	bl	8005404 <strchr>
 80009ca:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 80009ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d006      	beq.n	80009e4 <dns_makequery+0xd8>
 80009d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80009da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	81bb      	strh	r3, [r7, #12]
 80009e2:	e002      	b.n	80009ea <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 80009e4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80009e8:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 80009ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80009f4:	89ba      	ldrh	r2, [r7, #12]
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 80009fa:	89bb      	ldrh	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d029      	beq.n	8000a54 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8000a00:	89bb      	ldrh	r3, [r7, #12]
 8000a02:	461a      	mov	r2, r3
 8000a04:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8000a08:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a0c:	f004 fd07 	bl	800541e <strncpy>
		cp += len;
 8000a10:	89bb      	ldrh	r3, [r7, #12]
 8000a12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000a16:	4413      	add	r3, r2
 8000a18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 8000a1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d107      	bne.n	8000a34 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8000a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
			break;
 8000a32:	e010      	b.n	8000a56 <dns_makequery+0x14a>
		}
		dname += len+1;
 8000a34:	89bb      	ldrh	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 8000a42:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8000a46:	89bb      	ldrh	r3, [r7, #12]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 8000a52:	e7b5      	b.n	80009c0 <dns_makequery+0xb4>
		if (len == 0) break;
 8000a54:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8000a56:	2101      	movs	r1, #1
 8000a58:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a5c:	f7ff fcb3 	bl	80003c6 <put16>
 8000a60:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8000a64:	2101      	movs	r1, #1
 8000a66:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a6a:	f7ff fcac 	bl	80003c6 <put16>
 8000a6e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8000a72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	b21b      	sxth	r3, r3
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	37e0      	adds	r7, #224	@ 0xe0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000f2 	.word	0x200000f2

08000a88 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <check_DNS_timeout+0x44>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d914      	bls.n	8000abe <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <check_DNS_timeout+0x44>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <check_DNS_timeout+0x48>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d905      	bls.n	8000aae <check_DNS_timeout+0x26>
			retry_count = 0;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <check_DNS_timeout+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	e008      	b.n	8000ac0 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <check_DNS_timeout+0x48>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <check_DNS_timeout+0x48>)
 8000ab8:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000f4 	.word	0x200000f4
 8000ad0:	200000f8 	.word	0x200000f8

08000ad4 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <DNS_init+0x2c>)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8000ae6:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <DNS_init+0x30>)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <DNS_init+0x34>)
 8000aee:	f241 1222 	movw	r2, #4386	@ 0x1122
 8000af2:	801a      	strh	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	200000f0 	.word	0x200000f0
 8000b04:	200000ec 	.word	0x200000ec
 8000b08:	200000f2 	.word	0x200000f2

08000b0c <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08f      	sub	sp, #60	@ 0x3c
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8000b18:	4b3b      	ldr	r3, [pc, #236]	@ (8000c08 <DNS_run+0xfc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c0c <DNS_run+0x100>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8000b24:	4b3a      	ldr	r3, [pc, #232]	@ (8000c10 <DNS_run+0x104>)
 8000b26:	7818      	ldrb	r0, [r3, #0]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	f002 fd43 	bl	80035b8 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8000b32:	4b38      	ldr	r3, [pc, #224]	@ (8000c14 <DNS_run+0x108>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fee5 	bl	800090c <dns_makequery>
 8000b42:	4603      	mov	r3, r0
 8000b44:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000b46:	4b32      	ldr	r3, [pc, #200]	@ (8000c10 <DNS_run+0x104>)
 8000b48:	7818      	ldrb	r0, [r3, #0]
 8000b4a:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <DNS_run+0x108>)
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b50:	2335      	movs	r3, #53	@ 0x35
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f002 feb1 	bl	80038bc <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <DNS_run+0x104>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fb6f 	bl	8004242 <getSn_RX_RSR>
 8000b64:	4603      	mov	r3, r0
 8000b66:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000b68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d029      	beq.n	8000bc2 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8000b6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b74:	d902      	bls.n	8000b7c <DNS_run+0x70>
 8000b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8000b7c:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <DNS_run+0x104>)
 8000b7e:	7818      	ldrb	r0, [r3, #0]
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <DNS_run+0x108>)
 8000b82:	6819      	ldr	r1, [r3, #0]
 8000b84:	f107 0414 	add.w	r4, r7, #20
 8000b88:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b8a:	f107 0312 	add.w	r3, r7, #18
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	4623      	mov	r3, r4
 8000b92:	f002 ffc7 	bl	8003b24 <recvfrom>
 8000b96:	4603      	mov	r3, r0
 8000b98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <DNS_run+0x108>)
 8000b9c:	6819      	ldr	r1, [r3, #0]
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fde9 	bl	800077c <parseDNSMSG>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8000bb0:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <DNS_run+0x104>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fe12 	bl	80037e0 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8000bbc:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8000bc0:	e01e      	b.n	8000c00 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8000bc2:	f7ff ff61 	bl	8000a88 <check_DNS_timeout>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 8000bcc:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	da06      	bge.n	8000be2 <DNS_run+0xd6>
			close(DNS_SOCKET);
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <DNS_run+0x104>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fe01 	bl	80037e0 <close>
			return 0; // timeout occurred
 8000bde:	2300      	movs	r3, #0
 8000be0:	e00e      	b.n	8000c00 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8000be2:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1b7      	bne.n	8000b5a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <DNS_run+0x104>)
 8000bec:	7818      	ldrb	r0, [r3, #0]
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <DNS_run+0x108>)
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000bf4:	2335      	movs	r3, #53	@ 0x35
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f002 fe5f 	bl	80038bc <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000bfe:	e7ac      	b.n	8000b5a <DNS_run+0x4e>
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3734      	adds	r7, #52	@ 0x34
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	200000f8 	.word	0x200000f8
 8000c0c:	200000f4 	.word	0x200000f4
 8000c10:	200000f0 	.word	0x200000f0
 8000c14:	200000ec 	.word	0x200000ec

08000c18 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <fpu_enable+0x50>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a11      	ldr	r2, [pc, #68]	@ (8000c68 <fpu_enable+0x50>)
 8000c24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <fpu_enable+0x50>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <fpu_enable+0x50>)
 8000c34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <fpu_enable+0x50>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <fpu_enable+0x50>)
 8000c44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <fpu_enable+0x50>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <fpu_enable+0x50>)
 8000c54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <check_cable_connection>:
uint8_t data_buff[DATA_BUF_SIZE];

wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 8000c72:	480e      	ldr	r0, [pc, #56]	@ (8000cac <check_cable_connection+0x40>)
 8000c74:	f004 fabe 	bl	80051f4 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	200f      	movs	r0, #15
 8000c7e:	f003 fd05 	bl	800468c <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d106      	bne.n	8000c96 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <check_cable_connection+0x44>)
 8000c8a:	f004 fab3 	bl	80051f4 <puts>
			delay(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c92:	f000 fdc7 	bl	8001824 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0ea      	beq.n	8000c72 <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <check_cable_connection+0x48>)
 8000c9e:	f004 faa9 	bl	80051f4 <puts>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	08006174 	.word	0x08006174
 8000cb0:	08006190 	.word	0x08006190
 8000cb4:	080061a8 	.word	0x080061a8

08000cb8 <display_phy_config>:

void display_phy_config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	200b      	movs	r0, #11
 8000cc4:	f003 fce2 	bl	800468c <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8000cc8:	793b      	ldrb	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 8000cce:	4816      	ldr	r0, [pc, #88]	@ (8000d28 <display_phy_config+0x70>)
 8000cd0:	f004 fa28 	bl	8005124 <iprintf>
 8000cd4:	e002      	b.n	8000cdc <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8000cd6:	4815      	ldr	r0, [pc, #84]	@ (8000d2c <display_phy_config+0x74>)
 8000cd8:	f004 fa24 	bl	8005124 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 8000cdc:	797b      	ldrb	r3, [r7, #5]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d101      	bne.n	8000ce6 <display_phy_config+0x2e>
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <display_phy_config+0x78>)
 8000ce4:	e000      	b.n	8000ce8 <display_phy_config+0x30>
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <display_phy_config+0x7c>)
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4813      	ldr	r0, [pc, #76]	@ (8000d38 <display_phy_config+0x80>)
 8000cec:	f004 fa1a 	bl	8005124 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <display_phy_config+0x42>
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <display_phy_config+0x84>)
 8000cf8:	e000      	b.n	8000cfc <display_phy_config+0x44>
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <display_phy_config+0x88>)
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <display_phy_config+0x8c>)
 8000d00:	f004 fa10 	bl	8005124 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <display_phy_config+0x56>
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	e000      	b.n	8000d10 <display_phy_config+0x58>
 8000d0e:	2364      	movs	r3, #100	@ 0x64
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <display_phy_config+0x90>)
 8000d14:	f004 fa06 	bl	8005124 <iprintf>
  printf("\r\n...");
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <display_phy_config+0x94>)
 8000d1a:	f004 fa03 	bl	8005124 <iprintf>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	080061bc 	.word	0x080061bc
 8000d2c:	080061e8 	.word	0x080061e8
 8000d30:	08006214 	.word	0x08006214
 8000d34:	0800621c 	.word	0x0800621c
 8000d38:	08006228 	.word	0x08006228
 8000d3c:	08006248 	.word	0x08006248
 8000d40:	08006254 	.word	0x08006254
 8000d44:	08006260 	.word	0x08006260
 8000d48:	0800627c 	.word	0x0800627c
 8000d4c:	08006294 	.word	0x08006294

08000d50 <main>:

int main()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af02      	add	r7, sp, #8
	/*Enable FPU*/
	fpu_enable();
 8000d56:	f7ff ff5f 	bl	8000c18 <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 8000d5a:	f000 fda5 	bl	80018a8 <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8000d5e:	f000 fdd9 	bl	8001914 <debug_uart_init>



	/*Initialize LED*/
	led_init();
 8000d62:	f7ff fadd 	bl	8000320 <led_init>

	/*Initialize Push button*/
	button_init();
 8000d66:	f7ff faf9 	bl	800035c <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 8000d6a:	f7ff fa91 	bl	8000290 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8000d6e:	f7ff fac1 	bl	80002f4 <start_conversion>

    wizchip_cs_pin_init();
 8000d72:	f000 fe7d 	bl	8001a70 <wizchip_cs_pin_init>
    w5500_spi_init();
 8000d76:	f000 fefd 	bl	8001b74 <w5500_spi_init>
    w5500_init();
 8000d7a:	f000 ff27 	bl	8001bcc <w5500_init>

    check_cable_connection();
 8000d7e:	f7ff ff75 	bl	8000c6c <check_cable_connection>
    display_phy_config();
 8000d82:	f7ff ff99 	bl	8000cb8 <display_phy_config>


    /*Run DNS*/
    if(process_dns())
 8000d86:	f000 f82f 	bl	8000de8 <process_dns>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <main+0x46>
    {
    	flag_process_dns_success =  ON;
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <main+0x84>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
    }

    if(flag_process_dns_success)
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <main+0x84>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d013      	beq.n	8000dc6 <main+0x76>
    {
	    printf(" # DNS: %s => %d.%d.%d.%d\r\n", domain_name, domain_ip[0], domain_ip[1], domain_ip[2], domain_ip[3]);
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <main+0x88>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <main+0x88>)
 8000da6:	785b      	ldrb	r3, [r3, #1]
 8000da8:	4618      	mov	r0, r3
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <main+0x88>)
 8000dac:	789b      	ldrb	r3, [r3, #2]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <main+0x88>)
 8000db2:	78db      	ldrb	r3, [r3, #3]
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	4603      	mov	r3, r0
 8000dba:	460a      	mov	r2, r1
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <main+0x8c>)
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <main+0x90>)
 8000dc0:	f004 f9b0 	bl	8005124 <iprintf>
 8000dc4:	e003      	b.n	8000dce <main+0x7e>

    }
    else
    {
    	printf("DNS Failed\r\n");
 8000dc6:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <main+0x94>)
 8000dc8:	f004 fa14 	bl	80051f4 <puts>
    }
	while(1)
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	e7fd      	b.n	8000dce <main+0x7e>
 8000dd2:	bf00      	nop
 8000dd4:	200000f9 	.word	0x200000f9
 8000dd8:	200000fc 	.word	0x200000fc
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	0800629c 	.word	0x0800629c
 8000de4:	080062b8 	.word	0x080062b8

08000de8 <process_dns>:

	}
}

int8_t process_dns(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71bb      	strb	r3, [r7, #6]
	uint8_t dns_retry = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]

	DNS_init(SOCK_DNS, data_buff);
 8000df6:	4913      	ldr	r1, [pc, #76]	@ (8000e44 <process_dns+0x5c>)
 8000df8:	2004      	movs	r0, #4
 8000dfa:	f7ff fe6b 	bl	8000ad4 <DNS_init>

	while(1)
	{
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <process_dns+0x60>)
 8000e00:	4912      	ldr	r1, [pc, #72]	@ (8000e4c <process_dns+0x64>)
 8000e02:	4813      	ldr	r0, [pc, #76]	@ (8000e50 <process_dns+0x68>)
 8000e04:	f7ff fe82 	bl	8000b0c <DNS_run>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71bb      	strb	r3, [r7, #6]
 8000e0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d00e      	beq.n	8000e32 <process_dns+0x4a>
		{
			break;
		}
		else
		{
			dns_retry++;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3301      	adds	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
			if(dns_retry <= 2)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d804      	bhi.n	8000e2a <process_dns+0x42>
			{
				printf("DNS timeout occurred retry [%d]\n\r",dns_retry);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	4619      	mov	r1, r3
 8000e24:	480b      	ldr	r0, [pc, #44]	@ (8000e54 <process_dns+0x6c>)
 8000e26:	f004 f97d 	bl	8005124 <iprintf>
			}
			if(dns_retry > 2)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d802      	bhi.n	8000e36 <process_dns+0x4e>
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 8000e30:	e7e5      	b.n	8000dfe <process_dns+0x16>
			break;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <process_dns+0x50>
			{
				 break;
 8000e36:	bf00      	nop
			}
		}
	}

	return ret;
 8000e38:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000100 	.word	0x20000100
 8000e48:	200000fc 	.word	0x200000fc
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	20000000 	.word	0x20000000
 8000e54:	080062c4 	.word	0x080062c4

08000e58 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <spi1_gpio_init+0x100>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <spi1_gpio_init+0x100>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 8000e68:	4b3c      	ldr	r3, [pc, #240]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e72:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8000e74:	4b39      	ldr	r3, [pc, #228]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a38      	ldr	r2, [pc, #224]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e7e:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8000e80:	4b36      	ldr	r3, [pc, #216]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a35      	ldr	r2, [pc, #212]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e8a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8000e8c:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a32      	ldr	r2, [pc, #200]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e96:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8000e98:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ea2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eae:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a29      	ldr	r2, [pc, #164]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000eba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a26      	ldr	r2, [pc, #152]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ec2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ec6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a23      	ldr	r2, [pc, #140]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ece:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ed2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8000ed4:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a20      	ldr	r2, [pc, #128]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000eda:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000ede:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000ef2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000ef6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000efe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f02:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f0a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000f0e:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f22:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000f26:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f32:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <spi1_gpio_init+0x104>)
 8000f3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f3e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <spi1_gpio_init+0x100>)
 8000f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <spi1_gpio_init+0x100>)
 8000f46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f4a:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <spi_init+0x12>
	{
		return DEV_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e05a      	b.n	8001028 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <spi_init+0x26>
	{
		spi1_gpio_init();
 8000f82:	f7ff ff69 	bl	8000e58 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f9c:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fea:	ea42 0103 	orr.w	r1, r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	f003 0104 	and.w	r1, r3, #4
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100c:	f003 0210 	and.w	r2, r3, #16
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 8001044:	f000 fc0c 	bl	8001860 <get_tick>
 8001048:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <spi_transmit+0x26>
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e106      	b.n	8001268 <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2203      	movs	r2, #3
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	88fa      	ldrh	r2, [r7, #6]
 8001078:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001094:	d10f      	bne.n	80010b6 <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010a4:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80010b4:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c0:	2b40      	cmp	r3, #64	@ 0x40
 80010c2:	d007      	beq.n	80010d4 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010d2:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010de:	2b40      	cmp	r3, #64	@ 0x40
 80010e0:	d007      	beq.n	80010f2 <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010f0:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010fa:	d14e      	bne.n	800119a <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <spi_transmit+0xda>
 8001104:	8bfb      	ldrh	r3, [r7, #30]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d141      	bne.n	800118e <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	1c9a      	adds	r2, r3, #2
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001124:	b29b      	uxth	r3, r3
 8001126:	3b01      	subs	r3, #1
 8001128:	b29a      	uxth	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 800112e:	e02e      	b.n	800118e <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d012      	beq.n	8001164 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	881a      	ldrh	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114e:	1c9a      	adds	r2, r3, #2
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001158:	b29b      	uxth	r3, r3
 800115a:	3b01      	subs	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	865a      	strh	r2, [r3, #50]	@ 0x32
 8001162:	e014      	b.n	800118e <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8001164:	f000 fb7c 	bl	8001860 <get_tick>
 8001168:	4602      	mov	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d803      	bhi.n	800117c <spi_transmit+0x14c>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117a:	d102      	bne.n	8001182 <spi_transmit+0x152>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e06c      	b.n	8001268 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001192:	b29b      	uxth	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1cb      	bne.n	8001130 <spi_transmit+0x100>
 8001198:	e051      	b.n	800123e <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <spi_transmit+0x178>
 80011a2:	8bfb      	ldrh	r3, [r7, #30]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d145      	bne.n	8001234 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	330c      	adds	r3, #12
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 80011ce:	e031      	b.n	8001234 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	330c      	adds	r3, #12
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b29a      	uxth	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	865a      	strh	r2, [r3, #50]	@ 0x32
 8001204:	e016      	b.n	8001234 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8001206:	f000 fb2b 	bl	8001860 <get_tick>
 800120a:	4602      	mov	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d803      	bhi.n	800121e <spi_transmit+0x1ee>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d102      	bne.n	8001224 <spi_transmit+0x1f4>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	e019      	b.n	8001268 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001238:	b29b      	uxth	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1c8      	bne.n	80011d0 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <spi_transmit+0x236>
	{
		return DEV_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 8001266:	2300      	movs	r3, #0

	}

}
 8001268:	4618      	mov	r0, r3
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d007      	beq.n	800129e <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 800128e:	2302      	movs	r3, #2
 8001290:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 800129a:	7dfb      	ldrb	r3, [r7, #23]
 800129c:	e0d1      	b.n	8001442 <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80012a6:	d112      	bne.n	80012ce <spi_receive+0x5e>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10e      	bne.n	80012ce <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2204      	movs	r2, #4
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 80012b8:	88fa      	ldrh	r2, [r7, #6]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f8c0 	bl	800144a <spi_transmit_receive>
 80012ca:	4603      	mov	r3, r0
 80012cc:	e0b9      	b.n	8001442 <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 80012ce:	f000 fac7 	bl	8001860 <get_tick>
 80012d2:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <spi_receive+0x70>
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d107      	bne.n	80012f0 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	e0a8      	b.n	8001442 <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2204      	movs	r2, #4
 80012f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	88fa      	ldrh	r2, [r7, #6]
 800130e:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132c:	2b40      	cmp	r3, #64	@ 0x40
 800132e:	d007      	beq.n	8001340 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800133e:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d16c      	bne.n	8001422 <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 8001348:	e033      	b.n	80013b2 <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d015      	beq.n	8001384 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f103 020c 	add.w	r2, r3, #12
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001378:	b29b      	uxth	r3, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8001382:	e016      	b.n	80013b2 <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8001384:	f000 fa6c 	bl	8001860 <get_tick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d803      	bhi.n	800139c <spi_receive+0x12c>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139a:	d102      	bne.n	80013a2 <spi_receive+0x132>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d107      	bne.n	80013b2 <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	e047      	b.n	8001442 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1c6      	bne.n	800134a <spi_receive+0xda>
 80013bc:	e036      	b.n	800142c <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d013      	beq.n	80013f4 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d6:	b292      	uxth	r2, r2
 80013d8:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013de:	1c9a      	adds	r2, r3, #2
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80013f2:	e016      	b.n	8001422 <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80013f4:	f000 fa34 	bl	8001860 <get_tick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d803      	bhi.n	800140c <spi_receive+0x19c>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140a:	d102      	bne.n	8001412 <spi_receive+0x1a2>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d107      	bne.n	8001422 <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	e00f      	b.n	8001442 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001426:	b29b      	uxth	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1c8      	bne.n	80013be <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8001440:	7dfb      	ldrb	r3, [r7, #23]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b08a      	sub	sp, #40	@ 0x28
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 8001458:	2301      	movs	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8001462:	f000 f9fd 	bl	8001860 <get_tick>
 8001466:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800146e:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ae:	2b40      	cmp	r3, #64	@ 0x40
 80014b0:	d007      	beq.n	80014c2 <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014c0:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014ca:	d17e      	bne.n	80015ca <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <spi_transmit_receive+0x90>
 80014d4:	8a7b      	ldrh	r3, [r7, #18]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d16c      	bne.n	80015b4 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	1c9a      	adds	r2, r3, #2
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014fe:	e059      	b.n	80015b4 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01b      	beq.n	8001546 <spi_transmit_receive+0xfc>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001512:	b29b      	uxth	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d016      	beq.n	8001546 <spi_transmit_receive+0xfc>
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	2b01      	cmp	r3, #1
 800151c:	d113      	bne.n	8001546 <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152e:	1c9a      	adds	r2, r3, #2
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d019      	beq.n	8001588 <spi_transmit_receive+0x13e>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001558:	b29b      	uxth	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d014      	beq.n	8001588 <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001568:	b292      	uxth	r2, r2
 800156a:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001570:	1c9a      	adds	r2, r3, #2
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800157a:	b29b      	uxth	r3, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8001584:	2301      	movs	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 8001588:	f000 f96a 	bl	8001860 <get_tick>
 800158c:	4602      	mov	r2, r0
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001594:	429a      	cmp	r2, r3
 8001596:	d80d      	bhi.n	80015b4 <spi_transmit_receive+0x16a>
 8001598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	d009      	beq.n	80015b4 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 80015ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015b2:	e08f      	b.n	80016d4 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1a0      	bne.n	8001500 <spi_transmit_receive+0xb6>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d19b      	bne.n	8001500 <spi_transmit_receive+0xb6>
 80015c8:	e082      	b.n	80016d0 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <spi_transmit_receive+0x18e>
 80015d2:	8a7b      	ldrh	r3, [r7, #18]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d171      	bne.n	80016bc <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	330c      	adds	r3, #12
 80015e2:	7812      	ldrb	r2, [r2, #0]
 80015e4:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015fe:	e05d      	b.n	80016bc <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01c      	beq.n	8001648 <spi_transmit_receive+0x1fe>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001612:	b29b      	uxth	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d017      	beq.n	8001648 <spi_transmit_receive+0x1fe>
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	2b01      	cmp	r3, #1
 800161c:	d114      	bne.n	8001648 <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	330c      	adds	r3, #12
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d019      	beq.n	800168a <spi_transmit_receive+0x240>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800165a:	b29b      	uxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8001686:	2301      	movs	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 800168a:	f000 f8e9 	bl	8001860 <get_tick>
 800168e:	4602      	mov	r2, r0
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001696:	429a      	cmp	r2, r3
 8001698:	d803      	bhi.n	80016a2 <spi_transmit_receive+0x258>
 800169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d102      	bne.n	80016a8 <spi_transmit_receive+0x25e>
 80016a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d109      	bne.n	80016bc <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 80016b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016ba:	e00b      	b.n	80016d4 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d19c      	bne.n	8001600 <spi_transmit_receive+0x1b6>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d197      	bne.n	8001600 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 80016d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ee:	f3af 8000 	nop.w
 80016f2:	4601      	mov	r1, r0
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_read+0x12>
	}

return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f8e3 	bl	80018fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf1      	blt.n	8001728 <_write+0x12>
	}
	return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_close>:

int _close(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001776:	605a      	str	r2, [r3, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_isatty>:

int _isatty(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f003 fe82 	bl	80054f0 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20020000 	.word	0x20020000
 8001818:	00000400 	.word	0x00000400
 800181c:	20001c58 	.word	0x20001c58
 8001820:	20002300 	.word	0x20002300

08001824 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 800182c:	f000 f818 	bl	8001860 <get_tick>
 8001830:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d002      	beq.n	8001844 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8001844:	bf00      	nop
 8001846:	f000 f80b 	bl	8001860 <get_tick>
 800184a:	4602      	mov	r2, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	429a      	cmp	r2, r3
 8001854:	d8f7      	bhi.n	8001846 <delay+0x22>

}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <get_tick>:

uint32_t get_tick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <get_tick+0x24>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <get_tick+0x28>)
 800186e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001870:	b662      	cpsie	i
}
 8001872:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <get_tick+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]

}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20001c5c 	.word	0x20001c5c
 8001888:	20001c60 	.word	0x20001c60

0800188c <tick_increment>:
static void tick_increment(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <tick_increment+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a03      	ldr	r2, [pc, #12]	@ (80018a4 <tick_increment+0x18>)
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	20001c5c 	.word	0x20001c5c

080018a8 <timebase_init>:
void timebase_init(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <timebase_init+0x44>)
 80018b2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80018b6:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <timebase_init+0x44>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <timebase_init+0x44>)
 80018c0:	2204      	movs	r2, #4
 80018c2:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80018c4:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <timebase_init+0x44>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <timebase_init+0x44>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <timebase_init+0x44>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <timebase_init+0x44>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018dc:	b662      	cpsie	i
}
 80018de:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	tick_increment();
 80018f4:	f7ff ffca 	bl	800188c <tick_increment>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f84f 	bl	80019a8 <uart_write>
	return ch;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <debug_uart_init>:

void debug_uart_init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <debug_uart_init+0x84>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	4a1e      	ldr	r2, [pc, #120]	@ (8001998 <debug_uart_init+0x84>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <debug_uart_init+0x88>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <debug_uart_init+0x88>)
 800192a:	f023 0310 	bic.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <debug_uart_init+0x88>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a19      	ldr	r2, [pc, #100]	@ (800199c <debug_uart_init+0x88>)
 8001936:	f043 0320 	orr.w	r3, r3, #32
 800193a:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <debug_uart_init+0x88>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a16      	ldr	r2, [pc, #88]	@ (800199c <debug_uart_init+0x88>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001946:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <debug_uart_init+0x88>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a13      	ldr	r2, [pc, #76]	@ (800199c <debug_uart_init+0x88>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001952:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <debug_uart_init+0x88>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a10      	ldr	r2, [pc, #64]	@ (800199c <debug_uart_init+0x88>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800195e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <debug_uart_init+0x88>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <debug_uart_init+0x88>)
 8001966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800196a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <debug_uart_init+0x84>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <debug_uart_init+0x84>)
 8001972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8001978:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800197c:	4808      	ldr	r0, [pc, #32]	@ (80019a0 <debug_uart_init+0x8c>)
 800197e:	f000 f83f 	bl	8001a00 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <debug_uart_init+0x90>)
 8001984:	2208      	movs	r2, #8
 8001986:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <debug_uart_init+0x90>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <debug_uart_init+0x90>)
 800198e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	40004400 	.word	0x40004400

080019a8 <uart_write>:



static void uart_write(int ch)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80019b0:	bf00      	nop
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <uart_write+0x2c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f9      	beq.n	80019b2 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <uart_write+0x2c>)
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	6053      	str	r3, [r2, #4]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40004400 	.word	0x40004400

080019d8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	085a      	lsrs	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	441a      	add	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	b29b      	uxth	r3, r3
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffe3 	bl	80019d8 <compute_uart_bd>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <uart_set_baudrate+0x24>)
 8001a18:	609a      	str	r2, [r3, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40004400 	.word	0x40004400

08001a28 <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <ip_assigned_callback+0x14>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	20002154 	.word	0x20002154

08001a40 <ip_update_callback>:

void ip_update_callback(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <ip_update_callback+0x14>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20002154 	.word	0x20002154

08001a58 <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <ip_conflict_callback+0x14>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	20002154 	.word	0x20002154

08001a70 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <wizchip_cs_pin_init+0x34>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <wizchip_cs_pin_init+0x34>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <wizchip_cs_pin_init+0x38>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <wizchip_cs_pin_init+0x38>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <wizchip_cs_pin_init+0x38>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <wizchip_cs_pin_init+0x38>)
 8001a92:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a96:	6013      	str	r3, [r2, #0]

}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <wizchip_pin_cs_select+0x1c>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <wizchip_pin_cs_select+0x1c>)
 8001ab6:	f023 0310 	bic.w	r3, r3, #16
 8001aba:	6153      	str	r3, [r2, #20]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40020000 	.word	0x40020000

08001acc <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <wizchip_pin_cs_deselect+0x1c>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <wizchip_pin_cs_deselect+0x1c>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	6153      	str	r3, [r2, #20]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40020000 	.word	0x40020000

08001aec <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 8001af8:	887a      	ldrh	r2, [r7, #2]
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4803      	ldr	r0, [pc, #12]	@ (8001b10 <wizchip_read_burst+0x24>)
 8001b02:	f7ff fbb5 	bl	8001270 <spi_receive>

}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20001c64 	.word	0x20001c64

08001b14 <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ffe4 	bl	8001aec <wizchip_read_burst>
	return byte;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <wizchip_write_burst+0x24>)
 8001b46:	f7ff fa73 	bl	8001030 <spi_transmit>

}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20001c64 	.word	0x20001c64

08001b58 <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	2101      	movs	r1, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ffe2 	bl	8001b30 <wizchip_write_burst>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001b7a:	4a13      	ldr	r2, [pc, #76]	@ (8001bc8 <w5500_spi_init+0x54>)
 8001b7c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001b80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b84:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <w5500_spi_init+0x50>)
 8001bba:	f7ff f9d1 	bl	8000f60 <spi_init>

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20001c64 	.word	0x20001c64
 8001bc8:	40013000 	.word	0x40013000

08001bcc <w5500_init>:


 void w5500_init(void)
 {
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b093      	sub	sp, #76	@ 0x4c
 8001bd0:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 8001bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cfc <w5500_init+0x130>)
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bdc:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001be0:	f107 0214 	add.w	r2, r7, #20
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fe7a 	bl	80048e4 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 8001bf0:	4943      	ldr	r1, [pc, #268]	@ (8001d00 <w5500_init+0x134>)
 8001bf2:	4844      	ldr	r0, [pc, #272]	@ (8001d04 <w5500_init+0x138>)
 8001bf4:	f002 fccc 	bl	8004590 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 8001bf8:	4943      	ldr	r1, [pc, #268]	@ (8001d08 <w5500_init+0x13c>)
 8001bfa:	4844      	ldr	r0, [pc, #272]	@ (8001d0c <w5500_init+0x140>)
 8001bfc:	f002 fcee 	bl	80045dc <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 8001c00:	4943      	ldr	r1, [pc, #268]	@ (8001d10 <w5500_init+0x144>)
 8001c02:	4844      	ldr	r0, [pc, #272]	@ (8001d14 <w5500_init+0x148>)
 8001c04:	f002 fd16 	bl	8004634 <reg_wizchip_spiburst_cbfunc>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 8001c08:	2206      	movs	r2, #6
 8001c0a:	4943      	ldr	r1, [pc, #268]	@ (8001d18 <w5500_init+0x14c>)
 8001c0c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001c10:	f002 fa6e 	bl	80040f0 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 8001c14:	4941      	ldr	r1, [pc, #260]	@ (8001d1c <w5500_init+0x150>)
 8001c16:	2000      	movs	r0, #0
 8001c18:	f001 fbaa 	bl	8003370 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 8001c1c:	4a40      	ldr	r2, [pc, #256]	@ (8001d20 <w5500_init+0x154>)
 8001c1e:	4941      	ldr	r1, [pc, #260]	@ (8001d24 <w5500_init+0x158>)
 8001c20:	4841      	ldr	r0, [pc, #260]	@ (8001d28 <w5500_init+0x15c>)
 8001c22:	f000 f903 	bl	8001e2c <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 8001c26:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c2a:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8001c2c:	e004      	b.n	8001c38 <w5500_init+0x6c>
	 {
		 DHCP_run();
 8001c2e:	f001 f9e7 	bl	8003000 <DHCP_run>
		 timeout_counter--;
 8001c32:	8bfb      	ldrh	r3, [r7, #30]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <w5500_init+0x160>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <w5500_init+0x82>
 8001c48:	8bfb      	ldrh	r3, [r7, #30]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ef      	bne.n	8001c2e <w5500_init+0x62>
	 }

	 if(!is_ip_assigned)
 8001c4e:	4b37      	ldr	r3, [pc, #220]	@ (8001d2c <w5500_init+0x160>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f083 0301 	eor.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d149      	bne.n	8001cf2 <w5500_init+0x126>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8001c5e:	4834      	ldr	r0, [pc, #208]	@ (8001d30 <w5500_init+0x164>)
 8001c60:	f001 fc30 	bl	80034c4 <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 8001c64:	4833      	ldr	r0, [pc, #204]	@ (8001d34 <w5500_init+0x168>)
 8001c66:	f001 fc4d 	bl	8003504 <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8001c6a:	4833      	ldr	r0, [pc, #204]	@ (8001d38 <w5500_init+0x16c>)
 8001c6c:	f001 fc6a 	bl	8003544 <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001c70:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <w5500_init+0x14c>)
 8001c72:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 8001c74:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001c76:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <w5500_init+0x14c>)
 8001c78:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8001c7a:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001c7c:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <w5500_init+0x14c>)
 8001c7e:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8001c80:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8001c82:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <w5500_init+0x14c>)
 8001c84:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 8001c86:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001c88:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <w5500_init+0x14c>)
 8001c8a:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8001c8c:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <w5500_init+0x14c>)
 8001c90:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 8001c92:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001c94:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <w5500_init+0x14c>)
 8001c96:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8001c98:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d18 <w5500_init+0x14c>)
 8001c9c:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8001c9e:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <w5500_init+0x14c>)
 8001ca2:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 8001ca4:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <w5500_init+0x14c>)
 8001ca8:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8001caa:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001cac:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <w5500_init+0x14c>)
 8001cae:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8001cb0:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8001cb2:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <w5500_init+0x14c>)
 8001cb4:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 8001cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	9308      	str	r3, [sp, #32]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	9307      	str	r3, [sp, #28]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	9306      	str	r3, [sp, #24]
 8001cc4:	9605      	str	r6, [sp, #20]
 8001cc6:	9504      	str	r5, [sp, #16]
 8001cc8:	9403      	str	r4, [sp, #12]
 8001cca:	9002      	str	r0, [sp, #8]
 8001ccc:	9101      	str	r1, [sp, #4]
 8001cce:	9200      	str	r2, [sp, #0]
 8001cd0:	4673      	mov	r3, lr
 8001cd2:	4662      	mov	r2, ip
 8001cd4:	4919      	ldr	r1, [pc, #100]	@ (8001d3c <w5500_init+0x170>)
 8001cd6:	481a      	ldr	r0, [pc, #104]	@ (8001d40 <w5500_init+0x174>)
 8001cd8:	f003 fa94 	bl	8005204 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 8001cdc:	4819      	ldr	r0, [pc, #100]	@ (8001d44 <w5500_init+0x178>)
 8001cde:	f003 fa89 	bl	80051f4 <puts>
    printf("%s", temp_buffer);
 8001ce2:	4917      	ldr	r1, [pc, #92]	@ (8001d40 <w5500_init+0x174>)
 8001ce4:	4818      	ldr	r0, [pc, #96]	@ (8001d48 <w5500_init+0x17c>)
 8001ce6:	f003 fa1d 	bl	8005124 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 8001cea:	480b      	ldr	r0, [pc, #44]	@ (8001d18 <w5500_init+0x14c>)
 8001cec:	f003 f86a 	bl	8004dc4 <wizchip_setnetinfo>
 8001cf0:	e000      	b.n	8001cf4 <w5500_init+0x128>
		 return;
 8001cf2:	bf00      	nop

 }
 8001cf4:	3724      	adds	r7, #36	@ 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08006374 	.word	0x08006374
 8001d00:	08001acd 	.word	0x08001acd
 8001d04:	08001aad 	.word	0x08001aad
 8001d08:	08001b59 	.word	0x08001b59
 8001d0c:	08001b15 	.word	0x08001b15
 8001d10:	08001b31 	.word	0x08001b31
 8001d14:	08001aed 	.word	0x08001aed
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	20001d54 	.word	0x20001d54
 8001d20:	08001a59 	.word	0x08001a59
 8001d24:	08001a41 	.word	0x08001a41
 8001d28:	08001a29 	.word	0x08001a29
 8001d2c:	20002154 	.word	0x20002154
 8001d30:	20000016 	.word	0x20000016
 8001d34:	2000001e 	.word	0x2000001e
 8001d38:	2000001a 	.word	0x2000001a
 8001d3c:	080062e8 	.word	0x080062e8
 8001d40:	20001ca8 	.word	0x20001ca8
 8001d44:	08006334 	.word	0x08006334
 8001d48:	08006370 	.word	0x08006370

08001d4c <Reset_Handler>:
 8001d4c:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <LoopForever+0x2>)
 8001d4e:	4685      	mov	sp, r0
 8001d50:	f3af 8000 	nop.w
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LoopForever+0x6>)
 8001d56:	490d      	ldr	r1, [pc, #52]	@ (8001d8c <LoopForever+0xa>)
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <LoopForever+0xe>)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:
 8001d5e:	58d4      	ldr	r4, [r2, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:
 8001d64:	18c4      	adds	r4, r0, r3
 8001d66:	428c      	cmp	r4, r1
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <LoopForever+0x12>)
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d98 <LoopForever+0x16>)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:
 8001d76:	42a2      	cmp	r2, r4
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>
 8001d7a:	f003 fbbf 	bl	80054fc <__libc_init_array>
 8001d7e:	f7fe ffe7 	bl	8000d50 <main>

08001d82 <LoopForever>:
 8001d82:	e7fe      	b.n	8001d82 <LoopForever>
 8001d84:	20020000 	.word	0x20020000
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	200000d0 	.word	0x200000d0
 8001d90:	080063d4 	.word	0x080063d4
 8001d94:	200000d0 	.word	0x200000d0
 8001d98:	200022fc 	.word	0x200022fc

08001d9c <ADC_IRQHandler>:
 8001d9c:	e7fe      	b.n	8001d9c <ADC_IRQHandler>
	...

08001da0 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001da4:	2204      	movs	r2, #4
 8001da6:	4909      	ldr	r1, [pc, #36]	@ (8001dcc <default_ip_assign+0x2c>)
 8001da8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001dac:	f002 f9a0 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001db0:	2204      	movs	r2, #4
 8001db2:	4907      	ldr	r1, [pc, #28]	@ (8001dd0 <default_ip_assign+0x30>)
 8001db4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001db8:	f002 f99a 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4905      	ldr	r1, [pc, #20]	@ (8001dd4 <default_ip_assign+0x34>)
 8001dc0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001dc4:	f002 f994 	bl	80040f0 <WIZCHIP_WRITE_BUF>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20002164 	.word	0x20002164
 8001dd0:	2000216c 	.word	0x2000216c
 8001dd4:	20002168 	.word	0x20002168

08001dd8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	2000      	movs	r0, #0
 8001de0:	f002 f8d8 	bl	8003f94 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001de4:	2000      	movs	r0, #0
 8001de6:	f002 f889 	bl	8003efc <WIZCHIP_READ>
   default_ip_assign();
 8001dea:	f7ff ffd9 	bl	8001da0 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8001dee:	2206      	movs	r2, #6
 8001df0:	4903      	ldr	r1, [pc, #12]	@ (8001e00 <default_ip_update+0x28>)
 8001df2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001df6:	f002 f97b 	bl	80040f0 <WIZCHIP_WRITE_BUF>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20002184 	.word	0x20002184

08001e04 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f002 f8c2 	bl	8003f94 <WIZCHIP_WRITE>
	getMR(); // for delay
 8001e10:	2000      	movs	r0, #0
 8001e12:	f002 f873 	bl	8003efc <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8001e16:	2206      	movs	r2, #6
 8001e18:	4903      	ldr	r1, [pc, #12]	@ (8001e28 <default_ip_conflict+0x24>)
 8001e1a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001e1e:	f002 f967 	bl	80040f0 <WIZCHIP_WRITE_BUF>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20002184 	.word	0x20002184

08001e2c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001e38:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <reg_dhcp_cbfunc+0x50>)
 8001e3a:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <reg_dhcp_cbfunc+0x54>)
 8001e3c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <reg_dhcp_cbfunc+0x58>)
 8001e40:	4a11      	ldr	r2, [pc, #68]	@ (8001e88 <reg_dhcp_cbfunc+0x5c>)
 8001e42:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <reg_dhcp_cbfunc+0x60>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <reg_dhcp_cbfunc+0x64>)
 8001e48:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <reg_dhcp_cbfunc+0x2a>
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <reg_dhcp_cbfunc+0x50>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <reg_dhcp_cbfunc+0x36>
 8001e5c:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <reg_dhcp_cbfunc+0x58>)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <reg_dhcp_cbfunc+0x42>
 8001e68:	4a08      	ldr	r2, [pc, #32]	@ (8001e8c <reg_dhcp_cbfunc+0x60>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000038 	.word	0x20000038
 8001e80:	08001da1 	.word	0x08001da1
 8001e84:	2000003c 	.word	0x2000003c
 8001e88:	08001dd9 	.word	0x08001dd9
 8001e8c:	20000040 	.word	0x20000040
 8001e90:	08001e05 	.word	0x08001e05

08001e94 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001ea4:	f002 f8c4 	bl	8004030 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001ea8:	4b72      	ldr	r3, [pc, #456]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001eb0:	4b70      	ldr	r3, [pc, #448]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001eb8:	4b6e      	ldr	r3, [pc, #440]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001ed0:	4b69      	ldr	r3, [pc, #420]	@ (8002078 <makeDHCPMSG+0x1e4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e1b      	lsrs	r3, r3, #24
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001edc:	4b66      	ldr	r3, [pc, #408]	@ (8002078 <makeDHCPMSG+0x1e4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0c1a      	lsrs	r2, r3, #16
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8001eea:	4b63      	ldr	r3, [pc, #396]	@ (8002078 <makeDHCPMSG+0x1e4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0a1a      	lsrs	r2, r3, #8
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8001ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8002078 <makeDHCPMSG+0x1e4>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3303      	adds	r3, #3
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001f04:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001f0c:	4b59      	ldr	r3, [pc, #356]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	330a      	adds	r3, #10
 8001f12:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2280      	movs	r2, #128	@ 0x80
 8001f18:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001f22:	4b54      	ldr	r3, [pc, #336]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8001f2a:	4b52      	ldr	r3, [pc, #328]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001f32:	4b50      	ldr	r3, [pc, #320]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001f42:	4b4c      	ldr	r3, [pc, #304]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001f52:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8001f5a:	4b46      	ldr	r3, [pc, #280]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001f62:	4b44      	ldr	r3, [pc, #272]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8001f6a:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001f72:	4b40      	ldr	r3, [pc, #256]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001f92:	4b38      	ldr	r3, [pc, #224]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8001f9a:	4b36      	ldr	r3, [pc, #216]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001fa2:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a35      	ldr	r2, [pc, #212]	@ (800207c <makeDHCPMSG+0x1e8>)
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a32      	ldr	r2, [pc, #200]	@ (800207c <makeDHCPMSG+0x1e8>)
 8001fb2:	7852      	ldrb	r2, [r2, #1]
 8001fb4:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a30      	ldr	r2, [pc, #192]	@ (800207c <makeDHCPMSG+0x1e8>)
 8001fbc:	7892      	ldrb	r2, [r2, #2]
 8001fbe:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800207c <makeDHCPMSG+0x1e8>)
 8001fc6:	78d2      	ldrb	r2, [r2, #3]
 8001fc8:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2b      	ldr	r2, [pc, #172]	@ (800207c <makeDHCPMSG+0x1e8>)
 8001fd0:	7912      	ldrb	r2, [r2, #4]
 8001fd2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8001fd6:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a28      	ldr	r2, [pc, #160]	@ (800207c <makeDHCPMSG+0x1e8>)
 8001fdc:	7952      	ldrb	r2, [r2, #5]
 8001fde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e008      	b.n	8001ffa <makeDHCPMSG+0x166>
 8001fe8:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	4413      	add	r3, r2
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d9f3      	bls.n	8001fe8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	e009      	b.n	800201a <makeDHCPMSG+0x186>
 8002006:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	4413      	add	r3, r2
 800200e:	2200      	movs	r2, #0
 8002010:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	3301      	adds	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b3f      	cmp	r3, #63	@ 0x3f
 800201e:	d9f2      	bls.n	8002006 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e009      	b.n	800203a <makeDHCPMSG+0x1a6>
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	4413      	add	r3, r2
 800202e:	2200      	movs	r2, #0
 8002030:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	3301      	adds	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	daf1      	bge.n	8002026 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2263      	movs	r2, #99	@ 0x63
 8002048:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <makeDHCPMSG+0x1e0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2282      	movs	r2, #130	@ 0x82
 8002052:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2253      	movs	r2, #83	@ 0x53
 800205c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <makeDHCPMSG+0x1e0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2263      	movs	r2, #99	@ 0x63
 8002066:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20002180 	.word	0x20002180
 8002078:	2000217c 	.word	0x2000217c
 800207c:	20002184 	.word	0x20002184

08002080 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800208a:	f7ff ff03 	bl	8001e94 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 800208e:	4b56      	ldr	r3, [pc, #344]	@ (80021e8 <send_DHCP_DISCOVER+0x168>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8002094:	4b54      	ldr	r3, [pc, #336]	@ (80021e8 <send_DHCP_DISCOVER+0x168>)
 8002096:	2200      	movs	r2, #0
 8002098:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800209a:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <send_DHCP_DISCOVER+0x168>)
 800209c:	2200      	movs	r2, #0
 800209e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80020a0:	4b51      	ldr	r3, [pc, #324]	@ (80021e8 <send_DHCP_DISCOVER+0x168>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80020a6:	4b51      	ldr	r3, [pc, #324]	@ (80021ec <send_DHCP_DISCOVER+0x16c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80020ac:	4b4f      	ldr	r3, [pc, #316]	@ (80021ec <send_DHCP_DISCOVER+0x16c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80020b2:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <send_DHCP_DISCOVER+0x16c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80020b8:	4b4c      	ldr	r3, [pc, #304]	@ (80021ec <send_DHCP_DISCOVER+0x16c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80020be:	2304      	movs	r3, #4
 80020c0:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80020c2:	4b4b      	ldr	r3, [pc, #300]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	88bb      	ldrh	r3, [r7, #4]
 80020c8:	1c59      	adds	r1, r3, #1
 80020ca:	80b9      	strh	r1, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	2235      	movs	r2, #53	@ 0x35
 80020d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80020d4:	4b46      	ldr	r3, [pc, #280]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	88bb      	ldrh	r3, [r7, #4]
 80020da:	1c59      	adds	r1, r3, #1
 80020dc:	80b9      	strh	r1, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80020e6:	4b42      	ldr	r3, [pc, #264]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	88bb      	ldrh	r3, [r7, #4]
 80020ec:	1c59      	adds	r1, r3, #1
 80020ee:	80b9      	strh	r1, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80020f8:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	88bb      	ldrh	r3, [r7, #4]
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	80b9      	strh	r1, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	223d      	movs	r2, #61	@ 0x3d
 8002106:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800210a:	4b39      	ldr	r3, [pc, #228]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	88bb      	ldrh	r3, [r7, #4]
 8002110:	1c59      	adds	r1, r3, #1
 8002112:	80b9      	strh	r1, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	2207      	movs	r2, #7
 8002118:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800211c:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	88bb      	ldrh	r3, [r7, #4]
 8002122:	1c59      	adds	r1, r3, #1
 8002124:	80b9      	strh	r1, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	2201      	movs	r2, #1
 800212a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800212e:	4b30      	ldr	r3, [pc, #192]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	88bb      	ldrh	r3, [r7, #4]
 8002134:	1c59      	adds	r1, r3, #1
 8002136:	80b9      	strh	r1, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	4b2e      	ldr	r3, [pc, #184]	@ (80021f4 <send_DHCP_DISCOVER+0x174>)
 800213c:	7819      	ldrb	r1, [r3, #0]
 800213e:	1813      	adds	r3, r2, r0
 8002140:	460a      	mov	r2, r1
 8002142:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002146:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	88bb      	ldrh	r3, [r7, #4]
 800214c:	1c59      	adds	r1, r3, #1
 800214e:	80b9      	strh	r1, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <send_DHCP_DISCOVER+0x174>)
 8002154:	7859      	ldrb	r1, [r3, #1]
 8002156:	1813      	adds	r3, r2, r0
 8002158:	460a      	mov	r2, r1
 800215a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800215e:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	80b9      	strh	r1, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <send_DHCP_DISCOVER+0x174>)
 800216c:	7899      	ldrb	r1, [r3, #2]
 800216e:	1813      	adds	r3, r2, r0
 8002170:	460a      	mov	r2, r1
 8002172:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002176:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	88bb      	ldrh	r3, [r7, #4]
 800217c:	1c59      	adds	r1, r3, #1
 800217e:	80b9      	strh	r1, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <send_DHCP_DISCOVER+0x174>)
 8002184:	78d9      	ldrb	r1, [r3, #3]
 8002186:	1813      	adds	r3, r2, r0
 8002188:	460a      	mov	r2, r1
 800218a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	88bb      	ldrh	r3, [r7, #4]
 8002194:	1c59      	adds	r1, r3, #1
 8002196:	80b9      	strh	r1, [r7, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <send_DHCP_DISCOVER+0x174>)
 800219c:	7919      	ldrb	r1, [r3, #4]
 800219e:	1813      	adds	r3, r2, r0
 80021a0:	460a      	mov	r2, r1
 80021a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	88bb      	ldrh	r3, [r7, #4]
 80021ac:	1c59      	adds	r1, r3, #1
 80021ae:	80b9      	strh	r1, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <send_DHCP_DISCOVER+0x174>)
 80021b4:	7959      	ldrb	r1, [r3, #5]
 80021b6:	1813      	adds	r3, r2, r0
 80021b8:	460a      	mov	r2, r1
 80021ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	88bb      	ldrh	r3, [r7, #4]
 80021c4:	1c59      	adds	r1, r3, #1
 80021c6:	80b9      	strh	r1, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	220c      	movs	r2, #12
 80021cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80021d0:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <send_DHCP_DISCOVER+0x170>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	88bb      	ldrh	r3, [r7, #4]
 80021d6:	1c59      	adds	r1, r3, #1
 80021d8:	80b9      	strh	r1, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	80fb      	strh	r3, [r7, #6]
 80021e6:	e017      	b.n	8002218 <send_DHCP_DISCOVER+0x198>
 80021e8:	20002158 	.word	0x20002158
 80021ec:	2000215c 	.word	0x2000215c
 80021f0:	20002180 	.word	0x20002180
 80021f4:	20002184 	.word	0x20002184
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80021f8:	88f9      	ldrh	r1, [r7, #6]
 80021fa:	4b80      	ldr	r3, [pc, #512]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	88bb      	ldrh	r3, [r7, #4]
 8002200:	1c58      	adds	r0, r3, #1
 8002202:	80b8      	strh	r0, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	4b7e      	ldr	r3, [pc, #504]	@ (8002400 <send_DHCP_DISCOVER+0x380>)
 8002208:	5c59      	ldrb	r1, [r3, r1]
 800220a:	1813      	adds	r3, r2, r0
 800220c:	460a      	mov	r2, r1
 800220e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	3301      	adds	r3, #1
 8002216:	80fb      	strh	r3, [r7, #6]
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	4a79      	ldr	r2, [pc, #484]	@ (8002400 <send_DHCP_DISCOVER+0x380>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ea      	bne.n	80021f8 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002222:	4b78      	ldr	r3, [pc, #480]	@ (8002404 <send_DHCP_DISCOVER+0x384>)
 8002224:	78db      	ldrb	r3, [r3, #3]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b74      	ldr	r3, [pc, #464]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 800222c:	681c      	ldr	r4, [r3, #0]
 800222e:	88bb      	ldrh	r3, [r7, #4]
 8002230:	1c59      	adds	r1, r3, #1
 8002232:	80b9      	strh	r1, [r7, #4]
 8002234:	461d      	mov	r5, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f001 f9a4 	bl	8003584 <NibbleToHex>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	1963      	adds	r3, r4, r5
 8002242:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002246:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <send_DHCP_DISCOVER+0x384>)
 8002248:	78da      	ldrb	r2, [r3, #3]
 800224a:	4b6c      	ldr	r3, [pc, #432]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 800224c:	681c      	ldr	r4, [r3, #0]
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	1c59      	adds	r1, r3, #1
 8002252:	80b9      	strh	r1, [r7, #4]
 8002254:	461d      	mov	r5, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f001 f994 	bl	8003584 <NibbleToHex>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	1963      	adds	r3, r4, r5
 8002262:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002266:	4b67      	ldr	r3, [pc, #412]	@ (8002404 <send_DHCP_DISCOVER+0x384>)
 8002268:	791b      	ldrb	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b63      	ldr	r3, [pc, #396]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 8002270:	681c      	ldr	r4, [r3, #0]
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	1c59      	adds	r1, r3, #1
 8002276:	80b9      	strh	r1, [r7, #4]
 8002278:	461d      	mov	r5, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f001 f982 	bl	8003584 <NibbleToHex>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	1963      	adds	r3, r4, r5
 8002286:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800228a:	4b5e      	ldr	r3, [pc, #376]	@ (8002404 <send_DHCP_DISCOVER+0x384>)
 800228c:	791a      	ldrb	r2, [r3, #4]
 800228e:	4b5b      	ldr	r3, [pc, #364]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 8002290:	681c      	ldr	r4, [r3, #0]
 8002292:	88bb      	ldrh	r3, [r7, #4]
 8002294:	1c59      	adds	r1, r3, #1
 8002296:	80b9      	strh	r1, [r7, #4]
 8002298:	461d      	mov	r5, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f001 f972 	bl	8003584 <NibbleToHex>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	1963      	adds	r3, r4, r5
 80022a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80022aa:	4b56      	ldr	r3, [pc, #344]	@ (8002404 <send_DHCP_DISCOVER+0x384>)
 80022ac:	795b      	ldrb	r3, [r3, #5]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b52      	ldr	r3, [pc, #328]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 80022b4:	681c      	ldr	r4, [r3, #0]
 80022b6:	88bb      	ldrh	r3, [r7, #4]
 80022b8:	1c59      	adds	r1, r3, #1
 80022ba:	80b9      	strh	r1, [r7, #4]
 80022bc:	461d      	mov	r5, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f001 f960 	bl	8003584 <NibbleToHex>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	1963      	adds	r3, r4, r5
 80022ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80022ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002404 <send_DHCP_DISCOVER+0x384>)
 80022d0:	795a      	ldrb	r2, [r3, #5]
 80022d2:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 80022d4:	681c      	ldr	r4, [r3, #0]
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	1c59      	adds	r1, r3, #1
 80022da:	80b9      	strh	r1, [r7, #4]
 80022dc:	461d      	mov	r5, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f001 f950 	bl	8003584 <NibbleToHex>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	1963      	adds	r3, r4, r5
 80022ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	b2d9      	uxtb	r1, r3
 80022f2:	4b42      	ldr	r3, [pc, #264]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	88b8      	ldrh	r0, [r7, #4]
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	3307      	adds	r3, #7
 80022fc:	1ac3      	subs	r3, r0, r3
 80022fe:	3106      	adds	r1, #6
 8002300:	b2c9      	uxtb	r1, r1
 8002302:	4413      	add	r3, r2
 8002304:	460a      	mov	r2, r1
 8002306:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800230a:	4b3c      	ldr	r3, [pc, #240]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	1c59      	adds	r1, r3, #1
 8002312:	80b9      	strh	r1, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	2237      	movs	r2, #55	@ 0x37
 8002318:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 800231c:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	88bb      	ldrh	r3, [r7, #4]
 8002322:	1c59      	adds	r1, r3, #1
 8002324:	80b9      	strh	r1, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	2206      	movs	r2, #6
 800232a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800232e:	4b33      	ldr	r3, [pc, #204]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	1c59      	adds	r1, r3, #1
 8002336:	80b9      	strh	r1, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	2201      	movs	r2, #1
 800233c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002340:	4b2e      	ldr	r3, [pc, #184]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	88bb      	ldrh	r3, [r7, #4]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	80b9      	strh	r1, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	2203      	movs	r2, #3
 800234e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002352:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	88bb      	ldrh	r3, [r7, #4]
 8002358:	1c59      	adds	r1, r3, #1
 800235a:	80b9      	strh	r1, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	2206      	movs	r2, #6
 8002360:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002364:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	88bb      	ldrh	r3, [r7, #4]
 800236a:	1c59      	adds	r1, r3, #1
 800236c:	80b9      	strh	r1, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	220f      	movs	r2, #15
 8002372:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002376:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	88bb      	ldrh	r3, [r7, #4]
 800237c:	1c59      	adds	r1, r3, #1
 800237e:	80b9      	strh	r1, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	223a      	movs	r2, #58	@ 0x3a
 8002384:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002388:	4b1c      	ldr	r3, [pc, #112]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	88bb      	ldrh	r3, [r7, #4]
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	80b9      	strh	r1, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	223b      	movs	r2, #59	@ 0x3b
 8002396:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800239a:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	1c59      	adds	r1, r3, #1
 80023a2:	80b9      	strh	r1, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	22ff      	movs	r2, #255	@ 0xff
 80023a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80023ac:	88bb      	ldrh	r3, [r7, #4]
 80023ae:	80fb      	strh	r3, [r7, #6]
 80023b0:	e009      	b.n	80023c6 <send_DHCP_DISCOVER+0x346>
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4413      	add	r3, r2
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	3301      	adds	r3, #1
 80023c4:	80fb      	strh	r3, [r7, #6]
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80023cc:	d3f1      	bcc.n	80023b2 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80023ce:	23ff      	movs	r3, #255	@ 0xff
 80023d0:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80023d2:	23ff      	movs	r3, #255	@ 0xff
 80023d4:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80023d6:	23ff      	movs	r3, #255	@ 0xff
 80023d8:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80023da:	23ff      	movs	r3, #255	@ 0xff
 80023dc:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <send_DHCP_DISCOVER+0x388>)
 80023e0:	7818      	ldrb	r0, [r3, #0]
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <send_DHCP_DISCOVER+0x37c>)
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	463b      	mov	r3, r7
 80023e8:	2243      	movs	r2, #67	@ 0x43
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80023f0:	f001 fa64 	bl	80038bc <sendto>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	20002180 	.word	0x20002180
 8002400:	20000030 	.word	0x20000030
 8002404:	20002184 	.word	0x20002184
 8002408:	20002155 	.word	0x20002155

0800240c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8002416:	f7ff fd3d 	bl	8001e94 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800241a:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <send_DHCP_REQUEST+0x7c>)
 800241c:	f993 3000 	ldrsb.w	r3, [r3]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d004      	beq.n	800242e <send_DHCP_REQUEST+0x22>
 8002424:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <send_DHCP_REQUEST+0x7c>)
 8002426:	f993 3000 	ldrsb.w	r3, [r3]
 800242a:	2b04      	cmp	r3, #4
 800242c:	d134      	bne.n	8002498 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800242e:	4b17      	ldr	r3, [pc, #92]	@ (800248c <send_DHCP_REQUEST+0x80>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330a      	adds	r3, #10
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002438:	4b14      	ldr	r3, [pc, #80]	@ (800248c <send_DHCP_REQUEST+0x80>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	330a      	adds	r3, #10
 800243e:	3301      	adds	r3, #1
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <send_DHCP_REQUEST+0x80>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <send_DHCP_REQUEST+0x84>)
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <send_DHCP_REQUEST+0x80>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a0f      	ldr	r2, [pc, #60]	@ (8002490 <send_DHCP_REQUEST+0x84>)
 8002454:	7852      	ldrb	r2, [r2, #1]
 8002456:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <send_DHCP_REQUEST+0x80>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0c      	ldr	r2, [pc, #48]	@ (8002490 <send_DHCP_REQUEST+0x84>)
 800245e:	7892      	ldrb	r2, [r2, #2]
 8002460:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <send_DHCP_REQUEST+0x80>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <send_DHCP_REQUEST+0x84>)
 8002468:	78d2      	ldrb	r2, [r2, #3]
 800246a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <send_DHCP_REQUEST+0x88>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <send_DHCP_REQUEST+0x88>)
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <send_DHCP_REQUEST+0x88>)
 800247a:	789b      	ldrb	r3, [r3, #2]
 800247c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800247e:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <send_DHCP_REQUEST+0x88>)
 8002480:	78db      	ldrb	r3, [r3, #3]
 8002482:	71fb      	strb	r3, [r7, #7]
 8002484:	e010      	b.n	80024a8 <send_DHCP_REQUEST+0x9c>
 8002486:	bf00      	nop
 8002488:	20002174 	.word	0x20002174
 800248c:	20002180 	.word	0x20002180
 8002490:	20002164 	.word	0x20002164
 8002494:	20002158 	.word	0x20002158
   }
   else
   {
   	ip[0] = 255;
 8002498:	23ff      	movs	r3, #255	@ 0xff
 800249a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800249c:	23ff      	movs	r3, #255	@ 0xff
 800249e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80024a0:	23ff      	movs	r3, #255	@ 0xff
 80024a2:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80024a4:	23ff      	movs	r3, #255	@ 0xff
 80024a6:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80024a8:	2304      	movs	r3, #4
 80024aa:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80024ac:	4b8d      	ldr	r3, [pc, #564]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	897b      	ldrh	r3, [r7, #10]
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	8179      	strh	r1, [r7, #10]
 80024b6:	4413      	add	r3, r2
 80024b8:	2235      	movs	r2, #53	@ 0x35
 80024ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80024be:	4b89      	ldr	r3, [pc, #548]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	897b      	ldrh	r3, [r7, #10]
 80024c4:	1c59      	adds	r1, r3, #1
 80024c6:	8179      	strh	r1, [r7, #10]
 80024c8:	4413      	add	r3, r2
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80024d0:	4b84      	ldr	r3, [pc, #528]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	897b      	ldrh	r3, [r7, #10]
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	8179      	strh	r1, [r7, #10]
 80024da:	4413      	add	r3, r2
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80024e2:	4b80      	ldr	r3, [pc, #512]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	8179      	strh	r1, [r7, #10]
 80024ec:	4413      	add	r3, r2
 80024ee:	223d      	movs	r2, #61	@ 0x3d
 80024f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80024f4:	4b7b      	ldr	r3, [pc, #492]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	897b      	ldrh	r3, [r7, #10]
 80024fa:	1c59      	adds	r1, r3, #1
 80024fc:	8179      	strh	r1, [r7, #10]
 80024fe:	4413      	add	r3, r2
 8002500:	2207      	movs	r2, #7
 8002502:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002506:	4b77      	ldr	r3, [pc, #476]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	1c59      	adds	r1, r3, #1
 800250e:	8179      	strh	r1, [r7, #10]
 8002510:	4413      	add	r3, r2
 8002512:	2201      	movs	r2, #1
 8002514:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002518:	4b72      	ldr	r3, [pc, #456]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	897b      	ldrh	r3, [r7, #10]
 800251e:	1c59      	adds	r1, r3, #1
 8002520:	8179      	strh	r1, [r7, #10]
 8002522:	4618      	mov	r0, r3
 8002524:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <send_DHCP_REQUEST+0x2dc>)
 8002526:	7819      	ldrb	r1, [r3, #0]
 8002528:	1813      	adds	r3, r2, r0
 800252a:	460a      	mov	r2, r1
 800252c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002530:	4b6c      	ldr	r3, [pc, #432]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	897b      	ldrh	r3, [r7, #10]
 8002536:	1c59      	adds	r1, r3, #1
 8002538:	8179      	strh	r1, [r7, #10]
 800253a:	4618      	mov	r0, r3
 800253c:	4b6a      	ldr	r3, [pc, #424]	@ (80026e8 <send_DHCP_REQUEST+0x2dc>)
 800253e:	7859      	ldrb	r1, [r3, #1]
 8002540:	1813      	adds	r3, r2, r0
 8002542:	460a      	mov	r2, r1
 8002544:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002548:	4b66      	ldr	r3, [pc, #408]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	897b      	ldrh	r3, [r7, #10]
 800254e:	1c59      	adds	r1, r3, #1
 8002550:	8179      	strh	r1, [r7, #10]
 8002552:	4618      	mov	r0, r3
 8002554:	4b64      	ldr	r3, [pc, #400]	@ (80026e8 <send_DHCP_REQUEST+0x2dc>)
 8002556:	7899      	ldrb	r1, [r3, #2]
 8002558:	1813      	adds	r3, r2, r0
 800255a:	460a      	mov	r2, r1
 800255c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002560:	4b60      	ldr	r3, [pc, #384]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	897b      	ldrh	r3, [r7, #10]
 8002566:	1c59      	adds	r1, r3, #1
 8002568:	8179      	strh	r1, [r7, #10]
 800256a:	4618      	mov	r0, r3
 800256c:	4b5e      	ldr	r3, [pc, #376]	@ (80026e8 <send_DHCP_REQUEST+0x2dc>)
 800256e:	78d9      	ldrb	r1, [r3, #3]
 8002570:	1813      	adds	r3, r2, r0
 8002572:	460a      	mov	r2, r1
 8002574:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002578:	4b5a      	ldr	r3, [pc, #360]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	897b      	ldrh	r3, [r7, #10]
 800257e:	1c59      	adds	r1, r3, #1
 8002580:	8179      	strh	r1, [r7, #10]
 8002582:	4618      	mov	r0, r3
 8002584:	4b58      	ldr	r3, [pc, #352]	@ (80026e8 <send_DHCP_REQUEST+0x2dc>)
 8002586:	7919      	ldrb	r1, [r3, #4]
 8002588:	1813      	adds	r3, r2, r0
 800258a:	460a      	mov	r2, r1
 800258c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002590:	4b54      	ldr	r3, [pc, #336]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	897b      	ldrh	r3, [r7, #10]
 8002596:	1c59      	adds	r1, r3, #1
 8002598:	8179      	strh	r1, [r7, #10]
 800259a:	4618      	mov	r0, r3
 800259c:	4b52      	ldr	r3, [pc, #328]	@ (80026e8 <send_DHCP_REQUEST+0x2dc>)
 800259e:	7959      	ldrb	r1, [r3, #5]
 80025a0:	1813      	adds	r3, r2, r0
 80025a2:	460a      	mov	r2, r1
 80025a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2bff      	cmp	r3, #255	@ 0xff
 80025ac:	f040 8084 	bne.w	80026b8 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80025b0:	4b4c      	ldr	r3, [pc, #304]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	897b      	ldrh	r3, [r7, #10]
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	8179      	strh	r1, [r7, #10]
 80025ba:	4413      	add	r3, r2
 80025bc:	2232      	movs	r2, #50	@ 0x32
 80025be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80025c2:	4b48      	ldr	r3, [pc, #288]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	1c59      	adds	r1, r3, #1
 80025ca:	8179      	strh	r1, [r7, #10]
 80025cc:	4413      	add	r3, r2
 80025ce:	2204      	movs	r2, #4
 80025d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80025d4:	4b43      	ldr	r3, [pc, #268]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	897b      	ldrh	r3, [r7, #10]
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	8179      	strh	r1, [r7, #10]
 80025de:	4618      	mov	r0, r3
 80025e0:	4b42      	ldr	r3, [pc, #264]	@ (80026ec <send_DHCP_REQUEST+0x2e0>)
 80025e2:	7819      	ldrb	r1, [r3, #0]
 80025e4:	1813      	adds	r3, r2, r0
 80025e6:	460a      	mov	r2, r1
 80025e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80025ec:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	1c59      	adds	r1, r3, #1
 80025f4:	8179      	strh	r1, [r7, #10]
 80025f6:	4618      	mov	r0, r3
 80025f8:	4b3c      	ldr	r3, [pc, #240]	@ (80026ec <send_DHCP_REQUEST+0x2e0>)
 80025fa:	7859      	ldrb	r1, [r3, #1]
 80025fc:	1813      	adds	r3, r2, r0
 80025fe:	460a      	mov	r2, r1
 8002600:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002604:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	897b      	ldrh	r3, [r7, #10]
 800260a:	1c59      	adds	r1, r3, #1
 800260c:	8179      	strh	r1, [r7, #10]
 800260e:	4618      	mov	r0, r3
 8002610:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <send_DHCP_REQUEST+0x2e0>)
 8002612:	7899      	ldrb	r1, [r3, #2]
 8002614:	1813      	adds	r3, r2, r0
 8002616:	460a      	mov	r2, r1
 8002618:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800261c:	4b31      	ldr	r3, [pc, #196]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	1c59      	adds	r1, r3, #1
 8002624:	8179      	strh	r1, [r7, #10]
 8002626:	4618      	mov	r0, r3
 8002628:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <send_DHCP_REQUEST+0x2e0>)
 800262a:	78d9      	ldrb	r1, [r3, #3]
 800262c:	1813      	adds	r3, r2, r0
 800262e:	460a      	mov	r2, r1
 8002630:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8002634:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	897b      	ldrh	r3, [r7, #10]
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	8179      	strh	r1, [r7, #10]
 800263e:	4413      	add	r3, r2
 8002640:	2236      	movs	r2, #54	@ 0x36
 8002642:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8002646:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	8179      	strh	r1, [r7, #10]
 8002650:	4413      	add	r3, r2
 8002652:	2204      	movs	r2, #4
 8002654:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002658:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	8179      	strh	r1, [r7, #10]
 8002662:	4618      	mov	r0, r3
 8002664:	4b22      	ldr	r3, [pc, #136]	@ (80026f0 <send_DHCP_REQUEST+0x2e4>)
 8002666:	7819      	ldrb	r1, [r3, #0]
 8002668:	1813      	adds	r3, r2, r0
 800266a:	460a      	mov	r2, r1
 800266c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8002670:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	8179      	strh	r1, [r7, #10]
 800267a:	4618      	mov	r0, r3
 800267c:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <send_DHCP_REQUEST+0x2e4>)
 800267e:	7859      	ldrb	r1, [r3, #1]
 8002680:	1813      	adds	r3, r2, r0
 8002682:	460a      	mov	r2, r1
 8002684:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	8179      	strh	r1, [r7, #10]
 8002692:	4618      	mov	r0, r3
 8002694:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <send_DHCP_REQUEST+0x2e4>)
 8002696:	7899      	ldrb	r1, [r3, #2]
 8002698:	1813      	adds	r3, r2, r0
 800269a:	460a      	mov	r2, r1
 800269c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80026a0:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	1c59      	adds	r1, r3, #1
 80026a8:	8179      	strh	r1, [r7, #10]
 80026aa:	4618      	mov	r0, r3
 80026ac:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <send_DHCP_REQUEST+0x2e4>)
 80026ae:	78d9      	ldrb	r1, [r3, #3]
 80026b0:	1813      	adds	r3, r2, r0
 80026b2:	460a      	mov	r2, r1
 80026b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	897b      	ldrh	r3, [r7, #10]
 80026be:	1c59      	adds	r1, r3, #1
 80026c0:	8179      	strh	r1, [r7, #10]
 80026c2:	4413      	add	r3, r2
 80026c4:	220c      	movs	r2, #12
 80026c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <send_DHCP_REQUEST+0x2d8>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	897b      	ldrh	r3, [r7, #10]
 80026d0:	1c59      	adds	r1, r3, #1
 80026d2:	8179      	strh	r1, [r7, #10]
 80026d4:	4413      	add	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e019      	b.n	8002716 <send_DHCP_REQUEST+0x30a>
 80026e2:	bf00      	nop
 80026e4:	20002180 	.word	0x20002180
 80026e8:	20002184 	.word	0x20002184
 80026ec:	20002164 	.word	0x20002164
 80026f0:	20002158 	.word	0x20002158
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80026f4:	4b86      	ldr	r3, [pc, #536]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	1c59      	adds	r1, r3, #1
 80026fc:	8179      	strh	r1, [r7, #10]
 80026fe:	4618      	mov	r0, r3
 8002700:	4984      	ldr	r1, [pc, #528]	@ (8002914 <send_DHCP_REQUEST+0x508>)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	440b      	add	r3, r1
 8002706:	7819      	ldrb	r1, [r3, #0]
 8002708:	1813      	adds	r3, r2, r0
 800270a:	460a      	mov	r2, r1
 800270c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4a7f      	ldr	r2, [pc, #508]	@ (8002914 <send_DHCP_REQUEST+0x508>)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e8      	bne.n	80026f4 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002722:	4b7d      	ldr	r3, [pc, #500]	@ (8002918 <send_DHCP_REQUEST+0x50c>)
 8002724:	78db      	ldrb	r3, [r3, #3]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b79      	ldr	r3, [pc, #484]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 800272c:	681c      	ldr	r4, [r3, #0]
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	8179      	strh	r1, [r7, #10]
 8002734:	461d      	mov	r5, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 ff24 	bl	8003584 <NibbleToHex>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	1963      	adds	r3, r4, r5
 8002742:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002746:	4b74      	ldr	r3, [pc, #464]	@ (8002918 <send_DHCP_REQUEST+0x50c>)
 8002748:	78da      	ldrb	r2, [r3, #3]
 800274a:	4b71      	ldr	r3, [pc, #452]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 800274c:	681c      	ldr	r4, [r3, #0]
 800274e:	897b      	ldrh	r3, [r7, #10]
 8002750:	1c59      	adds	r1, r3, #1
 8002752:	8179      	strh	r1, [r7, #10]
 8002754:	461d      	mov	r5, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f000 ff14 	bl	8003584 <NibbleToHex>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	1963      	adds	r3, r4, r5
 8002762:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002766:	4b6c      	ldr	r3, [pc, #432]	@ (8002918 <send_DHCP_REQUEST+0x50c>)
 8002768:	791b      	ldrb	r3, [r3, #4]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b68      	ldr	r3, [pc, #416]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 8002770:	681c      	ldr	r4, [r3, #0]
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	1c59      	adds	r1, r3, #1
 8002776:	8179      	strh	r1, [r7, #10]
 8002778:	461d      	mov	r5, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 ff02 	bl	8003584 <NibbleToHex>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	1963      	adds	r3, r4, r5
 8002786:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800278a:	4b63      	ldr	r3, [pc, #396]	@ (8002918 <send_DHCP_REQUEST+0x50c>)
 800278c:	791a      	ldrb	r2, [r3, #4]
 800278e:	4b60      	ldr	r3, [pc, #384]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 8002790:	681c      	ldr	r4, [r3, #0]
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	1c59      	adds	r1, r3, #1
 8002796:	8179      	strh	r1, [r7, #10]
 8002798:	461d      	mov	r5, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 fef2 	bl	8003584 <NibbleToHex>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	1963      	adds	r3, r4, r5
 80027a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80027aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <send_DHCP_REQUEST+0x50c>)
 80027ac:	795b      	ldrb	r3, [r3, #5]
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b57      	ldr	r3, [pc, #348]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80027b4:	681c      	ldr	r4, [r3, #0]
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	8179      	strh	r1, [r7, #10]
 80027bc:	461d      	mov	r5, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 fee0 	bl	8003584 <NibbleToHex>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	1963      	adds	r3, r4, r5
 80027ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80027ce:	4b52      	ldr	r3, [pc, #328]	@ (8002918 <send_DHCP_REQUEST+0x50c>)
 80027d0:	795a      	ldrb	r2, [r3, #5]
 80027d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80027d4:	681c      	ldr	r4, [r3, #0]
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	8179      	strh	r1, [r7, #10]
 80027dc:	461d      	mov	r5, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fed0 	bl	8003584 <NibbleToHex>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	1963      	adds	r3, r4, r5
 80027ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	b2d9      	uxtb	r1, r3
 80027f2:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	8978      	ldrh	r0, [r7, #10]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3307      	adds	r3, #7
 80027fc:	1ac3      	subs	r3, r0, r3
 80027fe:	3106      	adds	r1, #6
 8002800:	b2c9      	uxtb	r1, r1
 8002802:	4413      	add	r3, r2
 8002804:	460a      	mov	r2, r1
 8002806:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800280a:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	1c59      	adds	r1, r3, #1
 8002812:	8179      	strh	r1, [r7, #10]
 8002814:	4413      	add	r3, r2
 8002816:	2237      	movs	r2, #55	@ 0x37
 8002818:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 800281c:	4b3c      	ldr	r3, [pc, #240]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	897b      	ldrh	r3, [r7, #10]
 8002822:	1c59      	adds	r1, r3, #1
 8002824:	8179      	strh	r1, [r7, #10]
 8002826:	4413      	add	r3, r2
 8002828:	2208      	movs	r2, #8
 800282a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800282e:	4b38      	ldr	r3, [pc, #224]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	1c59      	adds	r1, r3, #1
 8002836:	8179      	strh	r1, [r7, #10]
 8002838:	4413      	add	r3, r2
 800283a:	2201      	movs	r2, #1
 800283c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002840:	4b33      	ldr	r3, [pc, #204]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	897b      	ldrh	r3, [r7, #10]
 8002846:	1c59      	adds	r1, r3, #1
 8002848:	8179      	strh	r1, [r7, #10]
 800284a:	4413      	add	r3, r2
 800284c:	2203      	movs	r2, #3
 800284e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002852:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	1c59      	adds	r1, r3, #1
 800285a:	8179      	strh	r1, [r7, #10]
 800285c:	4413      	add	r3, r2
 800285e:	2206      	movs	r2, #6
 8002860:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002864:	4b2a      	ldr	r3, [pc, #168]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	897b      	ldrh	r3, [r7, #10]
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	8179      	strh	r1, [r7, #10]
 800286e:	4413      	add	r3, r2
 8002870:	220f      	movs	r2, #15
 8002872:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002876:	4b26      	ldr	r3, [pc, #152]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	897b      	ldrh	r3, [r7, #10]
 800287c:	1c59      	adds	r1, r3, #1
 800287e:	8179      	strh	r1, [r7, #10]
 8002880:	4413      	add	r3, r2
 8002882:	223a      	movs	r2, #58	@ 0x3a
 8002884:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002888:	4b21      	ldr	r3, [pc, #132]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	897b      	ldrh	r3, [r7, #10]
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	8179      	strh	r1, [r7, #10]
 8002892:	4413      	add	r3, r2
 8002894:	223b      	movs	r2, #59	@ 0x3b
 8002896:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800289a:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	1c59      	adds	r1, r3, #1
 80028a2:	8179      	strh	r1, [r7, #10]
 80028a4:	4413      	add	r3, r2
 80028a6:	221f      	movs	r2, #31
 80028a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80028ac:	4b18      	ldr	r3, [pc, #96]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	8179      	strh	r1, [r7, #10]
 80028b6:	4413      	add	r3, r2
 80028b8:	2221      	movs	r2, #33	@ 0x21
 80028ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80028be:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	1c59      	adds	r1, r3, #1
 80028c6:	8179      	strh	r1, [r7, #10]
 80028c8:	4413      	add	r3, r2
 80028ca:	22ff      	movs	r2, #255	@ 0xff
 80028cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e009      	b.n	80028ea <send_DHCP_REQUEST+0x4de>
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	33ec      	adds	r3, #236	@ 0xec
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80028f0:	dbf1      	blt.n	80028d6 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <send_DHCP_REQUEST+0x510>)
 80028f4:	7818      	ldrb	r0, [r3, #0]
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <send_DHCP_REQUEST+0x504>)
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	2243      	movs	r2, #67	@ 0x43
 80028fe:	9200      	str	r2, [sp, #0]
 8002900:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002904:	f000 ffda 	bl	80038bc <sendto>

}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bdb0      	pop	{r4, r5, r7, pc}
 8002910:	20002180 	.word	0x20002180
 8002914:	20000030 	.word	0x20000030
 8002918:	20002184 	.word	0x20002184
 800291c:	20002155 	.word	0x20002155

08002920 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800292a:	f7ff fab3 	bl	8001e94 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800292e:	2304      	movs	r3, #4
 8002930:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002932:	4b9f      	ldr	r3, [pc, #636]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330a      	adds	r3, #10
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800293c:	4b9c      	ldr	r3, [pc, #624]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330a      	adds	r3, #10
 8002942:	3301      	adds	r3, #1
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002948:	4b99      	ldr	r3, [pc, #612]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	8179      	strh	r1, [r7, #10]
 8002952:	4413      	add	r3, r2
 8002954:	2235      	movs	r2, #53	@ 0x35
 8002956:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800295a:	4b95      	ldr	r3, [pc, #596]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	1c59      	adds	r1, r3, #1
 8002962:	8179      	strh	r1, [r7, #10]
 8002964:	4413      	add	r3, r2
 8002966:	2201      	movs	r2, #1
 8002968:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800296c:	4b90      	ldr	r3, [pc, #576]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	897b      	ldrh	r3, [r7, #10]
 8002972:	1c59      	adds	r1, r3, #1
 8002974:	8179      	strh	r1, [r7, #10]
 8002976:	4413      	add	r3, r2
 8002978:	2204      	movs	r2, #4
 800297a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800297e:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	1c59      	adds	r1, r3, #1
 8002986:	8179      	strh	r1, [r7, #10]
 8002988:	4413      	add	r3, r2
 800298a:	223d      	movs	r2, #61	@ 0x3d
 800298c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002990:	4b87      	ldr	r3, [pc, #540]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	897b      	ldrh	r3, [r7, #10]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	8179      	strh	r1, [r7, #10]
 800299a:	4413      	add	r3, r2
 800299c:	2207      	movs	r2, #7
 800299e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80029a2:	4b83      	ldr	r3, [pc, #524]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	897b      	ldrh	r3, [r7, #10]
 80029a8:	1c59      	adds	r1, r3, #1
 80029aa:	8179      	strh	r1, [r7, #10]
 80029ac:	4413      	add	r3, r2
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80029b4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	897b      	ldrh	r3, [r7, #10]
 80029ba:	1c59      	adds	r1, r3, #1
 80029bc:	8179      	strh	r1, [r7, #10]
 80029be:	4618      	mov	r0, r3
 80029c0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb4 <send_DHCP_DECLINE+0x294>)
 80029c2:	7819      	ldrb	r1, [r3, #0]
 80029c4:	1813      	adds	r3, r2, r0
 80029c6:	460a      	mov	r2, r1
 80029c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80029cc:	4b78      	ldr	r3, [pc, #480]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	897b      	ldrh	r3, [r7, #10]
 80029d2:	1c59      	adds	r1, r3, #1
 80029d4:	8179      	strh	r1, [r7, #10]
 80029d6:	4618      	mov	r0, r3
 80029d8:	4b76      	ldr	r3, [pc, #472]	@ (8002bb4 <send_DHCP_DECLINE+0x294>)
 80029da:	7859      	ldrb	r1, [r3, #1]
 80029dc:	1813      	adds	r3, r2, r0
 80029de:	460a      	mov	r2, r1
 80029e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80029e4:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	897b      	ldrh	r3, [r7, #10]
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	8179      	strh	r1, [r7, #10]
 80029ee:	4618      	mov	r0, r3
 80029f0:	4b70      	ldr	r3, [pc, #448]	@ (8002bb4 <send_DHCP_DECLINE+0x294>)
 80029f2:	7899      	ldrb	r1, [r3, #2]
 80029f4:	1813      	adds	r3, r2, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80029fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	8179      	strh	r1, [r7, #10]
 8002a06:	4618      	mov	r0, r3
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <send_DHCP_DECLINE+0x294>)
 8002a0a:	78d9      	ldrb	r1, [r3, #3]
 8002a0c:	1813      	adds	r3, r2, r0
 8002a0e:	460a      	mov	r2, r1
 8002a10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002a14:	4b66      	ldr	r3, [pc, #408]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	897b      	ldrh	r3, [r7, #10]
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	8179      	strh	r1, [r7, #10]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	4b64      	ldr	r3, [pc, #400]	@ (8002bb4 <send_DHCP_DECLINE+0x294>)
 8002a22:	7919      	ldrb	r1, [r3, #4]
 8002a24:	1813      	adds	r3, r2, r0
 8002a26:	460a      	mov	r2, r1
 8002a28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002a2c:	4b60      	ldr	r3, [pc, #384]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	1c59      	adds	r1, r3, #1
 8002a34:	8179      	strh	r1, [r7, #10]
 8002a36:	4618      	mov	r0, r3
 8002a38:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb4 <send_DHCP_DECLINE+0x294>)
 8002a3a:	7959      	ldrb	r1, [r3, #5]
 8002a3c:	1813      	adds	r3, r2, r0
 8002a3e:	460a      	mov	r2, r1
 8002a40:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002a44:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	8179      	strh	r1, [r7, #10]
 8002a4e:	4413      	add	r3, r2
 8002a50:	2232      	movs	r2, #50	@ 0x32
 8002a52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8002a56:	4b56      	ldr	r3, [pc, #344]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	8179      	strh	r1, [r7, #10]
 8002a60:	4413      	add	r3, r2
 8002a62:	2204      	movs	r2, #4
 8002a64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002a68:	4b51      	ldr	r3, [pc, #324]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	8179      	strh	r1, [r7, #10]
 8002a72:	4618      	mov	r0, r3
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <send_DHCP_DECLINE+0x298>)
 8002a76:	7819      	ldrb	r1, [r3, #0]
 8002a78:	1813      	adds	r3, r2, r0
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002a80:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	897b      	ldrh	r3, [r7, #10]
 8002a86:	1c59      	adds	r1, r3, #1
 8002a88:	8179      	strh	r1, [r7, #10]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <send_DHCP_DECLINE+0x298>)
 8002a8e:	7859      	ldrb	r1, [r3, #1]
 8002a90:	1813      	adds	r3, r2, r0
 8002a92:	460a      	mov	r2, r1
 8002a94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002a98:	4b45      	ldr	r3, [pc, #276]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	897b      	ldrh	r3, [r7, #10]
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	8179      	strh	r1, [r7, #10]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	4b44      	ldr	r3, [pc, #272]	@ (8002bb8 <send_DHCP_DECLINE+0x298>)
 8002aa6:	7899      	ldrb	r1, [r3, #2]
 8002aa8:	1813      	adds	r3, r2, r0
 8002aaa:	460a      	mov	r2, r1
 8002aac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	897b      	ldrh	r3, [r7, #10]
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	8179      	strh	r1, [r7, #10]
 8002aba:	4618      	mov	r0, r3
 8002abc:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb8 <send_DHCP_DECLINE+0x298>)
 8002abe:	78d9      	ldrb	r1, [r3, #3]
 8002ac0:	1813      	adds	r3, r2, r0
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	8179      	strh	r1, [r7, #10]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	2236      	movs	r2, #54	@ 0x36
 8002ad6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8002ada:	4b35      	ldr	r3, [pc, #212]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	1c59      	adds	r1, r3, #1
 8002ae2:	8179      	strh	r1, [r7, #10]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002aec:	4b30      	ldr	r3, [pc, #192]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	1c59      	adds	r1, r3, #1
 8002af4:	8179      	strh	r1, [r7, #10]
 8002af6:	4618      	mov	r0, r3
 8002af8:	4b30      	ldr	r3, [pc, #192]	@ (8002bbc <send_DHCP_DECLINE+0x29c>)
 8002afa:	7819      	ldrb	r1, [r3, #0]
 8002afc:	1813      	adds	r3, r2, r0
 8002afe:	460a      	mov	r2, r1
 8002b00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	897b      	ldrh	r3, [r7, #10]
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	8179      	strh	r1, [r7, #10]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <send_DHCP_DECLINE+0x29c>)
 8002b12:	7859      	ldrb	r1, [r3, #1]
 8002b14:	1813      	adds	r3, r2, r0
 8002b16:	460a      	mov	r2, r1
 8002b18:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002b1c:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	897b      	ldrh	r3, [r7, #10]
 8002b22:	1c59      	adds	r1, r3, #1
 8002b24:	8179      	strh	r1, [r7, #10]
 8002b26:	4618      	mov	r0, r3
 8002b28:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <send_DHCP_DECLINE+0x29c>)
 8002b2a:	7899      	ldrb	r1, [r3, #2]
 8002b2c:	1813      	adds	r3, r2, r0
 8002b2e:	460a      	mov	r2, r1
 8002b30:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8002b34:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	8179      	strh	r1, [r7, #10]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <send_DHCP_DECLINE+0x29c>)
 8002b42:	78d9      	ldrb	r1, [r3, #3]
 8002b44:	1813      	adds	r3, r2, r0
 8002b46:	460a      	mov	r2, r1
 8002b48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8002b4c:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	897b      	ldrh	r3, [r7, #10]
 8002b52:	1c59      	adds	r1, r3, #1
 8002b54:	8179      	strh	r1, [r7, #10]
 8002b56:	4413      	add	r3, r2
 8002b58:	22ff      	movs	r2, #255	@ 0xff
 8002b5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002b5e:	897b      	ldrh	r3, [r7, #10]
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e009      	b.n	8002b78 <send_DHCP_DECLINE+0x258>
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	33ec      	adds	r3, #236	@ 0xec
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3301      	adds	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002b7e:	dbf1      	blt.n	8002b64 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8002b80:	23ff      	movs	r3, #255	@ 0xff
 8002b82:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8002b84:	23ff      	movs	r3, #255	@ 0xff
 8002b86:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8002b88:	23ff      	movs	r3, #255	@ 0xff
 8002b8a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8002b8c:	23ff      	movs	r3, #255	@ 0xff
 8002b8e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <send_DHCP_DECLINE+0x2a0>)
 8002b92:	7818      	ldrb	r0, [r3, #0]
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <send_DHCP_DECLINE+0x290>)
 8002b96:	6819      	ldr	r1, [r3, #0]
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	2243      	movs	r2, #67	@ 0x43
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002ba2:	f000 fe8b 	bl	80038bc <sendto>
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20002180 	.word	0x20002180
 8002bb4:	20002184 	.word	0x20002184
 8002bb8:	20002164 	.word	0x20002164
 8002bbc:	20002158 	.word	0x20002158
 8002bc0:	20002155 	.word	0x20002155

08002bc4 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b089      	sub	sp, #36	@ 0x24
 8002bc8:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8002bce:	4ba1      	ldr	r3, [pc, #644]	@ (8002e54 <parseDHCPMSG+0x290>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fb35 	bl	8004242 <getSn_RX_RSR>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	823b      	strh	r3, [r7, #16]
 8002bdc:	8a3b      	ldrh	r3, [r7, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d011      	beq.n	8002c06 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8002be2:	4b9c      	ldr	r3, [pc, #624]	@ (8002e54 <parseDHCPMSG+0x290>)
 8002be4:	7818      	ldrb	r0, [r3, #0]
 8002be6:	4b9c      	ldr	r3, [pc, #624]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	1d3c      	adds	r4, r7, #4
 8002bec:	8a3a      	ldrh	r2, [r7, #16]
 8002bee:	1cbb      	adds	r3, r7, #2
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	f000 ff96 	bl	8003b24 <recvfrom>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	2b43      	cmp	r3, #67	@ 0x43
 8002c00:	f040 81ed 	bne.w	8002fde <parseDHCPMSG+0x41a>
 8002c04:	e001      	b.n	8002c0a <parseDHCPMSG+0x46>
   else return 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e1eb      	b.n	8002fe2 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8002c0a:	4b93      	ldr	r3, [pc, #588]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	7f1a      	ldrb	r2, [r3, #28]
 8002c10:	4b92      	ldr	r3, [pc, #584]	@ (8002e5c <parseDHCPMSG+0x298>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d124      	bne.n	8002c62 <parseDHCPMSG+0x9e>
 8002c18:	4b8f      	ldr	r3, [pc, #572]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	7f5a      	ldrb	r2, [r3, #29]
 8002c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8002e5c <parseDHCPMSG+0x298>)
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d11d      	bne.n	8002c62 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002c26:	4b8c      	ldr	r3, [pc, #560]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	7f9a      	ldrb	r2, [r3, #30]
 8002c2c:	4b8b      	ldr	r3, [pc, #556]	@ (8002e5c <parseDHCPMSG+0x298>)
 8002c2e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d116      	bne.n	8002c62 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002c34:	4b88      	ldr	r3, [pc, #544]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	7fda      	ldrb	r2, [r3, #31]
 8002c3a:	4b88      	ldr	r3, [pc, #544]	@ (8002e5c <parseDHCPMSG+0x298>)
 8002c3c:	78db      	ldrb	r3, [r3, #3]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d10f      	bne.n	8002c62 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002c42:	4b85      	ldr	r3, [pc, #532]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002c4a:	4b84      	ldr	r3, [pc, #528]	@ (8002e5c <parseDHCPMSG+0x298>)
 8002c4c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d107      	bne.n	8002c62 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002c52:	4b81      	ldr	r3, [pc, #516]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8002c5a:	4b80      	ldr	r3, [pc, #512]	@ (8002e5c <parseDHCPMSG+0x298>)
 8002c5c:	795b      	ldrb	r3, [r3, #5]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e1bd      	b.n	8002fe2 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8002c66:	4b7e      	ldr	r3, [pc, #504]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <parseDHCPMSG+0xc2>
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <parseDHCPMSG+0xc2>
 8002c76:	4b7a      	ldr	r3, [pc, #488]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002c78:	789b      	ldrb	r3, [r3, #2]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <parseDHCPMSG+0xc2>
 8002c7e:	4b78      	ldr	r3, [pc, #480]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002c80:	78db      	ldrb	r3, [r3, #3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d029      	beq.n	8002cda <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002c86:	793a      	ldrb	r2, [r7, #4]
 8002c88:	4b75      	ldr	r3, [pc, #468]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d10e      	bne.n	8002cae <parseDHCPMSG+0xea>
 8002c90:	797a      	ldrb	r2, [r7, #5]
 8002c92:	4b73      	ldr	r3, [pc, #460]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002c94:	785b      	ldrb	r3, [r3, #1]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d109      	bne.n	8002cae <parseDHCPMSG+0xea>
 8002c9a:	79ba      	ldrb	r2, [r7, #6]
 8002c9c:	4b70      	ldr	r3, [pc, #448]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002c9e:	789b      	ldrb	r3, [r3, #2]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d104      	bne.n	8002cae <parseDHCPMSG+0xea>
 8002ca4:	79fa      	ldrb	r2, [r7, #7]
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8002e60 <parseDHCPMSG+0x29c>)
 8002ca8:	78db      	ldrb	r3, [r3, #3]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d015      	beq.n	8002cda <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002cae:	793a      	ldrb	r2, [r7, #4]
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e64 <parseDHCPMSG+0x2a0>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10e      	bne.n	8002cd6 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002cb8:	797a      	ldrb	r2, [r7, #5]
 8002cba:	4b6a      	ldr	r3, [pc, #424]	@ (8002e64 <parseDHCPMSG+0x2a0>)
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d109      	bne.n	8002cd6 <parseDHCPMSG+0x112>
 8002cc2:	79ba      	ldrb	r2, [r7, #6]
 8002cc4:	4b67      	ldr	r3, [pc, #412]	@ (8002e64 <parseDHCPMSG+0x2a0>)
 8002cc6:	789b      	ldrb	r3, [r3, #2]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d104      	bne.n	8002cd6 <parseDHCPMSG+0x112>
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	4b65      	ldr	r3, [pc, #404]	@ (8002e64 <parseDHCPMSG+0x2a0>)
 8002cd0:	78db      	ldrb	r3, [r3, #3]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d001      	beq.n	8002cda <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e183      	b.n	8002fe2 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8002cda:	4b5f      	ldr	r3, [pc, #380]	@ (8002e58 <parseDHCPMSG+0x294>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	33f0      	adds	r3, #240	@ 0xf0
 8002ce4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8002ce6:	8a3b      	ldrh	r3, [r7, #16]
 8002ce8:	3bf0      	subs	r3, #240	@ 0xf0
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4413      	add	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8002cf0:	e170      	b.n	8002fd4 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b36      	cmp	r3, #54	@ 0x36
 8002cf8:	dc76      	bgt.n	8002de8 <parseDHCPMSG+0x224>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f2c0 815d 	blt.w	8002fba <parseDHCPMSG+0x3f6>
 8002d00:	2b36      	cmp	r3, #54	@ 0x36
 8002d02:	f200 815a 	bhi.w	8002fba <parseDHCPMSG+0x3f6>
 8002d06:	a201      	add	r2, pc, #4	@ (adr r2, 8002d0c <parseDHCPMSG+0x148>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002df5 	.word	0x08002df5
 8002d10:	08002e15 	.word	0x08002e15
 8002d14:	08002fbb 	.word	0x08002fbb
 8002d18:	08002e6d 	.word	0x08002e6d
 8002d1c:	08002fbb 	.word	0x08002fbb
 8002d20:	08002fbb 	.word	0x08002fbb
 8002d24:	08002eb9 	.word	0x08002eb9
 8002d28:	08002fbb 	.word	0x08002fbb
 8002d2c:	08002fbb 	.word	0x08002fbb
 8002d30:	08002fbb 	.word	0x08002fbb
 8002d34:	08002fbb 	.word	0x08002fbb
 8002d38:	08002fbb 	.word	0x08002fbb
 8002d3c:	08002fbb 	.word	0x08002fbb
 8002d40:	08002fbb 	.word	0x08002fbb
 8002d44:	08002fbb 	.word	0x08002fbb
 8002d48:	08002fbb 	.word	0x08002fbb
 8002d4c:	08002fbb 	.word	0x08002fbb
 8002d50:	08002fbb 	.word	0x08002fbb
 8002d54:	08002fbb 	.word	0x08002fbb
 8002d58:	08002fbb 	.word	0x08002fbb
 8002d5c:	08002fbb 	.word	0x08002fbb
 8002d60:	08002fbb 	.word	0x08002fbb
 8002d64:	08002fbb 	.word	0x08002fbb
 8002d68:	08002fbb 	.word	0x08002fbb
 8002d6c:	08002fbb 	.word	0x08002fbb
 8002d70:	08002fbb 	.word	0x08002fbb
 8002d74:	08002fbb 	.word	0x08002fbb
 8002d78:	08002fbb 	.word	0x08002fbb
 8002d7c:	08002fbb 	.word	0x08002fbb
 8002d80:	08002fbb 	.word	0x08002fbb
 8002d84:	08002fbb 	.word	0x08002fbb
 8002d88:	08002fbb 	.word	0x08002fbb
 8002d8c:	08002fbb 	.word	0x08002fbb
 8002d90:	08002fbb 	.word	0x08002fbb
 8002d94:	08002fbb 	.word	0x08002fbb
 8002d98:	08002fbb 	.word	0x08002fbb
 8002d9c:	08002fbb 	.word	0x08002fbb
 8002da0:	08002fbb 	.word	0x08002fbb
 8002da4:	08002fbb 	.word	0x08002fbb
 8002da8:	08002fbb 	.word	0x08002fbb
 8002dac:	08002fbb 	.word	0x08002fbb
 8002db0:	08002fbb 	.word	0x08002fbb
 8002db4:	08002fbb 	.word	0x08002fbb
 8002db8:	08002fbb 	.word	0x08002fbb
 8002dbc:	08002fbb 	.word	0x08002fbb
 8002dc0:	08002fbb 	.word	0x08002fbb
 8002dc4:	08002fbb 	.word	0x08002fbb
 8002dc8:	08002fbb 	.word	0x08002fbb
 8002dcc:	08002fbb 	.word	0x08002fbb
 8002dd0:	08002fbb 	.word	0x08002fbb
 8002dd4:	08002fbb 	.word	0x08002fbb
 8002dd8:	08002f05 	.word	0x08002f05
 8002ddc:	08002fbb 	.word	0x08002fbb
 8002de0:	08002dfd 	.word	0x08002dfd
 8002de4:	08002f61 	.word	0x08002f61
 8002de8:	2bff      	cmp	r3, #255	@ 0xff
 8002dea:	f040 80e6 	bne.w	8002fba <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	617b      	str	r3, [r7, #20]
   				break;
 8002df2:	e0ef      	b.n	8002fd4 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
   				break;
 8002dfa:	e0eb      	b.n	8002fd4 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
   				p++;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	617a      	str	r2, [r7, #20]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	74fb      	strb	r3, [r7, #19]
   				break;
 8002e12:	e0df      	b.n	8002fd4 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3301      	adds	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
   				p++;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	617a      	str	r2, [r7, #20]
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <parseDHCPMSG+0x2a4>)
 8002e2a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	617a      	str	r2, [r7, #20]
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <parseDHCPMSG+0x2a4>)
 8002e36:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	617a      	str	r2, [r7, #20]
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <parseDHCPMSG+0x2a4>)
 8002e42:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	617a      	str	r2, [r7, #20]
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <parseDHCPMSG+0x2a4>)
 8002e4e:	70da      	strb	r2, [r3, #3]
   				break;
 8002e50:	e0c0      	b.n	8002fd4 <parseDHCPMSG+0x410>
 8002e52:	bf00      	nop
 8002e54:	20002155 	.word	0x20002155
 8002e58:	20002180 	.word	0x20002180
 8002e5c:	20002184 	.word	0x20002184
 8002e60:	20002158 	.word	0x20002158
 8002e64:	2000215c 	.word	0x2000215c
 8002e68:	2000216c 	.word	0x2000216c
   			case routersOnSubnet :
   				p++;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	617a      	str	r2, [r7, #20]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	617a      	str	r2, [r7, #20]
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	4b59      	ldr	r3, [pc, #356]	@ (8002fec <parseDHCPMSG+0x428>)
 8002e86:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	617a      	str	r2, [r7, #20]
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	4b56      	ldr	r3, [pc, #344]	@ (8002fec <parseDHCPMSG+0x428>)
 8002e92:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	617a      	str	r2, [r7, #20]
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b53      	ldr	r3, [pc, #332]	@ (8002fec <parseDHCPMSG+0x428>)
 8002e9e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	617a      	str	r2, [r7, #20]
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	4b50      	ldr	r3, [pc, #320]	@ (8002fec <parseDHCPMSG+0x428>)
 8002eaa:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
   				break;
 8002eb6:	e08d      	b.n	8002fd4 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	617a      	str	r2, [r7, #20]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	617a      	str	r2, [r7, #20]
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	4b47      	ldr	r3, [pc, #284]	@ (8002ff0 <parseDHCPMSG+0x42c>)
 8002ed2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	617a      	str	r2, [r7, #20]
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	4b44      	ldr	r3, [pc, #272]	@ (8002ff0 <parseDHCPMSG+0x42c>)
 8002ede:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	617a      	str	r2, [r7, #20]
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	4b41      	ldr	r3, [pc, #260]	@ (8002ff0 <parseDHCPMSG+0x42c>)
 8002eea:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	617a      	str	r2, [r7, #20]
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <parseDHCPMSG+0x42c>)
 8002ef6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	3b04      	subs	r3, #4
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4413      	add	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]
   				break;
 8002f02:	e067      	b.n	8002fd4 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	617a      	str	r2, [r7, #20]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	617a      	str	r2, [r7, #20]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b35      	ldr	r3, [pc, #212]	@ (8002ff4 <parseDHCPMSG+0x430>)
 8002f20:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002f22:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <parseDHCPMSG+0x430>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	021a      	lsls	r2, r3, #8
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	6179      	str	r1, [r7, #20]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	4a30      	ldr	r2, [pc, #192]	@ (8002ff4 <parseDHCPMSG+0x430>)
 8002f34:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002f36:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff4 <parseDHCPMSG+0x430>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1c59      	adds	r1, r3, #1
 8002f40:	6179      	str	r1, [r7, #20]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff4 <parseDHCPMSG+0x430>)
 8002f48:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <parseDHCPMSG+0x430>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	021a      	lsls	r2, r3, #8
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	6179      	str	r1, [r7, #20]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a26      	ldr	r2, [pc, #152]	@ (8002ff4 <parseDHCPMSG+0x430>)
 8002f5c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8002f5e:	e039      	b.n	8002fd4 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3301      	adds	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	617a      	str	r2, [r7, #20]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	617a      	str	r2, [r7, #20]
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <parseDHCPMSG+0x434>)
 8002f7a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	617a      	str	r2, [r7, #20]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <parseDHCPMSG+0x434>)
 8002f86:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	617a      	str	r2, [r7, #20]
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <parseDHCPMSG+0x434>)
 8002f92:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	617a      	str	r2, [r7, #20]
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	4b16      	ldr	r3, [pc, #88]	@ (8002ff8 <parseDHCPMSG+0x434>)
 8002f9e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002fa0:	793a      	ldrb	r2, [r7, #4]
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <parseDHCPMSG+0x438>)
 8002fa4:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8002fa6:	797a      	ldrb	r2, [r7, #5]
 8002fa8:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <parseDHCPMSG+0x438>)
 8002faa:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002fac:	79ba      	ldrb	r2, [r7, #6]
 8002fae:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <parseDHCPMSG+0x438>)
 8002fb0:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002fb2:	79fa      	ldrb	r2, [r7, #7]
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <parseDHCPMSG+0x438>)
 8002fb6:	70da      	strb	r2, [r3, #3]
   				break;
 8002fb8:	e00c      	b.n	8002fd4 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	617a      	str	r2, [r7, #20]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4413      	add	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
   				break;
 8002fd2:	bf00      	nop
		while ( p < e ) {
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f4ff ae8a 	bcc.w	8002cf2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8002fde:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20002168 	.word	0x20002168
 8002ff0:	20002170 	.word	0x20002170
 8002ff4:	20000028 	.word	0x20000028
 8002ff8:	20002158 	.word	0x20002158
 8002ffc:	2000215c 	.word	0x2000215c

08003000 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003006:	4b7f      	ldr	r3, [pc, #508]	@ (8003204 <DHCP_run+0x204>)
 8003008:	f993 3000 	ldrsb.w	r3, [r3]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d101      	bne.n	8003014 <DHCP_run+0x14>
 8003010:	2305      	movs	r3, #5
 8003012:	e0f3      	b.n	80031fc <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003014:	4b7c      	ldr	r3, [pc, #496]	@ (8003208 <DHCP_run+0x208>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3301      	adds	r3, #1
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ff6a 	bl	8003efc <WIZCHIP_READ>
 8003028:	4603      	mov	r3, r0
 800302a:	2b22      	cmp	r3, #34	@ 0x22
 800302c:	d006      	beq.n	800303c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800302e:	4b76      	ldr	r3, [pc, #472]	@ (8003208 <DHCP_run+0x208>)
 8003030:	7818      	ldrb	r0, [r3, #0]
 8003032:	2300      	movs	r3, #0
 8003034:	2244      	movs	r2, #68	@ 0x44
 8003036:	2102      	movs	r1, #2
 8003038:	f000 fabe 	bl	80035b8 <socket>

	ret = DHCP_RUNNING;
 800303c:	2301      	movs	r3, #1
 800303e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003040:	f7ff fdc0 	bl	8002bc4 <parseDHCPMSG>
 8003044:	4603      	mov	r3, r0
 8003046:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003048:	4b6e      	ldr	r3, [pc, #440]	@ (8003204 <DHCP_run+0x204>)
 800304a:	f993 3000 	ldrsb.w	r3, [r3]
 800304e:	2b04      	cmp	r3, #4
 8003050:	f200 80d0 	bhi.w	80031f4 <DHCP_run+0x1f4>
 8003054:	a201      	add	r2, pc, #4	@ (adr r2, 800305c <DHCP_run+0x5c>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	08003071 	.word	0x08003071
 8003060:	08003095 	.word	0x08003095
 8003064:	080030d9 	.word	0x080030d9
 8003068:	08003129 	.word	0x08003129
 800306c:	08003183 	.word	0x08003183
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003070:	4b66      	ldr	r3, [pc, #408]	@ (800320c <DHCP_run+0x20c>)
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003076:	4b65      	ldr	r3, [pc, #404]	@ (800320c <DHCP_run+0x20c>)
 8003078:	2200      	movs	r2, #0
 800307a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800307c:	4b63      	ldr	r3, [pc, #396]	@ (800320c <DHCP_run+0x20c>)
 800307e:	2200      	movs	r2, #0
 8003080:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8003082:	4b62      	ldr	r3, [pc, #392]	@ (800320c <DHCP_run+0x20c>)
 8003084:	2200      	movs	r2, #0
 8003086:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003088:	f7fe fffa 	bl	8002080 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800308c:	4b5d      	ldr	r3, [pc, #372]	@ (8003204 <DHCP_run+0x204>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
   		break;
 8003092:	e0b2      	b.n	80031fa <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d119      	bne.n	80030ce <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800309a:	4b5d      	ldr	r3, [pc, #372]	@ (8003210 <DHCP_run+0x210>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	7c1a      	ldrb	r2, [r3, #16]
 80030a0:	4b5a      	ldr	r3, [pc, #360]	@ (800320c <DHCP_run+0x20c>)
 80030a2:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80030a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003210 <DHCP_run+0x210>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	7c5a      	ldrb	r2, [r3, #17]
 80030aa:	4b58      	ldr	r3, [pc, #352]	@ (800320c <DHCP_run+0x20c>)
 80030ac:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80030ae:	4b58      	ldr	r3, [pc, #352]	@ (8003210 <DHCP_run+0x210>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	7c9a      	ldrb	r2, [r3, #18]
 80030b4:	4b55      	ldr	r3, [pc, #340]	@ (800320c <DHCP_run+0x20c>)
 80030b6:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80030b8:	4b55      	ldr	r3, [pc, #340]	@ (8003210 <DHCP_run+0x210>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	7cda      	ldrb	r2, [r3, #19]
 80030be:	4b53      	ldr	r3, [pc, #332]	@ (800320c <DHCP_run+0x20c>)
 80030c0:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80030c2:	f7ff f9a3 	bl	800240c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80030c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003204 <DHCP_run+0x204>)
 80030c8:	2202      	movs	r2, #2
 80030ca:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80030cc:	e095      	b.n	80031fa <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80030ce:	f000 f8b1 	bl	8003234 <check_DHCP_timeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
         break;
 80030d6:	e090      	b.n	80031fa <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80030d8:	79bb      	ldrb	r3, [r7, #6]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d116      	bne.n	800310c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80030de:	f000 f909 	bl	80032f4 <check_DHCP_leasedIP>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80030e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <DHCP_run+0x214>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4798      	blx	r3
					reset_DHCP_timeout();
 80030ee:	f000 f9d3 	bl	8003498 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80030f2:	4b44      	ldr	r3, [pc, #272]	@ (8003204 <DHCP_run+0x204>)
 80030f4:	2203      	movs	r2, #3
 80030f6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80030f8:	e07f      	b.n	80031fa <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80030fa:	f000 f9cd 	bl	8003498 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80030fe:	4b46      	ldr	r3, [pc, #280]	@ (8003218 <DHCP_run+0x218>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8003104:	4b3f      	ldr	r3, [pc, #252]	@ (8003204 <DHCP_run+0x204>)
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
		break;
 800310a:	e076      	b.n	80031fa <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800310c:	79bb      	ldrb	r3, [r7, #6]
 800310e:	2b06      	cmp	r3, #6
 8003110:	d105      	bne.n	800311e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8003112:	f000 f9c1 	bl	8003498 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003116:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <DHCP_run+0x204>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
		break;
 800311c:	e06d      	b.n	80031fa <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800311e:	f000 f889 	bl	8003234 <check_DHCP_timeout>
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
		break;
 8003126:	e068      	b.n	80031fa <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003128:	2304      	movs	r3, #4
 800312a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800312c:	4b3b      	ldr	r3, [pc, #236]	@ (800321c <DHCP_run+0x21c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d060      	beq.n	80031f8 <DHCP_run+0x1f8>
 8003136:	4b39      	ldr	r3, [pc, #228]	@ (800321c <DHCP_run+0x21c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	085a      	lsrs	r2, r3, #1
 800313c:	4b38      	ldr	r3, [pc, #224]	@ (8003220 <DHCP_run+0x220>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d259      	bcs.n	80031f8 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003148:	4b30      	ldr	r3, [pc, #192]	@ (800320c <DHCP_run+0x20c>)
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	4b35      	ldr	r3, [pc, #212]	@ (8003224 <DHCP_run+0x224>)
 800314e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8003150:	4b2e      	ldr	r3, [pc, #184]	@ (800320c <DHCP_run+0x20c>)
 8003152:	785a      	ldrb	r2, [r3, #1]
 8003154:	4b33      	ldr	r3, [pc, #204]	@ (8003224 <DHCP_run+0x224>)
 8003156:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8003158:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <DHCP_run+0x20c>)
 800315a:	789a      	ldrb	r2, [r3, #2]
 800315c:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <DHCP_run+0x224>)
 800315e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8003160:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <DHCP_run+0x20c>)
 8003162:	78da      	ldrb	r2, [r3, #3]
 8003164:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <DHCP_run+0x224>)
 8003166:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8003168:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <DHCP_run+0x228>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	4a2e      	ldr	r2, [pc, #184]	@ (8003228 <DHCP_run+0x228>)
 8003170:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8003172:	f7ff f94b 	bl	800240c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8003176:	f000 f98f 	bl	8003498 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800317a:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <DHCP_run+0x204>)
 800317c:	2204      	movs	r2, #4
 800317e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8003180:	e03a      	b.n	80031f8 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8003182:	2304      	movs	r3, #4
 8003184:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8003186:	79bb      	ldrb	r3, [r7, #6]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d125      	bne.n	80031d8 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800318c:	4b27      	ldr	r3, [pc, #156]	@ (800322c <DHCP_run+0x22c>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <DHCP_run+0x224>)
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <DHCP_run+0x20c>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d111      	bne.n	80031c2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800319e:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <DHCP_run+0x224>)
 80031a0:	785a      	ldrb	r2, [r3, #1]
 80031a2:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <DHCP_run+0x20c>)
 80031a4:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d10b      	bne.n	80031c2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <DHCP_run+0x224>)
 80031ac:	789a      	ldrb	r2, [r3, #2]
 80031ae:	4b17      	ldr	r3, [pc, #92]	@ (800320c <DHCP_run+0x20c>)
 80031b0:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d105      	bne.n	80031c2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <DHCP_run+0x224>)
 80031b8:	78da      	ldrb	r2, [r3, #3]
 80031ba:	4b14      	ldr	r3, [pc, #80]	@ (800320c <DHCP_run+0x20c>)
 80031bc:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d004      	beq.n	80031cc <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80031c2:	2303      	movs	r3, #3
 80031c4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80031c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <DHCP_run+0x230>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80031cc:	f000 f964 	bl	8003498 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <DHCP_run+0x204>)
 80031d2:	2203      	movs	r2, #3
 80031d4:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80031d6:	e010      	b.n	80031fa <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80031d8:	79bb      	ldrb	r3, [r7, #6]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d105      	bne.n	80031ea <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80031de:	f000 f95b 	bl	8003498 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80031e2:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <DHCP_run+0x204>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
	   	break;
 80031e8:	e007      	b.n	80031fa <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80031ea:	f000 f823 	bl	8003234 <check_DHCP_timeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80031f2:	e002      	b.n	80031fa <DHCP_run+0x1fa>
		default :
   		break;
 80031f4:	bf00      	nop
 80031f6:	e000      	b.n	80031fa <DHCP_run+0x1fa>
		break;
 80031f8:	bf00      	nop
	}

	return ret;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20002174 	.word	0x20002174
 8003208:	20002155 	.word	0x20002155
 800320c:	20002164 	.word	0x20002164
 8003210:	20002180 	.word	0x20002180
 8003214:	20000038 	.word	0x20000038
 8003218:	20000040 	.word	0x20000040
 800321c:	20000028 	.word	0x20000028
 8003220:	20002178 	.word	0x20002178
 8003224:	20002160 	.word	0x20002160
 8003228:	2000217c 	.word	0x2000217c
 800322c:	20002175 	.word	0x20002175
 8003230:	2000003c 	.word	0x2000003c

08003234 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800323a:	2301      	movs	r3, #1
 800323c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800323e:	4b29      	ldr	r3, [pc, #164]	@ (80032e4 <check_DHCP_timeout+0xb0>)
 8003240:	f993 3000 	ldrsb.w	r3, [r3]
 8003244:	2b01      	cmp	r3, #1
 8003246:	dc2d      	bgt.n	80032a4 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8003248:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <check_DHCP_timeout+0xb4>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <check_DHCP_timeout+0xb8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d242      	bcs.n	80032da <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8003254:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <check_DHCP_timeout+0xbc>)
 8003256:	f993 3000 	ldrsb.w	r3, [r3]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d00c      	beq.n	8003278 <check_DHCP_timeout+0x44>
 800325e:	2b04      	cmp	r3, #4
 8003260:	dc0d      	bgt.n	800327e <check_DHCP_timeout+0x4a>
 8003262:	2b01      	cmp	r3, #1
 8003264:	d002      	beq.n	800326c <check_DHCP_timeout+0x38>
 8003266:	2b02      	cmp	r3, #2
 8003268:	d003      	beq.n	8003272 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800326a:	e008      	b.n	800327e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800326c:	f7fe ff08 	bl	8002080 <send_DHCP_DISCOVER>
				break;
 8003270:	e006      	b.n	8003280 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003272:	f7ff f8cb 	bl	800240c <send_DHCP_REQUEST>
				break;
 8003276:	e003      	b.n	8003280 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003278:	f7ff f8c8 	bl	800240c <send_DHCP_REQUEST>
				break;
 800327c:	e000      	b.n	8003280 <check_DHCP_timeout+0x4c>
				break;
 800327e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8003280:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <check_DHCP_timeout+0xb8>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8003286:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <check_DHCP_timeout+0xb8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330a      	adds	r3, #10
 800328c:	4a16      	ldr	r2, [pc, #88]	@ (80032e8 <check_DHCP_timeout+0xb4>)
 800328e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8003290:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <check_DHCP_timeout+0xb0>)
 8003292:	f993 3000 	ldrsb.w	r3, [r3]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3301      	adds	r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	b25a      	sxtb	r2, r3
 800329e:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <check_DHCP_timeout+0xb0>)
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e01a      	b.n	80032da <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80032a4:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <check_DHCP_timeout+0xbc>)
 80032a6:	f993 3000 	ldrsb.w	r3, [r3]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d00c      	beq.n	80032c8 <check_DHCP_timeout+0x94>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	dc10      	bgt.n	80032d4 <check_DHCP_timeout+0xa0>
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d002      	beq.n	80032bc <check_DHCP_timeout+0x88>
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d006      	beq.n	80032c8 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80032ba:	e00b      	b.n	80032d4 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <check_DHCP_timeout+0xbc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80032c2:	2300      	movs	r3, #0
 80032c4:	71fb      	strb	r3, [r7, #7]
				break;
 80032c6:	e006      	b.n	80032d6 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80032c8:	f7fe feda 	bl	8002080 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80032cc:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <check_DHCP_timeout+0xbc>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
				break;
 80032d2:	e000      	b.n	80032d6 <check_DHCP_timeout+0xa2>
				break;
 80032d4:	bf00      	nop
		}
		reset_DHCP_timeout();
 80032d6:	f000 f8df 	bl	8003498 <reset_DHCP_timeout>
	}
	return ret;
 80032da:	79fb      	ldrb	r3, [r7, #7]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20002175 	.word	0x20002175
 80032e8:	2000002c 	.word	0x2000002c
 80032ec:	20002178 	.word	0x20002178
 80032f0:	20002174 	.word	0x20002174

080032f4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80032fa:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80032fe:	f000 fdfd 	bl	8003efc <WIZCHIP_READ>
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8003306:	2103      	movs	r1, #3
 8003308:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800330c:	f000 fe42 	bl	8003f94 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8003310:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <check_DHCP_leasedIP+0x6c>)
 8003312:	7818      	ldrb	r0, [r3, #0]
 8003314:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <check_DHCP_leasedIP+0x70>)
 800331c:	2211      	movs	r2, #17
 800331e:	4912      	ldr	r1, [pc, #72]	@ (8003368 <check_DHCP_leasedIP+0x74>)
 8003320:	f000 facc 	bl	80038bc <sendto>
 8003324:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	4619      	mov	r1, r3
 800332a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800332e:	f000 fe31 	bl	8003f94 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f113 0f0d 	cmn.w	r3, #13
 8003338:	d101      	bne.n	800333e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800333a:	2301      	movs	r3, #1
 800333c:	e00c      	b.n	8003358 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800333e:	f7ff faef 	bl	8002920 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <check_DHCP_leasedIP+0x78>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8003348:	bf00      	nop
 800334a:	4b08      	ldr	r3, [pc, #32]	@ (800336c <check_DHCP_leasedIP+0x78>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d9f9      	bls.n	800334a <check_DHCP_leasedIP+0x56>

		return 0;
 8003356:	2300      	movs	r3, #0
	}
}	
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20002155 	.word	0x20002155
 8003364:	20002164 	.word	0x20002164
 8003368:	0800637c 	.word	0x0800637c
 800336c:	20002178 	.word	0x20002178

08003370 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8003380:	2206      	movs	r2, #6
 8003382:	493f      	ldr	r1, [pc, #252]	@ (8003480 <DHCP_init+0x110>)
 8003384:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003388:	f000 fe52 	bl	8004030 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800338c:	4b3c      	ldr	r3, [pc, #240]	@ (8003480 <DHCP_init+0x110>)
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <DHCP_init+0x110>)
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	4313      	orrs	r3, r2
 8003396:	b2da      	uxtb	r2, r3
 8003398:	4b39      	ldr	r3, [pc, #228]	@ (8003480 <DHCP_init+0x110>)
 800339a:	789b      	ldrb	r3, [r3, #2]
 800339c:	4313      	orrs	r3, r2
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	4b37      	ldr	r3, [pc, #220]	@ (8003480 <DHCP_init+0x110>)
 80033a2:	78db      	ldrb	r3, [r3, #3]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b35      	ldr	r3, [pc, #212]	@ (8003480 <DHCP_init+0x110>)
 80033aa:	791b      	ldrb	r3, [r3, #4]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b33      	ldr	r3, [pc, #204]	@ (8003480 <DHCP_init+0x110>)
 80033b2:	795b      	ldrb	r3, [r3, #5]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d117      	bne.n	80033ec <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 80033bc:	4b30      	ldr	r3, [pc, #192]	@ (8003480 <DHCP_init+0x110>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80033c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003480 <DHCP_init+0x110>)
 80033c4:	2208      	movs	r2, #8
 80033c6:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80033c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <DHCP_init+0x110>)
 80033ca:	22dc      	movs	r2, #220	@ 0xdc
 80033cc:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 80033ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003480 <DHCP_init+0x110>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 80033d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <DHCP_init+0x110>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80033da:	4b29      	ldr	r3, [pc, #164]	@ (8003480 <DHCP_init+0x110>)
 80033dc:	2200      	movs	r2, #0
 80033de:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80033e0:	2206      	movs	r2, #6
 80033e2:	4927      	ldr	r1, [pc, #156]	@ (8003480 <DHCP_init+0x110>)
 80033e4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80033e8:	f000 fe82 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80033ec:	4a25      	ldr	r2, [pc, #148]	@ (8003484 <DHCP_init+0x114>)
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80033f2:	4a25      	ldr	r2, [pc, #148]	@ (8003488 <DHCP_init+0x118>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80033f8:	4b24      	ldr	r3, [pc, #144]	@ (800348c <DHCP_init+0x11c>)
 80033fa:	4a25      	ldr	r2, [pc, #148]	@ (8003490 <DHCP_init+0x120>)
 80033fc:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <DHCP_init+0x110>)
 8003400:	78db      	ldrb	r3, [r3, #3]
 8003402:	461a      	mov	r2, r3
 8003404:	4b21      	ldr	r3, [pc, #132]	@ (800348c <DHCP_init+0x11c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4413      	add	r3, r2
 800340a:	4a20      	ldr	r2, [pc, #128]	@ (800348c <DHCP_init+0x11c>)
 800340c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800340e:	4b1c      	ldr	r3, [pc, #112]	@ (8003480 <DHCP_init+0x110>)
 8003410:	791b      	ldrb	r3, [r3, #4]
 8003412:	461a      	mov	r2, r3
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <DHCP_init+0x11c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4413      	add	r3, r2
 800341a:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <DHCP_init+0x11c>)
 800341c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800341e:	4b18      	ldr	r3, [pc, #96]	@ (8003480 <DHCP_init+0x110>)
 8003420:	795b      	ldrb	r3, [r3, #5]
 8003422:	461a      	mov	r2, r3
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <DHCP_init+0x11c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4413      	add	r3, r2
 800342a:	4a18      	ldr	r2, [pc, #96]	@ (800348c <DHCP_init+0x11c>)
 800342c:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800342e:	4b14      	ldr	r3, [pc, #80]	@ (8003480 <DHCP_init+0x110>)
 8003430:	78da      	ldrb	r2, [r3, #3]
 8003432:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <DHCP_init+0x110>)
 8003434:	791b      	ldrb	r3, [r3, #4]
 8003436:	4053      	eors	r3, r2
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <DHCP_init+0x110>)
 800343c:	795b      	ldrb	r3, [r3, #5]
 800343e:	4053      	eors	r3, r2
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	4b11      	ldr	r3, [pc, #68]	@ (800348c <DHCP_init+0x11c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4413      	add	r3, r2
 800344a:	4a10      	ldr	r2, [pc, #64]	@ (800348c <DHCP_init+0x11c>)
 800344c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	2204      	movs	r2, #4
 8003454:	4619      	mov	r1, r3
 8003456:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800345a:	f000 fe49 	bl	80040f0 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	2204      	movs	r2, #4
 8003464:	4619      	mov	r1, r3
 8003466:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800346a:	f000 fe41 	bl	80040f0 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800346e:	f000 f813 	bl	8003498 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8003472:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <DHCP_init+0x124>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20002184 	.word	0x20002184
 8003484:	20002155 	.word	0x20002155
 8003488:	20002180 	.word	0x20002180
 800348c:	2000217c 	.word	0x2000217c
 8003490:	12345678 	.word	0x12345678
 8003494:	20002174 	.word	0x20002174

08003498 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <reset_DHCP_timeout+0x20>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <reset_DHCP_timeout+0x24>)
 80034a4:	220a      	movs	r2, #10
 80034a6:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <reset_DHCP_timeout+0x28>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	20002178 	.word	0x20002178
 80034bc:	2000002c 	.word	0x2000002c
 80034c0:	20002175 	.word	0x20002175

080034c4 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <getIPfromDHCP+0x3c>)
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3301      	adds	r3, #1
 80034d8:	4a09      	ldr	r2, [pc, #36]	@ (8003500 <getIPfromDHCP+0x3c>)
 80034da:	7852      	ldrb	r2, [r2, #1]
 80034dc:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3302      	adds	r3, #2
 80034e2:	4a07      	ldr	r2, [pc, #28]	@ (8003500 <getIPfromDHCP+0x3c>)
 80034e4:	7892      	ldrb	r2, [r2, #2]
 80034e6:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3303      	adds	r3, #3
 80034ec:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <getIPfromDHCP+0x3c>)
 80034ee:	78d2      	ldrb	r2, [r2, #3]
 80034f0:	701a      	strb	r2, [r3, #0]
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20002164 	.word	0x20002164

08003504 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <getGWfromDHCP+0x3c>)
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <getGWfromDHCP+0x3c>)
 800351a:	7852      	ldrb	r2, [r2, #1]
 800351c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3302      	adds	r3, #2
 8003522:	4a07      	ldr	r2, [pc, #28]	@ (8003540 <getGWfromDHCP+0x3c>)
 8003524:	7892      	ldrb	r2, [r2, #2]
 8003526:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3303      	adds	r3, #3
 800352c:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <getGWfromDHCP+0x3c>)
 800352e:	78d2      	ldrb	r2, [r2, #3]
 8003530:	701a      	strb	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20002168 	.word	0x20002168

08003544 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <getSNfromDHCP+0x3c>)
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3301      	adds	r3, #1
 8003558:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <getSNfromDHCP+0x3c>)
 800355a:	7852      	ldrb	r2, [r2, #1]
 800355c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3302      	adds	r3, #2
 8003562:	4a07      	ldr	r2, [pc, #28]	@ (8003580 <getSNfromDHCP+0x3c>)
 8003564:	7892      	ldrb	r2, [r2, #2]
 8003566:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3303      	adds	r3, #3
 800356c:	4a04      	ldr	r2, [pc, #16]	@ (8003580 <getSNfromDHCP+0x3c>)
 800356e:	78d2      	ldrb	r2, [r2, #3]
 8003570:	701a      	strb	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	2000216c 	.word	0x2000216c

08003584 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	2b09      	cmp	r3, #9
 800359a:	d803      	bhi.n	80035a4 <NibbleToHex+0x20>
    return nibble + '0';
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	3330      	adds	r3, #48	@ 0x30
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e002      	b.n	80035aa <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	3337      	adds	r3, #55	@ 0x37
 80035a8:	b2db      	uxtb	r3, r3
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	71fb      	strb	r3, [r7, #7]
 80035ca:	4603      	mov	r3, r0
 80035cc:	71bb      	strb	r3, [r7, #6]
 80035ce:	460b      	mov	r3, r1
 80035d0:	80bb      	strh	r3, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d902      	bls.n	80035e2 <socket+0x2a>
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
 80035e0:	e0f0      	b.n	80037c4 <socket+0x20c>
	switch(protocol)
 80035e2:	79bb      	ldrb	r3, [r7, #6]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d005      	beq.n	80035f4 <socket+0x3c>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	dd11      	ble.n	8003610 <socket+0x58>
 80035ec:	3b02      	subs	r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d80e      	bhi.n	8003610 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80035f2:	e011      	b.n	8003618 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	2204      	movs	r2, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003600:	f000 fd16 	bl	8004030 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <socket+0x5e>
 800360a:	f06f 0302 	mvn.w	r3, #2
 800360e:	e0d9      	b.n	80037c4 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003610:	f06f 0304 	mvn.w	r3, #4
 8003614:	e0d6      	b.n	80037c4 <socket+0x20c>
	    break;
 8003616:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <socket+0x70>
 8003622:	f06f 0305 	mvn.w	r3, #5
 8003626:	e0cd      	b.n	80037c4 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <socket+0xc8>
	{
   	switch(protocol)
 800362e:	79bb      	ldrb	r3, [r7, #6]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d002      	beq.n	800363a <socket+0x82>
 8003634:	2b02      	cmp	r3, #2
 8003636:	d008      	beq.n	800364a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003638:	e022      	b.n	8003680 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11a      	bne.n	800367a <socket+0xc2>
 8003644:	f06f 0305 	mvn.w	r3, #5
 8003648:	e0bc      	b.n	80037c4 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db02      	blt.n	8003662 <socket+0xaa>
 800365c:	f06f 0305 	mvn.w	r3, #5
 8003660:	e0b0      	b.n	80037c4 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800366c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db04      	blt.n	800367e <socket+0xc6>
 8003674:	f06f 0305 	mvn.w	r3, #5
 8003678:	e0a4      	b.n	80037c4 <socket+0x20c>
   	      break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <socket+0xc8>
   	      break;
 800367e:	bf00      	nop
   	}
   }
	close(sn);
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f8ac 	bl	80037e0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3301      	adds	r3, #1
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4618      	mov	r0, r3
 8003692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003696:	f023 030f 	bic.w	r3, r3, #15
 800369a:	b25a      	sxtb	r2, r3
 800369c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	b25b      	sxtb	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	4619      	mov	r1, r3
 80036a8:	f000 fc74 	bl	8003f94 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80036ac:	88bb      	ldrh	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d110      	bne.n	80036d4 <socket+0x11c>
	{
	   port = sock_any_port++;
 80036b2:	4b46      	ldr	r3, [pc, #280]	@ (80037cc <socket+0x214>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	b291      	uxth	r1, r2
 80036ba:	4a44      	ldr	r2, [pc, #272]	@ (80037cc <socket+0x214>)
 80036bc:	8011      	strh	r1, [r2, #0]
 80036be:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80036c0:	4b42      	ldr	r3, [pc, #264]	@ (80037cc <socket+0x214>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d103      	bne.n	80036d4 <socket+0x11c>
 80036cc:	4b3f      	ldr	r3, [pc, #252]	@ (80037cc <socket+0x214>)
 80036ce:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80036d2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3301      	adds	r3, #1
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036e0:	461a      	mov	r2, r3
 80036e2:	88bb      	ldrh	r3, [r7, #4]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f000 fc51 	bl	8003f94 <WIZCHIP_WRITE>
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3301      	adds	r3, #1
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036fe:	461a      	mov	r2, r3
 8003700:	88bb      	ldrh	r3, [r7, #4]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 fc44 	bl	8003f94 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3301      	adds	r3, #1
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003718:	2101      	movs	r1, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fc3a 	bl	8003f94 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003720:	bf00      	nop
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	3301      	adds	r3, #1
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fbe4 	bl	8003efc <WIZCHIP_READ>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f3      	bne.n	8003722 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	2201      	movs	r2, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	b21b      	sxth	r3, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	b21a      	sxth	r2, r3
 8003748:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <socket+0x218>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b21b      	sxth	r3, r3
 800374e:	4013      	ands	r3, r2
 8003750:	b21b      	sxth	r3, r3
 8003752:	b29a      	uxth	r2, r3
 8003754:	4b1e      	ldr	r3, [pc, #120]	@ (80037d0 <socket+0x218>)
 8003756:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	b21a      	sxth	r2, r3
 8003766:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <socket+0x218>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b21b      	sxth	r3, r3
 800376c:	4313      	orrs	r3, r2
 800376e:	b21b      	sxth	r3, r3
 8003770:	b29a      	uxth	r2, r3
 8003772:	4b17      	ldr	r3, [pc, #92]	@ (80037d0 <socket+0x218>)
 8003774:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	2201      	movs	r2, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	b21b      	sxth	r3, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	b21a      	sxth	r2, r3
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <socket+0x21c>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b21b      	sxth	r3, r3
 800378a:	4013      	ands	r3, r2
 800378c:	b21b      	sxth	r3, r3
 800378e:	b29a      	uxth	r2, r3
 8003790:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <socket+0x21c>)
 8003792:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	4a10      	ldr	r2, [pc, #64]	@ (80037d8 <socket+0x220>)
 8003798:	2100      	movs	r1, #0
 800379a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	4a0e      	ldr	r2, [pc, #56]	@ (80037dc <socket+0x224>)
 80037a2:	2100      	movs	r1, #0
 80037a4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80037a6:	bf00      	nop
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	3301      	adds	r3, #1
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fba1 	bl	8003efc <WIZCHIP_READ>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f3      	beq.n	80037a8 <socket+0x1f0>
   return (int8_t)sn;
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	20000044 	.word	0x20000044
 80037d0:	2000218a 	.word	0x2000218a
 80037d4:	2000218c 	.word	0x2000218c
 80037d8:	20002190 	.word	0x20002190
 80037dc:	200021a0 	.word	0x200021a0

080037e0 <close>:

int8_t close(uint8_t sn)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d902      	bls.n	80037f6 <close+0x16>
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295
 80037f4:	e055      	b.n	80038a2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	3301      	adds	r3, #1
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003802:	2110      	movs	r1, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fbc5 	bl	8003f94 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800380a:	bf00      	nop
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3301      	adds	r3, #1
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fb6f 	bl	8003efc <WIZCHIP_READ>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f3      	bne.n	800380c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	3301      	adds	r3, #1
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003830:	211f      	movs	r1, #31
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fbae 	bl	8003f94 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	2201      	movs	r2, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	b21b      	sxth	r3, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	b21a      	sxth	r2, r3
 8003846:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <close+0xcc>)
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b21b      	sxth	r3, r3
 800384c:	4013      	ands	r3, r2
 800384e:	b21b      	sxth	r3, r3
 8003850:	b29a      	uxth	r2, r3
 8003852:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <close+0xcc>)
 8003854:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2201      	movs	r2, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	b21b      	sxth	r3, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	b21a      	sxth	r2, r3
 8003864:	4b12      	ldr	r3, [pc, #72]	@ (80038b0 <close+0xd0>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b21b      	sxth	r3, r3
 800386a:	4013      	ands	r3, r2
 800386c:	b21b      	sxth	r3, r3
 800386e:	b29a      	uxth	r2, r3
 8003870:	4b0f      	ldr	r3, [pc, #60]	@ (80038b0 <close+0xd0>)
 8003872:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	4a0f      	ldr	r2, [pc, #60]	@ (80038b4 <close+0xd4>)
 8003878:	2100      	movs	r1, #0
 800387a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	4a0d      	ldr	r2, [pc, #52]	@ (80038b8 <close+0xd8>)
 8003882:	2100      	movs	r1, #0
 8003884:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003886:	bf00      	nop
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3301      	adds	r3, #1
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fb31 	bl	8003efc <WIZCHIP_READ>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f3      	bne.n	8003888 <close+0xa8>
	return SOCK_OK;
 80038a0:	2301      	movs	r3, #1
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2000218a 	.word	0x2000218a
 80038b0:	2000218c 	.word	0x2000218c
 80038b4:	20002190 	.word	0x20002190
 80038b8:	200021a0 	.word	0x200021a0

080038bc <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	4613      	mov	r3, r2
 80038cc:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d902      	bls.n	80038e2 <sendto+0x26>
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
 80038e0:	e11a      	b.n	8003b18 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	3301      	adds	r3, #1
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fb06 	bl	8003efc <WIZCHIP_READ>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	3b02      	subs	r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d902      	bls.n	8003902 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80038fc:	f06f 0304 	mvn.w	r3, #4
 8003900:	e10a      	b.n	8003b18 <sendto+0x25c>
         break;
 8003902:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003904:	89bb      	ldrh	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <sendto+0x54>
 800390a:	f06f 030d 	mvn.w	r3, #13
 800390e:	e103      	b.n	8003b18 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	3201      	adds	r2, #1
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	4413      	add	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	3202      	adds	r2, #2
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	4413      	add	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	3203      	adds	r2, #3
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	4413      	add	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10e      	bne.n	8003964 <sendto+0xa8>
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	3301      	adds	r3, #1
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fad4 	bl	8003efc <WIZCHIP_READ>
 8003954:	4603      	mov	r3, r0
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d002      	beq.n	8003964 <sendto+0xa8>
 800395e:	f06f 030b 	mvn.w	r3, #11
 8003962:	e0d9      	b.n	8003b18 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003964:	8c3b      	ldrh	r3, [r7, #32]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10e      	bne.n	8003988 <sendto+0xcc>
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	3301      	adds	r3, #1
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fac2 	bl	8003efc <WIZCHIP_READ>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d002      	beq.n	8003988 <sendto+0xcc>
 8003982:	f06f 030a 	mvn.w	r3, #10
 8003986:	e0c7      	b.n	8003b18 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	3301      	adds	r3, #1
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fab1 	bl	8003efc <WIZCHIP_READ>
 800399a:	4603      	mov	r3, r0
 800399c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b42      	cmp	r3, #66	@ 0x42
 80039a2:	d008      	beq.n	80039b6 <sendto+0xfa>
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b22      	cmp	r3, #34	@ 0x22
 80039a8:	d005      	beq.n	80039b6 <sendto+0xfa>
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b32      	cmp	r3, #50	@ 0x32
 80039ae:	d002      	beq.n	80039b6 <sendto+0xfa>
 80039b0:	f06f 0306 	mvn.w	r3, #6
 80039b4:	e0b0      	b.n	8003b18 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3301      	adds	r3, #1
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80039c2:	2204      	movs	r2, #4
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb92 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	3301      	adds	r3, #1
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d8:	461a      	mov	r2, r3
 80039da:	8c3b      	ldrh	r3, [r7, #32]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	b29b      	uxth	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f000 fad5 	bl	8003f94 <WIZCHIP_WRITE>
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	3301      	adds	r3, #1
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80039f6:	461a      	mov	r2, r3
 80039f8:	8c3b      	ldrh	r3, [r7, #32]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fac8 	bl	8003f94 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	3301      	adds	r3, #1
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa73 	bl	8003efc <WIZCHIP_READ>
 8003a16:	4603      	mov	r3, r0
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003a1c:	89ba      	ldrh	r2, [r7, #12]
 8003a1e:	8abb      	ldrh	r3, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d901      	bls.n	8003a28 <sendto+0x16c>
 8003a24:	8abb      	ldrh	r3, [r7, #20]
 8003a26:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fbc0 	bl	80041b0 <getSn_TX_FSR>
 8003a30:	4603      	mov	r3, r0
 8003a32:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3301      	adds	r3, #1
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fa5b 	bl	8003efc <WIZCHIP_READ>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <sendto+0x196>
 8003a4c:	f06f 0303 	mvn.w	r3, #3
 8003a50:	e062      	b.n	8003b18 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003a52:	4b33      	ldr	r3, [pc, #204]	@ (8003b20 <sendto+0x264>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	fa42 f303 	asr.w	r3, r2, r3
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <sendto+0x1b6>
 8003a66:	89ba      	ldrh	r2, [r7, #12]
 8003a68:	8abb      	ldrh	r3, [r7, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d901      	bls.n	8003a72 <sendto+0x1b6>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e052      	b.n	8003b18 <sendto+0x25c>
      if(len <= freesize) break;
 8003a72:	89ba      	ldrh	r2, [r7, #12]
 8003a74:	8abb      	ldrh	r3, [r7, #20]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d900      	bls.n	8003a7c <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8003a7a:	e7d5      	b.n	8003a28 <sendto+0x16c>
      if(len <= freesize) break;
 8003a7c:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8003a7e:	89ba      	ldrh	r2, [r7, #12]
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fc25 	bl	80042d4 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	3301      	adds	r3, #1
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a96:	2120      	movs	r1, #32
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa7b 	bl	8003f94 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003a9e:	bf00      	nop
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fa25 	bl	8003efc <WIZCHIP_READ>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f3      	bne.n	8003aa0 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	3301      	adds	r3, #1
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fa19 	bl	8003efc <WIZCHIP_READ>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00c      	beq.n	8003af6 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ae8:	2110      	movs	r1, #16
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa52 	bl	8003f94 <WIZCHIP_WRITE>
         break;
 8003af0:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003af2:	89bb      	ldrh	r3, [r7, #12]
 8003af4:	e010      	b.n	8003b18 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0db      	beq.n	8003ab8 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3301      	adds	r3, #1
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003b0c:	2108      	movs	r1, #8
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fa40 	bl	8003f94 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003b14:	f06f 030c 	mvn.w	r3, #12
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	2000218a 	.word	0x2000218a

08003b24 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	4613      	mov	r3, r2
 8003b34:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d902      	bls.n	8003b46 <recvfrom+0x22>
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	e1d2      	b.n	8003eec <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f9d4 	bl	8003efc <WIZCHIP_READ>
 8003b54:	4603      	mov	r3, r0
 8003b56:	777b      	strb	r3, [r7, #29]
 8003b58:	7f7b      	ldrb	r3, [r7, #29]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	3b02      	subs	r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d902      	bls.n	8003b6a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003b64:	f06f 0304 	mvn.w	r3, #4
 8003b68:	e1c0      	b.n	8003eec <recvfrom+0x3c8>
         break;
 8003b6a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003b6c:	89bb      	ldrh	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <recvfrom+0x54>
 8003b72:	f06f 030d 	mvn.w	r3, #13
 8003b76:	e1b9      	b.n	8003eec <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	4a87      	ldr	r2, [pc, #540]	@ (8003d98 <recvfrom+0x274>)
 8003b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d128      	bne.n	8003bd6 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fb5b 	bl	8004242 <getSn_RX_RSR>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	3301      	adds	r3, #1
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f9ad 	bl	8003efc <WIZCHIP_READ>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <recvfrom+0x8a>
 8003ba8:	f06f 0303 	mvn.w	r3, #3
 8003bac:	e19e      	b.n	8003eec <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003bae:	4b7b      	ldr	r3, [pc, #492]	@ (8003d9c <recvfrom+0x278>)
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	fa42 f303 	asr.w	r3, r2, r3
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <recvfrom+0xa8>
 8003bc2:	8bfb      	ldrh	r3, [r7, #30]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <recvfrom+0xa8>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e18f      	b.n	8003eec <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8003bcc:	8bfb      	ldrh	r3, [r7, #30]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d100      	bne.n	8003bd4 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003bd2:	e7d7      	b.n	8003b84 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003bd4:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003bd6:	7f7b      	ldrb	r3, [r7, #29]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d078      	beq.n	8003cd2 <recvfrom+0x1ae>
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	f300 8140 	bgt.w	8003e66 <recvfrom+0x342>
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d003      	beq.n	8003bf2 <recvfrom+0xce>
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	f000 80da 	beq.w	8003da4 <recvfrom+0x280>
 8003bf0:	e139      	b.n	8003e66 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	4a68      	ldr	r2, [pc, #416]	@ (8003d98 <recvfrom+0x274>)
 8003bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d151      	bne.n	8003ca2 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8003bfe:	f107 0114 	add.w	r1, r7, #20
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2208      	movs	r2, #8
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fbbe 	bl	8004388 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	3301      	adds	r3, #1
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c18:	2140      	movs	r1, #64	@ 0x40
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f9ba 	bl	8003f94 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003c20:	bf00      	nop
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	3301      	adds	r3, #1
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f964 	bl	8003efc <WIZCHIP_READ>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f3      	bne.n	8003c22 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003c3a:	7d3a      	ldrb	r2, [r7, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3301      	adds	r3, #1
 8003c44:	7d7a      	ldrb	r2, [r7, #21]
 8003c46:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	7dba      	ldrb	r2, [r7, #22]
 8003c4e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3303      	adds	r3, #3
 8003c54:	7dfa      	ldrb	r2, [r7, #23]
 8003c56:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003c58:	7e3b      	ldrb	r3, [r7, #24]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	7e7a      	ldrb	r2, [r7, #25]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003c72:	7eba      	ldrb	r2, [r7, #26]
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4a47      	ldr	r2, [pc, #284]	@ (8003d98 <recvfrom+0x274>)
 8003c7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	4a45      	ldr	r2, [pc, #276]	@ (8003d98 <recvfrom+0x274>)
 8003c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	7efb      	ldrb	r3, [r7, #27]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	440a      	add	r2, r1
 8003c92:	b291      	uxth	r1, r2
 8003c94:	4a40      	ldr	r2, [pc, #256]	@ (8003d98 <recvfrom+0x274>)
 8003c96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	4a40      	ldr	r2, [pc, #256]	@ (8003da0 <recvfrom+0x27c>)
 8003c9e:	2180      	movs	r1, #128	@ 0x80
 8003ca0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8003d98 <recvfrom+0x274>)
 8003ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003caa:	89ba      	ldrh	r2, [r7, #12]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d202      	bcs.n	8003cb6 <recvfrom+0x192>
 8003cb0:	89bb      	ldrh	r3, [r7, #12]
 8003cb2:	83fb      	strh	r3, [r7, #30]
 8003cb4:	e004      	b.n	8003cc0 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	4a37      	ldr	r2, [pc, #220]	@ (8003d98 <recvfrom+0x274>)
 8003cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cbe:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003cc0:	8bfb      	ldrh	r3, [r7, #30]
 8003cc2:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003cc4:	8bfa      	ldrh	r2, [r7, #30]
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fb5c 	bl	8004388 <wiz_recv_data>
			break;
 8003cd0:	e0d5      	b.n	8003e7e <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	@ (8003d98 <recvfrom+0x274>)
 8003cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d145      	bne.n	8003d6a <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8003cde:	f107 0114 	add.w	r1, r7, #20
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fb4e 	bl	8004388 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003cf8:	2140      	movs	r1, #64	@ 0x40
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f94a 	bl	8003f94 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003d00:	bf00      	nop
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	3301      	adds	r3, #1
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f8f4 	bl	8003efc <WIZCHIP_READ>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f3      	bne.n	8003d02 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003d1a:	7d3a      	ldrb	r2, [r7, #20]
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <recvfrom+0x274>)
 8003d22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	4a1b      	ldr	r2, [pc, #108]	@ (8003d98 <recvfrom+0x274>)
 8003d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	7d7a      	ldrb	r2, [r7, #21]
 8003d34:	4413      	add	r3, r2
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	3a02      	subs	r2, #2
 8003d3c:	b291      	uxth	r1, r2
 8003d3e:	4a16      	ldr	r2, [pc, #88]	@ (8003d98 <recvfrom+0x274>)
 8003d40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <recvfrom+0x274>)
 8003d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d4c:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d906      	bls.n	8003d62 <recvfrom+0x23e>
   			{
   			   close(sn);
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fd42 	bl	80037e0 <close>
   			   return SOCKFATAL_PACKLEN;
 8003d5c:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8003d60:	e0c4      	b.n	8003eec <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	4a0e      	ldr	r2, [pc, #56]	@ (8003da0 <recvfrom+0x27c>)
 8003d66:	2180      	movs	r1, #128	@ 0x80
 8003d68:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <recvfrom+0x274>)
 8003d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d72:	89ba      	ldrh	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d202      	bcs.n	8003d7e <recvfrom+0x25a>
 8003d78:	89bb      	ldrh	r3, [r7, #12]
 8003d7a:	83fb      	strh	r3, [r7, #30]
 8003d7c:	e004      	b.n	8003d88 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	4a05      	ldr	r2, [pc, #20]	@ (8003d98 <recvfrom+0x274>)
 8003d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d86:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003d88:	8bfa      	ldrh	r2, [r7, #30]
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fafa 	bl	8004388 <wiz_recv_data>
		   break;
 8003d94:	e073      	b.n	8003e7e <recvfrom+0x35a>
 8003d96:	bf00      	nop
 8003d98:	20002190 	.word	0x20002190
 8003d9c:	2000218a 	.word	0x2000218a
 8003da0:	200021a0 	.word	0x200021a0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	4a53      	ldr	r2, [pc, #332]	@ (8003ef4 <recvfrom+0x3d0>)
 8003da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d144      	bne.n	8003e3a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8003db0:	f107 0114 	add.w	r1, r7, #20
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2206      	movs	r2, #6
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fae5 	bl	8004388 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003dca:	2140      	movs	r1, #64	@ 0x40
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f8e1 	bl	8003f94 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003dd2:	bf00      	nop
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	3301      	adds	r3, #1
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f88b 	bl	8003efc <WIZCHIP_READ>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f3      	bne.n	8003dd4 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8003dec:	7d3a      	ldrb	r2, [r7, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3301      	adds	r3, #1
 8003df6:	7d7a      	ldrb	r2, [r7, #21]
 8003df8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	7dba      	ldrb	r2, [r7, #22]
 8003e00:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3303      	adds	r3, #3
 8003e06:	7dfa      	ldrb	r2, [r7, #23]
 8003e08:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003e0a:	7e3a      	ldrb	r2, [r7, #24]
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4a38      	ldr	r2, [pc, #224]	@ (8003ef4 <recvfrom+0x3d0>)
 8003e12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	4a36      	ldr	r2, [pc, #216]	@ (8003ef4 <recvfrom+0x3d0>)
 8003e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	7e7b      	ldrb	r3, [r7, #25]
 8003e24:	4619      	mov	r1, r3
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	440a      	add	r2, r1
 8003e2a:	b291      	uxth	r1, r2
 8003e2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ef4 <recvfrom+0x3d0>)
 8003e2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	4a30      	ldr	r2, [pc, #192]	@ (8003ef8 <recvfrom+0x3d4>)
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef4 <recvfrom+0x3d0>)
 8003e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e42:	89ba      	ldrh	r2, [r7, #12]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d202      	bcs.n	8003e4e <recvfrom+0x32a>
 8003e48:	89bb      	ldrh	r3, [r7, #12]
 8003e4a:	83fb      	strh	r3, [r7, #30]
 8003e4c:	e004      	b.n	8003e58 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	4a28      	ldr	r2, [pc, #160]	@ (8003ef4 <recvfrom+0x3d0>)
 8003e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e56:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003e58:	8bfa      	ldrh	r2, [r7, #30]
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fa92 	bl	8004388 <wiz_recv_data>
			break;
 8003e64:	e00b      	b.n	8003e7e <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003e66:	8bfa      	ldrh	r2, [r7, #30]
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fae5 	bl	800443c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	491f      	ldr	r1, [pc, #124]	@ (8003ef4 <recvfrom+0x3d0>)
 8003e76:	8bfa      	ldrh	r2, [r7, #30]
 8003e78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003e7c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	3301      	adds	r3, #1
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e8a:	2140      	movs	r1, #64	@ 0x40
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f881 	bl	8003f94 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8003e92:	bf00      	nop
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	3301      	adds	r3, #1
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f82b 	bl	8003efc <WIZCHIP_READ>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f3      	bne.n	8003e94 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <recvfrom+0x3d0>)
 8003eb0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	8bfa      	ldrh	r2, [r7, #30]
 8003eb8:	1a8a      	subs	r2, r1, r2
 8003eba:	b291      	uxth	r1, r2
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef4 <recvfrom+0x3d0>)
 8003ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef4 <recvfrom+0x3d0>)
 8003ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <recvfrom+0x3d4>)
 8003ed2:	5cd2      	ldrb	r2, [r2, r3]
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	b2d1      	uxtb	r1, r2
 8003edc:	4a06      	ldr	r2, [pc, #24]	@ (8003ef8 <recvfrom+0x3d4>)
 8003ede:	54d1      	strb	r1, [r2, r3]
 8003ee0:	e003      	b.n	8003eea <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <recvfrom+0x3d4>)
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003eea:	8bfb      	ldrh	r3, [r7, #30]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20002190 	.word	0x20002190
 8003ef8:	200021a0 	.word	0x200021a0

08003efc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003f04:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003f0a:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003f10:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <WIZCHIP_READ+0x24>
 8003f18:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d114      	bne.n	8003f4a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003f20:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	0c12      	lsrs	r2, r2, #16
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003f2e:	4b18      	ldr	r3, [pc, #96]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	0a12      	lsrs	r2, r2, #8
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003f3c:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	4610      	mov	r0, r2
 8003f46:	4798      	blx	r3
 8003f48:	e011      	b.n	8003f6e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	f107 020c 	add.w	r2, r7, #12
 8003f68:	2103      	movs	r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003f6e:	4b08      	ldr	r3, [pc, #32]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4798      	blx	r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003f7e:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <WIZCHIP_READ+0x94>)
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	4798      	blx	r3
   return ret;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000048 	.word	0x20000048

08003f94 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003fa0:	4b22      	ldr	r3, [pc, #136]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003fa6:	4b21      	ldr	r3, [pc, #132]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f043 0304 	orr.w	r3, r3, #4
 8003fb2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d119      	bne.n	8003ff0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	0c12      	lsrs	r2, r2, #16
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003fca:	4b18      	ldr	r3, [pc, #96]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	0a12      	lsrs	r2, r2, #8
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003fd8:	4b14      	ldr	r3, [pc, #80]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003fe4:	4b11      	ldr	r3, [pc, #68]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	4610      	mov	r0, r2
 8003fec:	4798      	blx	r3
 8003fee:	e013      	b.n	8004018 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800400a:	4b08      	ldr	r3, [pc, #32]	@ (800402c <WIZCHIP_WRITE+0x98>)
 800400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400e:	f107 020c 	add.w	r2, r7, #12
 8004012:	2104      	movs	r1, #4
 8004014:	4610      	mov	r0, r2
 8004016:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004018:	4b04      	ldr	r3, [pc, #16]	@ (800402c <WIZCHIP_WRITE+0x98>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800401e:	4b03      	ldr	r3, [pc, #12]	@ (800402c <WIZCHIP_WRITE+0x98>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	4798      	blx	r3
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000048 	.word	0x20000048

08004030 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800403e:	4b2b      	ldr	r3, [pc, #172]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004044:	4b29      	ldr	r3, [pc, #164]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800404a:	4b28      	ldr	r3, [pc, #160]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <WIZCHIP_READ_BUF+0x2a>
 8004052:	4b26      	ldr	r3, [pc, #152]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 8004054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d126      	bne.n	80040a8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800405a:	4b24      	ldr	r3, [pc, #144]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	0c12      	lsrs	r2, r2, #16
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	4610      	mov	r0, r2
 8004066:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004068:	4b20      	ldr	r3, [pc, #128]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	0a12      	lsrs	r2, r2, #8
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	4610      	mov	r0, r2
 8004074:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004076:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	4610      	mov	r0, r2
 8004080:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004082:	2300      	movs	r3, #0
 8004084:	82fb      	strh	r3, [r7, #22]
 8004086:	e00a      	b.n	800409e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004088:	4b18      	ldr	r3, [pc, #96]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	8afa      	ldrh	r2, [r7, #22]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	188c      	adds	r4, r1, r2
 8004092:	4798      	blx	r3
 8004094:	4603      	mov	r3, r0
 8004096:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004098:	8afb      	ldrh	r3, [r7, #22]
 800409a:	3301      	adds	r3, #1
 800409c:	82fb      	strh	r3, [r7, #22]
 800409e:	8afa      	ldrh	r2, [r7, #22]
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3f0      	bcc.n	8004088 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80040a6:	e017      	b.n	80040d8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80040be:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	f107 0210 	add.w	r2, r7, #16
 80040c6:	2103      	movs	r1, #3
 80040c8:	4610      	mov	r0, r2
 80040ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80040cc:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	4611      	mov	r1, r2
 80040d4:	68b8      	ldr	r0, [r7, #8]
 80040d6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80040d8:	4b04      	ldr	r3, [pc, #16]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80040de:	4b03      	ldr	r3, [pc, #12]	@ (80040ec <WIZCHIP_READ_BUF+0xbc>)
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	4798      	blx	r3
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	20000048 	.word	0x20000048

080040f0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80040fe:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004104:	4b29      	ldr	r3, [pc, #164]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004112:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d126      	bne.n	8004168 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800411a:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	0c12      	lsrs	r2, r2, #16
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	4610      	mov	r0, r2
 8004126:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004128:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	0a12      	lsrs	r2, r2, #8
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	4610      	mov	r0, r2
 8004134:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004136:	4b1d      	ldr	r3, [pc, #116]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	4610      	mov	r0, r2
 8004140:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004142:	2300      	movs	r3, #0
 8004144:	82fb      	strh	r3, [r7, #22]
 8004146:	e00a      	b.n	800415e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004148:	4b18      	ldr	r3, [pc, #96]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	8afa      	ldrh	r2, [r7, #22]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	440a      	add	r2, r1
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	4610      	mov	r0, r2
 8004156:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004158:	8afb      	ldrh	r3, [r7, #22]
 800415a:	3301      	adds	r3, #1
 800415c:	82fb      	strh	r3, [r7, #22]
 800415e:	8afa      	ldrh	r2, [r7, #22]
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	429a      	cmp	r2, r3
 8004164:	d3f0      	bcc.n	8004148 <WIZCHIP_WRITE_BUF+0x58>
 8004166:	e017      	b.n	8004198 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	0c1b      	lsrs	r3, r3, #16
 800416c:	b2db      	uxtb	r3, r3
 800416e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	b2db      	uxtb	r3, r3
 8004176:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	f107 0210 	add.w	r2, r7, #16
 8004186:	2103      	movs	r1, #3
 8004188:	4610      	mov	r0, r2
 800418a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	4611      	mov	r1, r2
 8004194:	68b8      	ldr	r0, [r7, #8]
 8004196:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004198:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800419e:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <WIZCHIP_WRITE_BUF+0xbc>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	4798      	blx	r3
}
 80041a4:	bf00      	nop
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000048 	.word	0x20000048

080041b0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	81fb      	strh	r3, [r7, #14]
 80041be:	2300      	movs	r3, #0
 80041c0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	3301      	adds	r3, #1
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fe94 	bl	8003efc <WIZCHIP_READ>
 80041d4:	4603      	mov	r3, r0
 80041d6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80041d8:	89bb      	ldrh	r3, [r7, #12]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	b29c      	uxth	r4, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	3301      	adds	r3, #1
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fe86 	bl	8003efc <WIZCHIP_READ>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4423      	add	r3, r4
 80041f4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80041f6:	89bb      	ldrh	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d019      	beq.n	8004230 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	3301      	adds	r3, #1
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fe77 	bl	8003efc <WIZCHIP_READ>
 800420e:	4603      	mov	r3, r0
 8004210:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	b29c      	uxth	r4, r3
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	3301      	adds	r3, #1
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fe69 	bl	8003efc <WIZCHIP_READ>
 800422a:	4603      	mov	r3, r0
 800422c:	4423      	add	r3, r4
 800422e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004230:	89fa      	ldrh	r2, [r7, #14]
 8004232:	89bb      	ldrh	r3, [r7, #12]
 8004234:	429a      	cmp	r2, r3
 8004236:	d1c4      	bne.n	80041c2 <getSn_TX_FSR+0x12>
   return val;
 8004238:	89fb      	ldrh	r3, [r7, #14]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bd90      	pop	{r4, r7, pc}

08004242 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004242:	b590      	push	{r4, r7, lr}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	4603      	mov	r3, r0
 800424a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800424c:	2300      	movs	r3, #0
 800424e:	81fb      	strh	r3, [r7, #14]
 8004250:	2300      	movs	r3, #0
 8004252:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	3301      	adds	r3, #1
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe4b 	bl	8003efc <WIZCHIP_READ>
 8004266:	4603      	mov	r3, r0
 8004268:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800426a:	89bb      	ldrh	r3, [r7, #12]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	b29c      	uxth	r4, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	3301      	adds	r3, #1
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fe3d 	bl	8003efc <WIZCHIP_READ>
 8004282:	4603      	mov	r3, r0
 8004284:	4423      	add	r3, r4
 8004286:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004288:	89bb      	ldrh	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	3301      	adds	r3, #1
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fe2e 	bl	8003efc <WIZCHIP_READ>
 80042a0:	4603      	mov	r3, r0
 80042a2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80042a4:	89fb      	ldrh	r3, [r7, #14]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	b29c      	uxth	r4, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	3301      	adds	r3, #1
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fe20 	bl	8003efc <WIZCHIP_READ>
 80042bc:	4603      	mov	r3, r0
 80042be:	4423      	add	r3, r4
 80042c0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80042c2:	89fa      	ldrh	r2, [r7, #14]
 80042c4:	89bb      	ldrh	r3, [r7, #12]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d1c4      	bne.n	8004254 <getSn_RX_RSR+0x12>
   return val;
 80042ca:	89fb      	ldrh	r3, [r7, #14]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}

080042d4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	71fb      	strb	r3, [r7, #7]
 80042e0:	4613      	mov	r3, r2
 80042e2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80042ec:	88bb      	ldrh	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d046      	beq.n	8004380 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3301      	adds	r3, #1
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fdfc 	bl	8003efc <WIZCHIP_READ>
 8004304:	4603      	mov	r3, r0
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	b29c      	uxth	r4, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	3301      	adds	r3, #1
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fdf0 	bl	8003efc <WIZCHIP_READ>
 800431c:	4603      	mov	r3, r0
 800431e:	4423      	add	r3, r4
 8004320:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	79fa      	ldrb	r2, [r7, #7]
 8004328:	0092      	lsls	r2, r2, #2
 800432a:	3202      	adds	r2, #2
 800432c:	00d2      	lsls	r2, r2, #3
 800432e:	4413      	add	r3, r2
 8004330:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004332:	88bb      	ldrh	r3, [r7, #4]
 8004334:	461a      	mov	r2, r3
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	68b8      	ldr	r0, [r7, #8]
 800433a:	f7ff fed9 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800433e:	89fa      	ldrh	r2, [r7, #14]
 8004340:	88bb      	ldrh	r3, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3301      	adds	r3, #1
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8004352:	461a      	mov	r2, r3
 8004354:	89fb      	ldrh	r3, [r7, #14]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	b29b      	uxth	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7ff fe18 	bl	8003f94 <WIZCHIP_WRITE>
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	3301      	adds	r3, #1
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8004370:	461a      	mov	r2, r3
 8004372:	89fb      	ldrh	r3, [r7, #14]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7ff fe0b 	bl	8003f94 <WIZCHIP_WRITE>
 800437e:	e000      	b.n	8004382 <wiz_send_data+0xae>
   if(len == 0)  return;
 8004380:	bf00      	nop
}
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}

08004388 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	71fb      	strb	r3, [r7, #7]
 8004394:	4613      	mov	r3, r2
 8004396:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80043a0:	88bb      	ldrh	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d046      	beq.n	8004434 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	3301      	adds	r3, #1
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fda2 	bl	8003efc <WIZCHIP_READ>
 80043b8:	4603      	mov	r3, r0
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	b29c      	uxth	r4, r3
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	3301      	adds	r3, #1
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fd96 	bl	8003efc <WIZCHIP_READ>
 80043d0:	4603      	mov	r3, r0
 80043d2:	4423      	add	r3, r4
 80043d4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	79fa      	ldrb	r2, [r7, #7]
 80043dc:	0092      	lsls	r2, r2, #2
 80043de:	3203      	adds	r2, #3
 80043e0:	00d2      	lsls	r2, r2, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80043e6:	88bb      	ldrh	r3, [r7, #4]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6839      	ldr	r1, [r7, #0]
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f7ff fe1f 	bl	8004030 <WIZCHIP_READ_BUF>
   ptr += len;
 80043f2:	89fa      	ldrh	r2, [r7, #14]
 80043f4:	88bb      	ldrh	r3, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	3301      	adds	r3, #1
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004406:	461a      	mov	r2, r3
 8004408:	89fb      	ldrh	r3, [r7, #14]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	b29b      	uxth	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7ff fdbe 	bl	8003f94 <WIZCHIP_WRITE>
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	3301      	adds	r3, #1
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004424:	461a      	mov	r2, r3
 8004426:	89fb      	ldrh	r3, [r7, #14]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f7ff fdb1 	bl	8003f94 <WIZCHIP_WRITE>
 8004432:	e000      	b.n	8004436 <wiz_recv_data+0xae>
   if(len == 0) return;
 8004434:	bf00      	nop
}
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bd90      	pop	{r4, r7, pc}

0800443c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	460a      	mov	r2, r1
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	4613      	mov	r3, r2
 800444a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	3301      	adds	r3, #1
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fd4d 	bl	8003efc <WIZCHIP_READ>
 8004462:	4603      	mov	r3, r0
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	b29c      	uxth	r4, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	3301      	adds	r3, #1
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fd41 	bl	8003efc <WIZCHIP_READ>
 800447a:	4603      	mov	r3, r0
 800447c:	4423      	add	r3, r4
 800447e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004480:	89fa      	ldrh	r2, [r7, #14]
 8004482:	88bb      	ldrh	r3, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	3301      	adds	r3, #1
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004494:	461a      	mov	r2, r3
 8004496:	89fb      	ldrh	r3, [r7, #14]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	b29b      	uxth	r3, r3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f7ff fd77 	bl	8003f94 <WIZCHIP_WRITE>
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	3301      	adds	r3, #1
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80044b2:	461a      	mov	r2, r3
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f7ff fd6a 	bl	8003f94 <WIZCHIP_WRITE>
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd90      	pop	{r4, r7, pc}

080044c8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
 80044da:	bf00      	nop
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	70fb      	strb	r3, [r7, #3]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
 800453c:	2300      	movs	r3, #0
 800453e:	4618      	mov	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	71fb      	strb	r3, [r7, #7]
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	807b      	strh	r3, [r7, #2]
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <reg_wizchip_cs_cbfunc+0x16>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80045a6:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <reg_wizchip_cs_cbfunc+0x40>)
 80045a8:	4a0a      	ldr	r2, [pc, #40]	@ (80045d4 <reg_wizchip_cs_cbfunc+0x44>)
 80045aa:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80045ac:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <reg_wizchip_cs_cbfunc+0x40>)
 80045ae:	4a0a      	ldr	r2, [pc, #40]	@ (80045d8 <reg_wizchip_cs_cbfunc+0x48>)
 80045b0:	619a      	str	r2, [r3, #24]
 80045b2:	e006      	b.n	80045c2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80045b4:	4a06      	ldr	r2, [pc, #24]	@ (80045d0 <reg_wizchip_cs_cbfunc+0x40>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80045ba:	4a05      	ldr	r2, [pc, #20]	@ (80045d0 <reg_wizchip_cs_cbfunc+0x40>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6193      	str	r3, [r2, #24]
   }
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000048 	.word	0x20000048
 80045d4:	080044e5 	.word	0x080044e5
 80045d8:	080044f3 	.word	0x080044f3

080045dc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80045e6:	bf00      	nop
 80045e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <reg_wizchip_spi_cbfunc+0x4c>)
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f9      	beq.n	80045e8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <reg_wizchip_spi_cbfunc+0x24>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <reg_wizchip_spi_cbfunc+0x4c>)
 8004602:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <reg_wizchip_spi_cbfunc+0x50>)
 8004604:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004606:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <reg_wizchip_spi_cbfunc+0x4c>)
 8004608:	4a09      	ldr	r2, [pc, #36]	@ (8004630 <reg_wizchip_spi_cbfunc+0x54>)
 800460a:	621a      	str	r2, [r3, #32]
 800460c:	e006      	b.n	800461c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800460e:	4a06      	ldr	r2, [pc, #24]	@ (8004628 <reg_wizchip_spi_cbfunc+0x4c>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004614:	4a04      	ldr	r2, [pc, #16]	@ (8004628 <reg_wizchip_spi_cbfunc+0x4c>)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6213      	str	r3, [r2, #32]
   }
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	20000048 	.word	0x20000048
 800462c:	08004539 	.word	0x08004539
 8004630:	08004549 	.word	0x08004549

08004634 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800463e:	bf00      	nop
 8004640:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f9      	beq.n	8004640 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <reg_wizchip_spiburst_cbfunc+0x24>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004658:	4b09      	ldr	r3, [pc, #36]	@ (8004680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800465a:	4a0a      	ldr	r2, [pc, #40]	@ (8004684 <reg_wizchip_spiburst_cbfunc+0x50>)
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004660:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004662:	629a      	str	r2, [r3, #40]	@ 0x28
 8004664:	e006      	b.n	8004674 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004666:	4a06      	ldr	r2, [pc, #24]	@ (8004680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800466c:	4a04      	ldr	r2, [pc, #16]	@ (8004680 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000048 	.word	0x20000048
 8004684:	0800455f 	.word	0x0800455f
 8004688:	08004577 	.word	0x08004577

0800468c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	2b0f      	cmp	r3, #15
 80046a8:	f200 80c5 	bhi.w	8004836 <ctlwizchip+0x1aa>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <ctlwizchip+0x28>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046fb 	.word	0x080046fb
 80046bc:	08004727 	.word	0x08004727
 80046c0:	0800471b 	.word	0x0800471b
 80046c4:	08004735 	.word	0x08004735
 80046c8:	08004741 	.word	0x08004741
 80046cc:	0800474f 	.word	0x0800474f
 80046d0:	08004775 	.word	0x08004775
 80046d4:	08004797 	.word	0x08004797
 80046d8:	080047db 	.word	0x080047db
 80046dc:	080047e1 	.word	0x080047e1
 80046e0:	080047e9 	.word	0x080047e9
 80046e4:	0800483d 	.word	0x0800483d
 80046e8:	080047f1 	.word	0x080047f1
 80046ec:	080047ff 	.word	0x080047ff
 80046f0:	0800481b 	.word	0x0800481b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80046f4:	f000 f8aa 	bl	800484c <wizchip_sw_reset>
         break;
 80046f8:	e0a1      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3308      	adds	r3, #8
 8004708:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4611      	mov	r1, r2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f8e7 	bl	80048e4 <wizchip_init>
 8004716:	4603      	mov	r3, r0
 8004718:	e092      	b.n	8004840 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f96c 	bl	80049fc <wizchip_clrinterrupt>
         break;
 8004724:	e08b      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004726:	f000 f99d 	bl	8004a64 <wizchip_getinterrupt>
 800472a:	4603      	mov	r3, r0
 800472c:	461a      	mov	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	801a      	strh	r2, [r3, #0]
         break;
 8004732:	e084      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f9b8 	bl	8004aae <wizchip_setinterruptmask>
         break;         
 800473e:	e07e      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004740:	f000 f9d0 	bl	8004ae4 <wizchip_getinterruptmask>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	801a      	strh	r2, [r3, #0]
         break;
 800474c:	e077      	b.n	800483e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	b29b      	uxth	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4619      	mov	r1, r3
 800475a:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800475e:	f7ff fc19 	bl	8003f94 <WIZCHIP_WRITE>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4619      	mov	r1, r3
 800476a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800476e:	f7ff fc11 	bl	8003f94 <WIZCHIP_WRITE>
         break;
 8004772:	e064      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8004774:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8004778:	f7ff fbc0 	bl	8003efc <WIZCHIP_READ>
 800477c:	4603      	mov	r3, r0
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	b29c      	uxth	r4, r3
 8004782:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8004786:	f7ff fbb9 	bl	8003efc <WIZCHIP_READ>
 800478a:	4603      	mov	r3, r0
 800478c:	4423      	add	r3, r4
 800478e:	b29a      	uxth	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	801a      	strh	r2, [r3, #0]
         break;
 8004794:	e053      	b.n	800483e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004796:	4b2c      	ldr	r3, [pc, #176]	@ (8004848 <ctlwizchip+0x1bc>)
 8004798:	789a      	ldrb	r2, [r3, #2]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	4a29      	ldr	r2, [pc, #164]	@ (8004848 <ctlwizchip+0x1bc>)
 80047a4:	78d2      	ldrb	r2, [r2, #3]
 80047a6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3302      	adds	r3, #2
 80047ac:	4a26      	ldr	r2, [pc, #152]	@ (8004848 <ctlwizchip+0x1bc>)
 80047ae:	7912      	ldrb	r2, [r2, #4]
 80047b0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	3303      	adds	r3, #3
 80047b6:	4a24      	ldr	r2, [pc, #144]	@ (8004848 <ctlwizchip+0x1bc>)
 80047b8:	7952      	ldrb	r2, [r2, #5]
 80047ba:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	3304      	adds	r3, #4
 80047c0:	4a21      	ldr	r2, [pc, #132]	@ (8004848 <ctlwizchip+0x1bc>)
 80047c2:	7992      	ldrb	r2, [r2, #6]
 80047c4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	3305      	adds	r3, #5
 80047ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004848 <ctlwizchip+0x1bc>)
 80047cc:	79d2      	ldrb	r2, [r2, #7]
 80047ce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	3306      	adds	r3, #6
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
         break;
 80047d8:	e031      	b.n	800483e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80047da:	f000 f9d5 	bl	8004b88 <wizphy_reset>
         break;
 80047de:	e02e      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80047e0:	6838      	ldr	r0, [r7, #0]
 80047e2:	f000 f9f8 	bl	8004bd6 <wizphy_setphyconf>
         break;
 80047e6:	e02a      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80047e8:	6838      	ldr	r0, [r7, #0]
 80047ea:	f000 fa37 	bl	8004c5c <wizphy_getphyconf>
         break;
 80047ee:	e026      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fa9b 	bl	8004d30 <wizphy_setphypmode>
 80047fa:	4603      	mov	r3, r0
 80047fc:	e020      	b.n	8004840 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80047fe:	f000 f9aa 	bl	8004b56 <wizphy_getphypmode>
 8004802:	4603      	mov	r3, r0
 8004804:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2bff      	cmp	r3, #255	@ 0xff
 800480a:	d102      	bne.n	8004812 <ctlwizchip+0x186>
 800480c:	f04f 33ff 	mov.w	r3, #4294967295
 8004810:	e016      	b.n	8004840 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	7dfa      	ldrb	r2, [r7, #23]
 8004816:	701a      	strb	r2, [r3, #0]
         break;
 8004818:	e011      	b.n	800483e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800481a:	f000 f986 	bl	8004b2a <wizphy_getphylink>
 800481e:	4603      	mov	r3, r0
 8004820:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	2bff      	cmp	r3, #255	@ 0xff
 8004826:	d102      	bne.n	800482e <ctlwizchip+0x1a2>
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
 800482c:	e008      	b.n	8004840 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	7dfa      	ldrb	r2, [r7, #23]
 8004832:	701a      	strb	r2, [r3, #0]
         break;
 8004834:	e003      	b.n	800483e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8004836:	f04f 33ff 	mov.w	r3, #4294967295
 800483a:	e001      	b.n	8004840 <ctlwizchip+0x1b4>
         break;
 800483c:	bf00      	nop
   }
   return 0;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}
 8004848:	20000048 	.word	0x20000048

0800484c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	2206      	movs	r2, #6
 8004856:	4619      	mov	r1, r3
 8004858:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800485c:	f7ff fbe8 	bl	8004030 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	2204      	movs	r2, #4
 8004866:	4619      	mov	r1, r3
 8004868:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800486c:	f7ff fbe0 	bl	8004030 <WIZCHIP_READ_BUF>
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	2204      	movs	r2, #4
 8004876:	4619      	mov	r1, r3
 8004878:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800487c:	f7ff fbd8 	bl	8004030 <WIZCHIP_READ_BUF>
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	2204      	movs	r2, #4
 8004886:	4619      	mov	r1, r3
 8004888:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800488c:	f7ff fbd0 	bl	8004030 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004890:	2180      	movs	r1, #128	@ 0x80
 8004892:	2000      	movs	r0, #0
 8004894:	f7ff fb7e 	bl	8003f94 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004898:	2000      	movs	r0, #0
 800489a:	f7ff fb2f 	bl	8003efc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800489e:	1d3b      	adds	r3, r7, #4
 80048a0:	2206      	movs	r2, #6
 80048a2:	4619      	mov	r1, r3
 80048a4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80048a8:	f7ff fc22 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	2204      	movs	r2, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80048b8:	f7ff fc1a 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	2204      	movs	r2, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80048c8:	f7ff fc12 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80048cc:	f107 030c 	add.w	r3, r7, #12
 80048d0:	2204      	movs	r2, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80048d8:	f7ff fc0a 	bl	80040f0 <WIZCHIP_WRITE_BUF>
}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80048f2:	f7ff ffab 	bl	800484c <wizchip_sw_reset>
   if(txsize)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d03b      	beq.n	8004974 <wizchip_init+0x90>
   {
      tmp = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	e015      	b.n	8004932 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	7bbb      	ldrb	r3, [r7, #14]
 8004912:	4413      	add	r3, r2
 8004914:	b2db      	uxtb	r3, r3
 8004916:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800491c:	2b10      	cmp	r3, #16
 800491e:	dd02      	ble.n	8004926 <wizchip_init+0x42>
 8004920:	f04f 33ff 	mov.w	r3, #4294967295
 8004924:	e066      	b.n	80049f4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	3301      	adds	r3, #1
 800492e:	b2db      	uxtb	r3, r3
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	2b07      	cmp	r3, #7
 8004938:	dde5      	ble.n	8004906 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	e015      	b.n	800496c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	3301      	adds	r3, #1
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800494e:	4618      	mov	r0, r3
 8004950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4413      	add	r3, r2
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	f7ff fb1a 	bl	8003f94 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	3301      	adds	r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004970:	2b07      	cmp	r3, #7
 8004972:	dde5      	ble.n	8004940 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03b      	beq.n	80049f2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e015      	b.n	80049b0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	4413      	add	r3, r2
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	7bbb      	ldrb	r3, [r7, #14]
 8004990:	4413      	add	r3, r2
 8004992:	b2db      	uxtb	r3, r3
 8004994:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800499a:	2b10      	cmp	r3, #16
 800499c:	dd02      	ble.n	80049a4 <wizchip_init+0xc0>
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	e027      	b.n	80049f4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	3301      	adds	r3, #1
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	dde5      	ble.n	8004984 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]
 80049bc:	e015      	b.n	80049ea <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80049be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	3301      	adds	r3, #1
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80049cc:	4618      	mov	r0, r3
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	4413      	add	r3, r2
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	4619      	mov	r1, r3
 80049da:	f7ff fadb 	bl	8003f94 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ee:	2b07      	cmp	r3, #7
 80049f0:	dde5      	ble.n	80049be <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	f023 030f 	bic.w	r3, r3, #15
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004a20:	f7ff fab8 	bl	8003f94 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	e014      	b.n	8004a54 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004a2a:	7bba      	ldrb	r2, [r7, #14]
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	fa42 f303 	asr.w	r3, r2, r3
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <wizchip_clrinterrupt+0x52>
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	3301      	adds	r3, #1
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a46:	211f      	movs	r1, #31
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff faa3 	bl	8003f94 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	3301      	adds	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d9e7      	bls.n	8004a2a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8004a76:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004a7a:	f7ff fa3f 	bl	8003efc <WIZCHIP_READ>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f023 030f 	bic.w	r3, r3, #15
 8004a84:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8004a86:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8004a8a:	f7ff fa37 	bl	8003efc <WIZCHIP_READ>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8004a92:	79bb      	ldrb	r3, [r7, #6]
 8004a94:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8004a96:	88bb      	ldrh	r3, [r7, #4]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004aa4:	88bb      	ldrh	r3, [r7, #4]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004acc:	f7ff fa62 	bl	8003f94 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004ad0:	7bbb      	ldrb	r3, [r7, #14]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004ad8:	f7ff fa5c 	bl	8003f94 <WIZCHIP_WRITE>
#endif   
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004af6:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004afa:	f7ff f9ff 	bl	8003efc <WIZCHIP_READ>
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8004b02:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004b06:	f7ff f9f9 	bl	8003efc <WIZCHIP_READ>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004b0e:	79bb      	ldrb	r3, [r7, #6]
 8004b10:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004b12:	88bb      	ldrh	r3, [r7, #4]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004b20:	88bb      	ldrh	r3, [r7, #4]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004b30:	2300      	movs	r3, #0
 8004b32:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004b34:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b38:	f7ff f9e0 	bl	8003efc <WIZCHIP_READ>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8004b46:	2301      	movs	r3, #1
 8004b48:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004b60:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b64:	f7ff f9ca 	bl	8003efc <WIZCHIP_READ>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b6e:	2b30      	cmp	r3, #48	@ 0x30
 8004b70:	d102      	bne.n	8004b78 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004b72:	2301      	movs	r3, #1
 8004b74:	71fb      	strb	r3, [r7, #7]
 8004b76:	e001      	b.n	8004b7c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004b8e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b92:	f7ff f9b3 	bl	8003efc <WIZCHIP_READ>
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004baa:	f7ff f9f3 	bl	8003f94 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004bae:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004bb2:	f7ff f9a3 	bl	8003efc <WIZCHIP_READ>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bc0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004bca:	f7ff f9e3 	bl	8003f94 <WIZCHIP_WRITE>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d104      	bne.n	8004bf4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf0:	73fb      	strb	r3, [r7, #15]
 8004bf2:	e003      	b.n	8004bfc <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bfa:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d104      	bne.n	8004c0e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004c0a:	73fb      	strb	r3, [r7, #15]
 8004c0c:	e019      	b.n	8004c42 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	78db      	ldrb	r3, [r3, #3]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10d      	bne.n	8004c32 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	789b      	ldrb	r3, [r3, #2]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d104      	bne.n	8004c28 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	f043 0318 	orr.w	r3, r3, #24
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	e00c      	b.n	8004c42 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	f043 0308 	orr.w	r3, r3, #8
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	e007      	b.n	8004c42 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	789b      	ldrb	r3, [r3, #2]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d103      	bne.n	8004c42 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	f043 0310 	orr.w	r3, r3, #16
 8004c40:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	4619      	mov	r1, r3
 8004c46:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004c4a:	f7ff f9a3 	bl	8003f94 <WIZCHIP_WRITE>
   wizphy_reset();
 8004c4e:	f7ff ff9b 	bl	8004b88 <wizphy_reset>
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004c68:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004c6c:	f7ff f946 	bl	8003efc <WIZCHIP_READ>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	119b      	asrs	r3, r3, #6
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d001      	beq.n	8004c92 <wizphy_getphyconf+0x36>
 8004c8e:	2b38      	cmp	r3, #56	@ 0x38
 8004c90:	d103      	bne.n	8004c9a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	705a      	strb	r2, [r3, #1]
         break;
 8004c98:	e003      	b.n	8004ca2 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	705a      	strb	r2, [r3, #1]
         break;
 8004ca0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca8:	3b10      	subs	r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	bf8c      	ite	hi
 8004cae:	2201      	movhi	r2, #1
 8004cb0:	2200      	movls	r2, #0
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	d10f      	bne.n	8004cd8 <wizphy_getphyconf+0x7c>
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d28 <wizphy_getphyconf+0xcc>)
 8004cba:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	709a      	strb	r2, [r3, #2]
         break;
 8004cd6:	e003      	b.n	8004ce0 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	709a      	strb	r2, [r3, #2]
         break;
 8004cde:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ce6:	3b08      	subs	r3, #8
 8004ce8:	2b18      	cmp	r3, #24
 8004cea:	bf8c      	ite	hi
 8004cec:	2201      	movhi	r2, #1
 8004cee:	2200      	movls	r2, #0
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d10f      	bne.n	8004d16 <wizphy_getphyconf+0xba>
 8004cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8004d2c <wizphy_getphyconf+0xd0>)
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	70da      	strb	r2, [r3, #3]
         break;
 8004d14:	e003      	b.n	8004d1e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	70da      	strb	r2, [r3, #3]
         break;
 8004d1c:	bf00      	nop
   }
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00010101 	.word	0x00010101
 8004d2c:	01010001 	.word	0x01010001

08004d30 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004d3e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d42:	f7ff f8db 	bl	8003efc <WIZCHIP_READ>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <wizphy_setphypmode+0x2a>
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295
 8004d58:	e030      	b.n	8004dbc <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004d60:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d104      	bne.n	8004d72 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	e003      	b.n	8004d7a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004d78:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d82:	f7ff f907 	bl	8003f94 <WIZCHIP_WRITE>
   wizphy_reset();
 8004d86:	f7ff feff 	bl	8004b88 <wizphy_reset>
   tmp = getPHYCFGR();
 8004d8a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d8e:	f7ff f8b5 	bl	8003efc <WIZCHIP_READ>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d106      	bne.n	8004daa <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <wizphy_setphypmode+0x88>
 8004da6:	2300      	movs	r3, #0
 8004da8:	e008      	b.n	8004dbc <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <wizphy_setphypmode+0x88>
 8004db4:	2300      	movs	r3, #0
 8004db6:	e001      	b.n	8004dbc <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2206      	movs	r2, #6
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004dd6:	f7ff f98b 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	330e      	adds	r3, #14
 8004dde:	2204      	movs	r2, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004de6:	f7ff f983 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	330a      	adds	r3, #10
 8004dee:	2204      	movs	r2, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004df6:	f7ff f97b 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3306      	adds	r3, #6
 8004dfe:	2204      	movs	r2, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004e06:	f7ff f973 	bl	80040f0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7c9a      	ldrb	r2, [r3, #18]
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <wizchip_setnetinfo+0x78>)
 8004e10:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7cda      	ldrb	r2, [r3, #19]
 8004e16:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <wizchip_setnetinfo+0x78>)
 8004e18:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7d1a      	ldrb	r2, [r3, #20]
 8004e1e:	4b07      	ldr	r3, [pc, #28]	@ (8004e3c <wizchip_setnetinfo+0x78>)
 8004e20:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7d5a      	ldrb	r2, [r3, #21]
 8004e26:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <wizchip_setnetinfo+0x78>)
 8004e28:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7d9a      	ldrb	r2, [r3, #22]
 8004e2e:	4b04      	ldr	r3, [pc, #16]	@ (8004e40 <wizchip_setnetinfo+0x7c>)
 8004e30:	701a      	strb	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200021a8 	.word	0x200021a8
 8004e40:	200021ac 	.word	0x200021ac

08004e44 <sbrk_aligned>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4e0f      	ldr	r6, [pc, #60]	@ (8004e84 <sbrk_aligned+0x40>)
 8004e48:	460c      	mov	r4, r1
 8004e4a:	6831      	ldr	r1, [r6, #0]
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	b911      	cbnz	r1, 8004e56 <sbrk_aligned+0x12>
 8004e50:	f000 fb2c 	bl	80054ac <_sbrk_r>
 8004e54:	6030      	str	r0, [r6, #0]
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 fb27 	bl	80054ac <_sbrk_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d103      	bne.n	8004e6a <sbrk_aligned+0x26>
 8004e62:	f04f 34ff 	mov.w	r4, #4294967295
 8004e66:	4620      	mov	r0, r4
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	1cc4      	adds	r4, r0, #3
 8004e6c:	f024 0403 	bic.w	r4, r4, #3
 8004e70:	42a0      	cmp	r0, r4
 8004e72:	d0f8      	beq.n	8004e66 <sbrk_aligned+0x22>
 8004e74:	1a21      	subs	r1, r4, r0
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 fb18 	bl	80054ac <_sbrk_r>
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d1f2      	bne.n	8004e66 <sbrk_aligned+0x22>
 8004e80:	e7ef      	b.n	8004e62 <sbrk_aligned+0x1e>
 8004e82:	bf00      	nop
 8004e84:	200021b0 	.word	0x200021b0

08004e88 <_malloc_r>:
 8004e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e8c:	1ccd      	adds	r5, r1, #3
 8004e8e:	f025 0503 	bic.w	r5, r5, #3
 8004e92:	3508      	adds	r5, #8
 8004e94:	2d0c      	cmp	r5, #12
 8004e96:	bf38      	it	cc
 8004e98:	250c      	movcc	r5, #12
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	db01      	blt.n	8004ea4 <_malloc_r+0x1c>
 8004ea0:	42a9      	cmp	r1, r5
 8004ea2:	d904      	bls.n	8004eae <_malloc_r+0x26>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f84 <_malloc_r+0xfc>
 8004eb2:	f000 f869 	bl	8004f88 <__malloc_lock>
 8004eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eba:	461c      	mov	r4, r3
 8004ebc:	bb44      	cbnz	r4, 8004f10 <_malloc_r+0x88>
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f7ff ffbf 	bl	8004e44 <sbrk_aligned>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	4604      	mov	r4, r0
 8004eca:	d158      	bne.n	8004f7e <_malloc_r+0xf6>
 8004ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ed0:	4627      	mov	r7, r4
 8004ed2:	2f00      	cmp	r7, #0
 8004ed4:	d143      	bne.n	8004f5e <_malloc_r+0xd6>
 8004ed6:	2c00      	cmp	r4, #0
 8004ed8:	d04b      	beq.n	8004f72 <_malloc_r+0xea>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4639      	mov	r1, r7
 8004ede:	4630      	mov	r0, r6
 8004ee0:	eb04 0903 	add.w	r9, r4, r3
 8004ee4:	f000 fae2 	bl	80054ac <_sbrk_r>
 8004ee8:	4581      	cmp	r9, r0
 8004eea:	d142      	bne.n	8004f72 <_malloc_r+0xea>
 8004eec:	6821      	ldr	r1, [r4, #0]
 8004eee:	1a6d      	subs	r5, r5, r1
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7ff ffa6 	bl	8004e44 <sbrk_aligned>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d03a      	beq.n	8004f72 <_malloc_r+0xea>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	442b      	add	r3, r5
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	f8d8 3000 	ldr.w	r3, [r8]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	bb62      	cbnz	r2, 8004f64 <_malloc_r+0xdc>
 8004f0a:	f8c8 7000 	str.w	r7, [r8]
 8004f0e:	e00f      	b.n	8004f30 <_malloc_r+0xa8>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	1b52      	subs	r2, r2, r5
 8004f14:	d420      	bmi.n	8004f58 <_malloc_r+0xd0>
 8004f16:	2a0b      	cmp	r2, #11
 8004f18:	d917      	bls.n	8004f4a <_malloc_r+0xc2>
 8004f1a:	1961      	adds	r1, r4, r5
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	6025      	str	r5, [r4, #0]
 8004f20:	bf18      	it	ne
 8004f22:	6059      	strne	r1, [r3, #4]
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	bf08      	it	eq
 8004f28:	f8c8 1000 	streq.w	r1, [r8]
 8004f2c:	5162      	str	r2, [r4, r5]
 8004f2e:	604b      	str	r3, [r1, #4]
 8004f30:	4630      	mov	r0, r6
 8004f32:	f000 f82f 	bl	8004f94 <__malloc_unlock>
 8004f36:	f104 000b 	add.w	r0, r4, #11
 8004f3a:	1d23      	adds	r3, r4, #4
 8004f3c:	f020 0007 	bic.w	r0, r0, #7
 8004f40:	1ac2      	subs	r2, r0, r3
 8004f42:	bf1c      	itt	ne
 8004f44:	1a1b      	subne	r3, r3, r0
 8004f46:	50a3      	strne	r3, [r4, r2]
 8004f48:	e7af      	b.n	8004eaa <_malloc_r+0x22>
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	bf0c      	ite	eq
 8004f50:	f8c8 2000 	streq.w	r2, [r8]
 8004f54:	605a      	strne	r2, [r3, #4]
 8004f56:	e7eb      	b.n	8004f30 <_malloc_r+0xa8>
 8004f58:	4623      	mov	r3, r4
 8004f5a:	6864      	ldr	r4, [r4, #4]
 8004f5c:	e7ae      	b.n	8004ebc <_malloc_r+0x34>
 8004f5e:	463c      	mov	r4, r7
 8004f60:	687f      	ldr	r7, [r7, #4]
 8004f62:	e7b6      	b.n	8004ed2 <_malloc_r+0x4a>
 8004f64:	461a      	mov	r2, r3
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d1fb      	bne.n	8004f64 <_malloc_r+0xdc>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6053      	str	r3, [r2, #4]
 8004f70:	e7de      	b.n	8004f30 <_malloc_r+0xa8>
 8004f72:	230c      	movs	r3, #12
 8004f74:	6033      	str	r3, [r6, #0]
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 f80c 	bl	8004f94 <__malloc_unlock>
 8004f7c:	e794      	b.n	8004ea8 <_malloc_r+0x20>
 8004f7e:	6005      	str	r5, [r0, #0]
 8004f80:	e7d6      	b.n	8004f30 <_malloc_r+0xa8>
 8004f82:	bf00      	nop
 8004f84:	200021b4 	.word	0x200021b4

08004f88 <__malloc_lock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	@ (8004f90 <__malloc_lock+0x8>)
 8004f8a:	f000 badc 	b.w	8005546 <__retarget_lock_acquire_recursive>
 8004f8e:	bf00      	nop
 8004f90:	200022f8 	.word	0x200022f8

08004f94 <__malloc_unlock>:
 8004f94:	4801      	ldr	r0, [pc, #4]	@ (8004f9c <__malloc_unlock+0x8>)
 8004f96:	f000 bad7 	b.w	8005548 <__retarget_lock_release_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	200022f8 	.word	0x200022f8

08004fa0 <std>:
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8004faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fae:	6083      	str	r3, [r0, #8]
 8004fb0:	8181      	strh	r1, [r0, #12]
 8004fb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fb4:	81c2      	strh	r2, [r0, #14]
 8004fb6:	6183      	str	r3, [r0, #24]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	2208      	movs	r2, #8
 8004fbc:	305c      	adds	r0, #92	@ 0x5c
 8004fbe:	f000 fa19 	bl	80053f4 <memset>
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <std+0x58>)
 8004fc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <std+0x5c>)
 8004fc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <std+0x60>)
 8004fcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <std+0x64>)
 8004fd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <std+0x68>)
 8004fd4:	6224      	str	r4, [r4, #32]
 8004fd6:	429c      	cmp	r4, r3
 8004fd8:	d006      	beq.n	8004fe8 <std+0x48>
 8004fda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004fde:	4294      	cmp	r4, r2
 8004fe0:	d002      	beq.n	8004fe8 <std+0x48>
 8004fe2:	33d0      	adds	r3, #208	@ 0xd0
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	d105      	bne.n	8004ff4 <std+0x54>
 8004fe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff0:	f000 baa8 	b.w	8005544 <__retarget_lock_init_recursive>
 8004ff4:	bd10      	pop	{r4, pc}
 8004ff6:	bf00      	nop
 8004ff8:	08005245 	.word	0x08005245
 8004ffc:	08005267 	.word	0x08005267
 8005000:	0800529f 	.word	0x0800529f
 8005004:	080052c3 	.word	0x080052c3
 8005008:	200021b8 	.word	0x200021b8

0800500c <stdio_exit_handler>:
 800500c:	4a02      	ldr	r2, [pc, #8]	@ (8005018 <stdio_exit_handler+0xc>)
 800500e:	4903      	ldr	r1, [pc, #12]	@ (800501c <stdio_exit_handler+0x10>)
 8005010:	4803      	ldr	r0, [pc, #12]	@ (8005020 <stdio_exit_handler+0x14>)
 8005012:	f000 b869 	b.w	80050e8 <_fwalk_sglue>
 8005016:	bf00      	nop
 8005018:	20000074 	.word	0x20000074
 800501c:	08005f65 	.word	0x08005f65
 8005020:	20000084 	.word	0x20000084

08005024 <cleanup_stdio>:
 8005024:	6841      	ldr	r1, [r0, #4]
 8005026:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <cleanup_stdio+0x34>)
 8005028:	4299      	cmp	r1, r3
 800502a:	b510      	push	{r4, lr}
 800502c:	4604      	mov	r4, r0
 800502e:	d001      	beq.n	8005034 <cleanup_stdio+0x10>
 8005030:	f000 ff98 	bl	8005f64 <_fflush_r>
 8005034:	68a1      	ldr	r1, [r4, #8]
 8005036:	4b09      	ldr	r3, [pc, #36]	@ (800505c <cleanup_stdio+0x38>)
 8005038:	4299      	cmp	r1, r3
 800503a:	d002      	beq.n	8005042 <cleanup_stdio+0x1e>
 800503c:	4620      	mov	r0, r4
 800503e:	f000 ff91 	bl	8005f64 <_fflush_r>
 8005042:	68e1      	ldr	r1, [r4, #12]
 8005044:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <cleanup_stdio+0x3c>)
 8005046:	4299      	cmp	r1, r3
 8005048:	d004      	beq.n	8005054 <cleanup_stdio+0x30>
 800504a:	4620      	mov	r0, r4
 800504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005050:	f000 bf88 	b.w	8005f64 <_fflush_r>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	bf00      	nop
 8005058:	200021b8 	.word	0x200021b8
 800505c:	20002220 	.word	0x20002220
 8005060:	20002288 	.word	0x20002288

08005064 <global_stdio_init.part.0>:
 8005064:	b510      	push	{r4, lr}
 8005066:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <global_stdio_init.part.0+0x30>)
 8005068:	4c0b      	ldr	r4, [pc, #44]	@ (8005098 <global_stdio_init.part.0+0x34>)
 800506a:	4a0c      	ldr	r2, [pc, #48]	@ (800509c <global_stdio_init.part.0+0x38>)
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4620      	mov	r0, r4
 8005070:	2200      	movs	r2, #0
 8005072:	2104      	movs	r1, #4
 8005074:	f7ff ff94 	bl	8004fa0 <std>
 8005078:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800507c:	2201      	movs	r2, #1
 800507e:	2109      	movs	r1, #9
 8005080:	f7ff ff8e 	bl	8004fa0 <std>
 8005084:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005088:	2202      	movs	r2, #2
 800508a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800508e:	2112      	movs	r1, #18
 8005090:	f7ff bf86 	b.w	8004fa0 <std>
 8005094:	200022f0 	.word	0x200022f0
 8005098:	200021b8 	.word	0x200021b8
 800509c:	0800500d 	.word	0x0800500d

080050a0 <__sfp_lock_acquire>:
 80050a0:	4801      	ldr	r0, [pc, #4]	@ (80050a8 <__sfp_lock_acquire+0x8>)
 80050a2:	f000 ba50 	b.w	8005546 <__retarget_lock_acquire_recursive>
 80050a6:	bf00      	nop
 80050a8:	200022f9 	.word	0x200022f9

080050ac <__sfp_lock_release>:
 80050ac:	4801      	ldr	r0, [pc, #4]	@ (80050b4 <__sfp_lock_release+0x8>)
 80050ae:	f000 ba4b 	b.w	8005548 <__retarget_lock_release_recursive>
 80050b2:	bf00      	nop
 80050b4:	200022f9 	.word	0x200022f9

080050b8 <__sinit>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	4604      	mov	r4, r0
 80050bc:	f7ff fff0 	bl	80050a0 <__sfp_lock_acquire>
 80050c0:	6a23      	ldr	r3, [r4, #32]
 80050c2:	b11b      	cbz	r3, 80050cc <__sinit+0x14>
 80050c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c8:	f7ff bff0 	b.w	80050ac <__sfp_lock_release>
 80050cc:	4b04      	ldr	r3, [pc, #16]	@ (80050e0 <__sinit+0x28>)
 80050ce:	6223      	str	r3, [r4, #32]
 80050d0:	4b04      	ldr	r3, [pc, #16]	@ (80050e4 <__sinit+0x2c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f5      	bne.n	80050c4 <__sinit+0xc>
 80050d8:	f7ff ffc4 	bl	8005064 <global_stdio_init.part.0>
 80050dc:	e7f2      	b.n	80050c4 <__sinit+0xc>
 80050de:	bf00      	nop
 80050e0:	08005025 	.word	0x08005025
 80050e4:	200022f0 	.word	0x200022f0

080050e8 <_fwalk_sglue>:
 80050e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ec:	4607      	mov	r7, r0
 80050ee:	4688      	mov	r8, r1
 80050f0:	4614      	mov	r4, r2
 80050f2:	2600      	movs	r6, #0
 80050f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050f8:	f1b9 0901 	subs.w	r9, r9, #1
 80050fc:	d505      	bpl.n	800510a <_fwalk_sglue+0x22>
 80050fe:	6824      	ldr	r4, [r4, #0]
 8005100:	2c00      	cmp	r4, #0
 8005102:	d1f7      	bne.n	80050f4 <_fwalk_sglue+0xc>
 8005104:	4630      	mov	r0, r6
 8005106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800510a:	89ab      	ldrh	r3, [r5, #12]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d907      	bls.n	8005120 <_fwalk_sglue+0x38>
 8005110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005114:	3301      	adds	r3, #1
 8005116:	d003      	beq.n	8005120 <_fwalk_sglue+0x38>
 8005118:	4629      	mov	r1, r5
 800511a:	4638      	mov	r0, r7
 800511c:	47c0      	blx	r8
 800511e:	4306      	orrs	r6, r0
 8005120:	3568      	adds	r5, #104	@ 0x68
 8005122:	e7e9      	b.n	80050f8 <_fwalk_sglue+0x10>

08005124 <iprintf>:
 8005124:	b40f      	push	{r0, r1, r2, r3}
 8005126:	b507      	push	{r0, r1, r2, lr}
 8005128:	4906      	ldr	r1, [pc, #24]	@ (8005144 <iprintf+0x20>)
 800512a:	ab04      	add	r3, sp, #16
 800512c:	6808      	ldr	r0, [r1, #0]
 800512e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005132:	6881      	ldr	r1, [r0, #8]
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	f000 fbeb 	bl	8005910 <_vfiprintf_r>
 800513a:	b003      	add	sp, #12
 800513c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005140:	b004      	add	sp, #16
 8005142:	4770      	bx	lr
 8005144:	20000080 	.word	0x20000080

08005148 <_puts_r>:
 8005148:	6a03      	ldr	r3, [r0, #32]
 800514a:	b570      	push	{r4, r5, r6, lr}
 800514c:	6884      	ldr	r4, [r0, #8]
 800514e:	4605      	mov	r5, r0
 8005150:	460e      	mov	r6, r1
 8005152:	b90b      	cbnz	r3, 8005158 <_puts_r+0x10>
 8005154:	f7ff ffb0 	bl	80050b8 <__sinit>
 8005158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800515a:	07db      	lsls	r3, r3, #31
 800515c:	d405      	bmi.n	800516a <_puts_r+0x22>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	0598      	lsls	r0, r3, #22
 8005162:	d402      	bmi.n	800516a <_puts_r+0x22>
 8005164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005166:	f000 f9ee 	bl	8005546 <__retarget_lock_acquire_recursive>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	0719      	lsls	r1, r3, #28
 800516e:	d502      	bpl.n	8005176 <_puts_r+0x2e>
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d135      	bne.n	80051e2 <_puts_r+0x9a>
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f8e5 	bl	8005348 <__swsetup_r>
 800517e:	b380      	cbz	r0, 80051e2 <_puts_r+0x9a>
 8005180:	f04f 35ff 	mov.w	r5, #4294967295
 8005184:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005186:	07da      	lsls	r2, r3, #31
 8005188:	d405      	bmi.n	8005196 <_puts_r+0x4e>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	059b      	lsls	r3, r3, #22
 800518e:	d402      	bmi.n	8005196 <_puts_r+0x4e>
 8005190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005192:	f000 f9d9 	bl	8005548 <__retarget_lock_release_recursive>
 8005196:	4628      	mov	r0, r5
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	2b00      	cmp	r3, #0
 800519c:	da04      	bge.n	80051a8 <_puts_r+0x60>
 800519e:	69a2      	ldr	r2, [r4, #24]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	dc17      	bgt.n	80051d4 <_puts_r+0x8c>
 80051a4:	290a      	cmp	r1, #10
 80051a6:	d015      	beq.n	80051d4 <_puts_r+0x8c>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	7019      	strb	r1, [r3, #0]
 80051b0:	68a3      	ldr	r3, [r4, #8]
 80051b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051b6:	3b01      	subs	r3, #1
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	2900      	cmp	r1, #0
 80051bc:	d1ed      	bne.n	800519a <_puts_r+0x52>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da11      	bge.n	80051e6 <_puts_r+0x9e>
 80051c2:	4622      	mov	r2, r4
 80051c4:	210a      	movs	r1, #10
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f87f 	bl	80052ca <__swbuf_r>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d0d7      	beq.n	8005180 <_puts_r+0x38>
 80051d0:	250a      	movs	r5, #10
 80051d2:	e7d7      	b.n	8005184 <_puts_r+0x3c>
 80051d4:	4622      	mov	r2, r4
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 f877 	bl	80052ca <__swbuf_r>
 80051dc:	3001      	adds	r0, #1
 80051de:	d1e7      	bne.n	80051b0 <_puts_r+0x68>
 80051e0:	e7ce      	b.n	8005180 <_puts_r+0x38>
 80051e2:	3e01      	subs	r6, #1
 80051e4:	e7e4      	b.n	80051b0 <_puts_r+0x68>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	6022      	str	r2, [r4, #0]
 80051ec:	220a      	movs	r2, #10
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e7ee      	b.n	80051d0 <_puts_r+0x88>
	...

080051f4 <puts>:
 80051f4:	4b02      	ldr	r3, [pc, #8]	@ (8005200 <puts+0xc>)
 80051f6:	4601      	mov	r1, r0
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	f7ff bfa5 	b.w	8005148 <_puts_r>
 80051fe:	bf00      	nop
 8005200:	20000080 	.word	0x20000080

08005204 <siprintf>:
 8005204:	b40e      	push	{r1, r2, r3}
 8005206:	b500      	push	{lr}
 8005208:	b09c      	sub	sp, #112	@ 0x70
 800520a:	ab1d      	add	r3, sp, #116	@ 0x74
 800520c:	9002      	str	r0, [sp, #8]
 800520e:	9006      	str	r0, [sp, #24]
 8005210:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005214:	4809      	ldr	r0, [pc, #36]	@ (800523c <siprintf+0x38>)
 8005216:	9107      	str	r1, [sp, #28]
 8005218:	9104      	str	r1, [sp, #16]
 800521a:	4909      	ldr	r1, [pc, #36]	@ (8005240 <siprintf+0x3c>)
 800521c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005220:	9105      	str	r1, [sp, #20]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	a902      	add	r1, sp, #8
 8005228:	f000 fa4c 	bl	80056c4 <_svfiprintf_r>
 800522c:	9b02      	ldr	r3, [sp, #8]
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	b01c      	add	sp, #112	@ 0x70
 8005234:	f85d eb04 	ldr.w	lr, [sp], #4
 8005238:	b003      	add	sp, #12
 800523a:	4770      	bx	lr
 800523c:	20000080 	.word	0x20000080
 8005240:	ffff0208 	.word	0xffff0208

08005244 <__sread>:
 8005244:	b510      	push	{r4, lr}
 8005246:	460c      	mov	r4, r1
 8005248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524c:	f000 f91c 	bl	8005488 <_read_r>
 8005250:	2800      	cmp	r0, #0
 8005252:	bfab      	itete	ge
 8005254:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005256:	89a3      	ldrhlt	r3, [r4, #12]
 8005258:	181b      	addge	r3, r3, r0
 800525a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800525e:	bfac      	ite	ge
 8005260:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005262:	81a3      	strhlt	r3, [r4, #12]
 8005264:	bd10      	pop	{r4, pc}

08005266 <__swrite>:
 8005266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526a:	461f      	mov	r7, r3
 800526c:	898b      	ldrh	r3, [r1, #12]
 800526e:	05db      	lsls	r3, r3, #23
 8005270:	4605      	mov	r5, r0
 8005272:	460c      	mov	r4, r1
 8005274:	4616      	mov	r6, r2
 8005276:	d505      	bpl.n	8005284 <__swrite+0x1e>
 8005278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527c:	2302      	movs	r3, #2
 800527e:	2200      	movs	r2, #0
 8005280:	f000 f8f0 	bl	8005464 <_lseek_r>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800528a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	4632      	mov	r2, r6
 8005292:	463b      	mov	r3, r7
 8005294:	4628      	mov	r0, r5
 8005296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	f000 b917 	b.w	80054cc <_write_r>

0800529e <__sseek>:
 800529e:	b510      	push	{r4, lr}
 80052a0:	460c      	mov	r4, r1
 80052a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a6:	f000 f8dd 	bl	8005464 <_lseek_r>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	bf15      	itete	ne
 80052b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052ba:	81a3      	strheq	r3, [r4, #12]
 80052bc:	bf18      	it	ne
 80052be:	81a3      	strhne	r3, [r4, #12]
 80052c0:	bd10      	pop	{r4, pc}

080052c2 <__sclose>:
 80052c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c6:	f000 b8bd 	b.w	8005444 <_close_r>

080052ca <__swbuf_r>:
 80052ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052cc:	460e      	mov	r6, r1
 80052ce:	4614      	mov	r4, r2
 80052d0:	4605      	mov	r5, r0
 80052d2:	b118      	cbz	r0, 80052dc <__swbuf_r+0x12>
 80052d4:	6a03      	ldr	r3, [r0, #32]
 80052d6:	b90b      	cbnz	r3, 80052dc <__swbuf_r+0x12>
 80052d8:	f7ff feee 	bl	80050b8 <__sinit>
 80052dc:	69a3      	ldr	r3, [r4, #24]
 80052de:	60a3      	str	r3, [r4, #8]
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	071a      	lsls	r2, r3, #28
 80052e4:	d501      	bpl.n	80052ea <__swbuf_r+0x20>
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	b943      	cbnz	r3, 80052fc <__swbuf_r+0x32>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f82b 	bl	8005348 <__swsetup_r>
 80052f2:	b118      	cbz	r0, 80052fc <__swbuf_r+0x32>
 80052f4:	f04f 37ff 	mov.w	r7, #4294967295
 80052f8:	4638      	mov	r0, r7
 80052fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	6922      	ldr	r2, [r4, #16]
 8005300:	1a98      	subs	r0, r3, r2
 8005302:	6963      	ldr	r3, [r4, #20]
 8005304:	b2f6      	uxtb	r6, r6
 8005306:	4283      	cmp	r3, r0
 8005308:	4637      	mov	r7, r6
 800530a:	dc05      	bgt.n	8005318 <__swbuf_r+0x4e>
 800530c:	4621      	mov	r1, r4
 800530e:	4628      	mov	r0, r5
 8005310:	f000 fe28 	bl	8005f64 <_fflush_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	d1ed      	bne.n	80052f4 <__swbuf_r+0x2a>
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	3b01      	subs	r3, #1
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	701e      	strb	r6, [r3, #0]
 8005326:	6962      	ldr	r2, [r4, #20]
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	429a      	cmp	r2, r3
 800532c:	d004      	beq.n	8005338 <__swbuf_r+0x6e>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	07db      	lsls	r3, r3, #31
 8005332:	d5e1      	bpl.n	80052f8 <__swbuf_r+0x2e>
 8005334:	2e0a      	cmp	r6, #10
 8005336:	d1df      	bne.n	80052f8 <__swbuf_r+0x2e>
 8005338:	4621      	mov	r1, r4
 800533a:	4628      	mov	r0, r5
 800533c:	f000 fe12 	bl	8005f64 <_fflush_r>
 8005340:	2800      	cmp	r0, #0
 8005342:	d0d9      	beq.n	80052f8 <__swbuf_r+0x2e>
 8005344:	e7d6      	b.n	80052f4 <__swbuf_r+0x2a>
	...

08005348 <__swsetup_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4b29      	ldr	r3, [pc, #164]	@ (80053f0 <__swsetup_r+0xa8>)
 800534c:	4605      	mov	r5, r0
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	460c      	mov	r4, r1
 8005352:	b118      	cbz	r0, 800535c <__swsetup_r+0x14>
 8005354:	6a03      	ldr	r3, [r0, #32]
 8005356:	b90b      	cbnz	r3, 800535c <__swsetup_r+0x14>
 8005358:	f7ff feae 	bl	80050b8 <__sinit>
 800535c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005360:	0719      	lsls	r1, r3, #28
 8005362:	d422      	bmi.n	80053aa <__swsetup_r+0x62>
 8005364:	06da      	lsls	r2, r3, #27
 8005366:	d407      	bmi.n	8005378 <__swsetup_r+0x30>
 8005368:	2209      	movs	r2, #9
 800536a:	602a      	str	r2, [r5, #0]
 800536c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	e033      	b.n	80053e0 <__swsetup_r+0x98>
 8005378:	0758      	lsls	r0, r3, #29
 800537a:	d512      	bpl.n	80053a2 <__swsetup_r+0x5a>
 800537c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800537e:	b141      	cbz	r1, 8005392 <__swsetup_r+0x4a>
 8005380:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005384:	4299      	cmp	r1, r3
 8005386:	d002      	beq.n	800538e <__swsetup_r+0x46>
 8005388:	4628      	mov	r0, r5
 800538a:	f000 f8f5 	bl	8005578 <_free_r>
 800538e:	2300      	movs	r3, #0
 8005390:	6363      	str	r3, [r4, #52]	@ 0x34
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	2300      	movs	r3, #0
 800539c:	6063      	str	r3, [r4, #4]
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	f043 0308 	orr.w	r3, r3, #8
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	6923      	ldr	r3, [r4, #16]
 80053ac:	b94b      	cbnz	r3, 80053c2 <__swsetup_r+0x7a>
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b8:	d003      	beq.n	80053c2 <__swsetup_r+0x7a>
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 fe1f 	bl	8006000 <__smakebuf_r>
 80053c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c6:	f013 0201 	ands.w	r2, r3, #1
 80053ca:	d00a      	beq.n	80053e2 <__swsetup_r+0x9a>
 80053cc:	2200      	movs	r2, #0
 80053ce:	60a2      	str	r2, [r4, #8]
 80053d0:	6962      	ldr	r2, [r4, #20]
 80053d2:	4252      	negs	r2, r2
 80053d4:	61a2      	str	r2, [r4, #24]
 80053d6:	6922      	ldr	r2, [r4, #16]
 80053d8:	b942      	cbnz	r2, 80053ec <__swsetup_r+0xa4>
 80053da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053de:	d1c5      	bne.n	800536c <__swsetup_r+0x24>
 80053e0:	bd38      	pop	{r3, r4, r5, pc}
 80053e2:	0799      	lsls	r1, r3, #30
 80053e4:	bf58      	it	pl
 80053e6:	6962      	ldrpl	r2, [r4, #20]
 80053e8:	60a2      	str	r2, [r4, #8]
 80053ea:	e7f4      	b.n	80053d6 <__swsetup_r+0x8e>
 80053ec:	2000      	movs	r0, #0
 80053ee:	e7f7      	b.n	80053e0 <__swsetup_r+0x98>
 80053f0:	20000080 	.word	0x20000080

080053f4 <memset>:
 80053f4:	4402      	add	r2, r0
 80053f6:	4603      	mov	r3, r0
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d100      	bne.n	80053fe <memset+0xa>
 80053fc:	4770      	bx	lr
 80053fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005402:	e7f9      	b.n	80053f8 <memset+0x4>

08005404 <strchr>:
 8005404:	b2c9      	uxtb	r1, r1
 8005406:	4603      	mov	r3, r0
 8005408:	4618      	mov	r0, r3
 800540a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800540e:	b112      	cbz	r2, 8005416 <strchr+0x12>
 8005410:	428a      	cmp	r2, r1
 8005412:	d1f9      	bne.n	8005408 <strchr+0x4>
 8005414:	4770      	bx	lr
 8005416:	2900      	cmp	r1, #0
 8005418:	bf18      	it	ne
 800541a:	2000      	movne	r0, #0
 800541c:	4770      	bx	lr

0800541e <strncpy>:
 800541e:	b510      	push	{r4, lr}
 8005420:	3901      	subs	r1, #1
 8005422:	4603      	mov	r3, r0
 8005424:	b132      	cbz	r2, 8005434 <strncpy+0x16>
 8005426:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800542a:	f803 4b01 	strb.w	r4, [r3], #1
 800542e:	3a01      	subs	r2, #1
 8005430:	2c00      	cmp	r4, #0
 8005432:	d1f7      	bne.n	8005424 <strncpy+0x6>
 8005434:	441a      	add	r2, r3
 8005436:	2100      	movs	r1, #0
 8005438:	4293      	cmp	r3, r2
 800543a:	d100      	bne.n	800543e <strncpy+0x20>
 800543c:	bd10      	pop	{r4, pc}
 800543e:	f803 1b01 	strb.w	r1, [r3], #1
 8005442:	e7f9      	b.n	8005438 <strncpy+0x1a>

08005444 <_close_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d06      	ldr	r5, [pc, #24]	@ (8005460 <_close_r+0x1c>)
 8005448:	2300      	movs	r3, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fc f97d 	bl	800174e <_close>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_close_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_close_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	200022f4 	.word	0x200022f4

08005464 <_lseek_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d07      	ldr	r5, [pc, #28]	@ (8005484 <_lseek_r+0x20>)
 8005468:	4604      	mov	r4, r0
 800546a:	4608      	mov	r0, r1
 800546c:	4611      	mov	r1, r2
 800546e:	2200      	movs	r2, #0
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f7fc f992 	bl	800179c <_lseek>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_lseek_r+0x1e>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_lseek_r+0x1e>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	200022f4 	.word	0x200022f4

08005488 <_read_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	@ (80054a8 <_read_r+0x20>)
 800548c:	4604      	mov	r4, r0
 800548e:	4608      	mov	r0, r1
 8005490:	4611      	mov	r1, r2
 8005492:	2200      	movs	r2, #0
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	f7fc f920 	bl	80016dc <_read>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_read_r+0x1e>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_read_r+0x1e>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	200022f4 	.word	0x200022f4

080054ac <_sbrk_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d06      	ldr	r5, [pc, #24]	@ (80054c8 <_sbrk_r+0x1c>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fc f97e 	bl	80017b8 <_sbrk>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_sbrk_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_sbrk_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	200022f4 	.word	0x200022f4

080054cc <_write_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d07      	ldr	r5, [pc, #28]	@ (80054ec <_write_r+0x20>)
 80054d0:	4604      	mov	r4, r0
 80054d2:	4608      	mov	r0, r1
 80054d4:	4611      	mov	r1, r2
 80054d6:	2200      	movs	r2, #0
 80054d8:	602a      	str	r2, [r5, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	f7fc f91b 	bl	8001716 <_write>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_write_r+0x1e>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_write_r+0x1e>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	200022f4 	.word	0x200022f4

080054f0 <__errno>:
 80054f0:	4b01      	ldr	r3, [pc, #4]	@ (80054f8 <__errno+0x8>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000080 	.word	0x20000080

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	@ (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	@ (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	@ (8005540 <__libc_init_array+0x44>)
 8005510:	f000 fe24 	bl	800615c <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	080063cc 	.word	0x080063cc
 8005538:	080063cc 	.word	0x080063cc
 800553c:	080063cc 	.word	0x080063cc
 8005540:	080063d0 	.word	0x080063d0

08005544 <__retarget_lock_init_recursive>:
 8005544:	4770      	bx	lr

08005546 <__retarget_lock_acquire_recursive>:
 8005546:	4770      	bx	lr

08005548 <__retarget_lock_release_recursive>:
 8005548:	4770      	bx	lr

0800554a <strcpy>:
 800554a:	4603      	mov	r3, r0
 800554c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005550:	f803 2b01 	strb.w	r2, [r3], #1
 8005554:	2a00      	cmp	r2, #0
 8005556:	d1f9      	bne.n	800554c <strcpy+0x2>
 8005558:	4770      	bx	lr

0800555a <memcpy>:
 800555a:	440a      	add	r2, r1
 800555c:	4291      	cmp	r1, r2
 800555e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005562:	d100      	bne.n	8005566 <memcpy+0xc>
 8005564:	4770      	bx	lr
 8005566:	b510      	push	{r4, lr}
 8005568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005570:	4291      	cmp	r1, r2
 8005572:	d1f9      	bne.n	8005568 <memcpy+0xe>
 8005574:	bd10      	pop	{r4, pc}
	...

08005578 <_free_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4605      	mov	r5, r0
 800557c:	2900      	cmp	r1, #0
 800557e:	d041      	beq.n	8005604 <_free_r+0x8c>
 8005580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005584:	1f0c      	subs	r4, r1, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	bfb8      	it	lt
 800558a:	18e4      	addlt	r4, r4, r3
 800558c:	f7ff fcfc 	bl	8004f88 <__malloc_lock>
 8005590:	4a1d      	ldr	r2, [pc, #116]	@ (8005608 <_free_r+0x90>)
 8005592:	6813      	ldr	r3, [r2, #0]
 8005594:	b933      	cbnz	r3, 80055a4 <_free_r+0x2c>
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	6014      	str	r4, [r2, #0]
 800559a:	4628      	mov	r0, r5
 800559c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a0:	f7ff bcf8 	b.w	8004f94 <__malloc_unlock>
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	d908      	bls.n	80055ba <_free_r+0x42>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	1821      	adds	r1, r4, r0
 80055ac:	428b      	cmp	r3, r1
 80055ae:	bf01      	itttt	eq
 80055b0:	6819      	ldreq	r1, [r3, #0]
 80055b2:	685b      	ldreq	r3, [r3, #4]
 80055b4:	1809      	addeq	r1, r1, r0
 80055b6:	6021      	streq	r1, [r4, #0]
 80055b8:	e7ed      	b.n	8005596 <_free_r+0x1e>
 80055ba:	461a      	mov	r2, r3
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b10b      	cbz	r3, 80055c4 <_free_r+0x4c>
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d9fa      	bls.n	80055ba <_free_r+0x42>
 80055c4:	6811      	ldr	r1, [r2, #0]
 80055c6:	1850      	adds	r0, r2, r1
 80055c8:	42a0      	cmp	r0, r4
 80055ca:	d10b      	bne.n	80055e4 <_free_r+0x6c>
 80055cc:	6820      	ldr	r0, [r4, #0]
 80055ce:	4401      	add	r1, r0
 80055d0:	1850      	adds	r0, r2, r1
 80055d2:	4283      	cmp	r3, r0
 80055d4:	6011      	str	r1, [r2, #0]
 80055d6:	d1e0      	bne.n	800559a <_free_r+0x22>
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	6053      	str	r3, [r2, #4]
 80055de:	4408      	add	r0, r1
 80055e0:	6010      	str	r0, [r2, #0]
 80055e2:	e7da      	b.n	800559a <_free_r+0x22>
 80055e4:	d902      	bls.n	80055ec <_free_r+0x74>
 80055e6:	230c      	movs	r3, #12
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	e7d6      	b.n	800559a <_free_r+0x22>
 80055ec:	6820      	ldr	r0, [r4, #0]
 80055ee:	1821      	adds	r1, r4, r0
 80055f0:	428b      	cmp	r3, r1
 80055f2:	bf04      	itt	eq
 80055f4:	6819      	ldreq	r1, [r3, #0]
 80055f6:	685b      	ldreq	r3, [r3, #4]
 80055f8:	6063      	str	r3, [r4, #4]
 80055fa:	bf04      	itt	eq
 80055fc:	1809      	addeq	r1, r1, r0
 80055fe:	6021      	streq	r1, [r4, #0]
 8005600:	6054      	str	r4, [r2, #4]
 8005602:	e7ca      	b.n	800559a <_free_r+0x22>
 8005604:	bd38      	pop	{r3, r4, r5, pc}
 8005606:	bf00      	nop
 8005608:	200021b4 	.word	0x200021b4

0800560c <__ssputs_r>:
 800560c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005610:	688e      	ldr	r6, [r1, #8]
 8005612:	461f      	mov	r7, r3
 8005614:	42be      	cmp	r6, r7
 8005616:	680b      	ldr	r3, [r1, #0]
 8005618:	4682      	mov	sl, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4690      	mov	r8, r2
 800561e:	d82d      	bhi.n	800567c <__ssputs_r+0x70>
 8005620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005624:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005628:	d026      	beq.n	8005678 <__ssputs_r+0x6c>
 800562a:	6965      	ldr	r5, [r4, #20]
 800562c:	6909      	ldr	r1, [r1, #16]
 800562e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005632:	eba3 0901 	sub.w	r9, r3, r1
 8005636:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800563a:	1c7b      	adds	r3, r7, #1
 800563c:	444b      	add	r3, r9
 800563e:	106d      	asrs	r5, r5, #1
 8005640:	429d      	cmp	r5, r3
 8005642:	bf38      	it	cc
 8005644:	461d      	movcc	r5, r3
 8005646:	0553      	lsls	r3, r2, #21
 8005648:	d527      	bpl.n	800569a <__ssputs_r+0x8e>
 800564a:	4629      	mov	r1, r5
 800564c:	f7ff fc1c 	bl	8004e88 <_malloc_r>
 8005650:	4606      	mov	r6, r0
 8005652:	b360      	cbz	r0, 80056ae <__ssputs_r+0xa2>
 8005654:	6921      	ldr	r1, [r4, #16]
 8005656:	464a      	mov	r2, r9
 8005658:	f7ff ff7f 	bl	800555a <memcpy>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	6126      	str	r6, [r4, #16]
 800566a:	6165      	str	r5, [r4, #20]
 800566c:	444e      	add	r6, r9
 800566e:	eba5 0509 	sub.w	r5, r5, r9
 8005672:	6026      	str	r6, [r4, #0]
 8005674:	60a5      	str	r5, [r4, #8]
 8005676:	463e      	mov	r6, r7
 8005678:	42be      	cmp	r6, r7
 800567a:	d900      	bls.n	800567e <__ssputs_r+0x72>
 800567c:	463e      	mov	r6, r7
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	4632      	mov	r2, r6
 8005682:	4641      	mov	r1, r8
 8005684:	f000 fcf8 	bl	8006078 <memmove>
 8005688:	68a3      	ldr	r3, [r4, #8]
 800568a:	1b9b      	subs	r3, r3, r6
 800568c:	60a3      	str	r3, [r4, #8]
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	4433      	add	r3, r6
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	2000      	movs	r0, #0
 8005696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569a:	462a      	mov	r2, r5
 800569c:	f000 fd28 	bl	80060f0 <_realloc_r>
 80056a0:	4606      	mov	r6, r0
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d1e0      	bne.n	8005668 <__ssputs_r+0x5c>
 80056a6:	6921      	ldr	r1, [r4, #16]
 80056a8:	4650      	mov	r0, sl
 80056aa:	f7ff ff65 	bl	8005578 <_free_r>
 80056ae:	230c      	movs	r3, #12
 80056b0:	f8ca 3000 	str.w	r3, [sl]
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	e7e9      	b.n	8005696 <__ssputs_r+0x8a>
	...

080056c4 <_svfiprintf_r>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	4698      	mov	r8, r3
 80056ca:	898b      	ldrh	r3, [r1, #12]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	b09d      	sub	sp, #116	@ 0x74
 80056d0:	4607      	mov	r7, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	d510      	bpl.n	80056fa <_svfiprintf_r+0x36>
 80056d8:	690b      	ldr	r3, [r1, #16]
 80056da:	b973      	cbnz	r3, 80056fa <_svfiprintf_r+0x36>
 80056dc:	2140      	movs	r1, #64	@ 0x40
 80056de:	f7ff fbd3 	bl	8004e88 <_malloc_r>
 80056e2:	6028      	str	r0, [r5, #0]
 80056e4:	6128      	str	r0, [r5, #16]
 80056e6:	b930      	cbnz	r0, 80056f6 <_svfiprintf_r+0x32>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	b01d      	add	sp, #116	@ 0x74
 80056f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f6:	2340      	movs	r3, #64	@ 0x40
 80056f8:	616b      	str	r3, [r5, #20]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056fe:	2320      	movs	r3, #32
 8005700:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005704:	f8cd 800c 	str.w	r8, [sp, #12]
 8005708:	2330      	movs	r3, #48	@ 0x30
 800570a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058a8 <_svfiprintf_r+0x1e4>
 800570e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005712:	f04f 0901 	mov.w	r9, #1
 8005716:	4623      	mov	r3, r4
 8005718:	469a      	mov	sl, r3
 800571a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800571e:	b10a      	cbz	r2, 8005724 <_svfiprintf_r+0x60>
 8005720:	2a25      	cmp	r2, #37	@ 0x25
 8005722:	d1f9      	bne.n	8005718 <_svfiprintf_r+0x54>
 8005724:	ebba 0b04 	subs.w	fp, sl, r4
 8005728:	d00b      	beq.n	8005742 <_svfiprintf_r+0x7e>
 800572a:	465b      	mov	r3, fp
 800572c:	4622      	mov	r2, r4
 800572e:	4629      	mov	r1, r5
 8005730:	4638      	mov	r0, r7
 8005732:	f7ff ff6b 	bl	800560c <__ssputs_r>
 8005736:	3001      	adds	r0, #1
 8005738:	f000 80a7 	beq.w	800588a <_svfiprintf_r+0x1c6>
 800573c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800573e:	445a      	add	r2, fp
 8005740:	9209      	str	r2, [sp, #36]	@ 0x24
 8005742:	f89a 3000 	ldrb.w	r3, [sl]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 809f 	beq.w	800588a <_svfiprintf_r+0x1c6>
 800574c:	2300      	movs	r3, #0
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005756:	f10a 0a01 	add.w	sl, sl, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	9307      	str	r3, [sp, #28]
 800575e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005762:	931a      	str	r3, [sp, #104]	@ 0x68
 8005764:	4654      	mov	r4, sl
 8005766:	2205      	movs	r2, #5
 8005768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576c:	484e      	ldr	r0, [pc, #312]	@ (80058a8 <_svfiprintf_r+0x1e4>)
 800576e:	f7fa fd3f 	bl	80001f0 <memchr>
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	b9d8      	cbnz	r0, 80057ae <_svfiprintf_r+0xea>
 8005776:	06d0      	lsls	r0, r2, #27
 8005778:	bf44      	itt	mi
 800577a:	2320      	movmi	r3, #32
 800577c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005780:	0711      	lsls	r1, r2, #28
 8005782:	bf44      	itt	mi
 8005784:	232b      	movmi	r3, #43	@ 0x2b
 8005786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800578a:	f89a 3000 	ldrb.w	r3, [sl]
 800578e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005790:	d015      	beq.n	80057be <_svfiprintf_r+0xfa>
 8005792:	9a07      	ldr	r2, [sp, #28]
 8005794:	4654      	mov	r4, sl
 8005796:	2000      	movs	r0, #0
 8005798:	f04f 0c0a 	mov.w	ip, #10
 800579c:	4621      	mov	r1, r4
 800579e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057a2:	3b30      	subs	r3, #48	@ 0x30
 80057a4:	2b09      	cmp	r3, #9
 80057a6:	d94b      	bls.n	8005840 <_svfiprintf_r+0x17c>
 80057a8:	b1b0      	cbz	r0, 80057d8 <_svfiprintf_r+0x114>
 80057aa:	9207      	str	r2, [sp, #28]
 80057ac:	e014      	b.n	80057d8 <_svfiprintf_r+0x114>
 80057ae:	eba0 0308 	sub.w	r3, r0, r8
 80057b2:	fa09 f303 	lsl.w	r3, r9, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	46a2      	mov	sl, r4
 80057bc:	e7d2      	b.n	8005764 <_svfiprintf_r+0xa0>
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	1d19      	adds	r1, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9103      	str	r1, [sp, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfbb      	ittet	lt
 80057ca:	425b      	neglt	r3, r3
 80057cc:	f042 0202 	orrlt.w	r2, r2, #2
 80057d0:	9307      	strge	r3, [sp, #28]
 80057d2:	9307      	strlt	r3, [sp, #28]
 80057d4:	bfb8      	it	lt
 80057d6:	9204      	strlt	r2, [sp, #16]
 80057d8:	7823      	ldrb	r3, [r4, #0]
 80057da:	2b2e      	cmp	r3, #46	@ 0x2e
 80057dc:	d10a      	bne.n	80057f4 <_svfiprintf_r+0x130>
 80057de:	7863      	ldrb	r3, [r4, #1]
 80057e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057e2:	d132      	bne.n	800584a <_svfiprintf_r+0x186>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	9203      	str	r2, [sp, #12]
 80057ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057f0:	3402      	adds	r4, #2
 80057f2:	9305      	str	r3, [sp, #20]
 80057f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058b8 <_svfiprintf_r+0x1f4>
 80057f8:	7821      	ldrb	r1, [r4, #0]
 80057fa:	2203      	movs	r2, #3
 80057fc:	4650      	mov	r0, sl
 80057fe:	f7fa fcf7 	bl	80001f0 <memchr>
 8005802:	b138      	cbz	r0, 8005814 <_svfiprintf_r+0x150>
 8005804:	9b04      	ldr	r3, [sp, #16]
 8005806:	eba0 000a 	sub.w	r0, r0, sl
 800580a:	2240      	movs	r2, #64	@ 0x40
 800580c:	4082      	lsls	r2, r0
 800580e:	4313      	orrs	r3, r2
 8005810:	3401      	adds	r4, #1
 8005812:	9304      	str	r3, [sp, #16]
 8005814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005818:	4824      	ldr	r0, [pc, #144]	@ (80058ac <_svfiprintf_r+0x1e8>)
 800581a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800581e:	2206      	movs	r2, #6
 8005820:	f7fa fce6 	bl	80001f0 <memchr>
 8005824:	2800      	cmp	r0, #0
 8005826:	d036      	beq.n	8005896 <_svfiprintf_r+0x1d2>
 8005828:	4b21      	ldr	r3, [pc, #132]	@ (80058b0 <_svfiprintf_r+0x1ec>)
 800582a:	bb1b      	cbnz	r3, 8005874 <_svfiprintf_r+0x1b0>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	3307      	adds	r3, #7
 8005830:	f023 0307 	bic.w	r3, r3, #7
 8005834:	3308      	adds	r3, #8
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583a:	4433      	add	r3, r6
 800583c:	9309      	str	r3, [sp, #36]	@ 0x24
 800583e:	e76a      	b.n	8005716 <_svfiprintf_r+0x52>
 8005840:	fb0c 3202 	mla	r2, ip, r2, r3
 8005844:	460c      	mov	r4, r1
 8005846:	2001      	movs	r0, #1
 8005848:	e7a8      	b.n	800579c <_svfiprintf_r+0xd8>
 800584a:	2300      	movs	r3, #0
 800584c:	3401      	adds	r4, #1
 800584e:	9305      	str	r3, [sp, #20]
 8005850:	4619      	mov	r1, r3
 8005852:	f04f 0c0a 	mov.w	ip, #10
 8005856:	4620      	mov	r0, r4
 8005858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800585c:	3a30      	subs	r2, #48	@ 0x30
 800585e:	2a09      	cmp	r2, #9
 8005860:	d903      	bls.n	800586a <_svfiprintf_r+0x1a6>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0c6      	beq.n	80057f4 <_svfiprintf_r+0x130>
 8005866:	9105      	str	r1, [sp, #20]
 8005868:	e7c4      	b.n	80057f4 <_svfiprintf_r+0x130>
 800586a:	fb0c 2101 	mla	r1, ip, r1, r2
 800586e:	4604      	mov	r4, r0
 8005870:	2301      	movs	r3, #1
 8005872:	e7f0      	b.n	8005856 <_svfiprintf_r+0x192>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	462a      	mov	r2, r5
 800587a:	4b0e      	ldr	r3, [pc, #56]	@ (80058b4 <_svfiprintf_r+0x1f0>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4638      	mov	r0, r7
 8005880:	f3af 8000 	nop.w
 8005884:	1c42      	adds	r2, r0, #1
 8005886:	4606      	mov	r6, r0
 8005888:	d1d6      	bne.n	8005838 <_svfiprintf_r+0x174>
 800588a:	89ab      	ldrh	r3, [r5, #12]
 800588c:	065b      	lsls	r3, r3, #25
 800588e:	f53f af2d 	bmi.w	80056ec <_svfiprintf_r+0x28>
 8005892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005894:	e72c      	b.n	80056f0 <_svfiprintf_r+0x2c>
 8005896:	ab03      	add	r3, sp, #12
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	462a      	mov	r2, r5
 800589c:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <_svfiprintf_r+0x1f0>)
 800589e:	a904      	add	r1, sp, #16
 80058a0:	4638      	mov	r0, r7
 80058a2:	f000 f9bb 	bl	8005c1c <_printf_i>
 80058a6:	e7ed      	b.n	8005884 <_svfiprintf_r+0x1c0>
 80058a8:	0800638e 	.word	0x0800638e
 80058ac:	08006398 	.word	0x08006398
 80058b0:	00000000 	.word	0x00000000
 80058b4:	0800560d 	.word	0x0800560d
 80058b8:	08006394 	.word	0x08006394

080058bc <__sfputc_r>:
 80058bc:	6893      	ldr	r3, [r2, #8]
 80058be:	3b01      	subs	r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	b410      	push	{r4}
 80058c4:	6093      	str	r3, [r2, #8]
 80058c6:	da08      	bge.n	80058da <__sfputc_r+0x1e>
 80058c8:	6994      	ldr	r4, [r2, #24]
 80058ca:	42a3      	cmp	r3, r4
 80058cc:	db01      	blt.n	80058d2 <__sfputc_r+0x16>
 80058ce:	290a      	cmp	r1, #10
 80058d0:	d103      	bne.n	80058da <__sfputc_r+0x1e>
 80058d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d6:	f7ff bcf8 	b.w	80052ca <__swbuf_r>
 80058da:	6813      	ldr	r3, [r2, #0]
 80058dc:	1c58      	adds	r0, r3, #1
 80058de:	6010      	str	r0, [r2, #0]
 80058e0:	7019      	strb	r1, [r3, #0]
 80058e2:	4608      	mov	r0, r1
 80058e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <__sfputs_r>:
 80058ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ec:	4606      	mov	r6, r0
 80058ee:	460f      	mov	r7, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	18d5      	adds	r5, r2, r3
 80058f4:	42ac      	cmp	r4, r5
 80058f6:	d101      	bne.n	80058fc <__sfputs_r+0x12>
 80058f8:	2000      	movs	r0, #0
 80058fa:	e007      	b.n	800590c <__sfputs_r+0x22>
 80058fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005900:	463a      	mov	r2, r7
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff ffda 	bl	80058bc <__sfputc_r>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d1f3      	bne.n	80058f4 <__sfputs_r+0xa>
 800590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005910 <_vfiprintf_r>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	460d      	mov	r5, r1
 8005916:	b09d      	sub	sp, #116	@ 0x74
 8005918:	4614      	mov	r4, r2
 800591a:	4698      	mov	r8, r3
 800591c:	4606      	mov	r6, r0
 800591e:	b118      	cbz	r0, 8005928 <_vfiprintf_r+0x18>
 8005920:	6a03      	ldr	r3, [r0, #32]
 8005922:	b90b      	cbnz	r3, 8005928 <_vfiprintf_r+0x18>
 8005924:	f7ff fbc8 	bl	80050b8 <__sinit>
 8005928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800592a:	07d9      	lsls	r1, r3, #31
 800592c:	d405      	bmi.n	800593a <_vfiprintf_r+0x2a>
 800592e:	89ab      	ldrh	r3, [r5, #12]
 8005930:	059a      	lsls	r2, r3, #22
 8005932:	d402      	bmi.n	800593a <_vfiprintf_r+0x2a>
 8005934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005936:	f7ff fe06 	bl	8005546 <__retarget_lock_acquire_recursive>
 800593a:	89ab      	ldrh	r3, [r5, #12]
 800593c:	071b      	lsls	r3, r3, #28
 800593e:	d501      	bpl.n	8005944 <_vfiprintf_r+0x34>
 8005940:	692b      	ldr	r3, [r5, #16]
 8005942:	b99b      	cbnz	r3, 800596c <_vfiprintf_r+0x5c>
 8005944:	4629      	mov	r1, r5
 8005946:	4630      	mov	r0, r6
 8005948:	f7ff fcfe 	bl	8005348 <__swsetup_r>
 800594c:	b170      	cbz	r0, 800596c <_vfiprintf_r+0x5c>
 800594e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005950:	07dc      	lsls	r4, r3, #31
 8005952:	d504      	bpl.n	800595e <_vfiprintf_r+0x4e>
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	b01d      	add	sp, #116	@ 0x74
 800595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	0598      	lsls	r0, r3, #22
 8005962:	d4f7      	bmi.n	8005954 <_vfiprintf_r+0x44>
 8005964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005966:	f7ff fdef 	bl	8005548 <__retarget_lock_release_recursive>
 800596a:	e7f3      	b.n	8005954 <_vfiprintf_r+0x44>
 800596c:	2300      	movs	r3, #0
 800596e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005970:	2320      	movs	r3, #32
 8005972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005976:	f8cd 800c 	str.w	r8, [sp, #12]
 800597a:	2330      	movs	r3, #48	@ 0x30
 800597c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b2c <_vfiprintf_r+0x21c>
 8005980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005984:	f04f 0901 	mov.w	r9, #1
 8005988:	4623      	mov	r3, r4
 800598a:	469a      	mov	sl, r3
 800598c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005990:	b10a      	cbz	r2, 8005996 <_vfiprintf_r+0x86>
 8005992:	2a25      	cmp	r2, #37	@ 0x25
 8005994:	d1f9      	bne.n	800598a <_vfiprintf_r+0x7a>
 8005996:	ebba 0b04 	subs.w	fp, sl, r4
 800599a:	d00b      	beq.n	80059b4 <_vfiprintf_r+0xa4>
 800599c:	465b      	mov	r3, fp
 800599e:	4622      	mov	r2, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7ff ffa1 	bl	80058ea <__sfputs_r>
 80059a8:	3001      	adds	r0, #1
 80059aa:	f000 80a7 	beq.w	8005afc <_vfiprintf_r+0x1ec>
 80059ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059b0:	445a      	add	r2, fp
 80059b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80059b4:	f89a 3000 	ldrb.w	r3, [sl]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 809f 	beq.w	8005afc <_vfiprintf_r+0x1ec>
 80059be:	2300      	movs	r3, #0
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295
 80059c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c8:	f10a 0a01 	add.w	sl, sl, #1
 80059cc:	9304      	str	r3, [sp, #16]
 80059ce:	9307      	str	r3, [sp, #28]
 80059d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80059d6:	4654      	mov	r4, sl
 80059d8:	2205      	movs	r2, #5
 80059da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059de:	4853      	ldr	r0, [pc, #332]	@ (8005b2c <_vfiprintf_r+0x21c>)
 80059e0:	f7fa fc06 	bl	80001f0 <memchr>
 80059e4:	9a04      	ldr	r2, [sp, #16]
 80059e6:	b9d8      	cbnz	r0, 8005a20 <_vfiprintf_r+0x110>
 80059e8:	06d1      	lsls	r1, r2, #27
 80059ea:	bf44      	itt	mi
 80059ec:	2320      	movmi	r3, #32
 80059ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059f2:	0713      	lsls	r3, r2, #28
 80059f4:	bf44      	itt	mi
 80059f6:	232b      	movmi	r3, #43	@ 0x2b
 80059f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a02:	d015      	beq.n	8005a30 <_vfiprintf_r+0x120>
 8005a04:	9a07      	ldr	r2, [sp, #28]
 8005a06:	4654      	mov	r4, sl
 8005a08:	2000      	movs	r0, #0
 8005a0a:	f04f 0c0a 	mov.w	ip, #10
 8005a0e:	4621      	mov	r1, r4
 8005a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a14:	3b30      	subs	r3, #48	@ 0x30
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d94b      	bls.n	8005ab2 <_vfiprintf_r+0x1a2>
 8005a1a:	b1b0      	cbz	r0, 8005a4a <_vfiprintf_r+0x13a>
 8005a1c:	9207      	str	r2, [sp, #28]
 8005a1e:	e014      	b.n	8005a4a <_vfiprintf_r+0x13a>
 8005a20:	eba0 0308 	sub.w	r3, r0, r8
 8005a24:	fa09 f303 	lsl.w	r3, r9, r3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	46a2      	mov	sl, r4
 8005a2e:	e7d2      	b.n	80059d6 <_vfiprintf_r+0xc6>
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	1d19      	adds	r1, r3, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	9103      	str	r1, [sp, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bfbb      	ittet	lt
 8005a3c:	425b      	neglt	r3, r3
 8005a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a42:	9307      	strge	r3, [sp, #28]
 8005a44:	9307      	strlt	r3, [sp, #28]
 8005a46:	bfb8      	it	lt
 8005a48:	9204      	strlt	r2, [sp, #16]
 8005a4a:	7823      	ldrb	r3, [r4, #0]
 8005a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a4e:	d10a      	bne.n	8005a66 <_vfiprintf_r+0x156>
 8005a50:	7863      	ldrb	r3, [r4, #1]
 8005a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a54:	d132      	bne.n	8005abc <_vfiprintf_r+0x1ac>
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	1d1a      	adds	r2, r3, #4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	9203      	str	r2, [sp, #12]
 8005a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a62:	3402      	adds	r4, #2
 8005a64:	9305      	str	r3, [sp, #20]
 8005a66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b3c <_vfiprintf_r+0x22c>
 8005a6a:	7821      	ldrb	r1, [r4, #0]
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	4650      	mov	r0, sl
 8005a70:	f7fa fbbe 	bl	80001f0 <memchr>
 8005a74:	b138      	cbz	r0, 8005a86 <_vfiprintf_r+0x176>
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	eba0 000a 	sub.w	r0, r0, sl
 8005a7c:	2240      	movs	r2, #64	@ 0x40
 8005a7e:	4082      	lsls	r2, r0
 8005a80:	4313      	orrs	r3, r2
 8005a82:	3401      	adds	r4, #1
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8a:	4829      	ldr	r0, [pc, #164]	@ (8005b30 <_vfiprintf_r+0x220>)
 8005a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a90:	2206      	movs	r2, #6
 8005a92:	f7fa fbad 	bl	80001f0 <memchr>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d03f      	beq.n	8005b1a <_vfiprintf_r+0x20a>
 8005a9a:	4b26      	ldr	r3, [pc, #152]	@ (8005b34 <_vfiprintf_r+0x224>)
 8005a9c:	bb1b      	cbnz	r3, 8005ae6 <_vfiprintf_r+0x1d6>
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	3307      	adds	r3, #7
 8005aa2:	f023 0307 	bic.w	r3, r3, #7
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	9303      	str	r3, [sp, #12]
 8005aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aac:	443b      	add	r3, r7
 8005aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ab0:	e76a      	b.n	8005988 <_vfiprintf_r+0x78>
 8005ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	2001      	movs	r0, #1
 8005aba:	e7a8      	b.n	8005a0e <_vfiprintf_r+0xfe>
 8005abc:	2300      	movs	r3, #0
 8005abe:	3401      	adds	r4, #1
 8005ac0:	9305      	str	r3, [sp, #20]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f04f 0c0a 	mov.w	ip, #10
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ace:	3a30      	subs	r2, #48	@ 0x30
 8005ad0:	2a09      	cmp	r2, #9
 8005ad2:	d903      	bls.n	8005adc <_vfiprintf_r+0x1cc>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0c6      	beq.n	8005a66 <_vfiprintf_r+0x156>
 8005ad8:	9105      	str	r1, [sp, #20]
 8005ada:	e7c4      	b.n	8005a66 <_vfiprintf_r+0x156>
 8005adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e7f0      	b.n	8005ac8 <_vfiprintf_r+0x1b8>
 8005ae6:	ab03      	add	r3, sp, #12
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	462a      	mov	r2, r5
 8005aec:	4b12      	ldr	r3, [pc, #72]	@ (8005b38 <_vfiprintf_r+0x228>)
 8005aee:	a904      	add	r1, sp, #16
 8005af0:	4630      	mov	r0, r6
 8005af2:	f3af 8000 	nop.w
 8005af6:	4607      	mov	r7, r0
 8005af8:	1c78      	adds	r0, r7, #1
 8005afa:	d1d6      	bne.n	8005aaa <_vfiprintf_r+0x19a>
 8005afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005afe:	07d9      	lsls	r1, r3, #31
 8005b00:	d405      	bmi.n	8005b0e <_vfiprintf_r+0x1fe>
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	059a      	lsls	r2, r3, #22
 8005b06:	d402      	bmi.n	8005b0e <_vfiprintf_r+0x1fe>
 8005b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b0a:	f7ff fd1d 	bl	8005548 <__retarget_lock_release_recursive>
 8005b0e:	89ab      	ldrh	r3, [r5, #12]
 8005b10:	065b      	lsls	r3, r3, #25
 8005b12:	f53f af1f 	bmi.w	8005954 <_vfiprintf_r+0x44>
 8005b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b18:	e71e      	b.n	8005958 <_vfiprintf_r+0x48>
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4b05      	ldr	r3, [pc, #20]	@ (8005b38 <_vfiprintf_r+0x228>)
 8005b22:	a904      	add	r1, sp, #16
 8005b24:	4630      	mov	r0, r6
 8005b26:	f000 f879 	bl	8005c1c <_printf_i>
 8005b2a:	e7e4      	b.n	8005af6 <_vfiprintf_r+0x1e6>
 8005b2c:	0800638e 	.word	0x0800638e
 8005b30:	08006398 	.word	0x08006398
 8005b34:	00000000 	.word	0x00000000
 8005b38:	080058eb 	.word	0x080058eb
 8005b3c:	08006394 	.word	0x08006394

08005b40 <_printf_common>:
 8005b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	4616      	mov	r6, r2
 8005b46:	4698      	mov	r8, r3
 8005b48:	688a      	ldr	r2, [r1, #8]
 8005b4a:	690b      	ldr	r3, [r1, #16]
 8005b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bfb8      	it	lt
 8005b54:	4613      	movlt	r3, r2
 8005b56:	6033      	str	r3, [r6, #0]
 8005b58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	b10a      	cbz	r2, 8005b66 <_printf_common+0x26>
 8005b62:	3301      	adds	r3, #1
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	0699      	lsls	r1, r3, #26
 8005b6a:	bf42      	ittt	mi
 8005b6c:	6833      	ldrmi	r3, [r6, #0]
 8005b6e:	3302      	addmi	r3, #2
 8005b70:	6033      	strmi	r3, [r6, #0]
 8005b72:	6825      	ldr	r5, [r4, #0]
 8005b74:	f015 0506 	ands.w	r5, r5, #6
 8005b78:	d106      	bne.n	8005b88 <_printf_common+0x48>
 8005b7a:	f104 0a19 	add.w	sl, r4, #25
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	6832      	ldr	r2, [r6, #0]
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	dc26      	bgt.n	8005bd6 <_printf_common+0x96>
 8005b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	3b00      	subs	r3, #0
 8005b90:	bf18      	it	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	0692      	lsls	r2, r2, #26
 8005b96:	d42b      	bmi.n	8005bf0 <_printf_common+0xb0>
 8005b98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c8      	blx	r9
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d01e      	beq.n	8005be4 <_printf_common+0xa4>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	6922      	ldr	r2, [r4, #16]
 8005baa:	f003 0306 	and.w	r3, r3, #6
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	bf02      	ittt	eq
 8005bb2:	68e5      	ldreq	r5, [r4, #12]
 8005bb4:	6833      	ldreq	r3, [r6, #0]
 8005bb6:	1aed      	subeq	r5, r5, r3
 8005bb8:	68a3      	ldr	r3, [r4, #8]
 8005bba:	bf0c      	ite	eq
 8005bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bc0:	2500      	movne	r5, #0
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bfc4      	itt	gt
 8005bc6:	1a9b      	subgt	r3, r3, r2
 8005bc8:	18ed      	addgt	r5, r5, r3
 8005bca:	2600      	movs	r6, #0
 8005bcc:	341a      	adds	r4, #26
 8005bce:	42b5      	cmp	r5, r6
 8005bd0:	d11a      	bne.n	8005c08 <_printf_common+0xc8>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e008      	b.n	8005be8 <_printf_common+0xa8>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4652      	mov	r2, sl
 8005bda:	4641      	mov	r1, r8
 8005bdc:	4638      	mov	r0, r7
 8005bde:	47c8      	blx	r9
 8005be0:	3001      	adds	r0, #1
 8005be2:	d103      	bne.n	8005bec <_printf_common+0xac>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bec:	3501      	adds	r5, #1
 8005bee:	e7c6      	b.n	8005b7e <_printf_common+0x3e>
 8005bf0:	18e1      	adds	r1, r4, r3
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	2030      	movs	r0, #48	@ 0x30
 8005bf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bfa:	4422      	add	r2, r4
 8005bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c04:	3302      	adds	r3, #2
 8005c06:	e7c7      	b.n	8005b98 <_printf_common+0x58>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	4638      	mov	r0, r7
 8005c10:	47c8      	blx	r9
 8005c12:	3001      	adds	r0, #1
 8005c14:	d0e6      	beq.n	8005be4 <_printf_common+0xa4>
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7d9      	b.n	8005bce <_printf_common+0x8e>
	...

08005c1c <_printf_i>:
 8005c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	7e0f      	ldrb	r7, [r1, #24]
 8005c22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c24:	2f78      	cmp	r7, #120	@ 0x78
 8005c26:	4691      	mov	r9, r2
 8005c28:	4680      	mov	r8, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	469a      	mov	sl, r3
 8005c2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c32:	d807      	bhi.n	8005c44 <_printf_i+0x28>
 8005c34:	2f62      	cmp	r7, #98	@ 0x62
 8005c36:	d80a      	bhi.n	8005c4e <_printf_i+0x32>
 8005c38:	2f00      	cmp	r7, #0
 8005c3a:	f000 80d2 	beq.w	8005de2 <_printf_i+0x1c6>
 8005c3e:	2f58      	cmp	r7, #88	@ 0x58
 8005c40:	f000 80b9 	beq.w	8005db6 <_printf_i+0x19a>
 8005c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c4c:	e03a      	b.n	8005cc4 <_printf_i+0xa8>
 8005c4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c52:	2b15      	cmp	r3, #21
 8005c54:	d8f6      	bhi.n	8005c44 <_printf_i+0x28>
 8005c56:	a101      	add	r1, pc, #4	@ (adr r1, 8005c5c <_printf_i+0x40>)
 8005c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c5c:	08005cb5 	.word	0x08005cb5
 8005c60:	08005cc9 	.word	0x08005cc9
 8005c64:	08005c45 	.word	0x08005c45
 8005c68:	08005c45 	.word	0x08005c45
 8005c6c:	08005c45 	.word	0x08005c45
 8005c70:	08005c45 	.word	0x08005c45
 8005c74:	08005cc9 	.word	0x08005cc9
 8005c78:	08005c45 	.word	0x08005c45
 8005c7c:	08005c45 	.word	0x08005c45
 8005c80:	08005c45 	.word	0x08005c45
 8005c84:	08005c45 	.word	0x08005c45
 8005c88:	08005dc9 	.word	0x08005dc9
 8005c8c:	08005cf3 	.word	0x08005cf3
 8005c90:	08005d83 	.word	0x08005d83
 8005c94:	08005c45 	.word	0x08005c45
 8005c98:	08005c45 	.word	0x08005c45
 8005c9c:	08005deb 	.word	0x08005deb
 8005ca0:	08005c45 	.word	0x08005c45
 8005ca4:	08005cf3 	.word	0x08005cf3
 8005ca8:	08005c45 	.word	0x08005c45
 8005cac:	08005c45 	.word	0x08005c45
 8005cb0:	08005d8b 	.word	0x08005d8b
 8005cb4:	6833      	ldr	r3, [r6, #0]
 8005cb6:	1d1a      	adds	r2, r3, #4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6032      	str	r2, [r6, #0]
 8005cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e09d      	b.n	8005e04 <_printf_i+0x1e8>
 8005cc8:	6833      	ldr	r3, [r6, #0]
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	1d19      	adds	r1, r3, #4
 8005cce:	6031      	str	r1, [r6, #0]
 8005cd0:	0606      	lsls	r6, r0, #24
 8005cd2:	d501      	bpl.n	8005cd8 <_printf_i+0xbc>
 8005cd4:	681d      	ldr	r5, [r3, #0]
 8005cd6:	e003      	b.n	8005ce0 <_printf_i+0xc4>
 8005cd8:	0645      	lsls	r5, r0, #25
 8005cda:	d5fb      	bpl.n	8005cd4 <_printf_i+0xb8>
 8005cdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	da03      	bge.n	8005cec <_printf_i+0xd0>
 8005ce4:	232d      	movs	r3, #45	@ 0x2d
 8005ce6:	426d      	negs	r5, r5
 8005ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cec:	4859      	ldr	r0, [pc, #356]	@ (8005e54 <_printf_i+0x238>)
 8005cee:	230a      	movs	r3, #10
 8005cf0:	e011      	b.n	8005d16 <_printf_i+0xfa>
 8005cf2:	6821      	ldr	r1, [r4, #0]
 8005cf4:	6833      	ldr	r3, [r6, #0]
 8005cf6:	0608      	lsls	r0, r1, #24
 8005cf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cfc:	d402      	bmi.n	8005d04 <_printf_i+0xe8>
 8005cfe:	0649      	lsls	r1, r1, #25
 8005d00:	bf48      	it	mi
 8005d02:	b2ad      	uxthmi	r5, r5
 8005d04:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d06:	4853      	ldr	r0, [pc, #332]	@ (8005e54 <_printf_i+0x238>)
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	bf14      	ite	ne
 8005d0c:	230a      	movne	r3, #10
 8005d0e:	2308      	moveq	r3, #8
 8005d10:	2100      	movs	r1, #0
 8005d12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d16:	6866      	ldr	r6, [r4, #4]
 8005d18:	60a6      	str	r6, [r4, #8]
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	bfa2      	ittt	ge
 8005d1e:	6821      	ldrge	r1, [r4, #0]
 8005d20:	f021 0104 	bicge.w	r1, r1, #4
 8005d24:	6021      	strge	r1, [r4, #0]
 8005d26:	b90d      	cbnz	r5, 8005d2c <_printf_i+0x110>
 8005d28:	2e00      	cmp	r6, #0
 8005d2a:	d04b      	beq.n	8005dc4 <_printf_i+0x1a8>
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d32:	fb03 5711 	mls	r7, r3, r1, r5
 8005d36:	5dc7      	ldrb	r7, [r0, r7]
 8005d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d3c:	462f      	mov	r7, r5
 8005d3e:	42bb      	cmp	r3, r7
 8005d40:	460d      	mov	r5, r1
 8005d42:	d9f4      	bls.n	8005d2e <_printf_i+0x112>
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d10b      	bne.n	8005d60 <_printf_i+0x144>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	07df      	lsls	r7, r3, #31
 8005d4c:	d508      	bpl.n	8005d60 <_printf_i+0x144>
 8005d4e:	6923      	ldr	r3, [r4, #16]
 8005d50:	6861      	ldr	r1, [r4, #4]
 8005d52:	4299      	cmp	r1, r3
 8005d54:	bfde      	ittt	le
 8005d56:	2330      	movle	r3, #48	@ 0x30
 8005d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d60:	1b92      	subs	r2, r2, r6
 8005d62:	6122      	str	r2, [r4, #16]
 8005d64:	f8cd a000 	str.w	sl, [sp]
 8005d68:	464b      	mov	r3, r9
 8005d6a:	aa03      	add	r2, sp, #12
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f7ff fee6 	bl	8005b40 <_printf_common>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d14a      	bne.n	8005e0e <_printf_i+0x1f2>
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	b004      	add	sp, #16
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f043 0320 	orr.w	r3, r3, #32
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	4833      	ldr	r0, [pc, #204]	@ (8005e58 <_printf_i+0x23c>)
 8005d8c:	2778      	movs	r7, #120	@ 0x78
 8005d8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	6831      	ldr	r1, [r6, #0]
 8005d96:	061f      	lsls	r7, r3, #24
 8005d98:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d9c:	d402      	bmi.n	8005da4 <_printf_i+0x188>
 8005d9e:	065f      	lsls	r7, r3, #25
 8005da0:	bf48      	it	mi
 8005da2:	b2ad      	uxthmi	r5, r5
 8005da4:	6031      	str	r1, [r6, #0]
 8005da6:	07d9      	lsls	r1, r3, #31
 8005da8:	bf44      	itt	mi
 8005daa:	f043 0320 	orrmi.w	r3, r3, #32
 8005dae:	6023      	strmi	r3, [r4, #0]
 8005db0:	b11d      	cbz	r5, 8005dba <_printf_i+0x19e>
 8005db2:	2310      	movs	r3, #16
 8005db4:	e7ac      	b.n	8005d10 <_printf_i+0xf4>
 8005db6:	4827      	ldr	r0, [pc, #156]	@ (8005e54 <_printf_i+0x238>)
 8005db8:	e7e9      	b.n	8005d8e <_printf_i+0x172>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	f023 0320 	bic.w	r3, r3, #32
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	e7f6      	b.n	8005db2 <_printf_i+0x196>
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	e7bd      	b.n	8005d44 <_printf_i+0x128>
 8005dc8:	6833      	ldr	r3, [r6, #0]
 8005dca:	6825      	ldr	r5, [r4, #0]
 8005dcc:	6961      	ldr	r1, [r4, #20]
 8005dce:	1d18      	adds	r0, r3, #4
 8005dd0:	6030      	str	r0, [r6, #0]
 8005dd2:	062e      	lsls	r6, r5, #24
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	d501      	bpl.n	8005ddc <_printf_i+0x1c0>
 8005dd8:	6019      	str	r1, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <_printf_i+0x1c6>
 8005ddc:	0668      	lsls	r0, r5, #25
 8005dde:	d5fb      	bpl.n	8005dd8 <_printf_i+0x1bc>
 8005de0:	8019      	strh	r1, [r3, #0]
 8005de2:	2300      	movs	r3, #0
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	4616      	mov	r6, r2
 8005de8:	e7bc      	b.n	8005d64 <_printf_i+0x148>
 8005dea:	6833      	ldr	r3, [r6, #0]
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	6032      	str	r2, [r6, #0]
 8005df0:	681e      	ldr	r6, [r3, #0]
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	2100      	movs	r1, #0
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7fa f9fa 	bl	80001f0 <memchr>
 8005dfc:	b108      	cbz	r0, 8005e02 <_printf_i+0x1e6>
 8005dfe:	1b80      	subs	r0, r0, r6
 8005e00:	6060      	str	r0, [r4, #4]
 8005e02:	6863      	ldr	r3, [r4, #4]
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	2300      	movs	r3, #0
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e0c:	e7aa      	b.n	8005d64 <_printf_i+0x148>
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	4632      	mov	r2, r6
 8005e12:	4649      	mov	r1, r9
 8005e14:	4640      	mov	r0, r8
 8005e16:	47d0      	blx	sl
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d0ad      	beq.n	8005d78 <_printf_i+0x15c>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	079b      	lsls	r3, r3, #30
 8005e20:	d413      	bmi.n	8005e4a <_printf_i+0x22e>
 8005e22:	68e0      	ldr	r0, [r4, #12]
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	4298      	cmp	r0, r3
 8005e28:	bfb8      	it	lt
 8005e2a:	4618      	movlt	r0, r3
 8005e2c:	e7a6      	b.n	8005d7c <_printf_i+0x160>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4632      	mov	r2, r6
 8005e32:	4649      	mov	r1, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	47d0      	blx	sl
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d09d      	beq.n	8005d78 <_printf_i+0x15c>
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	9903      	ldr	r1, [sp, #12]
 8005e42:	1a5b      	subs	r3, r3, r1
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	dcf2      	bgt.n	8005e2e <_printf_i+0x212>
 8005e48:	e7eb      	b.n	8005e22 <_printf_i+0x206>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	f104 0619 	add.w	r6, r4, #25
 8005e50:	e7f5      	b.n	8005e3e <_printf_i+0x222>
 8005e52:	bf00      	nop
 8005e54:	0800639f 	.word	0x0800639f
 8005e58:	080063b0 	.word	0x080063b0

08005e5c <__sflush_r>:
 8005e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	0716      	lsls	r6, r2, #28
 8005e66:	4605      	mov	r5, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	d454      	bmi.n	8005f16 <__sflush_r+0xba>
 8005e6c:	684b      	ldr	r3, [r1, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dc02      	bgt.n	8005e78 <__sflush_r+0x1c>
 8005e72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dd48      	ble.n	8005f0a <__sflush_r+0xae>
 8005e78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e7a:	2e00      	cmp	r6, #0
 8005e7c:	d045      	beq.n	8005f0a <__sflush_r+0xae>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e84:	682f      	ldr	r7, [r5, #0]
 8005e86:	6a21      	ldr	r1, [r4, #32]
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	d030      	beq.n	8005eee <__sflush_r+0x92>
 8005e8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	0759      	lsls	r1, r3, #29
 8005e92:	d505      	bpl.n	8005ea0 <__sflush_r+0x44>
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	1ad2      	subs	r2, r2, r3
 8005e98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e9a:	b10b      	cbz	r3, 8005ea0 <__sflush_r+0x44>
 8005e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ea4:	6a21      	ldr	r1, [r4, #32]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b0      	blx	r6
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	d106      	bne.n	8005ebe <__sflush_r+0x62>
 8005eb0:	6829      	ldr	r1, [r5, #0]
 8005eb2:	291d      	cmp	r1, #29
 8005eb4:	d82b      	bhi.n	8005f0e <__sflush_r+0xb2>
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f60 <__sflush_r+0x104>)
 8005eb8:	410a      	asrs	r2, r1
 8005eba:	07d6      	lsls	r6, r2, #31
 8005ebc:	d427      	bmi.n	8005f0e <__sflush_r+0xb2>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	6062      	str	r2, [r4, #4]
 8005ec2:	04d9      	lsls	r1, r3, #19
 8005ec4:	6922      	ldr	r2, [r4, #16]
 8005ec6:	6022      	str	r2, [r4, #0]
 8005ec8:	d504      	bpl.n	8005ed4 <__sflush_r+0x78>
 8005eca:	1c42      	adds	r2, r0, #1
 8005ecc:	d101      	bne.n	8005ed2 <__sflush_r+0x76>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	b903      	cbnz	r3, 8005ed4 <__sflush_r+0x78>
 8005ed2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ed6:	602f      	str	r7, [r5, #0]
 8005ed8:	b1b9      	cbz	r1, 8005f0a <__sflush_r+0xae>
 8005eda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d002      	beq.n	8005ee8 <__sflush_r+0x8c>
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7ff fb48 	bl	8005578 <_free_r>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eec:	e00d      	b.n	8005f0a <__sflush_r+0xae>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b0      	blx	r6
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	1c50      	adds	r0, r2, #1
 8005ef8:	d1c9      	bne.n	8005e8e <__sflush_r+0x32>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0c6      	beq.n	8005e8e <__sflush_r+0x32>
 8005f00:	2b1d      	cmp	r3, #29
 8005f02:	d001      	beq.n	8005f08 <__sflush_r+0xac>
 8005f04:	2b16      	cmp	r3, #22
 8005f06:	d11e      	bne.n	8005f46 <__sflush_r+0xea>
 8005f08:	602f      	str	r7, [r5, #0]
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e022      	b.n	8005f54 <__sflush_r+0xf8>
 8005f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	e01b      	b.n	8005f4e <__sflush_r+0xf2>
 8005f16:	690f      	ldr	r7, [r1, #16]
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	d0f6      	beq.n	8005f0a <__sflush_r+0xae>
 8005f1c:	0793      	lsls	r3, r2, #30
 8005f1e:	680e      	ldr	r6, [r1, #0]
 8005f20:	bf08      	it	eq
 8005f22:	694b      	ldreq	r3, [r1, #20]
 8005f24:	600f      	str	r7, [r1, #0]
 8005f26:	bf18      	it	ne
 8005f28:	2300      	movne	r3, #0
 8005f2a:	eba6 0807 	sub.w	r8, r6, r7
 8005f2e:	608b      	str	r3, [r1, #8]
 8005f30:	f1b8 0f00 	cmp.w	r8, #0
 8005f34:	dde9      	ble.n	8005f0a <__sflush_r+0xae>
 8005f36:	6a21      	ldr	r1, [r4, #32]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f3a:	4643      	mov	r3, r8
 8005f3c:	463a      	mov	r2, r7
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b0      	blx	r6
 8005f42:	2800      	cmp	r0, #0
 8005f44:	dc08      	bgt.n	8005f58 <__sflush_r+0xfc>
 8005f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f58:	4407      	add	r7, r0
 8005f5a:	eba8 0800 	sub.w	r8, r8, r0
 8005f5e:	e7e7      	b.n	8005f30 <__sflush_r+0xd4>
 8005f60:	dfbffffe 	.word	0xdfbffffe

08005f64 <_fflush_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	690b      	ldr	r3, [r1, #16]
 8005f68:	4605      	mov	r5, r0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	b913      	cbnz	r3, 8005f74 <_fflush_r+0x10>
 8005f6e:	2500      	movs	r5, #0
 8005f70:	4628      	mov	r0, r5
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	b118      	cbz	r0, 8005f7e <_fflush_r+0x1a>
 8005f76:	6a03      	ldr	r3, [r0, #32]
 8005f78:	b90b      	cbnz	r3, 8005f7e <_fflush_r+0x1a>
 8005f7a:	f7ff f89d 	bl	80050b8 <__sinit>
 8005f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f3      	beq.n	8005f6e <_fflush_r+0xa>
 8005f86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f88:	07d0      	lsls	r0, r2, #31
 8005f8a:	d404      	bmi.n	8005f96 <_fflush_r+0x32>
 8005f8c:	0599      	lsls	r1, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_fflush_r+0x32>
 8005f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f92:	f7ff fad8 	bl	8005546 <__retarget_lock_acquire_recursive>
 8005f96:	4628      	mov	r0, r5
 8005f98:	4621      	mov	r1, r4
 8005f9a:	f7ff ff5f 	bl	8005e5c <__sflush_r>
 8005f9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fa0:	07da      	lsls	r2, r3, #31
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	d4e4      	bmi.n	8005f70 <_fflush_r+0xc>
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	059b      	lsls	r3, r3, #22
 8005faa:	d4e1      	bmi.n	8005f70 <_fflush_r+0xc>
 8005fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fae:	f7ff facb 	bl	8005548 <__retarget_lock_release_recursive>
 8005fb2:	e7dd      	b.n	8005f70 <_fflush_r+0xc>

08005fb4 <__swhatbuf_r>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	b096      	sub	sp, #88	@ 0x58
 8005fc0:	4615      	mov	r5, r2
 8005fc2:	461e      	mov	r6, r3
 8005fc4:	da0d      	bge.n	8005fe2 <__swhatbuf_r+0x2e>
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2340      	movne	r3, #64	@ 0x40
 8005fd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fd8:	2000      	movs	r0, #0
 8005fda:	6031      	str	r1, [r6, #0]
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	b016      	add	sp, #88	@ 0x58
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	466a      	mov	r2, sp
 8005fe4:	f000 f862 	bl	80060ac <_fstat_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	dbec      	blt.n	8005fc6 <__swhatbuf_r+0x12>
 8005fec:	9901      	ldr	r1, [sp, #4]
 8005fee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ff2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ff6:	4259      	negs	r1, r3
 8005ff8:	4159      	adcs	r1, r3
 8005ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ffe:	e7eb      	b.n	8005fd8 <__swhatbuf_r+0x24>

08006000 <__smakebuf_r>:
 8006000:	898b      	ldrh	r3, [r1, #12]
 8006002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006004:	079d      	lsls	r5, r3, #30
 8006006:	4606      	mov	r6, r0
 8006008:	460c      	mov	r4, r1
 800600a:	d507      	bpl.n	800601c <__smakebuf_r+0x1c>
 800600c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	2301      	movs	r3, #1
 8006016:	6163      	str	r3, [r4, #20]
 8006018:	b003      	add	sp, #12
 800601a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601c:	ab01      	add	r3, sp, #4
 800601e:	466a      	mov	r2, sp
 8006020:	f7ff ffc8 	bl	8005fb4 <__swhatbuf_r>
 8006024:	9f00      	ldr	r7, [sp, #0]
 8006026:	4605      	mov	r5, r0
 8006028:	4639      	mov	r1, r7
 800602a:	4630      	mov	r0, r6
 800602c:	f7fe ff2c 	bl	8004e88 <_malloc_r>
 8006030:	b948      	cbnz	r0, 8006046 <__smakebuf_r+0x46>
 8006032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006036:	059a      	lsls	r2, r3, #22
 8006038:	d4ee      	bmi.n	8006018 <__smakebuf_r+0x18>
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	f043 0302 	orr.w	r3, r3, #2
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	e7e2      	b.n	800600c <__smakebuf_r+0xc>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	6020      	str	r0, [r4, #0]
 800604a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006056:	b15b      	cbz	r3, 8006070 <__smakebuf_r+0x70>
 8006058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800605c:	4630      	mov	r0, r6
 800605e:	f000 f837 	bl	80060d0 <_isatty_r>
 8006062:	b128      	cbz	r0, 8006070 <__smakebuf_r+0x70>
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f023 0303 	bic.w	r3, r3, #3
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	431d      	orrs	r5, r3
 8006074:	81a5      	strh	r5, [r4, #12]
 8006076:	e7cf      	b.n	8006018 <__smakebuf_r+0x18>

08006078 <memmove>:
 8006078:	4288      	cmp	r0, r1
 800607a:	b510      	push	{r4, lr}
 800607c:	eb01 0402 	add.w	r4, r1, r2
 8006080:	d902      	bls.n	8006088 <memmove+0x10>
 8006082:	4284      	cmp	r4, r0
 8006084:	4623      	mov	r3, r4
 8006086:	d807      	bhi.n	8006098 <memmove+0x20>
 8006088:	1e43      	subs	r3, r0, #1
 800608a:	42a1      	cmp	r1, r4
 800608c:	d008      	beq.n	80060a0 <memmove+0x28>
 800608e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006096:	e7f8      	b.n	800608a <memmove+0x12>
 8006098:	4402      	add	r2, r0
 800609a:	4601      	mov	r1, r0
 800609c:	428a      	cmp	r2, r1
 800609e:	d100      	bne.n	80060a2 <memmove+0x2a>
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060aa:	e7f7      	b.n	800609c <memmove+0x24>

080060ac <_fstat_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d07      	ldr	r5, [pc, #28]	@ (80060cc <_fstat_r+0x20>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	f7fb fb54 	bl	8001766 <_fstat>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	d102      	bne.n	80060c8 <_fstat_r+0x1c>
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	b103      	cbz	r3, 80060c8 <_fstat_r+0x1c>
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	bd38      	pop	{r3, r4, r5, pc}
 80060ca:	bf00      	nop
 80060cc:	200022f4 	.word	0x200022f4

080060d0 <_isatty_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d06      	ldr	r5, [pc, #24]	@ (80060ec <_isatty_r+0x1c>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fb fb53 	bl	8001786 <_isatty>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_isatty_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_isatty_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	200022f4 	.word	0x200022f4

080060f0 <_realloc_r>:
 80060f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f4:	4680      	mov	r8, r0
 80060f6:	4615      	mov	r5, r2
 80060f8:	460c      	mov	r4, r1
 80060fa:	b921      	cbnz	r1, 8006106 <_realloc_r+0x16>
 80060fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006100:	4611      	mov	r1, r2
 8006102:	f7fe bec1 	b.w	8004e88 <_malloc_r>
 8006106:	b92a      	cbnz	r2, 8006114 <_realloc_r+0x24>
 8006108:	f7ff fa36 	bl	8005578 <_free_r>
 800610c:	2400      	movs	r4, #0
 800610e:	4620      	mov	r0, r4
 8006110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006114:	f000 f81a 	bl	800614c <_malloc_usable_size_r>
 8006118:	4285      	cmp	r5, r0
 800611a:	4606      	mov	r6, r0
 800611c:	d802      	bhi.n	8006124 <_realloc_r+0x34>
 800611e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006122:	d8f4      	bhi.n	800610e <_realloc_r+0x1e>
 8006124:	4629      	mov	r1, r5
 8006126:	4640      	mov	r0, r8
 8006128:	f7fe feae 	bl	8004e88 <_malloc_r>
 800612c:	4607      	mov	r7, r0
 800612e:	2800      	cmp	r0, #0
 8006130:	d0ec      	beq.n	800610c <_realloc_r+0x1c>
 8006132:	42b5      	cmp	r5, r6
 8006134:	462a      	mov	r2, r5
 8006136:	4621      	mov	r1, r4
 8006138:	bf28      	it	cs
 800613a:	4632      	movcs	r2, r6
 800613c:	f7ff fa0d 	bl	800555a <memcpy>
 8006140:	4621      	mov	r1, r4
 8006142:	4640      	mov	r0, r8
 8006144:	f7ff fa18 	bl	8005578 <_free_r>
 8006148:	463c      	mov	r4, r7
 800614a:	e7e0      	b.n	800610e <_realloc_r+0x1e>

0800614c <_malloc_usable_size_r>:
 800614c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006150:	1f18      	subs	r0, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfbc      	itt	lt
 8006156:	580b      	ldrlt	r3, [r1, r0]
 8006158:	18c0      	addlt	r0, r0, r3
 800615a:	4770      	bx	lr

0800615c <_init>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr

08006168 <_fini>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr
